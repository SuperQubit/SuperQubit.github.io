define(['dart_sdk', 'packages/intl/intl', 'packages/collection/src/comparators', 'packages/vector_math/vector_math'], function(dart_sdk, packages__intl__intl, packages__collection__src__comparators, packages__vector_math__vector_math) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const intl = packages__intl__intl.intl;
  const equality = packages__collection__src__comparators.src__equality;
  const vector_math = packages__vector_math__vector_math.vector_math;
  const hour_tick_formatter = Object.create(dart.library);
  const time_tick_formatter_impl = Object.create(dart.library);
  const time_tick_formatter = Object.create(dart.library);
  const date_time_factory = Object.create(dart.library);
  const tick_formatter = Object.create(dart.library);
  const datum_details = Object.create(dart.library);
  const processed_series = Object.create(dart.library);
  const chart_canvas = Object.create(dart.library);
  const canvas_shapes = Object.create(dart.library);
  const color$ = Object.create(dart.library);
  const text_element = Object.create(dart.library);
  const text_style = Object.create(dart.library);
  const paint_style = Object.create(dart.library);
  const text_measurement = Object.create(dart.library);
  const graphics_factory = Object.create(dart.library);
  const line_style = Object.create(dart.library);
  const axis_spec = Object.create(dart.library);
  const tick_provider = Object.create(dart.library);
  const tick = Object.create(dart.library);
  const scale$ = Object.create(dart.library);
  const style_factory = Object.create(dart.library);
  const style = Object.create(dart.library);
  const palette = Object.create(dart.library);
  const material_style = Object.create(dart.library);
  const material_palette = Object.create(dart.library);
  const tick_draw_strategy = Object.create(dart.library);
  const collision_report = Object.create(dart.library);
  const axis$ = Object.create(dart.library);
  const ordinal_scale = Object.create(dart.library);
  const ordinal_scale_domain_info = Object.create(dart.library);
  const ordinal_extents = Object.create(dart.library);
  const simple_ordinal_scale = Object.create(dart.library);
  const ordinal_tick_provider = Object.create(dart.library);
  const chart_context = Object.create(dart.library);
  const a11y_node = Object.create(dart.library);
  const rtl_spec = Object.create(dart.library);
  const numeric_tick_provider = Object.create(dart.library);
  const numeric_scale = Object.create(dart.library);
  const numeric_extents = Object.create(dart.library);
  const unit_converter = Object.create(dart.library);
  const identity_converter = Object.create(dart.library);
  const linear_scale = Object.create(dart.library);
  const linear_scale_viewport = Object.create(dart.library);
  const linear_scale_domain_info = Object.create(dart.library);
  const linear_scale_function = Object.create(dart.library);
  const small_tick_draw_strategy = Object.create(dart.library);
  const base_tick_draw_strategy = Object.create(dart.library);
  const layout_view = Object.create(dart.library);
  const axis_tick = Object.create(dart.library);
  const series$ = Object.create(dart.library);
  const typed_registry = Object.create(dart.library);
  const symbol_renderer = Object.create(dart.library);
  const percent_axis_spec = Object.create(dart.library);
  const numeric_axis_spec = Object.create(dart.library);
  const tick_spec = Object.create(dart.library);
  const static_tick_provider = Object.create(dart.library);
  const date_time_scale = Object.create(dart.library);
  const date_time_extents = Object.create(dart.library);
  const end_points_tick_provider = Object.create(dart.library);
  const simple_time_tick_formatter = Object.create(dart.library);
  const cartesian_renderer = Object.create(dart.library);
  const cartesian_chart = Object.create(dart.library);
  const none_draw_strategy = Object.create(dart.library);
  const gridline_draw_strategy = Object.create(dart.library);
  const layout_config = Object.create(dart.library);
  const series_renderer = Object.create(dart.library);
  const series_datum = Object.create(dart.library);
  const base_chart = Object.create(dart.library);
  const selection_model = Object.create(dart.library);
  const chart_behavior = Object.create(dart.library);
  const layout_manager_impl = Object.create(dart.library);
  const layout_margin_strategy = Object.create(dart.library);
  const layout_manager = Object.create(dart.library);
  const proxy_gesture_listener = Object.create(dart.library);
  const gesture_listener = Object.create(dart.library);
  const bar_renderer = Object.create(dart.library);
  const base_bar_renderer_element = Object.create(dart.library);
  const base_bar_renderer = Object.create(dart.library);
  const base_bar_renderer_config = Object.create(dart.library);
  const series_renderer_config = Object.create(dart.library);
  const math$ = Object.create(dart.library);
  const bar_renderer_decorator = Object.create(dart.library);
  const bar_renderer_config = Object.create(dart.library);
  const lock_selection = Object.create(dart.library);
  const selection_trigger = Object.create(dart.library);
  const time_series_chart = Object.create(dart.library);
  const line_renderer = Object.create(dart.library);
  const line_renderer_config = Object.create(dart.library);
  const point_renderer_config = Object.create(dart.library);
  const point_renderer_decorator = Object.create(dart.library);
  const point_renderer = Object.create(dart.library);
  const comparison_points_decorator = Object.create(dart.library);
  const date_time_axis = Object.create(dart.library);
  const date_time_tick_formatter = Object.create(dart.library);
  const auto_adjusting_date_time_tick_provider = Object.create(dart.library);
  const year_time_stepper = Object.create(dart.library);
  const base_time_stepper = Object.create(dart.library);
  const time_stepper = Object.create(dart.library);
  const time_range_tick_provider_impl = Object.create(dart.library);
  const time_range_tick_provider = Object.create(dart.library);
  const month_time_stepper = Object.create(dart.library);
  const minute_time_stepper = Object.create(dart.library);
  const hour_time_stepper = Object.create(dart.library);
  const day_time_stepper = Object.create(dart.library);
  const date_time_axis_spec = Object.create(dart.library);
  const arc_renderer = Object.create(dart.library);
  const arc_renderer_decorator = Object.create(dart.library);
  const arc_renderer_config = Object.create(dart.library);
  const series_legend = Object.create(dart.library);
  const per_series_legend_entry_generator = Object.create(dart.library);
  const legend_entry_generator = Object.create(dart.library);
  const legend_entry = Object.create(dart.library);
  const legend = Object.create(dart.library);
  const keyboard_domain_navigator = Object.create(dart.library);
  const treemap_renderer_element = Object.create(dart.library);
  const squarified_treemap_renderer = Object.create(dart.library);
  const treemap_renderer_config = Object.create(dart.library);
  const treemap_label_decorator = Object.create(dart.library);
  const treemap_renderer_decorator = Object.create(dart.library);
  const base_treemap_renderer = Object.create(dart.library);
  const tree = Object.create(dart.library);
  const bucketing_numeric_tick_provider = Object.create(dart.library);
  const a11y_explore_behavior = Object.create(dart.library);
  const line_point_highlighter = Object.create(dart.library);
  const select_nearest = Object.create(dart.library);
  const treemap_chart = Object.create(dart.library);
  const bar_lane_renderer_config = Object.create(dart.library);
  const bar_lane_renderer = Object.create(dart.library);
  const bar_label_decorator = Object.create(dart.library);
  const arc_label_decorator = Object.create(dart.library);
  const datum_legend = Object.create(dart.library);
  const per_datum_legend_entry_generator = Object.create(dart.library);
  const bucketing_axis_spec = Object.create(dart.library);
  const bucketing_numeric_axis = Object.create(dart.library);
  const performance = Object.create(dart.library);
  const sliding_viewport = Object.create(dart.library);
  const bar_target_line_renderer_config = Object.create(dart.library);
  const bar_target_line_renderer = Object.create(dart.library);
  const initial_selection = Object.create(dart.library);
  const bar_chart = Object.create(dart.library);
  const slider = Object.create(dart.library);
  const pan_behavior = Object.create(dart.library);
  const panning_tick_provider = Object.create(dart.library);
  const scatter_plot_chart = Object.create(dart.library);
  const initial_hint_behavior = Object.create(dart.library);
  const line_chart = Object.create(dart.library);
  const end_points_time_axis_spec = Object.create(dart.library);
  const ordinal_axis_spec = Object.create(dart.library);
  const range_annotation = Object.create(dart.library);
  const pan_and_zoom_behavior = Object.create(dart.library);
  const common = Object.create(dart.library);
  const symbol_annotation_renderer_config = Object.create(dart.library);
  const symbol_annotation_renderer = Object.create(dart.library);
  const pie_chart = Object.create(dart.library);
  const domain_outliner = Object.create(dart.library);
  const domain_highlighter = Object.create(dart.library);
  const chart_title = Object.create(dart.library);
  const percent_injector = Object.create(dart.library);
  const domain_a11y_explore_behavior = Object.create(dart.library);
  const bar_error_decorator = Object.create(dart.library);
  const $_get = dartx._get;
  const $_set = dartx._set;
  const $map = dartx.map;
  const $toList = dartx.toList;
  const $hashCode = dartx.hashCode;
  const $toString = dartx.toString;
  const $length = dartx.length;
  const $_equals = dartx._equals;
  const $round = dartx.round;
  const $first = dartx.first;
  const $left = dartx.left;
  const $top = dartx.top;
  const $right = dartx.right;
  const $bottom = dartx.bottom;
  const $substring = dartx.substring;
  const $toRadixString = dartx.toRadixString;
  const $add = dartx.add;
  const $abs = dartx.abs;
  const $take = dartx.take;
  const $clear = dartx.clear;
  const $firstWhere = dartx.firstWhere;
  const $remove = dartx.remove;
  const $toDouble = dartx.toDouble;
  const $forEach = dartx.forEach;
  const $sort = dartx.sort;
  const $removeWhere = dartx.removeWhere;
  const $addAll = dartx.addAll;
  const $containsKey = dartx.containsKey;
  const $isEmpty = dartx.isEmpty;
  const $last = dartx.last;
  const $indexOf = dartx.indexOf;
  const $toInt = dartx.toInt;
  const $truncate = dartx.truncate;
  const $ceil = dartx.ceil;
  const $isNotEmpty = dartx.isNotEmpty;
  const $floor = dartx.floor;
  const $floorToDouble = dartx.floorToDouble;
  const $roundToDouble = dartx.roundToDouble;
  const $isFinite = dartx.isFinite;
  const $fold = dartx.fold;
  const $bottomLeft = dartx.bottomLeft;
  const $bottomRight = dartx.bottomRight;
  const $topLeft = dartx.topLeft;
  const $topRight = dartx.topRight;
  const $compareTo = dartx.compareTo;
  const $width = dartx.width;
  const $height = dartx.height;
  const $runtimeType = dartx.runtimeType;
  const $modulo = dartx['%'];
  const $keys = dartx.keys;
  const $containsPoint = dartx.containsPoint;
  const $putIfAbsent = dartx.putIfAbsent;
  const $any = dartx.any;
  const $contains = dartx.contains;
  const $values = dartx.values;
  const $where = dartx.where;
  const $skip = dartx.skip;
  const $boundingBox = dartx.boundingBox;
  const $getRange = dartx.getRange;
  const $reduce = dartx.reduce;
  const $retainWhere = dartx.retainWhere;
  const $reversed = dartx.reversed;
  const $iterator = dartx.iterator;
  const $entries = dartx.entries;
  const $addEntries = dartx.addEntries;
  const $sublist = dartx.sublist;
  const $expand = dartx.expand;
  const $removeRange = dartx.removeRange;
  const $intersects = dartx.intersects;
  const $isNaN = dartx.isNaN;
  const $indexWhere = dartx.indexWhere;
  const $removeAt = dartx.removeAt;
  const $removeLast = dartx.removeLast;
  const $split = dartx.split;
  let numToString = () => (numToString = dart.constFn(dart.fnType(core.String, [core.num])))();
  let intToString = () => (intToString = dart.constFn(dart.fnType(core.String, [core.int])))();
  let RectangleOfint = () => (RectangleOfint = dart.constFn(math.Rectangle$(core.int)))();
  let JSArrayOfColor = () => (JSArrayOfColor = dart.constFn(_interceptors.JSArray$(color$.Color)))();
  let VoidToPalette = () => (VoidToPalette = dart.constFn(dart.fnType(palette.Palette, [])))();
  let JSArrayOfVoidToPalette = () => (JSArrayOfVoidToPalette = dart.constFn(_interceptors.JSArray$(VoidToPalette())))();
  let FnToPalette = () => (FnToPalette = dart.constFn(dart.fnType(palette.Palette, [VoidToPalette()])))();
  let JSArrayOfTick = () => (JSArrayOfTick = dart.constFn(_interceptors.JSArray$(tick.Tick)))();
  let dynamicTobool = () => (dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))();
  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  let dynamicToNull = () => (dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
  let TickProviderOfString = () => (TickProviderOfString = dart.constFn(tick_provider.TickProvider$(core.String)))();
  let TickFormatterOfString = () => (TickFormatterOfString = dart.constFn(tick_formatter.TickFormatter$(core.String)))();
  let AttributeKeyOfString = () => (AttributeKeyOfString = dart.constFn(series$.AttributeKey$(core.String)))();
  let AttributeKeyOfAxis = () => (AttributeKeyOfAxis = dart.constFn(series$.AttributeKey$(axis$.Axis)))();
  let IdentityMapOfString$int = () => (IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let MapOfString$String = () => (MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))();
  let TickHintOfString = () => (TickHintOfString = dart.constFn(tick_provider.TickHint$(core.String)))();
  let IdentityConverterOfnum = () => (IdentityConverterOfnum = dart.constFn(identity_converter.IdentityConverter$(core.num)))();
  let ListOfdouble = () => (ListOfdouble = dart.constFn(core.List$(core.double)))();
  let TickFormatterOfnum = () => (TickFormatterOfnum = dart.constFn(tick_formatter.TickFormatter$(core.num)))();
  let MapOfnum$String = () => (MapOfnum$String = dart.constFn(core.Map$(core.num, core.String)))();
  let TickHintOfnum = () => (TickHintOfnum = dart.constFn(tick_provider.TickHint$(core.num)))();
  let TickOfnum = () => (TickOfnum = dart.constFn(tick.Tick$(core.num)))();
  let ListOfTickOfnum = () => (ListOfTickOfnum = dart.constFn(core.List$(TickOfnum())))();
  let PointOfnum = () => (PointOfnum = dart.constFn(math.Point$(core.num)))();
  let JSArrayOfPointOfnum = () => (JSArrayOfPointOfnum = dart.constFn(_interceptors.JSArray$(PointOfnum())))();
  let intTonum = () => (intTonum = dart.constFn(dart.fnType(core.num, [core.int])))();
  let intToColor = () => (intToColor = dart.constFn(dart.fnType(color$.Color, [core.int])))();
  let ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  let intToListOfint = () => (intToListOfint = dart.constFn(dart.fnType(ListOfint(), [core.int])))();
  let intToFillPatternType = () => (intToFillPatternType = dart.constFn(dart.fnType(chart_canvas.FillPatternType, [core.int])))();
  let intToTextStyleSpec = () => (intToTextStyleSpec = dart.constFn(dart.fnType(axis_spec.TextStyleSpec, [core.int])))();
  let intToFn = () => (intToFn = dart.constFn(dart.fnType(numToString(), [core.int])))();
  let LinkedMapOfTypedKey$Object = () => (LinkedMapOfTypedKey$Object = dart.constFn(_js_helper.LinkedMap$(typed_registry.TypedKey, core.Object)))();
  let PointOfdouble = () => (PointOfdouble = dart.constFn(math.Point$(core.double)))();
  let AxisOfnum = () => (AxisOfnum = dart.constFn(axis$.Axis$(core.num)))();
  let EndPointsTickProviderOfnum = () => (EndPointsTickProviderOfnum = dart.constFn(end_points_tick_provider.EndPointsTickProvider$(core.num)))();
  let StaticTickProviderOfnum = () => (StaticTickProviderOfnum = dart.constFn(static_tick_provider.StaticTickProvider$(core.num)))();
  let MutableSeriesToNull = () => (MutableSeriesToNull = dart.constFn(dart.fnType(core.Null, [processed_series.MutableSeries])))();
  let ListOfColor = () => (ListOfColor = dart.constFn(core.List$(color$.Color)))();
  let IdentityMapOfString$ListOfColor = () => (IdentityMapOfString$ListOfColor = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfColor())))();
  let StringToNull = () => (StringToNull = dart.constFn(dart.fnType(core.Null, [core.String])))();
  let SmallTickRendererSpecOfnum = () => (SmallTickRendererSpecOfnum = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.num)))();
  let IdentityMapOfString$NumericAxis = () => (IdentityMapOfString$NumericAxis = dart.constFn(_js_helper.IdentityMap$(core.String, axis$.NumericAxis)))();
  let LinkedHashMapOfString$NumericAxis = () => (LinkedHashMapOfString$NumericAxis = dart.constFn(collection.LinkedHashMap$(core.String, axis$.NumericAxis)))();
  let StringAndNumericAxisToNull = () => (StringAndNumericAxisToNull = dart.constFn(dart.fnType(core.Null, [core.String, axis$.NumericAxis])))();
  let GridlineRendererSpecOfnum = () => (GridlineRendererSpecOfnum = dart.constFn(gridline_draw_strategy.GridlineRendererSpec$(core.num)))();
  let NoneDrawStrategyOfnum = () => (NoneDrawStrategyOfnum = dart.constFn(none_draw_strategy.NoneDrawStrategy$(core.num)))();
  let StringAndAxisSpecToNull = () => (StringAndAxisSpecToNull = dart.constFn(dart.fnType(core.Null, [core.String, axis_spec.AxisSpec])))();
  let intToint = () => (intToint = dart.constFn(dart.fnType(core.int, [core.int])))();
  let _IdentityHashSetOfString = () => (_IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))();
  let LayoutViewToGraphicsFactory = () => (LayoutViewToGraphicsFactory = dart.constFn(dart.fnType(graphics_factory.GraphicsFactory, [layout_view.LayoutView])))();
  let StringTobool = () => (StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))();
  let LayoutViewToNull = () => (LayoutViewToNull = dart.constFn(dart.fnType(core.Null, [layout_view.LayoutView])))();
  let MutableSelectionModelTovoid = () => (MutableSelectionModelTovoid = dart.constFn(dart.fnType(dart.void, [selection_model.MutableSelectionModel])))();
  let SmallTickRendererSpecOfString = () => (SmallTickRendererSpecOfString = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.String)))();
  let ListOfTick = () => (ListOfTick = dart.constFn(core.List$(tick.Tick)))();
  let TickToTextStyle = () => (TickToTextStyle = dart.constFn(dart.fnType(text_style.TextStyle, [tick.Tick])))();
  let AttributeKeyOfSeriesRenderer = () => (AttributeKeyOfSeriesRenderer = dart.constFn(series$.AttributeKey$(series_renderer.SeriesRenderer)))();
  let JSArrayOfLayoutView = () => (JSArrayOfLayoutView = dart.constFn(_interceptors.JSArray$(layout_view.LayoutView)))();
  let ListOfLayoutView = () => (ListOfLayoutView = dart.constFn(core.List$(layout_view.LayoutView)))();
  let LayoutViewAndLayoutViewToint = () => (LayoutViewAndLayoutViewToint = dart.constFn(dart.fnType(core.int, [layout_view.LayoutView, layout_view.LayoutView])))();
  let LayoutViewTobool = () => (LayoutViewTobool = dart.constFn(dart.fnType(core.bool, [layout_view.LayoutView])))();
  let LayoutViewTovoid = () => (LayoutViewTovoid = dart.constFn(dart.fnType(dart.void, [layout_view.LayoutView])))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let JSArrayOfGestureListener = () => (JSArrayOfGestureListener = dart.constFn(_interceptors.JSArray$(gesture_listener.GestureListener)))();
  let GestureListenerTobool = () => (GestureListenerTobool = dart.constFn(dart.fnType(core.bool, [gesture_listener.GestureListener])))();
  let GestureListenerToNull = () => (GestureListenerToNull = dart.constFn(dart.fnType(core.Null, [gesture_listener.GestureListener])))();
  let ListOfGestureListener = () => (ListOfGestureListener = dart.constFn(core.List$(gesture_listener.GestureListener)))();
  let PointOfdoubleTobool = () => (PointOfdoubleTobool = dart.constFn(dart.fnType(core.bool, [PointOfdouble()])))();
  let ImmutableAxisOfnum = () => (ImmutableAxisOfnum = dart.constFn(axis$.ImmutableAxis$(core.num)))();
  let JSArrayOfCanvasRect = () => (JSArrayOfCanvasRect = dart.constFn(_interceptors.JSArray$(canvas_shapes.CanvasRect)))();
  let SetOfString = () => (SetOfString = dart.constFn(core.Set$(core.String)))();
  let JSArrayOfBaseBarRendererElement = () => (JSArrayOfBaseBarRendererElement = dart.constFn(_interceptors.JSArray$(base_bar_renderer_element.BaseBarRendererElement)))();
  let VoidToMap = () => (VoidToMap = dart.constFn(dart.fnType(core.Map, [])))();
  let ListOfBaseBarRendererElement = () => (ListOfBaseBarRendererElement = dart.constFn(core.List$(base_bar_renderer_element.BaseBarRendererElement)))();
  let doubleAnddoubleTodouble = () => (doubleAnddoubleTodouble = dart.constFn(dart.fnType(core.double, [core.double, core.double])))();
  let JSArrayOfdouble = () => (JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))();
  let VoidToSetOfString = () => (VoidToSetOfString = dart.constFn(dart.fnType(SetOfString(), [])))();
  let SetOfStringAndSetOfStringToSetOfString = () => (SetOfStringAndSetOfStringToSetOfString = dart.constFn(dart.fnType(SetOfString(), [SetOfString(), SetOfString()])))();
  let IdentityMapOfString$ListOfint = () => (IdentityMapOfString$ListOfint = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfint())))();
  let VoidToListOfint = () => (VoidToListOfint = dart.constFn(dart.fnType(ListOfint(), [])))();
  let StringAndListOfintTovoid = () => (StringAndListOfintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, ListOfint()])))();
  let AttributeKeyOfint = () => (AttributeKeyOfint = dart.constFn(series$.AttributeKey$(core.int)))();
  let AttributeKeyOfdouble = () => (AttributeKeyOfdouble = dart.constFn(series$.AttributeKey$(core.double)))();
  let AttributeKeyOfListOfBaseBarRendererElement = () => (AttributeKeyOfListOfBaseBarRendererElement = dart.constFn(series$.AttributeKey$(ListOfBaseBarRendererElement())))();
  let SmallTickRendererSpecOfDateTime = () => (SmallTickRendererSpecOfDateTime = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(core.DateTime)))();
  let LineRendererOfDateTime = () => (LineRendererOfDateTime = dart.constFn(line_renderer.LineRenderer$(core.DateTime)))();
  let AxisSpecOfDateTime = () => (AxisSpecOfDateTime = dart.constFn(axis_spec.AxisSpec$(core.DateTime)))();
  let ListOf_LineRendererElement = () => (ListOf_LineRendererElement = dart.constFn(core.List$(line_renderer._LineRendererElement)))();
  let _AnimatedElementsTobool = () => (_AnimatedElementsTobool = dart.constFn(dart.fnType(core.bool, [line_renderer._AnimatedElements])))();
  let _LineRendererElementToNull = () => (_LineRendererElementToNull = dart.constFn(dart.fnType(core.Null, [line_renderer._LineRendererElement])))();
  let _RangeOfnum = () => (_RangeOfnum = dart.constFn(line_renderer._Range$(core.num)))();
  let _AreaRendererElementToNull = () => (_AreaRendererElementToNull = dart.constFn(dart.fnType(core.Null, [line_renderer._AreaRendererElement])))();
  let RectangleOfnum = () => (RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))();
  let PointOfnumToNull = () => (PointOfnumToNull = dart.constFn(dart.fnType(core.Null, [PointOfnum()])))();
  let AttributeKeyOfListOf_LineRendererElement = () => (AttributeKeyOfListOf_LineRendererElement = dart.constFn(series$.AttributeKey$(ListOf_LineRendererElement())))();
  let JSArrayOfPointRendererDecorator = () => (JSArrayOfPointRendererDecorator = dart.constFn(_interceptors.JSArray$(point_renderer_decorator.PointRendererDecorator)))();
  let intTodouble = () => (intTodouble = dart.constFn(dart.fnType(core.double, [core.int])))();
  let dynamicAndintTodynamic = () => (dynamicAndintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, core.int])))();
  let ListOfPointRendererElement = () => (ListOfPointRendererElement = dart.constFn(core.List$(point_renderer.PointRendererElement)))();
  let AnimatedPointTobool = () => (AnimatedPointTobool = dart.constFn(dart.fnType(core.bool, [point_renderer.AnimatedPoint])))();
  let dynamicToString = () => (dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))();
  let PointRendererDecoratorTobool = () => (PointRendererDecoratorTobool = dart.constFn(dart.fnType(core.bool, [point_renderer_decorator.PointRendererDecorator])))();
  let PointRendererDecoratorToNull = () => (PointRendererDecoratorToNull = dart.constFn(dart.fnType(core.Null, [point_renderer_decorator.PointRendererDecorator])))();
  let RectangleOfdouble = () => (RectangleOfdouble = dart.constFn(math.Rectangle$(core.double)))();
  let PointRendererElementToNull = () => (PointRendererElementToNull = dart.constFn(dart.fnType(core.Null, [point_renderer.PointRendererElement])))();
  let AttributeKeyOfListOfPointRendererElement = () => (AttributeKeyOfListOfPointRendererElement = dart.constFn(series$.AttributeKey$(ListOfPointRendererElement())))();
  let AttributeKeyOfintToString = () => (AttributeKeyOfintToString = dart.constFn(series$.AttributeKey$(intToString())))();
  let AttributeKeyOfintTodouble = () => (AttributeKeyOfintTodouble = dart.constFn(series$.AttributeKey$(intTodouble())))();
  let JSArrayOfPointOfdouble = () => (JSArrayOfPointOfdouble = dart.constFn(_interceptors.JSArray$(PointOfdouble())))();
  let TickProviderOfDateTime = () => (TickProviderOfDateTime = dart.constFn(tick_provider.TickProvider$(core.DateTime)))();
  let TickFormatterOfDateTime = () => (TickFormatterOfDateTime = dart.constFn(tick_formatter.TickFormatter$(core.DateTime)))();
  let IdentityMapOfint$TimeTickFormatter = () => (IdentityMapOfint$TimeTickFormatter = dart.constFn(_js_helper.IdentityMap$(core.int, time_tick_formatter.TimeTickFormatter)))();
  let ListOfDateTime = () => (ListOfDateTime = dart.constFn(core.List$(core.DateTime)))();
  let MapOfDateTime$String = () => (MapOfDateTime$String = dart.constFn(core.Map$(core.DateTime, core.String)))();
  let JSArrayOfTimeRangeTickProvider = () => (JSArrayOfTimeRangeTickProvider = dart.constFn(_interceptors.JSArray$(time_range_tick_provider.TimeRangeTickProvider)))();
  let TickHintOfDateTime = () => (TickHintOfDateTime = dart.constFn(tick_provider.TickHint$(core.DateTime)))();
  let TickOfDateTime = () => (TickOfDateTime = dart.constFn(tick.Tick$(core.DateTime)))();
  let JSArrayOfTickOfDateTime = () => (JSArrayOfTickOfDateTime = dart.constFn(_interceptors.JSArray$(TickOfDateTime())))();
  let intTobool = () => (intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))();
  let JSArrayOfDateTime = () => (JSArrayOfDateTime = dart.constFn(_interceptors.JSArray$(core.DateTime)))();
  let AxisOfDateTime = () => (AxisOfDateTime = dart.constFn(axis$.Axis$(core.DateTime)))();
  let EndPointsTickProviderOfDateTime = () => (EndPointsTickProviderOfDateTime = dart.constFn(end_points_tick_provider.EndPointsTickProvider$(core.DateTime)))();
  let StaticTickProviderOfDateTime = () => (StaticTickProviderOfDateTime = dart.constFn(static_tick_provider.StaticTickProvider$(core.DateTime)))();
  let JSArrayOfArcRendererDecorator = () => (JSArrayOfArcRendererDecorator = dart.constFn(_interceptors.JSArray$(arc_renderer_decorator.ArcRendererDecorator)))();
  let ListOfArcRendererElement = () => (ListOfArcRendererElement = dart.constFn(core.List$(arc_renderer.ArcRendererElement)))();
  let _AnimatedArcTobool = () => (_AnimatedArcTobool = dart.constFn(dart.fnType(core.bool, [arc_renderer._AnimatedArc])))();
  let JSArrayOfCanvasPieSlice = () => (JSArrayOfCanvasPieSlice = dart.constFn(_interceptors.JSArray$(canvas_shapes.CanvasPieSlice)))();
  let ArcRendererElementToNull = () => (ArcRendererElementToNull = dart.constFn(dart.fnType(core.Null, [arc_renderer.ArcRendererElement])))();
  let ArcRendererDecoratorTobool = () => (ArcRendererDecoratorTobool = dart.constFn(dart.fnType(core.bool, [arc_renderer_decorator.ArcRendererDecorator])))();
  let ArcRendererDecoratorToNull = () => (ArcRendererDecoratorToNull = dart.constFn(dart.fnType(core.Null, [arc_renderer_decorator.ArcRendererDecorator])))();
  let IterableOfMutableSeries = () => (IterableOfMutableSeries = dart.constFn(core.Iterable$(processed_series.MutableSeries)))();
  let AttributeKeyOfListOfArcRendererElement = () => (AttributeKeyOfListOfArcRendererElement = dart.constFn(series$.AttributeKey$(ListOfArcRendererElement())))();
  let ListOfMutableSeries = () => (ListOfMutableSeries = dart.constFn(core.List$(processed_series.MutableSeries)))();
  let ListOfMutableSeriesTodynamic = () => (ListOfMutableSeriesTodynamic = dart.constFn(dart.fnType(dart.dynamic, [ListOfMutableSeries()])))();
  let IdentityMapOfString$num = () => (IdentityMapOfString$num = dart.constFn(_js_helper.IdentityMap$(core.String, core.num)))();
  let IdentityMapOfString$double = () => (IdentityMapOfString$double = dart.constFn(_js_helper.IdentityMap$(core.String, core.double)))();
  let IdentityMapOfString$String = () => (IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))();
  let DatumDetailsAndDatumDetailsToint = () => (DatumDetailsAndDatumDetailsToint = dart.constFn(dart.fnType(core.int, [datum_details.DatumDetails, datum_details.DatumDetails])))();
  let IdentityMapOfString$Object = () => (IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))();
  let ListQueueOfTreeNode = () => (ListQueueOfTreeNode = dart.constFn(collection.ListQueue$(tree.TreeNode)))();
  let IterableOfTreeMapRendererElement = () => (IterableOfTreeMapRendererElement = dart.constFn(core.Iterable$(treemap_renderer_element.TreeMapRendererElement)))();
  let MutableRectangleOfnum = () => (MutableRectangleOfnum = dart.constFn(math.MutableRectangle$(core.num)))();
  let JSArrayOfTreeNode = () => (JSArrayOfTreeNode = dart.constFn(_interceptors.JSArray$(tree.TreeNode)))();
  let AttributeKeyOfIterableOfTreeMapRendererElement = () => (AttributeKeyOfIterableOfTreeMapRendererElement = dart.constFn(series$.AttributeKey$(IterableOfTreeMapRendererElement())))();
  let SimpleTickFormatterBaseOfnum = () => (SimpleTickFormatterBaseOfnum = dart.constFn(tick_formatter.SimpleTickFormatterBase$(core.num)))();
  let JSArrayOfTickOfnum = () => (JSArrayOfTickOfnum = dart.constFn(_interceptors.JSArray$(TickOfnum())))();
  let TickOfnumTobool = () => (TickOfnumTobool = dart.constFn(dart.fnType(core.bool, [TickOfnum()])))();
  let TickOfnumAndTickOfnumToint = () => (TickOfnumAndTickOfnumToint = dart.constFn(dart.fnType(core.int, [TickOfnum(), TickOfnum()])))();
  let IdentityMapOfint$int = () => (IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))();
  let JSArrayOfnum = () => (JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))();
  let BarLaneRendererOfString = () => (BarLaneRendererOfString = dart.constFn(bar_lane_renderer.BarLaneRenderer$(core.String)))();
  let AnimatedBarTobool = () => (AnimatedBarTobool = dart.constFn(dart.fnType(core.bool, [bar_renderer.AnimatedBar])))();
  let AttributeKeyOfSet = () => (AttributeKeyOfSet = dart.constFn(series$.AttributeKey$(core.Set)))();
  let StringToTextElement = () => (StringToTextElement = dart.constFn(dart.fnType(text_element.TextElement, [core.String])))();
  let TextElementToTextElement = () => (TextElementToTextElement = dart.constFn(dart.fnType(text_element.TextElement, [text_element.TextElement])))();
  let TextElementTodouble = () => (TextElementTodouble = dart.constFn(dart.fnType(core.double, [text_element.TextElement])))();
  let dynamicAnddoubleTodynamic = () => (dynamicAnddoubleTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, core.double])))();
  let IterableOf_BarTargetLineRendererElement = () => (IterableOf_BarTargetLineRendererElement = dart.constFn(core.Iterable$(bar_target_line_renderer._BarTargetLineRendererElement)))();
  let _BarTargetLineRendererElementToNull = () => (_BarTargetLineRendererElementToNull = dart.constFn(dart.fnType(core.Null, [bar_target_line_renderer._BarTargetLineRendererElement])))();
  let PointOfint = () => (PointOfint = dart.constFn(math.Point$(core.int)))();
  let JSArrayOfPointOfint = () => (JSArrayOfPointOfint = dart.constFn(_interceptors.JSArray$(PointOfint())))();
  let PointOfintToNull = () => (PointOfintToNull = dart.constFn(dart.fnType(core.Null, [PointOfint()])))();
  let ListOfPointOfint = () => (ListOfPointOfint = dart.constFn(core.List$(PointOfint())))();
  let BarRendererOfString = () => (BarRendererOfString = dart.constFn(bar_renderer.BarRenderer$(core.String)))();
  let PointRendererOfnum = () => (PointRendererOfnum = dart.constFn(point_renderer.PointRenderer$(core.num)))();
  let LineRendererOfnum = () => (LineRendererOfnum = dart.constFn(line_renderer.LineRenderer$(core.num)))();
  let AxisOfString = () => (AxisOfString = dart.constFn(axis$.Axis$(core.String)))();
  let StaticTickProviderOfString = () => (StaticTickProviderOfString = dart.constFn(static_tick_provider.StaticTickProvider$(core.String)))();
  let AnnotationSegmentToNull = () => (AnnotationSegmentToNull = dart.constFn(dart.fnType(core.Null, [range_annotation.AnnotationSegment])))();
  let LinkedMapOf_AnnotationLabelType$String = () => (LinkedMapOf_AnnotationLabelType$String = dart.constFn(_js_helper.LinkedMap$(range_annotation._AnnotationLabelType, core.String)))();
  let _AnnotationLabelTypeAndStringToNull = () => (_AnnotationLabelTypeAndStringToNull = dart.constFn(dart.fnType(core.Null, [range_annotation._AnnotationLabelType, core.String])))();
  let AttributeKeyOfbool = () => (AttributeKeyOfbool = dart.constFn(series$.AttributeKey$(core.bool)))();
  let ListOfSeriesDatumOfDToString = () => (ListOfSeriesDatumOfDToString = dart.constFn(dart.gFnType(D => [core.String, [core.List$(series_datum.SeriesDatum$(D))]])))();
  let JSArrayOf_DomainA11yNode = () => (JSArrayOf_DomainA11yNode = dart.constFn(_interceptors.JSArray$(domain_a11y_explore_behavior._DomainA11yNode)))();
  let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  const CT = Object.create(null);
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.year",
        index: 0
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.month",
        index: 1
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.date",
        index: 2
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.hourOfDay",
        index: 3
      });
    },
    get C4() {
      return C4 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.minute",
        index: 4
      });
    },
    get C5() {
      return C5 = dart.const({
        __proto__: time_tick_formatter_impl.CalendarField.prototype,
        [_name$]: "CalendarField.second",
        index: 5
      });
    },
    get C6() {
      return C6 = dart.constList([C0 || CT.C0, C1 || CT.C1, C2 || CT.C2, C3 || CT.C3, C4 || CT.C4, C5 || CT.C5], time_tick_formatter_impl.CalendarField);
    },
    get C7() {
      return C7 = dart.const({
        __proto__: chart_canvas.FillPatternType.prototype,
        [_name$0]: "FillPatternType.forwardHatch",
        index: 0
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: chart_canvas.FillPatternType.prototype,
        [_name$0]: "FillPatternType.solid",
        index: 1
      });
    },
    get C9() {
      return C9 = dart.constList([C7 || CT.C7, C8 || CT.C8], chart_canvas.FillPatternType);
    },
    get C10() {
      return C10 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 0,
        [g$]: 0,
        [r$]: 0
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 255,
        [g$]: 255,
        [r$]: 255
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 0,
        [b$]: 0,
        [g$]: 0,
        [r$]: 0
      });
    },
    get C13() {
      return C13 = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name$1]: "TextDirection.ltr",
        index: 0
      });
    },
    get C14() {
      return C14 = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name$1]: "TextDirection.rtl",
        index: 1
      });
    },
    get C15() {
      return C15 = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name$1]: "TextDirection.center",
        index: 2
      });
    },
    get C16() {
      return C16 = dart.constList([C13 || CT.C13, C14 || CT.C14, C15 || CT.C15], text_element.TextDirection);
    },
    get C17() {
      return C17 = dart.const({
        __proto__: text_element.MaxWidthStrategy.prototype,
        [_name$1]: "MaxWidthStrategy.truncate",
        index: 0
      });
    },
    get C18() {
      return C18 = dart.const({
        __proto__: text_element.MaxWidthStrategy.prototype,
        [_name$1]: "MaxWidthStrategy.ellipsize",
        index: 1
      });
    },
    get C19() {
      return C19 = dart.constList([C17 || CT.C17, C18 || CT.C18], text_element.MaxWidthStrategy);
    },
    get C20() {
      return C20 = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.before",
        index: 0
      });
    },
    get C21() {
      return C21 = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.centered",
        index: 1
      });
    },
    get C22() {
      return C22 = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.after",
        index: 2
      });
    },
    get C23() {
      return C23 = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.inside",
        index: 3
      });
    },
    get C24() {
      return C24 = dart.constList([C20 || CT.C20, C21 || CT.C21, C22 || CT.C22, C23 || CT.C23], axis_spec.TickLabelAnchor);
    },
    get C25() {
      return C25 = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.inside",
        index: 0
      });
    },
    get C26() {
      return C26 = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.outside",
        index: 1
      });
    },
    get C27() {
      return C27 = dart.constList([C25 || CT.C25, C26 || CT.C26], axis_spec.TickLabelJustification);
    },
    get C28() {
      return C28 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.none",
        index: 0
      });
    },
    get C29() {
      return C29 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.fixedPixel",
        index: 1
      });
    },
    get C30() {
      return C30 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.fixedDomain",
        index: 2
      });
    },
    get C31() {
      return C31 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.fixedPercentOfStep",
        index: 3
      });
    },
    get C32() {
      return C32 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.styleAssignedPercentOfStep",
        index: 4
      });
    },
    get C33() {
      return C33 = dart.const({
        __proto__: scale$.RangeBandType.prototype,
        [_name$3]: "RangeBandType.fixedPixelSpaceFromStep",
        index: 5
      });
    },
    get C34() {
      return C34 = dart.constList([C28 || CT.C28, C29 || CT.C29, C30 || CT.C30, C31 || CT.C31, C32 || CT.C32, C33 || CT.C33], scale$.RangeBandType);
    },
    get C35() {
      return C35 = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [_name$3]: "StepSizeType.autoDetect",
        index: 0
      });
    },
    get C36() {
      return C36 = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [_name$3]: "StepSizeType.fixedDomain",
        index: 1
      });
    },
    get C37() {
      return C37 = dart.const({
        __proto__: scale$.StepSizeType.prototype,
        [_name$3]: "StepSizeType.fixedPixels",
        index: 2
      });
    },
    get C38() {
      return C38 = dart.constList([C35 || CT.C35, C36 || CT.C36, C37 || CT.C37], scale$.StepSizeType);
    },
    get C39() {
      return C39 = dart.const({
        __proto__: material_style.MaterialStyle.prototype
      });
    },
    get C40() {
      return C40 = dart.const({
        __proto__: material_palette.MaterialBlue.prototype
      });
    },
    get C41() {
      return C41 = dart.const({
        __proto__: material_palette.MaterialRed.prototype
      });
    },
    get C42() {
      return C42 = dart.const({
        __proto__: material_palette.MaterialYellow.prototype
      });
    },
    get C43() {
      return C43 = dart.const({
        __proto__: material_palette.MaterialGreen.prototype
      });
    },
    get C44() {
      return C44 = dart.const({
        __proto__: material_palette.MaterialPurple.prototype
      });
    },
    get C45() {
      return C45 = dart.const({
        __proto__: material_palette.MaterialCyan.prototype
      });
    },
    get C46() {
      return C46 = dart.const({
        __proto__: material_palette.MaterialDeepOrange.prototype
      });
    },
    get C47() {
      return C47 = dart.const({
        __proto__: material_palette.MaterialLime.prototype
      });
    },
    get C48() {
      return C48 = dart.const({
        __proto__: material_palette.MaterialIndigo.prototype
      });
    },
    get C49() {
      return C49 = dart.const({
        __proto__: material_palette.MaterialPink.prototype
      });
    },
    get C50() {
      return C50 = dart.const({
        __proto__: material_palette.MaterialTeal.prototype
      });
    },
    get C51() {
      return C51 = dart.const({
        __proto__: material_palette.MaterialGray.prototype
      });
    },
    get C52() {
      return C52 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 249,
        [g$]: 202,
        [r$]: 144
      });
    },
    get C54() {
      return C54 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 210,
        [g$]: 118,
        [r$]: 25
      });
    },
    get C53() {
      return C53 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C52 || CT.C52,
        [_darker$]: C54 || CT.C54,
        [a$]: 255,
        [b$]: 243,
        [g$]: 150,
        [r$]: 33
      });
    },
    get C55() {
      return C55 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 154,
        [g$]: 154,
        [r$]: 239
      });
    },
    get C56() {
      return C56 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 47,
        [g$]: 47,
        [r$]: 211
      });
    },
    get C57() {
      return C57 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C55 || CT.C55,
        [_darker$]: C56 || CT.C56,
        [a$]: 255,
        [b$]: 54,
        [g$]: 67,
        [r$]: 244
      });
    },
    get C58() {
      return C58 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 157,
        [g$]: 245,
        [r$]: 255
      });
    },
    get C59() {
      return C59 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 45,
        [g$]: 192,
        [r$]: 251
      });
    },
    get C60() {
      return C60 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C58 || CT.C58,
        [_darker$]: C59 || CT.C59,
        [a$]: 255,
        [b$]: 59,
        [g$]: 235,
        [r$]: 255
      });
    },
    get C61() {
      return C61 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 167,
        [g$]: 214,
        [r$]: 165
      });
    },
    get C62() {
      return C62 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 60,
        [g$]: 142,
        [r$]: 56
      });
    },
    get C63() {
      return C63 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C61 || CT.C61,
        [_darker$]: C62 || CT.C62,
        [a$]: 255,
        [b$]: 80,
        [g$]: 175,
        [r$]: 76
      });
    },
    get C64() {
      return C64 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 216,
        [g$]: 147,
        [r$]: 206
      });
    },
    get C65() {
      return C65 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 162,
        [g$]: 31,
        [r$]: 123
      });
    },
    get C66() {
      return C66 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C64 || CT.C64,
        [_darker$]: C65 || CT.C65,
        [a$]: 255,
        [b$]: 176,
        [g$]: 39,
        [r$]: 156
      });
    },
    get C67() {
      return C67 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 234,
        [g$]: 222,
        [r$]: 128
      });
    },
    get C68() {
      return C68 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 167,
        [g$]: 151,
        [r$]: 0
      });
    },
    get C69() {
      return C69 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C67 || CT.C67,
        [_darker$]: C68 || CT.C68,
        [a$]: 255,
        [b$]: 212,
        [g$]: 188,
        [r$]: 0
      });
    },
    get C70() {
      return C70 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 145,
        [g$]: 171,
        [r$]: 255
      });
    },
    get C71() {
      return C71 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 25,
        [g$]: 74,
        [r$]: 230
      });
    },
    get C72() {
      return C72 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C70 || CT.C70,
        [_darker$]: C71 || CT.C71,
        [a$]: 255,
        [b$]: 34,
        [g$]: 87,
        [r$]: 255
      });
    },
    get C73() {
      return C73 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 156,
        [g$]: 238,
        [r$]: 230
      });
    },
    get C74() {
      return C74 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 43,
        [g$]: 180,
        [r$]: 175
      });
    },
    get C75() {
      return C75 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C73 || CT.C73,
        [_darker$]: C74 || CT.C74,
        [a$]: 255,
        [b$]: 57,
        [g$]: 220,
        [r$]: 205
      });
    },
    get C76() {
      return C76 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 218,
        [g$]: 168,
        [r$]: 159
      });
    },
    get C77() {
      return C77 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 159,
        [g$]: 63,
        [r$]: 48
      });
    },
    get C78() {
      return C78 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C76 || CT.C76,
        [_darker$]: C77 || CT.C77,
        [a$]: 255,
        [b$]: 181,
        [g$]: 81,
        [r$]: 63
      });
    },
    get C79() {
      return C79 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 177,
        [g$]: 143,
        [r$]: 244
      });
    },
    get C80() {
      return C80 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 91,
        [g$]: 24,
        [r$]: 194
      });
    },
    get C81() {
      return C81 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C79 || CT.C79,
        [_darker$]: C80 || CT.C80,
        [a$]: 255,
        [b$]: 99,
        [g$]: 30,
        [r$]: 233
      });
    },
    get C82() {
      return C82 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 196,
        [g$]: 203,
        [r$]: 128
      });
    },
    get C83() {
      return C83 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 107,
        [g$]: 121,
        [r$]: 0
      });
    },
    get C84() {
      return C84 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C82 || CT.C82,
        [_darker$]: C83 || CT.C83,
        [a$]: 255,
        [b$]: 136,
        [g$]: 150,
        [r$]: 0
      });
    },
    get C85() {
      return C85 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 250,
        [g$]: 250,
        [r$]: 250
      });
    },
    get C86() {
      return C86 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 245,
        [g$]: 245,
        [r$]: 245
      });
    },
    get C87() {
      return C87 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 224,
        [g$]: 224,
        [r$]: 224
      });
    },
    get C88() {
      return C88 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 189,
        [g$]: 189,
        [r$]: 189
      });
    },
    get C89() {
      return C89 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 117,
        [g$]: 117,
        [r$]: 117
      });
    },
    get C90() {
      return C90 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 66,
        [g$]: 66,
        [r$]: 66
      });
    },
    get C91() {
      return C91 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 161,
        [g$]: 33,
        [r$]: 33
      });
    },
    get C92() {
      return C92 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 238,
        [g$]: 238,
        [r$]: 238
      });
    },
    get C93() {
      return C93 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: null,
        [_darker$]: null,
        [a$]: 255,
        [b$]: 97,
        [g$]: 97,
        [r$]: 97
      });
    },
    get C94() {
      return C94 = dart.const({
        __proto__: color$.Color.prototype,
        [_lighter$]: C92 || CT.C92,
        [_darker$]: C93 || CT.C93,
        [a$]: 255,
        [b$]: 158,
        [g$]: 158,
        [r$]: 158
      });
    },
    get C95() {
      return C95 = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [_name$4]: "AxisOrientation.top",
        index: 0
      });
    },
    get C96() {
      return C96 = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [_name$4]: "AxisOrientation.right",
        index: 1
      });
    },
    get C97() {
      return C97 = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [_name$4]: "AxisOrientation.bottom",
        index: 2
      });
    },
    get C98() {
      return C98 = dart.const({
        __proto__: axis$.AxisOrientation.prototype,
        [_name$4]: "AxisOrientation.left",
        index: 3
      });
    },
    get C99() {
      return C99 = dart.constList([C95 || CT.C95, C96 || CT.C96, C97 || CT.C97, C98 || CT.C98], axis$.AxisOrientation);
    },
    get C100() {
      return C100 = dart.const({
        __proto__: ordinal_tick_provider.OrdinalTickProvider.prototype
      });
    },
    get C101() {
      return C101 = dart.const({
        __proto__: tick_formatter.OrdinalTickFormatter.prototype
      });
    },
    get C102() {
      return C102 = dart.const({
        __proto__: AttributeKeyOfString().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxisId"
      });
    },
    get C103() {
      return C103 = dart.const({
        __proto__: AttributeKeyOfAxis().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxis"
      });
    },
    get C104() {
      return C104 = dart.const({
        __proto__: AttributeKeyOfAxis().prototype,
        [TypedKey_uniqueKey]: "Axis.domainAxis"
      });
    },
    get C105() {
      return C105 = dart.const({
        __proto__: rtl_spec.AxisDirection.prototype,
        [_name$5]: "AxisDirection.reversed",
        index: 1
      });
    },
    get C106() {
      return C106 = dart.const({
        __proto__: rtl_spec.AxisDirection.prototype,
        [_name$5]: "AxisDirection.normal",
        index: 0
      });
    },
    get C107() {
      return C107 = dart.constList([C106 || CT.C106, C105 || CT.C105], rtl_spec.AxisDirection);
    },
    get C108() {
      return C108 = dart.const({
        __proto__: IdentityConverterOfnum().prototype
      });
    },
    get C109() {
      return C109 = dart.constList([0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9], core.double);
    },
    get C110() {
      return C110 = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 1 / 0,
        [min$]: -1 / 0
      });
    },
    get C111() {
      return C111 = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 0,
        [min$]: 0
      });
    },
    get C112() {
      return C112 = dart.const({
        __proto__: scale$.RangeBandConfig.prototype,
        [size]: 0,
        [type]: C28 || CT.C28
      });
    },
    get C113() {
      return C113 = dart.const({
        __proto__: scale$.StepSizeConfig.prototype,
        [size$]: 0,
        [type$]: C35 || CT.C35
      });
    },
    get C114() {
      return C114 = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$6]: "_PixelVerticalDirection.over",
        index: 0
      });
    },
    get C115() {
      return C115 = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$6]: "_PixelVerticalDirection.under",
        index: 2
      });
    },
    get C116() {
      return C116 = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$6]: "_PixelVerticalDirection.center",
        index: 1
      });
    },
    get C117() {
      return C117 = dart.constList([C114 || CT.C114, C116 || CT.C116, C115 || CT.C115], base_tick_draw_strategy._PixelVerticalDirection);
    },
    get C118() {
      return C118 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.Bottom",
        index: 0
      });
    },
    get C119() {
      return C119 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.FullBottom",
        index: 1
      });
    },
    get C120() {
      return C120 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.Top",
        index: 2
      });
    },
    get C121() {
      return C121 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.FullTop",
        index: 3
      });
    },
    get C122() {
      return C122 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.Left",
        index: 4
      });
    },
    get C123() {
      return C123 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.FullLeft",
        index: 5
      });
    },
    get C124() {
      return C124 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.Right",
        index: 6
      });
    },
    get C125() {
      return C125 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.FullRight",
        index: 7
      });
    },
    get C126() {
      return C126 = dart.const({
        __proto__: layout_view.LayoutPosition.prototype,
        [_name$7]: "LayoutPosition.DrawArea",
        index: 8
      });
    },
    get C127() {
      return C127 = dart.constList([C118 || CT.C118, C119 || CT.C119, C120 || CT.C120, C121 || CT.C121, C122 || CT.C122, C123 || CT.C123, C124 || CT.C124, C125 || CT.C125, C126 || CT.C126], layout_view.LayoutPosition);
    },
    get C128() {
      return C128 = dart.const({
        __proto__: layout_view.ViewMargin.prototype,
        [leftPx$]: 0,
        [rightPx$]: 0,
        [bottomPx$]: 0,
        [topPx$]: 0
      });
    },
    get C129() {
      return C129 = dart.const({
        __proto__: layout_view.ViewMeasuredSizes.prototype,
        [minHeight$]: 0,
        [minWidth$]: 0,
        [preferredHeight$]: 0,
        [preferredWidth$]: 0
      });
    },
    get C130() {
      return C130 = dart.const({
        __proto__: numeric_axis_spec.BasicNumericTickProviderSpec.prototype,
        [BasicNumericTickProviderSpec_desiredMaxTickCount]: null,
        [BasicNumericTickProviderSpec_desiredMinTickCount]: null,
        [BasicNumericTickProviderSpec_desiredTickCount]: null,
        [BasicNumericTickProviderSpec_dataIsInWholeNumbers]: false,
        [BasicNumericTickProviderSpec_zeroBound]: null
      });
    },
    get C131() {
      return C131 = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 1,
        [min$]: 0
      });
    },
    get C132() {
      return C132 = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 300000
      });
    },
    get C133() {
      return C133 = dart.const({
        __proto__: layout_config.MarginSpec.prototype,
        [_maxPercent$]: 50,
        [_minPercent$]: null,
        [_maxPixel$]: null,
        [_minPixel$]: null
      });
    },
    get C134() {
      return C134 = dart.const({
        __proto__: AttributeKeyOfString().prototype,
        [TypedKey_uniqueKey]: "SeriesRenderer.rendererId"
      });
    },
    get C135() {
      return C135 = dart.const({
        __proto__: AttributeKeyOfSeriesRenderer().prototype,
        [TypedKey_uniqueKey]: "SeriesRenderer.renderer"
      });
    },
    get C136() {
      return C136 = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [_name$8]: "SelectionModelType.info",
        index: 0
      });
    },
    get C137() {
      return C137 = dart.const({
        __proto__: selection_model.SelectionModelType.prototype,
        [_name$8]: "SelectionModelType.action",
        index: 1
      });
    },
    get C138() {
      return C138 = dart.constList([C136 || CT.C136, C137 || CT.C137], selection_model.SelectionModelType);
    },
    get C139() {
      return C139 = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$9]: "BehaviorPosition.top",
        index: 0
      });
    },
    get C140() {
      return C140 = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$9]: "BehaviorPosition.bottom",
        index: 1
      });
    },
    get C141() {
      return C141 = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$9]: "BehaviorPosition.start",
        index: 2
      });
    },
    get C142() {
      return C142 = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$9]: "BehaviorPosition.end",
        index: 3
      });
    },
    get C143() {
      return C143 = dart.const({
        __proto__: chart_behavior.BehaviorPosition.prototype,
        [_name$9]: "BehaviorPosition.inside",
        index: 4
      });
    },
    get C144() {
      return C144 = dart.constList([C139 || CT.C139, C140 || CT.C140, C141 || CT.C141, C142 || CT.C142, C143 || CT.C143], chart_behavior.BehaviorPosition);
    },
    get C145() {
      return C145 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.startDrawArea",
        index: 0
      });
    },
    get C146() {
      return C146 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.start",
        index: 1
      });
    },
    get C147() {
      return C147 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.middleDrawArea",
        index: 2
      });
    },
    get C148() {
      return C148 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.middle",
        index: 3
      });
    },
    get C149() {
      return C149 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.endDrawArea",
        index: 4
      });
    },
    get C150() {
      return C150 = dart.const({
        __proto__: chart_behavior.OutsideJustification.prototype,
        [_name$9]: "OutsideJustification.end",
        index: 5
      });
    },
    get C151() {
      return C151 = dart.constList([C145 || CT.C145, C146 || CT.C146, C147 || CT.C147, C148 || CT.C148, C149 || CT.C149, C150 || CT.C150], chart_behavior.OutsideJustification);
    },
    get C152() {
      return C152 = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name$9]: "InsideJustification.topStart",
        index: 0
      });
    },
    get C153() {
      return C153 = dart.const({
        __proto__: chart_behavior.InsideJustification.prototype,
        [_name$9]: "InsideJustification.topEnd",
        index: 1
      });
    },
    get C154() {
      return C154 = dart.constList([C152 || CT.C152, C153 || CT.C153], chart_behavior.InsideJustification);
    },
    get C155() {
      return C155 = dart.const({
        __proto__: AttributeKeyOfint().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupIndex"
      });
    },
    get C156() {
      return C156 = dart.const({
        __proto__: AttributeKeyOfint().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupCount"
      });
    },
    get C157() {
      return C157 = dart.const({
        __proto__: AttributeKeyOfdouble().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupWeight"
      });
    },
    get C158() {
      return C158 = dart.const({
        __proto__: AttributeKeyOfdouble().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.previousBarGroupWeight"
      });
    },
    get C159() {
      return C159 = dart.const({
        __proto__: AttributeKeyOfString().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.stackKey"
      });
    },
    get C160() {
      return C160 = dart.const({
        __proto__: AttributeKeyOfListOfBaseBarRendererElement().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.elements"
      });
    },
    get C161() {
      return C161 = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$10]: "BarGroupingType.grouped",
        index: 0
      });
    },
    get C162() {
      return C162 = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$10]: "BarGroupingType.groupedStacked",
        index: 1
      });
    },
    get C163() {
      return C163 = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$10]: "BarGroupingType.stacked",
        index: 2
      });
    },
    get C164() {
      return C164 = dart.constList([C161 || CT.C161, C162 || CT.C162, C163 || CT.C163], base_bar_renderer_config.BarGroupingType);
    },
    get C165() {
      return C165 = dart.const({
        __proto__: bar_renderer_config.ConstCornerStrategy.prototype,
        [ConstCornerStrategy_radius]: 2
      });
    },
    get C166() {
      return C166 = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$11]: "SelectionTrigger.tap",
        index: 1
      });
    },
    get C167() {
      return C167 = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$11]: "SelectionTrigger.tapAndDrag",
        index: 2
      });
    },
    get C168() {
      return C168 = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$11]: "SelectionTrigger.pressHold",
        index: 3
      });
    },
    get C169() {
      return C169 = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$11]: "SelectionTrigger.longPressHold",
        index: 4
      });
    },
    get C170() {
      return C170 = dart.const({
        __proto__: selection_trigger.SelectionTrigger.prototype,
        [_name$11]: "SelectionTrigger.hover",
        index: 0
      });
    },
    get C171() {
      return C171 = dart.constList([C170 || CT.C170, C166 || CT.C166, C167 || CT.C167, C168 || CT.C168, C169 || CT.C169], selection_trigger.SelectionTrigger);
    },
    get C172() {
      return C172 = dart.const({
        __proto__: date_time_factory.LocalDateTimeFactory.prototype
      });
    },
    get C173() {
      return C173 = dart.const({
        __proto__: AttributeKeyOfListOf_LineRendererElement().prototype,
        [TypedKey_uniqueKey]: "LineRenderer.styleSegments"
      });
    },
    get C174() {
      return C174 = dart.const({
        __proto__: AttributeKeyOfint().prototype,
        [TypedKey_uniqueKey]: "LineRenderer.lineStackIndex"
      });
    },
    get C175() {
      return C175 = dart.constList([], point_renderer_decorator.PointRendererDecorator);
    },
    get C176() {
      return C176 = dart.const({
        __proto__: AttributeKeyOfListOfPointRendererElement().prototype,
        [TypedKey_uniqueKey]: "PointRenderer.elements"
      });
    },
    get C177() {
      return C177 = dart.const({
        __proto__: AttributeKeyOfintToString().prototype,
        [TypedKey_uniqueKey]: "PointRenderer.symbolRendererFn"
      });
    },
    get C178() {
      return C178 = dart.const({
        __proto__: AttributeKeyOfString().prototype,
        [TypedKey_uniqueKey]: "PointRenderer.symbolRendererId"
      });
    },
    get C179() {
      return C179 = dart.const({
        __proto__: AttributeKeyOfdouble().prototype,
        [TypedKey_uniqueKey]: "SymbolAnnotationRenderer.boundsLineRadiusPx"
      });
    },
    get C180() {
      return C180 = dart.const({
        __proto__: AttributeKeyOfintTodouble().prototype,
        [TypedKey_uniqueKey]: "SymbolAnnotationRenderer.boundsLineRadiusPxFn"
      });
    },
    get C181() {
      return C181 = dart.constList([1, 2, 5, 10, 50, 100, 500, 1000], core.int);
    },
    get C182() {
      return C182 = dart.constList([1, 2, 3, 4, 6, 12], core.int);
    },
    get C183() {
      return C183 = dart.constList([5, 10, 15, 20, 30], core.int);
    },
    get C184() {
      return C184 = dart.constList([1, 2, 3, 4, 6, 12, 24], core.int);
    },
    get C185() {
      return C185 = dart.constList([1, 2, 3, 7, 14], core.int);
    },
    get C186() {
      return C186 = dart.const({
        __proto__: AttributeKeyOfListOfArcRendererElement().prototype,
        [TypedKey_uniqueKey]: "ArcRenderer.elements"
      });
    },
    get C187() {
      return C187 = dart.constList([], arc_renderer_decorator.ArcRendererDecorator);
    },
    get C188() {
      return C188 = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [_name$12]: "LegendDefaultMeasure.sum",
        index: 1
      });
    },
    get C189() {
      return C189 = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [_name$12]: "LegendDefaultMeasure.average",
        index: 2
      });
    },
    get C190() {
      return C190 = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [_name$12]: "LegendDefaultMeasure.firstValue",
        index: 3
      });
    },
    get C191() {
      return C191 = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [_name$12]: "LegendDefaultMeasure.lastValue",
        index: 4
      });
    },
    get C192() {
      return C192 = dart.const({
        __proto__: legend_entry_generator.LegendDefaultMeasure.prototype,
        [_name$12]: "LegendDefaultMeasure.none",
        index: 0
      });
    },
    get C193() {
      return C193 = dart.constList([C192 || CT.C192, C188 || CT.C188, C189 || CT.C189, C190 || CT.C190, C191 || CT.C191], legend_entry_generator.LegendDefaultMeasure);
    },
    get C194() {
      return C194 = dart.const({
        __proto__: legend.LegendTapHandling.prototype,
        [_name$13]: "LegendTapHandling.none",
        index: 0
      });
    },
    get C195() {
      return C195 = dart.const({
        __proto__: legend.LegendTapHandling.prototype,
        [_name$13]: "LegendTapHandling.hide",
        index: 1
      });
    },
    get C196() {
      return C196 = dart.constList([C194 || CT.C194, C195 || CT.C195], legend.LegendTapHandling);
    },
    get C197() {
      return C197 = dart.const({
        __proto__: layout_view.ViewMargin.prototype,
        [leftPx$]: 4,
        [rightPx$]: 4,
        [bottomPx$]: 4,
        [topPx$]: 26
      });
    },
    get C198() {
      return C198 = dart.const({
        __proto__: treemap_renderer_config.TileType.prototype,
        [_name$14]: "TileType.squarified",
        index: 0
      });
    },
    get C199() {
      return C199 = dart.constList([C198 || CT.C198], treemap_renderer_config.TileType);
    },
    get C200() {
      return C200 = dart.const({
        __proto__: AttributeKeyOfIterableOfTreeMapRendererElement().prototype,
        [TypedKey_uniqueKey]: "TreeMapRenderer.elements"
      });
    },
    get C201() {
      return C201 = dart.const({
        __proto__: a11y_explore_behavior.ExploreModeTrigger.prototype,
        [_name$15]: "ExploreModeTrigger.pressHold",
        index: 0
      });
    },
    get C202() {
      return C202 = dart.const({
        __proto__: a11y_explore_behavior.ExploreModeTrigger.prototype,
        [_name$15]: "ExploreModeTrigger.tap",
        index: 1
      });
    },
    get C203() {
      return C203 = dart.constList([C201 || CT.C201, C202 || CT.C202], a11y_explore_behavior.ExploreModeTrigger);
    },
    get C204() {
      return C204 = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$16]: "LinePointHighlighterFollowLineType.nearest",
        index: 0
      });
    },
    get C205() {
      return C205 = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$16]: "LinePointHighlighterFollowLineType.none",
        index: 1
      });
    },
    get C206() {
      return C206 = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$16]: "LinePointHighlighterFollowLineType.all",
        index: 2
      });
    },
    get C207() {
      return C207 = dart.constList([C204 || CT.C204, C205 || CT.C205, C206 || CT.C206], line_point_highlighter.LinePointHighlighterFollowLineType);
    },
    get C208() {
      return C208 = dart.const({
        __proto__: AttributeKeyOfSet().prototype,
        [TypedKey_uniqueKey]: "BarLaneRenderer.domainValues"
      });
    },
    get C209() {
      return C209 = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [_name$17]: "BarLabelPosition.auto",
        index: 0
      });
    },
    get C210() {
      return C210 = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [_name$17]: "BarLabelAnchor.end",
        index: 2
      });
    },
    get C211() {
      return C211 = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [_name$17]: "BarLabelAnchor.middle",
        index: 1
      });
    },
    get C212() {
      return C212 = dart.const({
        __proto__: bar_label_decorator.BarLabelAnchor.prototype,
        [_name$17]: "BarLabelAnchor.start",
        index: 0
      });
    },
    get C213() {
      return C213 = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [_name$17]: "BarLabelPosition.outside",
        index: 1
      });
    },
    get C214() {
      return C214 = dart.const({
        __proto__: bar_label_decorator.BarLabelPosition.prototype,
        [_name$17]: "BarLabelPosition.inside",
        index: 2
      });
    },
    get C215() {
      return C215 = dart.constList([C209 || CT.C209, C213 || CT.C213, C214 || CT.C214], bar_label_decorator.BarLabelPosition);
    },
    get C216() {
      return C216 = dart.constList([C212 || CT.C212, C211 || CT.C211, C210 || CT.C210], bar_label_decorator.BarLabelAnchor);
    },
    get C217() {
      return C217 = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [_name$18]: "ArcLabelPosition.auto",
        index: 0
      });
    },
    get C218() {
      return C218 = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [_name$18]: "ArcLabelPosition.outside",
        index: 1
      });
    },
    get C219() {
      return C219 = dart.const({
        __proto__: arc_label_decorator.ArcLabelPosition.prototype,
        [_name$18]: "ArcLabelPosition.inside",
        index: 2
      });
    },
    get C220() {
      return C220 = dart.constList([C217 || CT.C217, C218 || CT.C218, C219 || CT.C219], arc_label_decorator.ArcLabelPosition);
    },
    get C221() {
      return C221 = dart.const({
        __proto__: bucketing_axis_spec.BucketingNumericTickProviderSpec.prototype,
        [BasicNumericTickProviderSpec_desiredMaxTickCount]: null,
        [BasicNumericTickProviderSpec_desiredMinTickCount]: null,
        [BasicNumericTickProviderSpec_desiredTickCount]: null,
        [BasicNumericTickProviderSpec_dataIsInWholeNumbers]: false,
        [BasicNumericTickProviderSpec_zeroBound]: true
      });
    },
    get C222() {
      return C222 = dart.const({
        __proto__: slider.SliderHandlePosition.prototype,
        [_name$19]: "SliderHandlePosition.middle",
        index: 0
      });
    },
    get C223() {
      return C223 = dart.const({
        __proto__: slider.SliderHandlePosition.prototype,
        [_name$19]: "SliderHandlePosition.top",
        index: 1
      });
    },
    get C224() {
      return C224 = dart.const({
        __proto__: PointOfdouble().prototype,
        [Point_y]: 0,
        [Point_x]: 0
      });
    },
    get C225() {
      return C225 = dart.const({
        __proto__: RectangleOfint().prototype,
        [Rectangle_height]: 20,
        [Rectangle_width]: 10,
        [Rectangle_top]: 0,
        [Rectangle_left]: 0
      });
    },
    get C226() {
      return C226 = dart.constList([C222 || CT.C222, C223 || CT.C223], slider.SliderHandlePosition);
    },
    get C227() {
      return C227 = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [_name$19]: "SliderListenerDragState.initial",
        index: 0
      });
    },
    get C228() {
      return C228 = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [_name$19]: "SliderListenerDragState.drag",
        index: 1
      });
    },
    get C229() {
      return C229 = dart.const({
        __proto__: slider.SliderListenerDragState.prototype,
        [_name$19]: "SliderListenerDragState.end",
        index: 2
      });
    },
    get C230() {
      return C230 = dart.constList([C227 || CT.C227, C228 || CT.C228, C229 || CT.C229], slider.SliderListenerDragState);
    },
    get C231() {
      return C231 = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [_name$20]: "PanningTickProviderMode.useCachedTicks",
        index: 0
      });
    },
    get C232() {
      return C232 = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [_name$20]: "PanningTickProviderMode.stepSizeLocked",
        index: 1
      });
    },
    get C233() {
      return C233 = dart.const({
        __proto__: panning_tick_provider.PanningTickProviderMode.prototype,
        [_name$20]: "PanningTickProviderMode.passThrough",
        index: 2
      });
    },
    get C234() {
      return C234 = dart.constList([C231 || CT.C231, C232 || CT.C232, C233 || CT.C233], panning_tick_provider.PanningTickProviderMode);
    },
    get C235() {
      return C235 = dart.const({
        __proto__: SmallTickRendererSpecOfDateTime().prototype,
        [axisLineStyle$]: null,
        [labelRotation$]: null,
        [minimumPaddingBetweenLabelsPx$]: null,
        [labelOffsetFromTickPx$]: 0,
        [labelOffsetFromAxisPx$]: null,
        [labelJustification$]: null,
        [labelAnchor$]: C23 || CT.C23,
        [labelStyle$]: null,
        [tickLengthPx$]: null,
        [lineStyle$]: null
      });
    },
    get C236() {
      return C236 = dart.const({
        __proto__: date_time_axis_spec.DateTimeEndPointsTickProviderSpec.prototype
      });
    },
    get C237() {
      return C237 = dart.const({
        __proto__: range_annotation.RangeAnnotationAxisType.prototype,
        [_name$21]: "RangeAnnotationAxisType.domain",
        index: 0
      });
    },
    get C238() {
      return C238 = dart.const({
        __proto__: range_annotation.RangeAnnotationAxisType.prototype,
        [_name$21]: "RangeAnnotationAxisType.measure",
        index: 1
      });
    },
    get C239() {
      return C239 = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [_name$21]: "AnnotationLabelAnchor.end",
        index: 2
      });
    },
    get C240() {
      return C240 = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [_name$21]: "AnnotationLabelDirection.auto",
        index: 0
      });
    },
    get C241() {
      return C241 = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [_name$21]: "AnnotationLabelPosition.auto",
        index: 0
      });
    },
    get C242() {
      return C242 = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [_name$21]: "AnnotationLabelAnchor.start",
        index: 0
      });
    },
    get C243() {
      return C243 = dart.const({
        __proto__: range_annotation.AnnotationLabelAnchor.prototype,
        [_name$21]: "AnnotationLabelAnchor.middle",
        index: 1
      });
    },
    get C244() {
      return C244 = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [_name$21]: "AnnotationLabelPosition.margin",
        index: 3
      });
    },
    get C245() {
      return C245 = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [_name$21]: "_AnnotationLabelType.start",
        index: 0
      });
    },
    get C246() {
      return C246 = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [_name$21]: "_AnnotationLabelType.end",
        index: 1
      });
    },
    get C247() {
      return C247 = dart.const({
        __proto__: range_annotation._AnnotationLabelType.prototype,
        [_name$21]: "_AnnotationLabelType.middle",
        index: 2
      });
    },
    get C248() {
      return C248 = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [_name$21]: "AnnotationLabelPosition.outside",
        index: 1
      });
    },
    get C249() {
      return C249 = dart.const({
        __proto__: range_annotation.AnnotationLabelPosition.prototype,
        [_name$21]: "AnnotationLabelPosition.inside",
        index: 2
      });
    },
    get C250() {
      return C250 = dart.constList([C245 || CT.C245, C246 || CT.C246, C247 || CT.C247], range_annotation._AnnotationLabelType);
    },
    get C251() {
      return C251 = dart.constList([C237 || CT.C237, C238 || CT.C238], range_annotation.RangeAnnotationAxisType);
    },
    get C252() {
      return C252 = dart.constList([C242 || CT.C242, C243 || CT.C243, C239 || CT.C239], range_annotation.AnnotationLabelAnchor);
    },
    get C253() {
      return C253 = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [_name$21]: "AnnotationLabelDirection.horizontal",
        index: 1
      });
    },
    get C254() {
      return C254 = dart.const({
        __proto__: range_annotation.AnnotationLabelDirection.prototype,
        [_name$21]: "AnnotationLabelDirection.vertical",
        index: 2
      });
    },
    get C255() {
      return C255 = dart.constList([C240 || CT.C240, C253 || CT.C253, C254 || CT.C254], range_annotation.AnnotationLabelDirection);
    },
    get C256() {
      return C256 = dart.constList([C241 || CT.C241, C248 || CT.C248, C249 || CT.C249, C244 || CT.C244], range_annotation.AnnotationLabelPosition);
    },
    get C257() {
      return C257 = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [_name$22]: "ChartTitleDirection.auto",
        index: 0
      });
    },
    get C258() {
      return C258 = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [_name$22]: "ChartTitleDirection.horizontal",
        index: 1
      });
    },
    get C259() {
      return C259 = dart.const({
        __proto__: chart_title.ChartTitleDirection.prototype,
        [_name$22]: "ChartTitleDirection.vertical",
        index: 2
      });
    },
    get C260() {
      return C260 = dart.constList([C257 || CT.C257, C258 || CT.C258, C259 || CT.C259], chart_title.ChartTitleDirection);
    },
    get C261() {
      return C261 = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [_name$23]: "PercentInjectorTotalType.domain",
        index: 0
      });
    },
    get C262() {
      return C262 = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [_name$23]: "PercentInjectorTotalType.domainBySeriesCategory",
        index: 1
      });
    },
    get C263() {
      return C263 = dart.const({
        __proto__: percent_injector.PercentInjectorTotalType.prototype,
        [_name$23]: "PercentInjectorTotalType.series",
        index: 2
      });
    },
    get C264() {
      return C264 = dart.constList([C261 || CT.C261, C262 || CT.C262, C263 || CT.C263], percent_injector.PercentInjectorTotalType);
    },
    get C265() {
      return C265 = dart.const({
        __proto__: AttributeKeyOfbool().prototype,
        [TypedKey_uniqueKey]: "PercentInjector.percentInjected"
      });
    },
    get C266() {
      return C266 = dart.fn(domain_a11y_explore_behavior.domainVocalization, ListOfSeriesDatumOfDToString());
    }
  });
  const _noonFormat = dart.privateName(hour_tick_formatter, "_noonFormat");
  const _simpleFormat = dart.privateName(time_tick_formatter_impl, "_simpleFormat");
  const _transitionFormat = dart.privateName(time_tick_formatter_impl, "_transitionFormat");
  const _name$ = dart.privateName(time_tick_formatter_impl, "_name");
  let C0;
  let C1;
  let C2;
  let C3;
  let C4;
  let C5;
  const transitionField$ = dart.privateName(time_tick_formatter_impl, "TimeTickFormatterImpl.transitionField");
  time_tick_formatter_impl.TimeTickFormatterImpl = class TimeTickFormatterImpl extends core.Object {
    get transitionField() {
      return this[transitionField$];
    }
    set transitionField(value) {
      super.transitionField = value;
    }
    formatFirstTick(date) {
      return this[_transitionFormat].format(date);
    }
    formatSimpleTick(date) {
      return this[_simpleFormat].format(date);
    }
    formatTransitionTick(date) {
      return this[_transitionFormat].format(date);
    }
    isTransition(tickValue, prevTickValue) {
      if (this.transitionField == null) {
        return false;
      }
      let prevTransitionFieldValue = this.getCalendarField(prevTickValue, this.transitionField);
      let transitionFieldValue = this.getCalendarField(tickValue, this.transitionField);
      return prevTransitionFieldValue != transitionFieldValue;
    }
    getCalendarField(dateTime, field) {
      let value = null;
      switch (field) {
        case C0 || CT.C0:
        {
          value = dateTime.year;
          break;
        }
        case C1 || CT.C1:
        {
          value = dateTime.month;
          break;
        }
        case C2 || CT.C2:
        {
          value = dateTime.day;
          break;
        }
        case C3 || CT.C3:
        {
          value = dateTime.hour;
          break;
        }
        case C4 || CT.C4:
        {
          value = dateTime.minute;
          break;
        }
        case C5 || CT.C5:
        {
          value = dateTime.second;
          break;
        }
      }
      return value;
    }
  };
  (time_tick_formatter_impl.TimeTickFormatterImpl.new = function(opts) {
    let dateTimeFactory = opts && 'dateTimeFactory' in opts ? opts.dateTimeFactory : null;
    let simpleFormat = opts && 'simpleFormat' in opts ? opts.simpleFormat : null;
    let transitionFormat = opts && 'transitionFormat' in opts ? opts.transitionFormat : null;
    let transitionField = opts && 'transitionField' in opts ? opts.transitionField : null;
    this[_simpleFormat] = null;
    this[_transitionFormat] = null;
    this[transitionField$] = transitionField;
    this[_simpleFormat] = dateTimeFactory.createDateFormat(simpleFormat);
    this[_transitionFormat] = dateTimeFactory.createDateFormat(transitionFormat);
  }).prototype = time_tick_formatter_impl.TimeTickFormatterImpl.prototype;
  dart.addTypeTests(time_tick_formatter_impl.TimeTickFormatterImpl);
  time_tick_formatter_impl.TimeTickFormatterImpl[dart.implements] = () => [time_tick_formatter.TimeTickFormatter];
  dart.setMethodSignature(time_tick_formatter_impl.TimeTickFormatterImpl, () => ({
    __proto__: dart.getMethods(time_tick_formatter_impl.TimeTickFormatterImpl.__proto__),
    formatFirstTick: dart.fnType(core.String, [core.DateTime]),
    formatSimpleTick: dart.fnType(core.String, [core.DateTime]),
    formatTransitionTick: dart.fnType(core.String, [core.DateTime]),
    isTransition: dart.fnType(core.bool, [core.DateTime, core.DateTime]),
    getCalendarField: dart.fnType(core.int, [core.DateTime, time_tick_formatter_impl.CalendarField])
  }));
  dart.setLibraryUri(time_tick_formatter_impl.TimeTickFormatterImpl, "package:charts_common/src/chart/cartesian/axis/time/time_tick_formatter_impl.dart");
  dart.setFieldSignature(time_tick_formatter_impl.TimeTickFormatterImpl, () => ({
    __proto__: dart.getFields(time_tick_formatter_impl.TimeTickFormatterImpl.__proto__),
    [_simpleFormat]: dart.fieldType(intl.DateFormat),
    [_transitionFormat]: dart.fieldType(intl.DateFormat),
    transitionField: dart.finalFieldType(time_tick_formatter_impl.CalendarField)
  }));
  hour_tick_formatter.HourTickFormatter = class HourTickFormatter extends time_tick_formatter_impl.TimeTickFormatterImpl {
    formatSimpleTick(date) {
      return date.hour === 12 ? this[_noonFormat].format(date) : super.formatSimpleTick(date);
    }
  };
  (hour_tick_formatter.HourTickFormatter.new = function(opts) {
    let dateTimeFactory = opts && 'dateTimeFactory' in opts ? opts.dateTimeFactory : null;
    let simpleFormat = opts && 'simpleFormat' in opts ? opts.simpleFormat : null;
    let transitionFormat = opts && 'transitionFormat' in opts ? opts.transitionFormat : null;
    let noonFormat = opts && 'noonFormat' in opts ? opts.noonFormat : null;
    this[_noonFormat] = null;
    hour_tick_formatter.HourTickFormatter.__proto__.new.call(this, {dateTimeFactory: dateTimeFactory, simpleFormat: simpleFormat, transitionFormat: transitionFormat, transitionField: time_tick_formatter_impl.CalendarField.date});
    this[_noonFormat] = dateTimeFactory.createDateFormat(noonFormat);
  }).prototype = hour_tick_formatter.HourTickFormatter.prototype;
  dart.addTypeTests(hour_tick_formatter.HourTickFormatter);
  dart.setLibraryUri(hour_tick_formatter.HourTickFormatter, "package:charts_common/src/chart/cartesian/axis/time/hour_tick_formatter.dart");
  dart.setFieldSignature(hour_tick_formatter.HourTickFormatter, () => ({
    __proto__: dart.getFields(hour_tick_formatter.HourTickFormatter.__proto__),
    [_noonFormat]: dart.fieldType(intl.DateFormat)
  }));
  let C6;
  time_tick_formatter_impl.CalendarField = class CalendarField extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (time_tick_formatter_impl.CalendarField.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = time_tick_formatter_impl.CalendarField.prototype;
  dart.addTypeTests(time_tick_formatter_impl.CalendarField);
  dart.setLibraryUri(time_tick_formatter_impl.CalendarField, "package:charts_common/src/chart/cartesian/axis/time/time_tick_formatter_impl.dart");
  dart.setFieldSignature(time_tick_formatter_impl.CalendarField, () => ({
    __proto__: dart.getFields(time_tick_formatter_impl.CalendarField.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(time_tick_formatter_impl.CalendarField, ['toString']);
  time_tick_formatter_impl.CalendarField.year = C0 || CT.C0;
  time_tick_formatter_impl.CalendarField.month = C1 || CT.C1;
  time_tick_formatter_impl.CalendarField.date = C2 || CT.C2;
  time_tick_formatter_impl.CalendarField.hourOfDay = C3 || CT.C3;
  time_tick_formatter_impl.CalendarField.minute = C4 || CT.C4;
  time_tick_formatter_impl.CalendarField.second = C5 || CT.C5;
  time_tick_formatter_impl.CalendarField.values = C6 || CT.C6;
  time_tick_formatter.TimeTickFormatter = class TimeTickFormatter extends core.Object {};
  (time_tick_formatter.TimeTickFormatter.new = function() {
    ;
  }).prototype = time_tick_formatter.TimeTickFormatter.prototype;
  dart.addTypeTests(time_tick_formatter.TimeTickFormatter);
  dart.setLibraryUri(time_tick_formatter.TimeTickFormatter, "package:charts_common/src/chart/cartesian/axis/time/time_tick_formatter.dart");
  date_time_factory.DateTimeFactory = class DateTimeFactory extends core.Object {};
  (date_time_factory.DateTimeFactory.new = function() {
    ;
  }).prototype = date_time_factory.DateTimeFactory.prototype;
  dart.addTypeTests(date_time_factory.DateTimeFactory);
  dart.setLibraryUri(date_time_factory.DateTimeFactory, "package:charts_common/src/common/date_time_factory.dart");
  date_time_factory.LocalDateTimeFactory = class LocalDateTimeFactory extends core.Object {
    createDateTimeFromMilliSecondsSinceEpoch(millisecondsSinceEpoch) {
      return new core.DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);
    }
    createDateTime(year, month, day, hour, minute, second, millisecond, microsecond) {
      if (month === void 0) month = 1;
      if (day === void 0) day = 1;
      if (hour === void 0) hour = 0;
      if (minute === void 0) minute = 0;
      if (second === void 0) second = 0;
      if (millisecond === void 0) millisecond = 0;
      if (microsecond === void 0) microsecond = 0;
      return new core.DateTime.new(year, month, day, hour, minute, second, millisecond, microsecond);
    }
    createDateFormat(pattern) {
      return new intl.DateFormat.new(pattern);
    }
  };
  (date_time_factory.LocalDateTimeFactory.new = function() {
    ;
  }).prototype = date_time_factory.LocalDateTimeFactory.prototype;
  dart.addTypeTests(date_time_factory.LocalDateTimeFactory);
  date_time_factory.LocalDateTimeFactory[dart.implements] = () => [date_time_factory.DateTimeFactory];
  dart.setMethodSignature(date_time_factory.LocalDateTimeFactory, () => ({
    __proto__: dart.getMethods(date_time_factory.LocalDateTimeFactory.__proto__),
    createDateTimeFromMilliSecondsSinceEpoch: dart.fnType(core.DateTime, [core.int]),
    createDateTime: dart.fnType(core.DateTime, [core.int], [core.int, core.int, core.int, core.int, core.int, core.int, core.int]),
    createDateFormat: dart.fnType(intl.DateFormat, [core.String])
  }));
  dart.setLibraryUri(date_time_factory.LocalDateTimeFactory, "package:charts_common/src/common/date_time_factory.dart");
  date_time_factory.UTCDateTimeFactory = class UTCDateTimeFactory extends core.Object {
    createDateTimeFromMilliSecondsSinceEpoch(millisecondsSinceEpoch) {
      return new core.DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch, {isUtc: true});
    }
    createDateTime(year, month, day, hour, minute, second, millisecond, microsecond) {
      if (month === void 0) month = 1;
      if (day === void 0) day = 1;
      if (hour === void 0) hour = 0;
      if (minute === void 0) minute = 0;
      if (second === void 0) second = 0;
      if (millisecond === void 0) millisecond = 0;
      if (microsecond === void 0) microsecond = 0;
      return new core.DateTime.utc(year, month, day, hour, minute, second, millisecond, microsecond);
    }
    createDateFormat(pattern) {
      return new intl.DateFormat.new(pattern);
    }
  };
  (date_time_factory.UTCDateTimeFactory.new = function() {
    ;
  }).prototype = date_time_factory.UTCDateTimeFactory.prototype;
  dart.addTypeTests(date_time_factory.UTCDateTimeFactory);
  date_time_factory.UTCDateTimeFactory[dart.implements] = () => [date_time_factory.DateTimeFactory];
  dart.setMethodSignature(date_time_factory.UTCDateTimeFactory, () => ({
    __proto__: dart.getMethods(date_time_factory.UTCDateTimeFactory.__proto__),
    createDateTimeFromMilliSecondsSinceEpoch: dart.fnType(core.DateTime, [core.int]),
    createDateTime: dart.fnType(core.DateTime, [core.int], [core.int, core.int, core.int, core.int, core.int, core.int, core.int]),
    createDateFormat: dart.fnType(intl.DateFormat, [core.String])
  }));
  dart.setLibraryUri(date_time_factory.UTCDateTimeFactory, "package:charts_common/src/common/date_time_factory.dart");
  const _is_TickFormatter_default = Symbol('_is_TickFormatter_default');
  tick_formatter.TickFormatter$ = dart.generic(D => {
    class TickFormatter extends core.Object {}
    (TickFormatter.new = function() {
      ;
    }).prototype = TickFormatter.prototype;
    dart.addTypeTests(TickFormatter);
    TickFormatter.prototype[_is_TickFormatter_default] = true;
    dart.setLibraryUri(TickFormatter, "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart");
    return TickFormatter;
  });
  tick_formatter.TickFormatter = tick_formatter.TickFormatter$();
  dart.addTypeTests(tick_formatter.TickFormatter, _is_TickFormatter_default);
  const _is_SimpleTickFormatterBase_default = Symbol('_is_SimpleTickFormatterBase_default');
  tick_formatter.SimpleTickFormatterBase$ = dart.generic(D => {
    let ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    let MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    let DToString = () => (DToString = dart.constFn(dart.fnType(core.String, [D])))();
    class SimpleTickFormatterBase extends core.Object {
      format(tickValues, cache, opts) {
        ListOfD()._check(tickValues);
        MapOfD$String()._check(cache);
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        return tickValues[$map](core.String, dart.fn(value => {
          let formattedString = cache[$_get](value);
          if (formattedString == null) {
            formattedString = this.formatValue(value);
            cache[$_set](value, formattedString);
          }
          return formattedString;
        }, DToString()))[$toList]();
      }
    }
    (SimpleTickFormatterBase.new = function() {
      ;
    }).prototype = SimpleTickFormatterBase.prototype;
    dart.addTypeTests(SimpleTickFormatterBase);
    SimpleTickFormatterBase.prototype[_is_SimpleTickFormatterBase_default] = true;
    SimpleTickFormatterBase[dart.implements] = () => [tick_formatter.TickFormatter$(D)];
    dart.setMethodSignature(SimpleTickFormatterBase, () => ({
      __proto__: dart.getMethods(SimpleTickFormatterBase.__proto__),
      format: dart.fnType(core.List$(core.String), [core.Object, core.Object], {stepSize: core.num}, {})
    }));
    dart.setLibraryUri(SimpleTickFormatterBase, "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart");
    return SimpleTickFormatterBase;
  });
  tick_formatter.SimpleTickFormatterBase = tick_formatter.SimpleTickFormatterBase$();
  dart.addTypeTests(tick_formatter.SimpleTickFormatterBase, _is_SimpleTickFormatterBase_default);
  tick_formatter.OrdinalTickFormatter = class OrdinalTickFormatter extends tick_formatter.SimpleTickFormatterBase$(core.String) {
    formatValue(value) {
      core.String._check(value);
      return value;
    }
    _equals(other) {
      if (other == null) return false;
      return tick_formatter.OrdinalTickFormatter.is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (tick_formatter.OrdinalTickFormatter.new = function() {
    tick_formatter.OrdinalTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.OrdinalTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.OrdinalTickFormatter);
  dart.setMethodSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.OrdinalTickFormatter.__proto__),
    formatValue: dart.fnType(core.String, [core.Object])
  }));
  dart.setLibraryUri(tick_formatter.OrdinalTickFormatter, "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart");
  dart.defineExtensionMethods(tick_formatter.OrdinalTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.OrdinalTickFormatter, ['hashCode']);
  const formatter$ = dart.privateName(tick_formatter, "NumericTickFormatter.formatter");
  tick_formatter.NumericTickFormatter = class NumericTickFormatter extends tick_formatter.SimpleTickFormatterBase$(core.num) {
    get formatter() {
      return this[formatter$];
    }
    set formatter(value) {
      super.formatter = value;
    }
    static new(opts) {
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      formatter == null ? formatter = tick_formatter.NumericTickFormatter._getFormatter(new intl.NumberFormat.decimalPattern()) : null;
      return new tick_formatter.NumericTickFormatter._internal(formatter);
    }
    static fromNumberFormat(numberFormat) {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(numberFormat));
    }
    static compactSimpleCurrency() {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(intl.NumberFormat.compactCurrency()));
    }
    static _getFormatter(numberFormat) {
      return dart.fn(value => numberFormat.format(value), numToString());
    }
    formatValue(value) {
      core.num._check(value);
      return this.formatter(value);
    }
    _equals(other) {
      if (other == null) return false;
      return tick_formatter.NumericTickFormatter.is(other) && dart.equals(this.formatter, other.formatter);
    }
    get hashCode() {
      return dart.hashCode(this.formatter);
    }
  };
  (tick_formatter.NumericTickFormatter._internal = function(formatter) {
    this[formatter$] = formatter;
    tick_formatter.NumericTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.NumericTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.NumericTickFormatter);
  dart.setMethodSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.NumericTickFormatter.__proto__),
    formatValue: dart.fnType(core.String, [core.Object])
  }));
  dart.setLibraryUri(tick_formatter.NumericTickFormatter, "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart");
  dart.setFieldSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getFields(tick_formatter.NumericTickFormatter.__proto__),
    formatter: dart.finalFieldType(dart.fnType(core.String, [core.num]))
  }));
  dart.defineExtensionMethods(tick_formatter.NumericTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.NumericTickFormatter, ['hashCode']);
  const _is_DatumDetails_default = Symbol('_is_DatumDetails_default');
  const datum$ = dart.privateName(datum_details, "DatumDetails.datum");
  const index$ = dart.privateName(datum_details, "DatumDetails.index");
  const domain$ = dart.privateName(datum_details, "DatumDetails.domain");
  const domainLowerBound$ = dart.privateName(datum_details, "DatumDetails.domainLowerBound");
  const domainUpperBound$ = dart.privateName(datum_details, "DatumDetails.domainUpperBound");
  const measure$ = dart.privateName(datum_details, "DatumDetails.measure");
  const measureLowerBound$ = dart.privateName(datum_details, "DatumDetails.measureLowerBound");
  const measureUpperBound$ = dart.privateName(datum_details, "DatumDetails.measureUpperBound");
  const measureOffset$ = dart.privateName(datum_details, "DatumDetails.measureOffset");
  const rawMeasure$ = dart.privateName(datum_details, "DatumDetails.rawMeasure");
  const rawMeasureLowerBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureLowerBound");
  const rawMeasureUpperBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureUpperBound");
  const series$0 = dart.privateName(datum_details, "DatumDetails.series");
  const color$0 = dart.privateName(datum_details, "DatumDetails.color");
  const fillColor$ = dart.privateName(datum_details, "DatumDetails.fillColor");
  const areaColor$ = dart.privateName(datum_details, "DatumDetails.areaColor");
  const dashPattern$ = dart.privateName(datum_details, "DatumDetails.dashPattern");
  const chartPosition$ = dart.privateName(datum_details, "DatumDetails.chartPosition");
  const chartPositionLower$ = dart.privateName(datum_details, "DatumDetails.chartPositionLower");
  const chartPositionUpper$ = dart.privateName(datum_details, "DatumDetails.chartPositionUpper");
  const domainDistance$ = dart.privateName(datum_details, "DatumDetails.domainDistance");
  const measureDistance$ = dart.privateName(datum_details, "DatumDetails.measureDistance");
  const relativeDistance$ = dart.privateName(datum_details, "DatumDetails.relativeDistance");
  const radiusPx$ = dart.privateName(datum_details, "DatumDetails.radiusPx");
  const symbolRenderer$ = dart.privateName(datum_details, "DatumDetails.symbolRenderer");
  const strokeWidthPx$ = dart.privateName(datum_details, "DatumDetails.strokeWidthPx");
  const domainFormatter$ = dart.privateName(datum_details, "DatumDetails.domainFormatter");
  const measureFormatter$ = dart.privateName(datum_details, "DatumDetails.measureFormatter");
  datum_details.DatumDetails$ = dart.generic(D => {
    class DatumDetails extends core.Object {
      get datum() {
        return this[datum$];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        return this[index$];
      }
      set index(value) {
        super.index = value;
      }
      get domain() {
        return this[domain$];
      }
      set domain(value) {
        super.domain = value;
      }
      get domainLowerBound() {
        return this[domainLowerBound$];
      }
      set domainLowerBound(value) {
        super.domainLowerBound = value;
      }
      get domainUpperBound() {
        return this[domainUpperBound$];
      }
      set domainUpperBound(value) {
        super.domainUpperBound = value;
      }
      get measure() {
        return this[measure$];
      }
      set measure(value) {
        super.measure = value;
      }
      get measureLowerBound() {
        return this[measureLowerBound$];
      }
      set measureLowerBound(value) {
        super.measureLowerBound = value;
      }
      get measureUpperBound() {
        return this[measureUpperBound$];
      }
      set measureUpperBound(value) {
        super.measureUpperBound = value;
      }
      get measureOffset() {
        return this[measureOffset$];
      }
      set measureOffset(value) {
        super.measureOffset = value;
      }
      get rawMeasure() {
        return this[rawMeasure$];
      }
      set rawMeasure(value) {
        super.rawMeasure = value;
      }
      get rawMeasureLowerBound() {
        return this[rawMeasureLowerBound$];
      }
      set rawMeasureLowerBound(value) {
        super.rawMeasureLowerBound = value;
      }
      get rawMeasureUpperBound() {
        return this[rawMeasureUpperBound$];
      }
      set rawMeasureUpperBound(value) {
        super.rawMeasureUpperBound = value;
      }
      get series() {
        return this[series$0];
      }
      set series(value) {
        super.series = value;
      }
      get color() {
        return this[color$0];
      }
      set color(value) {
        super.color = value;
      }
      get fillColor() {
        return this[fillColor$];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get areaColor() {
        return this[areaColor$];
      }
      set areaColor(value) {
        super.areaColor = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get chartPosition() {
        return this[chartPosition$];
      }
      set chartPosition(value) {
        super.chartPosition = value;
      }
      get chartPositionLower() {
        return this[chartPositionLower$];
      }
      set chartPositionLower(value) {
        super.chartPositionLower = value;
      }
      get chartPositionUpper() {
        return this[chartPositionUpper$];
      }
      set chartPositionUpper(value) {
        super.chartPositionUpper = value;
      }
      get domainDistance() {
        return this[domainDistance$];
      }
      set domainDistance(value) {
        super.domainDistance = value;
      }
      get measureDistance() {
        return this[measureDistance$];
      }
      set measureDistance(value) {
        super.measureDistance = value;
      }
      get relativeDistance() {
        return this[relativeDistance$];
      }
      set relativeDistance(value) {
        super.relativeDistance = value;
      }
      get radiusPx() {
        return this[radiusPx$];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get domainFormatter() {
        return this[domainFormatter$];
      }
      set domainFormatter(value) {
        this[domainFormatter$] = value;
      }
      get measureFormatter() {
        return this[measureFormatter$];
      }
      set measureFormatter(value) {
        this[measureFormatter$] = value;
      }
      static from(other, opts) {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15, t0$16, t0$17, t0$18, t0$19, t0$20, t0$21, t0$22, t0$23, t0$24;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let index = opts && 'index' in opts ? opts.index : null;
        let domain = opts && 'domain' in opts ? opts.domain : null;
        let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
        let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
        let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
        let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
        let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
        let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
        let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
        let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
        let series = opts && 'series' in opts ? opts.series : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
        let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
        let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
        let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
        let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
        let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
        let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
        let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        return new (datum_details.DatumDetails$(D)).new({datum: (t0 = datum, t0 == null ? other.datum : t0), index: (t0$ = index, t0$ == null ? other.index : t0$), domain: (t0$0 = domain, t0$0 == null ? other.domain : t0$0), domainFormatter: (t0$1 = domainFormatter, t0$1 == null ? dart.fnType(core.String, [D])._check(other.domainFormatter) : t0$1), domainLowerBound: (t0$2 = domainLowerBound, t0$2 == null ? other.domainLowerBound : t0$2), domainUpperBound: (t0$3 = domainUpperBound, t0$3 == null ? other.domainUpperBound : t0$3), measure: (t0$4 = measure, t0$4 == null ? other.measure : t0$4), measureFormatter: (t0$5 = measureFormatter, t0$5 == null ? other.measureFormatter : t0$5), measureLowerBound: (t0$6 = measureLowerBound, t0$6 == null ? other.measureLowerBound : t0$6), measureUpperBound: (t0$7 = measureUpperBound, t0$7 == null ? other.measureUpperBound : t0$7), measureOffset: (t0$8 = measureOffset, t0$8 == null ? other.measureOffset : t0$8), rawMeasure: (t0$9 = rawMeasure, t0$9 == null ? other.rawMeasure : t0$9), rawMeasureLowerBound: (t0$10 = rawMeasureLowerBound, t0$10 == null ? other.rawMeasureLowerBound : t0$10), rawMeasureUpperBound: (t0$11 = rawMeasureUpperBound, t0$11 == null ? other.rawMeasureUpperBound : t0$11), series: (t0$12 = series, t0$12 == null ? other.series : t0$12), color: (t0$13 = color, t0$13 == null ? other.color : t0$13), fillColor: (t0$14 = fillColor, t0$14 == null ? other.fillColor : t0$14), areaColor: (t0$15 = areaColor, t0$15 == null ? other.areaColor : t0$15), dashPattern: (t0$16 = dashPattern, t0$16 == null ? other.dashPattern : t0$16), chartPosition: (t0$17 = chartPosition, t0$17 == null ? other.chartPosition : t0$17), chartPositionLower: (t0$18 = chartPositionLower, t0$18 == null ? other.chartPositionLower : t0$18), chartPositionUpper: (t0$19 = chartPositionUpper, t0$19 == null ? other.chartPositionUpper : t0$19), domainDistance: (t0$20 = domainDistance, t0$20 == null ? other.domainDistance : t0$20), measureDistance: (t0$21 = measureDistance, t0$21 == null ? other.measureDistance : t0$21), radiusPx: (t0$22 = radiusPx, t0$22 == null ? other.radiusPx : t0$22), symbolRenderer: (t0$23 = symbolRenderer, t0$23 == null ? other.symbolRenderer : t0$23), strokeWidthPx: (t0$24 = radiusPx, t0$24 == null ? other.strokeWidthPx : t0$24)});
      }
      get formattedDomain() {
        return this.domainFormatter != null ? this.domainFormatter(this.domain) : dart.toString(this.domain);
      }
      get formattedMeasure() {
        return this.measureFormatter != null ? this.measureFormatter(this.measure) : dart.toString(this.measure);
      }
    }
    (DatumDetails.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
      let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
      let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
      let measure = opts && 'measure' in opts ? opts.measure : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
      let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
      let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
      let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
      let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
      let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
      let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
      let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
      let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
      let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
      let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this[datum$] = datum;
      this[index$] = index;
      this[domain$] = domain;
      this[domainFormatter$] = domainFormatter;
      this[domainLowerBound$] = domainLowerBound;
      this[domainUpperBound$] = domainUpperBound;
      this[measure$] = measure;
      this[measureFormatter$] = measureFormatter;
      this[measureLowerBound$] = measureLowerBound;
      this[measureUpperBound$] = measureUpperBound;
      this[measureOffset$] = measureOffset;
      this[rawMeasure$] = rawMeasure;
      this[rawMeasureLowerBound$] = rawMeasureLowerBound;
      this[rawMeasureUpperBound$] = rawMeasureUpperBound;
      this[series$0] = series;
      this[color$0] = color;
      this[fillColor$] = fillColor;
      this[areaColor$] = areaColor;
      this[dashPattern$] = dashPattern;
      this[chartPosition$] = chartPosition;
      this[chartPositionLower$] = chartPositionLower;
      this[chartPositionUpper$] = chartPositionUpper;
      this[domainDistance$] = domainDistance;
      this[measureDistance$] = measureDistance;
      this[relativeDistance$] = relativeDistance;
      this[radiusPx$] = radiusPx;
      this[symbolRenderer$] = symbolRenderer;
      this[strokeWidthPx$] = strokeWidthPx;
      ;
    }).prototype = DatumDetails.prototype;
    dart.addTypeTests(DatumDetails);
    DatumDetails.prototype[_is_DatumDetails_default] = true;
    dart.setGetterSignature(DatumDetails, () => ({
      __proto__: dart.getGetters(DatumDetails.__proto__),
      formattedDomain: core.String,
      formattedMeasure: core.String
    }));
    dart.setLibraryUri(DatumDetails, "package:charts_common/src/chart/common/datum_details.dart");
    dart.setFieldSignature(DatumDetails, () => ({
      __proto__: dart.getFields(DatumDetails.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      index: dart.finalFieldType(core.int),
      domain: dart.finalFieldType(D),
      domainLowerBound: dart.finalFieldType(D),
      domainUpperBound: dart.finalFieldType(D),
      measure: dart.finalFieldType(core.num),
      measureLowerBound: dart.finalFieldType(core.num),
      measureUpperBound: dart.finalFieldType(core.num),
      measureOffset: dart.finalFieldType(core.num),
      rawMeasure: dart.finalFieldType(core.num),
      rawMeasureLowerBound: dart.finalFieldType(core.num),
      rawMeasureUpperBound: dart.finalFieldType(core.num),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      color: dart.finalFieldType(color$.Color),
      fillColor: dart.finalFieldType(color$.Color),
      areaColor: dart.finalFieldType(color$.Color),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      chartPosition: dart.finalFieldType(math.Point$(core.double)),
      chartPositionLower: dart.finalFieldType(math.Point$(core.double)),
      chartPositionUpper: dart.finalFieldType(math.Point$(core.double)),
      domainDistance: dart.finalFieldType(core.double),
      measureDistance: dart.finalFieldType(core.double),
      relativeDistance: dart.finalFieldType(core.double),
      radiusPx: dart.finalFieldType(core.double),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      strokeWidthPx: dart.finalFieldType(core.double),
      domainFormatter: dart.fieldType(dart.fnType(core.String, [D])),
      measureFormatter: dart.fieldType(dart.fnType(core.String, [core.num]))
    }));
    return DatumDetails;
  });
  datum_details.DatumDetails = datum_details.DatumDetails$();
  dart.addTypeTests(datum_details.DatumDetails, _is_DatumDetails_default);
  const _attrs = dart.privateName(processed_series, "_attrs");
  const _is_ImmutableSeries_default = Symbol('_is_ImmutableSeries_default');
  const keyFn = dart.privateName(processed_series, "ImmutableSeries.keyFn");
  const insideLabelStyleAccessorFn = dart.privateName(processed_series, "ImmutableSeries.insideLabelStyleAccessorFn");
  const outsideLabelStyleAccessorFn = dart.privateName(processed_series, "ImmutableSeries.outsideLabelStyleAccessorFn");
  processed_series.ImmutableSeries$ = dart.generic(D => {
    class ImmutableSeries extends core.Object {
      get keyFn() {
        return this[keyFn];
      }
      set keyFn(value) {
        this[keyFn] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn] = value;
      }
    }
    (ImmutableSeries.new = function() {
      this[keyFn] = null;
      this[insideLabelStyleAccessorFn] = null;
      this[outsideLabelStyleAccessorFn] = null;
      ;
    }).prototype = ImmutableSeries.prototype;
    dart.addTypeTests(ImmutableSeries);
    ImmutableSeries.prototype[_is_ImmutableSeries_default] = true;
    dart.setLibraryUri(ImmutableSeries, "package:charts_common/src/chart/common/processed_series.dart");
    dart.setFieldSignature(ImmutableSeries, () => ({
      __proto__: dart.getFields(ImmutableSeries.__proto__),
      keyFn: dart.fieldType(dart.fnType(core.String, [core.int])),
      insideLabelStyleAccessorFn: dart.fieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int])),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int]))
    }));
    return ImmutableSeries;
  });
  processed_series.ImmutableSeries = processed_series.ImmutableSeries$();
  dart.addTypeTests(processed_series.ImmutableSeries, _is_ImmutableSeries_default);
  const _is_MutableSeries_default = Symbol('_is_MutableSeries_default');
  const id = dart.privateName(processed_series, "MutableSeries.id");
  const displayName = dart.privateName(processed_series, "MutableSeries.displayName");
  const overlaySeries = dart.privateName(processed_series, "MutableSeries.overlaySeries");
  const seriesCategory = dart.privateName(processed_series, "MutableSeries.seriesCategory");
  const seriesColor = dart.privateName(processed_series, "MutableSeries.seriesColor");
  const seriesIndex = dart.privateName(processed_series, "MutableSeries.seriesIndex");
  const seriesMeasureTotal = dart.privateName(processed_series, "MutableSeries.seriesMeasureTotal");
  const data = dart.privateName(processed_series, "MutableSeries.data");
  const keyFn$ = dart.privateName(processed_series, "MutableSeries.keyFn");
  const domainFn = dart.privateName(processed_series, "MutableSeries.domainFn");
  const domainFormatterFn = dart.privateName(processed_series, "MutableSeries.domainFormatterFn");
  const domainLowerBoundFn = dart.privateName(processed_series, "MutableSeries.domainLowerBoundFn");
  const domainUpperBoundFn = dart.privateName(processed_series, "MutableSeries.domainUpperBoundFn");
  const measureFn = dart.privateName(processed_series, "MutableSeries.measureFn");
  const measureFormatterFn = dart.privateName(processed_series, "MutableSeries.measureFormatterFn");
  const measureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.measureLowerBoundFn");
  const measureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.measureUpperBoundFn");
  const measureOffsetFn = dart.privateName(processed_series, "MutableSeries.measureOffsetFn");
  const rawMeasureFn = dart.privateName(processed_series, "MutableSeries.rawMeasureFn");
  const rawMeasureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureLowerBoundFn");
  const rawMeasureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureUpperBoundFn");
  const areaColorFn = dart.privateName(processed_series, "MutableSeries.areaColorFn");
  const colorFn = dart.privateName(processed_series, "MutableSeries.colorFn");
  const dashPatternFn = dart.privateName(processed_series, "MutableSeries.dashPatternFn");
  const fillColorFn = dart.privateName(processed_series, "MutableSeries.fillColorFn");
  const fillPatternFn = dart.privateName(processed_series, "MutableSeries.fillPatternFn");
  const patternColorFn = dart.privateName(processed_series, "MutableSeries.patternColorFn");
  const radiusPxFn = dart.privateName(processed_series, "MutableSeries.radiusPxFn");
  const strokeWidthPxFn = dart.privateName(processed_series, "MutableSeries.strokeWidthPxFn");
  const labelAccessorFn = dart.privateName(processed_series, "MutableSeries.labelAccessorFn");
  const insideLabelStyleAccessorFn$ = dart.privateName(processed_series, "MutableSeries.insideLabelStyleAccessorFn");
  const outsideLabelStyleAccessorFn$ = dart.privateName(processed_series, "MutableSeries.outsideLabelStyleAccessorFn");
  const measureAxis = dart.privateName(processed_series, "MutableSeries.measureAxis");
  const domainAxis = dart.privateName(processed_series, "MutableSeries.domainAxis");
  processed_series.MutableSeries$ = dart.generic(D => {
    let intToD = () => (intToD = dart.constFn(dart.fnType(D, [core.int])))();
    class MutableSeries extends processed_series.ImmutableSeries$(D) {
      get id() {
        return this[id];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName];
      }
      set displayName(value) {
        this[displayName] = value;
      }
      get overlaySeries() {
        return this[overlaySeries];
      }
      set overlaySeries(value) {
        this[overlaySeries] = value;
      }
      get seriesCategory() {
        return this[seriesCategory];
      }
      set seriesCategory(value) {
        this[seriesCategory] = value;
      }
      get seriesColor() {
        return this[seriesColor];
      }
      set seriesColor(value) {
        this[seriesColor] = value;
      }
      get seriesIndex() {
        return this[seriesIndex];
      }
      set seriesIndex(value) {
        this[seriesIndex] = value;
      }
      get seriesMeasureTotal() {
        return this[seriesMeasureTotal];
      }
      set seriesMeasureTotal(value) {
        this[seriesMeasureTotal] = value;
      }
      get data() {
        return this[data];
      }
      set data(value) {
        this[data] = value;
      }
      get keyFn() {
        return this[keyFn$];
      }
      set keyFn(value) {
        this[keyFn$] = value;
      }
      get domainFn() {
        return this[domainFn];
      }
      set domainFn(value) {
        this[domainFn] = intToD()._check(value);
      }
      get domainFormatterFn() {
        return this[domainFormatterFn];
      }
      set domainFormatterFn(value) {
        this[domainFormatterFn] = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn];
      }
      set domainLowerBoundFn(value) {
        this[domainLowerBoundFn] = intToD()._check(value);
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn];
      }
      set domainUpperBoundFn(value) {
        this[domainUpperBoundFn] = intToD()._check(value);
      }
      get measureFn() {
        return this[measureFn];
      }
      set measureFn(value) {
        this[measureFn] = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn];
      }
      set measureFormatterFn(value) {
        this[measureFormatterFn] = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn];
      }
      set measureLowerBoundFn(value) {
        this[measureLowerBoundFn] = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn];
      }
      set measureUpperBoundFn(value) {
        this[measureUpperBoundFn] = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn];
      }
      set measureOffsetFn(value) {
        this[measureOffsetFn] = value;
      }
      get rawMeasureFn() {
        return this[rawMeasureFn];
      }
      set rawMeasureFn(value) {
        this[rawMeasureFn] = value;
      }
      get rawMeasureLowerBoundFn() {
        return this[rawMeasureLowerBoundFn];
      }
      set rawMeasureLowerBoundFn(value) {
        this[rawMeasureLowerBoundFn] = value;
      }
      get rawMeasureUpperBoundFn() {
        return this[rawMeasureUpperBoundFn];
      }
      set rawMeasureUpperBoundFn(value) {
        this[rawMeasureUpperBoundFn] = value;
      }
      get areaColorFn() {
        return this[areaColorFn];
      }
      set areaColorFn(value) {
        this[areaColorFn] = value;
      }
      get colorFn() {
        return this[colorFn];
      }
      set colorFn(value) {
        this[colorFn] = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn];
      }
      set dashPatternFn(value) {
        this[dashPatternFn] = value;
      }
      get fillColorFn() {
        return this[fillColorFn];
      }
      set fillColorFn(value) {
        this[fillColorFn] = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn];
      }
      set fillPatternFn(value) {
        this[fillPatternFn] = value;
      }
      get patternColorFn() {
        return this[patternColorFn];
      }
      set patternColorFn(value) {
        this[patternColorFn] = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn];
      }
      set radiusPxFn(value) {
        this[radiusPxFn] = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn];
      }
      set strokeWidthPxFn(value) {
        this[strokeWidthPxFn] = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn];
      }
      set labelAccessorFn(value) {
        this[labelAccessorFn] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn$] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn$] = value;
      }
      get measureAxis() {
        return this[measureAxis];
      }
      set measureAxis(value) {
        this[measureAxis] = value;
      }
      get domainAxis() {
        return this[domainAxis];
      }
      set domainAxis(value) {
        this[domainAxis] = value;
      }
      setAttr(R, key, value) {
        this[_attrs].setAttr(R, key, value);
      }
      getAttr(R, key) {
        return this[_attrs].getAttr(R, key);
      }
      _equals(other) {
        if (other == null) return false;
        return processed_series.MutableSeries.is(other) && dart.equals(this.data, other.data) && this.id == other.id;
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.data)) * 31 + dart.hashCode(this.id);
      }
    }
    (MutableSeries.new = function(series) {
      let t0, t0$;
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn$] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn$] = null;
      this[outsideLabelStyleAccessorFn$] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = series.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = (t0 = series.displayName, t0 == null ? series.id : t0);
      this.overlaySeries = series.overlaySeries;
      this.seriesCategory = series.seriesCategory;
      this.seriesColor = series.seriesColor;
      this.data = series.data;
      this.keyFn = series.keyFn;
      this.domainFn = series.domainFn;
      this.domainLowerBoundFn = series.domainLowerBoundFn;
      this.domainUpperBoundFn = series.domainUpperBoundFn;
      this.measureFn = series.measureFn;
      this.measureFormatterFn = series.measureFormatterFn;
      this.measureLowerBoundFn = series.measureLowerBoundFn;
      this.measureUpperBoundFn = series.measureUpperBoundFn;
      this.measureOffsetFn = series.measureOffsetFn;
      this.rawMeasureFn = series.measureFn;
      this.rawMeasureLowerBoundFn = series.measureLowerBoundFn;
      this.rawMeasureUpperBoundFn = series.measureUpperBoundFn;
      this.seriesMeasureTotal = 0;
      for (let i = 0; i < dart.notNull(this.data[$length]); i = i + 1) {
        let measure = this.measureFn(i);
        if (measure != null) {
          this.seriesMeasureTotal = dart.notNull(this.seriesMeasureTotal) + dart.notNull(measure);
        }
      }
      this.areaColorFn = series.areaColorFn;
      this.colorFn = series.colorFn;
      this.dashPatternFn = series.dashPatternFn;
      this.fillColorFn = series.fillColorFn;
      this.fillPatternFn = series.fillPatternFn;
      this.patternColorFn = series.patternColorFn;
      this.labelAccessorFn = (t0$ = series.labelAccessorFn, t0$ == null ? dart.fn(i => dart.toString(this.domainFn(i)), intToString()) : t0$);
      this.insideLabelStyleAccessorFn = series.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = series.outsideLabelStyleAccessorFn;
      this.radiusPxFn = series.radiusPxFn;
      this.strokeWidthPxFn = series.strokeWidthPxFn;
      this[_attrs].mergeFrom(series.attributes);
    }).prototype = MutableSeries.prototype;
    (MutableSeries.clone = function(other) {
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn$] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn$] = null;
      this[outsideLabelStyleAccessorFn$] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = other.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = other.displayName;
      this.overlaySeries = other.overlaySeries;
      this.seriesCategory = other.seriesCategory;
      this.seriesColor = other.seriesColor;
      this.seriesIndex = other.seriesIndex;
      this.data = other.data;
      this.keyFn = other.keyFn;
      this.domainFn = other.domainFn;
      this.domainLowerBoundFn = other.domainLowerBoundFn;
      this.domainUpperBoundFn = other.domainUpperBoundFn;
      this.measureFn = other.measureFn;
      this.measureFormatterFn = other.measureFormatterFn;
      this.measureLowerBoundFn = other.measureLowerBoundFn;
      this.measureUpperBoundFn = other.measureUpperBoundFn;
      this.measureOffsetFn = other.measureOffsetFn;
      this.rawMeasureFn = other.rawMeasureFn;
      this.rawMeasureLowerBoundFn = other.rawMeasureLowerBoundFn;
      this.rawMeasureUpperBoundFn = other.rawMeasureUpperBoundFn;
      this.seriesMeasureTotal = other.seriesMeasureTotal;
      this.areaColorFn = other.areaColorFn;
      this.colorFn = other.colorFn;
      this.dashPatternFn = other.dashPatternFn;
      this.fillColorFn = other.fillColorFn;
      this.fillPatternFn = other.fillPatternFn;
      this.patternColorFn = other.patternColorFn;
      this.labelAccessorFn = other.labelAccessorFn;
      this.insideLabelStyleAccessorFn = other.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = other.outsideLabelStyleAccessorFn;
      this.radiusPxFn = other.radiusPxFn;
      this.strokeWidthPxFn = other.strokeWidthPxFn;
      this[_attrs].mergeFrom(other[_attrs]);
      this.measureAxis = other.measureAxis;
      this.domainAxis = other.domainAxis;
    }).prototype = MutableSeries.prototype;
    dart.addTypeTests(MutableSeries);
    MutableSeries.prototype[_is_MutableSeries_default] = true;
    dart.setMethodSignature(MutableSeries, () => ({
      __proto__: dart.getMethods(MutableSeries.__proto__),
      setAttr: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]]),
      getAttr: dart.gFnType(R => [R, [series$.AttributeKey$(R)]]),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(MutableSeries, "package:charts_common/src/chart/common/processed_series.dart");
    dart.setFieldSignature(MutableSeries, () => ({
      __proto__: dart.getFields(MutableSeries.__proto__),
      id: dart.finalFieldType(core.String),
      displayName: dart.fieldType(core.String),
      overlaySeries: dart.fieldType(core.bool),
      seriesCategory: dart.fieldType(core.String),
      seriesColor: dart.fieldType(color$.Color),
      seriesIndex: dart.fieldType(core.int),
      seriesMeasureTotal: dart.fieldType(core.num),
      data: dart.fieldType(core.List),
      keyFn: dart.fieldType(dart.fnType(core.String, [core.int])),
      domainFn: dart.fieldType(dart.fnType(D, [core.int])),
      domainFormatterFn: dart.fieldType(dart.fnType(dart.fnType(core.String, [D]), [core.int])),
      domainLowerBoundFn: dart.fieldType(dart.fnType(D, [core.int])),
      domainUpperBoundFn: dart.fieldType(dart.fnType(D, [core.int])),
      measureFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      measureFormatterFn: dart.fieldType(dart.fnType(dart.fnType(core.String, [core.num]), [core.int])),
      measureLowerBoundFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      measureUpperBoundFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      measureOffsetFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      rawMeasureFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      rawMeasureLowerBoundFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      rawMeasureUpperBoundFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      areaColorFn: dart.fieldType(dart.fnType(color$.Color, [core.int])),
      colorFn: dart.fieldType(dart.fnType(color$.Color, [core.int])),
      dashPatternFn: dart.fieldType(dart.fnType(core.List$(core.int), [core.int])),
      fillColorFn: dart.fieldType(dart.fnType(color$.Color, [core.int])),
      fillPatternFn: dart.fieldType(dart.fnType(chart_canvas.FillPatternType, [core.int])),
      patternColorFn: dart.fieldType(dart.fnType(color$.Color, [core.int])),
      radiusPxFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      strokeWidthPxFn: dart.fieldType(dart.fnType(core.num, [core.int])),
      labelAccessorFn: dart.fieldType(dart.fnType(core.String, [core.int])),
      insideLabelStyleAccessorFn: dart.fieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int])),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int])),
      [_attrs]: dart.finalFieldType(series$.SeriesAttributes),
      measureAxis: dart.fieldType(axis$.Axis),
      domainAxis: dart.fieldType(axis$.Axis)
    }));
    dart.defineExtensionMethods(MutableSeries, ['_equals']);
    dart.defineExtensionAccessors(MutableSeries, ['hashCode']);
    return MutableSeries;
  });
  processed_series.MutableSeries = processed_series.MutableSeries$();
  dart.addTypeTests(processed_series.MutableSeries, _is_MutableSeries_default);
  chart_canvas.ChartCanvas = class ChartCanvas extends core.Object {};
  (chart_canvas.ChartCanvas.new = function() {
    ;
  }).prototype = chart_canvas.ChartCanvas.prototype;
  dart.addTypeTests(chart_canvas.ChartCanvas);
  dart.setLibraryUri(chart_canvas.ChartCanvas, "package:charts_common/src/chart/common/chart_canvas.dart");
  const _name$0 = dart.privateName(chart_canvas, "_name");
  let C7;
  let C8;
  let C9;
  chart_canvas.FillPatternType = class FillPatternType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (chart_canvas.FillPatternType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = chart_canvas.FillPatternType.prototype;
  dart.addTypeTests(chart_canvas.FillPatternType);
  dart.setLibraryUri(chart_canvas.FillPatternType, "package:charts_common/src/chart/common/chart_canvas.dart");
  dart.setFieldSignature(chart_canvas.FillPatternType, () => ({
    __proto__: dart.getFields(chart_canvas.FillPatternType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_canvas.FillPatternType, ['toString']);
  chart_canvas.FillPatternType.forwardHatch = C7 || CT.C7;
  chart_canvas.FillPatternType.solid = C8 || CT.C8;
  chart_canvas.FillPatternType.values = C9 || CT.C9;
  chart_canvas.getAnimatedColor = function getAnimatedColor(previous, target, animationPercent) {
    let r = ((dart.notNull(target.r) - dart.notNull(previous.r)) * dart.notNull(animationPercent) + dart.notNull(previous.r))[$round]();
    let g = ((dart.notNull(target.g) - dart.notNull(previous.g)) * dart.notNull(animationPercent) + dart.notNull(previous.g))[$round]();
    let b = ((dart.notNull(target.b) - dart.notNull(previous.b)) * dart.notNull(animationPercent) + dart.notNull(previous.b))[$round]();
    let a = ((dart.notNull(target.a) - dart.notNull(previous.a)) * dart.notNull(animationPercent) + dart.notNull(previous.a))[$round]();
    return new color$.Color.new({a: a, r: r, g: g, b: b});
  };
  const bounds$ = dart.privateName(canvas_shapes, "CanvasRect.bounds");
  const dashPattern$0 = dart.privateName(canvas_shapes, "CanvasRect.dashPattern");
  const fill$ = dart.privateName(canvas_shapes, "CanvasRect.fill");
  const pattern$ = dart.privateName(canvas_shapes, "CanvasRect.pattern");
  const stroke$ = dart.privateName(canvas_shapes, "CanvasRect.stroke");
  const strokeWidthPx$0 = dart.privateName(canvas_shapes, "CanvasRect.strokeWidthPx");
  canvas_shapes.CanvasRect = class CanvasRect extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get dashPattern() {
      return this[dashPattern$0];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get pattern() {
      return this[pattern$];
    }
    set pattern(value) {
      super.pattern = value;
    }
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx$0];
    }
    set strokeWidthPx(value) {
      super.strokeWidthPx = value;
    }
  };
  (canvas_shapes.CanvasRect.new = function(bounds, opts) {
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let pattern = opts && 'pattern' in opts ? opts.pattern : null;
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
    this[bounds$] = bounds;
    this[dashPattern$0] = dashPattern;
    this[fill$] = fill;
    this[pattern$] = pattern;
    this[stroke$] = stroke;
    this[strokeWidthPx$0] = strokeWidthPx;
    ;
  }).prototype = canvas_shapes.CanvasRect.prototype;
  dart.addTypeTests(canvas_shapes.CanvasRect);
  dart.setLibraryUri(canvas_shapes.CanvasRect, "package:charts_common/src/chart/common/canvas_shapes.dart");
  dart.setFieldSignature(canvas_shapes.CanvasRect, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasRect.__proto__),
    bounds: dart.finalFieldType(math.Rectangle$(core.int)),
    dashPattern: dart.finalFieldType(core.List$(core.int)),
    fill: dart.finalFieldType(color$.Color),
    pattern: dart.finalFieldType(chart_canvas.FillPatternType),
    stroke: dart.finalFieldType(color$.Color),
    strokeWidthPx: dart.finalFieldType(core.double)
  }));
  const segments$ = dart.privateName(canvas_shapes, "CanvasBarStack.segments");
  const radius$ = dart.privateName(canvas_shapes, "CanvasBarStack.radius");
  const stackedBarPadding$ = dart.privateName(canvas_shapes, "CanvasBarStack.stackedBarPadding");
  const roundTopLeft$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundTopLeft");
  const roundTopRight$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundTopRight");
  const roundBottomLeft$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundBottomLeft");
  const roundBottomRight$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundBottomRight");
  const fullStackRect$ = dart.privateName(canvas_shapes, "CanvasBarStack.fullStackRect");
  canvas_shapes.CanvasBarStack = class CanvasBarStack extends core.Object {
    get segments() {
      return this[segments$];
    }
    set segments(value) {
      super.segments = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get stackedBarPadding() {
      return this[stackedBarPadding$];
    }
    set stackedBarPadding(value) {
      super.stackedBarPadding = value;
    }
    get roundTopLeft() {
      return this[roundTopLeft$];
    }
    set roundTopLeft(value) {
      super.roundTopLeft = value;
    }
    get roundTopRight() {
      return this[roundTopRight$];
    }
    set roundTopRight(value) {
      super.roundTopRight = value;
    }
    get roundBottomLeft() {
      return this[roundBottomLeft$];
    }
    set roundBottomLeft(value) {
      super.roundBottomLeft = value;
    }
    get roundBottomRight() {
      return this[roundBottomRight$];
    }
    set roundBottomRight(value) {
      super.roundBottomRight = value;
    }
    get fullStackRect() {
      return this[fullStackRect$];
    }
    set fullStackRect(value) {
      super.fullStackRect = value;
    }
    static new(segments, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let stackedBarPadding = opts && 'stackedBarPadding' in opts ? opts.stackedBarPadding : null;
      let roundTopLeft = opts && 'roundTopLeft' in opts ? opts.roundTopLeft : null;
      let roundTopRight = opts && 'roundTopRight' in opts ? opts.roundTopRight : null;
      let roundBottomLeft = opts && 'roundBottomLeft' in opts ? opts.roundBottomLeft : null;
      let roundBottomRight = opts && 'roundBottomRight' in opts ? opts.roundBottomRight : null;
      let firstBarBounds = segments[$first].bounds;
      let left = firstBarBounds[$left];
      let top = firstBarBounds[$top];
      let right = firstBarBounds[$right];
      let bottom = firstBarBounds[$bottom];
      for (let barIndex = 1; barIndex < dart.notNull(segments[$length]); barIndex = barIndex + 1) {
        let bounds = segments[$_get](barIndex).bounds;
        left = math.min(core.int, left, bounds[$left]);
        top = math.min(core.int, top, bounds[$top]);
        right = math.max(core.int, right, bounds[$right]);
        bottom = math.max(core.int, bottom, bounds[$bottom]);
      }
      let width = dart.notNull(right) - dart.notNull(left);
      let height = dart.notNull(bottom) - dart.notNull(top);
      let fullStackRect = new (RectangleOfint()).new(left, top, width, height);
      return new canvas_shapes.CanvasBarStack._internal(segments, {radius: radius, stackedBarPadding: stackedBarPadding, roundTopLeft: roundTopLeft, roundTopRight: roundTopRight, roundBottomLeft: roundBottomLeft, roundBottomRight: roundBottomRight, fullStackRect: fullStackRect});
    }
  };
  (canvas_shapes.CanvasBarStack._internal = function(segments, opts) {
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let stackedBarPadding = opts && 'stackedBarPadding' in opts ? opts.stackedBarPadding : 1;
    let roundTopLeft = opts && 'roundTopLeft' in opts ? opts.roundTopLeft : false;
    let roundTopRight = opts && 'roundTopRight' in opts ? opts.roundTopRight : false;
    let roundBottomLeft = opts && 'roundBottomLeft' in opts ? opts.roundBottomLeft : false;
    let roundBottomRight = opts && 'roundBottomRight' in opts ? opts.roundBottomRight : false;
    let fullStackRect = opts && 'fullStackRect' in opts ? opts.fullStackRect : null;
    this[segments$] = segments;
    this[radius$] = radius;
    this[stackedBarPadding$] = stackedBarPadding;
    this[roundTopLeft$] = roundTopLeft;
    this[roundTopRight$] = roundTopRight;
    this[roundBottomLeft$] = roundBottomLeft;
    this[roundBottomRight$] = roundBottomRight;
    this[fullStackRect$] = fullStackRect;
    ;
  }).prototype = canvas_shapes.CanvasBarStack.prototype;
  dart.addTypeTests(canvas_shapes.CanvasBarStack);
  dart.setLibraryUri(canvas_shapes.CanvasBarStack, "package:charts_common/src/chart/common/canvas_shapes.dart");
  dart.setFieldSignature(canvas_shapes.CanvasBarStack, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasBarStack.__proto__),
    segments: dart.finalFieldType(core.List$(canvas_shapes.CanvasRect)),
    radius: dart.finalFieldType(core.int),
    stackedBarPadding: dart.finalFieldType(core.int),
    roundTopLeft: dart.finalFieldType(core.bool),
    roundTopRight: dart.finalFieldType(core.bool),
    roundBottomLeft: dart.finalFieldType(core.bool),
    roundBottomRight: dart.finalFieldType(core.bool),
    fullStackRect: dart.finalFieldType(math.Rectangle$(core.int))
  }));
  const slices$ = dart.privateName(canvas_shapes, "CanvasPie.slices");
  const center$ = dart.privateName(canvas_shapes, "CanvasPie.center");
  const radius$0 = dart.privateName(canvas_shapes, "CanvasPie.radius");
  const innerRadius$ = dart.privateName(canvas_shapes, "CanvasPie.innerRadius");
  const stroke$0 = dart.privateName(canvas_shapes, "CanvasPie.stroke");
  const strokeWidthPx$1 = dart.privateName(canvas_shapes, "CanvasPie.strokeWidthPx");
  canvas_shapes.CanvasPie = class CanvasPie extends core.Object {
    get slices() {
      return this[slices$];
    }
    set slices(value) {
      super.slices = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      this[center$] = value;
    }
    get radius() {
      return this[radius$0];
    }
    set radius(value) {
      this[radius$0] = value;
    }
    get innerRadius() {
      return this[innerRadius$];
    }
    set innerRadius(value) {
      this[innerRadius$] = value;
    }
    get stroke() {
      return this[stroke$0];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx$1];
    }
    set strokeWidthPx(value) {
      this[strokeWidthPx$1] = value;
    }
  };
  (canvas_shapes.CanvasPie.new = function(slices, center, radius, innerRadius, opts) {
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
    this[slices$] = slices;
    this[center$] = center;
    this[radius$0] = radius;
    this[innerRadius$] = innerRadius;
    this[stroke$0] = stroke;
    this[strokeWidthPx$1] = strokeWidthPx;
    ;
  }).prototype = canvas_shapes.CanvasPie.prototype;
  dart.addTypeTests(canvas_shapes.CanvasPie);
  dart.setLibraryUri(canvas_shapes.CanvasPie, "package:charts_common/src/chart/common/canvas_shapes.dart");
  dart.setFieldSignature(canvas_shapes.CanvasPie, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasPie.__proto__),
    slices: dart.finalFieldType(core.List$(canvas_shapes.CanvasPieSlice)),
    center: dart.fieldType(math.Point$(core.num)),
    radius: dart.fieldType(core.double),
    innerRadius: dart.fieldType(core.double),
    stroke: dart.finalFieldType(color$.Color),
    strokeWidthPx: dart.fieldType(core.double)
  }));
  const startAngle$ = dart.privateName(canvas_shapes, "CanvasPieSlice.startAngle");
  const endAngle$ = dart.privateName(canvas_shapes, "CanvasPieSlice.endAngle");
  const fill$0 = dart.privateName(canvas_shapes, "CanvasPieSlice.fill");
  canvas_shapes.CanvasPieSlice = class CanvasPieSlice extends core.Object {
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      this[startAngle$] = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      this[endAngle$] = value;
    }
    get fill() {
      return this[fill$0];
    }
    set fill(value) {
      this[fill$0] = value;
    }
  };
  (canvas_shapes.CanvasPieSlice.new = function(startAngle, endAngle, opts) {
    let fill = opts && 'fill' in opts ? opts.fill : null;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[fill$0] = fill;
    ;
  }).prototype = canvas_shapes.CanvasPieSlice.prototype;
  dart.addTypeTests(canvas_shapes.CanvasPieSlice);
  dart.setLibraryUri(canvas_shapes.CanvasPieSlice, "package:charts_common/src/chart/common/canvas_shapes.dart");
  dart.setFieldSignature(canvas_shapes.CanvasPieSlice, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasPieSlice.__proto__),
    startAngle: dart.fieldType(core.double),
    endAngle: dart.fieldType(core.double),
    fill: dart.fieldType(color$.Color)
  }));
  const _darker = dart.privateName(color$, "_darker");
  const _lighter = dart.privateName(color$, "_lighter");
  const _get2CharHex = dart.privateName(color$, "_get2CharHex");
  const r$ = dart.privateName(color$, "Color.r");
  const g$ = dart.privateName(color$, "Color.g");
  const b$ = dart.privateName(color$, "Color.b");
  const a$ = dart.privateName(color$, "Color.a");
  const _darker$ = dart.privateName(color$, "Color._darker");
  const _lighter$ = dart.privateName(color$, "Color._lighter");
  let C10;
  let C11;
  let C12;
  color$.Color = class Color extends core.Object {
    get r() {
      return this[r$];
    }
    set r(value) {
      super.r = value;
    }
    get g() {
      return this[g$];
    }
    set g(value) {
      super.g = value;
    }
    get b() {
      return this[b$];
    }
    set b(value) {
      super.b = value;
    }
    get a() {
      return this[a$];
    }
    set a(value) {
      super.a = value;
    }
    get [_darker]() {
      return this[_darker$];
    }
    set [_darker](value) {
      super[_darker] = value;
    }
    get [_lighter]() {
      return this[_lighter$];
    }
    set [_lighter](value) {
      super[_lighter] = value;
    }
    static fromHex(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let str = code[$substring](1, 7);
      let bigint = core.int.parse(str, {radix: 16});
      let r = dart.notNull(bigint) >> 16 & 255;
      let g = dart.notNull(bigint) >> 8 & 255;
      let b = dart.notNull(bigint) & 255;
      let a = 255;
      return new color$.Color.new({r: r, g: g, b: b, a: a});
    }
    get darker() {
      let t0;
      t0 = this[_darker];
      return t0 == null ? new color$.Color.new({r: (dart.notNull(this.r) * 0.7)[$round](), g: (dart.notNull(this.g) * 0.7)[$round](), b: (dart.notNull(this.b) * 0.7)[$round](), a: this.a}) : t0;
    }
    get lighter() {
      let t0;
      t0 = this[_lighter];
      return t0 == null ? new color$.Color.new({r: dart.notNull(this.r) + ((255 - dart.notNull(this.r)) * 0.1)[$round](), g: dart.notNull(this.g) + ((255 - dart.notNull(this.g)) * 0.1)[$round](), b: dart.notNull(this.b) + ((255 - dart.notNull(this.b)) * 0.1)[$round](), a: this.a}) : t0;
    }
    _equals(other) {
      if (other == null) return false;
      return color$.Color.is(other) && other.r == this.r && other.g == this.g && other.b == this.b && other.a == this.a;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.r);
      hashcode = hashcode * 37 + dart.hashCode(this.g);
      hashcode = hashcode * 37 + dart.hashCode(this.b);
      hashcode = hashcode * 37 + dart.hashCode(this.a);
      return hashcode;
    }
    toString() {
      return this.rgbaHexString;
    }
    get rgbaHexString() {
      return "#" + dart.str(this[_get2CharHex](this.r)) + dart.str(this[_get2CharHex](this.g)) + dart.str(this[_get2CharHex](this.b)) + dart.str(this[_get2CharHex](this.a));
    }
    get hexString() {
      if (!(this.a === 255)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/common/color.dart", 102, 12, "a == 255");
      return "#" + dart.str(this[_get2CharHex](this.r)) + dart.str(this[_get2CharHex](this.g)) + dart.str(this[_get2CharHex](this.b));
    }
    [_get2CharHex](num) {
      let str = num[$toRadixString](16);
      while (str.length < 2) {
        str = "0" + str;
      }
      return str;
    }
  };
  (color$.Color.new = function(opts) {
    let r = opts && 'r' in opts ? opts.r : null;
    let g = opts && 'g' in opts ? opts.g : null;
    let b = opts && 'b' in opts ? opts.b : null;
    let a = opts && 'a' in opts ? opts.a : 255;
    let darker = opts && 'darker' in opts ? opts.darker : null;
    let lighter = opts && 'lighter' in opts ? opts.lighter : null;
    this[r$] = r;
    this[g$] = g;
    this[b$] = b;
    this[a$] = a;
    this[_darker$] = darker;
    this[_lighter$] = lighter;
    ;
  }).prototype = color$.Color.prototype;
  (color$.Color.fromOther = function(opts) {
    let t0, t0$;
    let color = opts && 'color' in opts ? opts.color : null;
    let darker = opts && 'darker' in opts ? opts.darker : null;
    let lighter = opts && 'lighter' in opts ? opts.lighter : null;
    this[r$] = color.r;
    this[g$] = color.g;
    this[b$] = color.b;
    this[a$] = color.a;
    this[_darker$] = (t0 = darker, t0 == null ? color[_darker] : t0);
    this[_lighter$] = (t0$ = lighter, t0$ == null ? color[_lighter] : t0$);
    ;
  }).prototype = color$.Color.prototype;
  dart.addTypeTests(color$.Color);
  dart.setMethodSignature(color$.Color, () => ({
    __proto__: dart.getMethods(color$.Color.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object]),
    [_get2CharHex]: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(color$.Color, () => ({
    __proto__: dart.getGetters(color$.Color.__proto__),
    darker: color$.Color,
    lighter: color$.Color,
    rgbaHexString: core.String,
    hexString: core.String
  }));
  dart.setLibraryUri(color$.Color, "package:charts_common/src/common/color.dart");
  dart.setFieldSignature(color$.Color, () => ({
    __proto__: dart.getFields(color$.Color.__proto__),
    r: dart.finalFieldType(core.int),
    g: dart.finalFieldType(core.int),
    b: dart.finalFieldType(core.int),
    a: dart.finalFieldType(core.int),
    [_darker]: dart.finalFieldType(color$.Color),
    [_lighter]: dart.finalFieldType(color$.Color)
  }));
  dart.defineExtensionMethods(color$.Color, ['_equals', 'toString']);
  dart.defineExtensionAccessors(color$.Color, ['hashCode']);
  dart.defineLazy(color$.Color, {
    /*color$.Color.black*/get black() {
      return C10 || CT.C10;
    },
    /*color$.Color.white*/get white() {
      return C11 || CT.C11;
    },
    /*color$.Color.transparent*/get transparent() {
      return C12 || CT.C12;
    },
    /*color$.Color._darkerPercentOfOrig*/get _darkerPercentOfOrig() {
      return 0.7;
    },
    /*color$.Color._lighterPercentOfOrig*/get _lighterPercentOfOrig() {
      return 0.1;
    }
  });
  text_element.TextElement = class TextElement extends core.Object {
    static elementSettingsSame(a, b) {
      return dart.equals(a.textStyle, b.textStyle) && a.maxWidth == b.maxWidth && dart.equals(a.maxWidthStrategy, b.maxWidthStrategy) && a.text == b.text && dart.equals(a.textDirection, b.textDirection);
    }
  };
  (text_element.TextElement.new = function() {
    ;
  }).prototype = text_element.TextElement.prototype;
  dart.addTypeTests(text_element.TextElement);
  dart.setLibraryUri(text_element.TextElement, "package:charts_common/src/common/text_element.dart");
  const _name$1 = dart.privateName(text_element, "_name");
  let C13;
  let C14;
  let C15;
  let C16;
  text_element.TextDirection = class TextDirection extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (text_element.TextDirection.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = text_element.TextDirection.prototype;
  dart.addTypeTests(text_element.TextDirection);
  dart.setLibraryUri(text_element.TextDirection, "package:charts_common/src/common/text_element.dart");
  dart.setFieldSignature(text_element.TextDirection, () => ({
    __proto__: dart.getFields(text_element.TextDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_element.TextDirection, ['toString']);
  text_element.TextDirection.ltr = C13 || CT.C13;
  text_element.TextDirection.rtl = C14 || CT.C14;
  text_element.TextDirection.center = C15 || CT.C15;
  text_element.TextDirection.values = C16 || CT.C16;
  let C17;
  let C18;
  let C19;
  text_element.MaxWidthStrategy = class MaxWidthStrategy extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (text_element.MaxWidthStrategy.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = text_element.MaxWidthStrategy.prototype;
  dart.addTypeTests(text_element.MaxWidthStrategy);
  dart.setLibraryUri(text_element.MaxWidthStrategy, "package:charts_common/src/common/text_element.dart");
  dart.setFieldSignature(text_element.MaxWidthStrategy, () => ({
    __proto__: dart.getFields(text_element.MaxWidthStrategy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text_element.MaxWidthStrategy, ['toString']);
  text_element.MaxWidthStrategy.truncate = C17 || CT.C17;
  text_element.MaxWidthStrategy.ellipsize = C18 || CT.C18;
  text_element.MaxWidthStrategy.values = C19 || CT.C19;
  paint_style.PaintStyle = class PaintStyle extends core.Object {};
  (paint_style.PaintStyle.new = function() {
    ;
  }).prototype = paint_style.PaintStyle.prototype;
  dart.addTypeTests(paint_style.PaintStyle);
  dart.setLibraryUri(paint_style.PaintStyle, "package:charts_common/src/common/paint_style.dart");
  text_style.TextStyle = class TextStyle extends paint_style.PaintStyle {};
  (text_style.TextStyle.new = function() {
    ;
  }).prototype = text_style.TextStyle.prototype;
  dart.addTypeTests(text_style.TextStyle);
  dart.setLibraryUri(text_style.TextStyle, "package:charts_common/src/common/text_style.dart");
  const horizontalSliceWidth$ = dart.privateName(text_measurement, "TextMeasurement.horizontalSliceWidth");
  const verticalSliceWidth$ = dart.privateName(text_measurement, "TextMeasurement.verticalSliceWidth");
  const baseline$ = dart.privateName(text_measurement, "TextMeasurement.baseline");
  text_measurement.TextMeasurement = class TextMeasurement extends core.Object {
    get horizontalSliceWidth() {
      return this[horizontalSliceWidth$];
    }
    set horizontalSliceWidth(value) {
      super.horizontalSliceWidth = value;
    }
    get verticalSliceWidth() {
      return this[verticalSliceWidth$];
    }
    set verticalSliceWidth(value) {
      super.verticalSliceWidth = value;
    }
    get baseline() {
      return this[baseline$];
    }
    set baseline(value) {
      super.baseline = value;
    }
  };
  (text_measurement.TextMeasurement.new = function(opts) {
    let horizontalSliceWidth = opts && 'horizontalSliceWidth' in opts ? opts.horizontalSliceWidth : null;
    let verticalSliceWidth = opts && 'verticalSliceWidth' in opts ? opts.verticalSliceWidth : null;
    let baseline = opts && 'baseline' in opts ? opts.baseline : null;
    this[horizontalSliceWidth$] = horizontalSliceWidth;
    this[verticalSliceWidth$] = verticalSliceWidth;
    this[baseline$] = baseline;
    ;
  }).prototype = text_measurement.TextMeasurement.prototype;
  dart.addTypeTests(text_measurement.TextMeasurement);
  dart.setLibraryUri(text_measurement.TextMeasurement, "package:charts_common/src/common/text_measurement.dart");
  dart.setFieldSignature(text_measurement.TextMeasurement, () => ({
    __proto__: dart.getFields(text_measurement.TextMeasurement.__proto__),
    horizontalSliceWidth: dart.finalFieldType(core.double),
    verticalSliceWidth: dart.finalFieldType(core.double),
    baseline: dart.finalFieldType(core.double)
  }));
  graphics_factory.GraphicsFactory = class GraphicsFactory extends core.Object {};
  (graphics_factory.GraphicsFactory.new = function() {
    ;
  }).prototype = graphics_factory.GraphicsFactory.prototype;
  dart.addTypeTests(graphics_factory.GraphicsFactory);
  dart.setLibraryUri(graphics_factory.GraphicsFactory, "package:charts_common/src/common/graphics_factory.dart");
  line_style.LineStyle = class LineStyle extends paint_style.PaintStyle {};
  (line_style.LineStyle.new = function() {
    ;
  }).prototype = line_style.LineStyle.prototype;
  dart.addTypeTests(line_style.LineStyle);
  dart.setLibraryUri(line_style.LineStyle, "package:charts_common/src/common/line_style.dart");
  const _is_AxisSpec_default = Symbol('_is_AxisSpec_default');
  const showAxisLine$ = dart.privateName(axis_spec, "AxisSpec.showAxisLine");
  const renderSpec$ = dart.privateName(axis_spec, "AxisSpec.renderSpec");
  const tickProviderSpec$ = dart.privateName(axis_spec, "AxisSpec.tickProviderSpec");
  const tickFormatterSpec$ = dart.privateName(axis_spec, "AxisSpec.tickFormatterSpec");
  const scaleSpec$ = dart.privateName(axis_spec, "AxisSpec.scaleSpec");
  axis_spec.AxisSpec$ = dart.generic(D => {
    let AxisOfD = () => (AxisOfD = dart.constFn(axis$.Axis$(D)))();
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    class AxisSpec extends core.Object {
      get showAxisLine() {
        return this[showAxisLine$];
      }
      set showAxisLine(value) {
        super.showAxisLine = value;
      }
      get renderSpec() {
        return this[renderSpec$];
      }
      set renderSpec(value) {
        super.renderSpec = value;
      }
      get tickProviderSpec() {
        return this[tickProviderSpec$];
      }
      set tickProviderSpec(value) {
        super.tickProviderSpec = value;
      }
      get tickFormatterSpec() {
        return this[tickFormatterSpec$];
      }
      set tickFormatterSpec(value) {
        super.tickFormatterSpec = value;
      }
      get scaleSpec() {
        return this[scaleSpec$];
      }
      set scaleSpec(value) {
        super.scaleSpec = value;
      }
      static from(other, opts) {
        let t0, t0$, t0$0, t0$1, t0$2;
        let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
        let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
        let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
        let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
        let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
        return new (axis_spec.AxisSpec$(D)).new({renderSpec: axis_spec.RenderSpec$(D)._check((t0 = renderSpec, t0 == null ? other.renderSpec : t0)), tickProviderSpec: axis_spec.TickProviderSpec$(D)._check((t0$ = tickProviderSpec, t0$ == null ? other.tickProviderSpec : t0$)), tickFormatterSpec: axis_spec.TickFormatterSpec$(D)._check((t0$0 = tickFormatterSpec, t0$0 == null ? other.tickFormatterSpec : t0$0)), showAxisLine: (t0$1 = showAxisLine, t0$1 == null ? other.showAxisLine : t0$1), scaleSpec: (t0$2 = scaleSpec, t0$2 == null ? other.scaleSpec : t0$2)});
      }
      configure(axis, context, graphicsFactory) {
        AxisOfD()._check(axis);
        if (this.showAxisLine != null) {
          axis.forceDrawAxisLine = this.showAxisLine;
        }
        if (this.renderSpec != null) {
          axis.tickDrawStrategy = this.renderSpec.createDrawStrategy(context, graphicsFactory);
        }
        if (this.tickProviderSpec != null) {
          axis.tickProvider = this.tickProviderSpec.createTickProvider(context);
        }
        if (this.tickFormatterSpec != null) {
          axis.tickFormatter = this.tickFormatterSpec.createTickFormatter(context);
        }
        if (this.scaleSpec != null) {
          axis.scale = MutableScaleOfD()._check(this.scaleSpec.createScale());
        }
      }
      createAxis() {
        return null;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || axis_spec.AxisSpec.is(other) && dart.equals(this.renderSpec, other.renderSpec) && dart.equals(this.tickProviderSpec, other.tickProviderSpec) && dart.equals(this.tickFormatterSpec, other.tickFormatterSpec) && dart.equals(this.showAxisLine, other.showAxisLine) && dart.equals(this.scaleSpec, other.scaleSpec);
      }
      get hashCode() {
        let t0, t0$;
        let hashcode = (t0$ = (t0 = this.renderSpec, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickProviderSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickFormatterSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.showAxisLine);
        hashcode = dart.notNull(this.hashCode) * 37 + dart.notNull(dart.hashCode(this.scaleSpec));
        return hashcode;
      }
    }
    (AxisSpec.new = function(opts) {
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
      this[renderSpec$] = renderSpec;
      this[tickProviderSpec$] = tickProviderSpec;
      this[tickFormatterSpec$] = tickFormatterSpec;
      this[showAxisLine$] = showAxisLine;
      this[scaleSpec$] = scaleSpec;
      ;
    }).prototype = AxisSpec.prototype;
    dart.addTypeTests(AxisSpec);
    AxisSpec.prototype[_is_AxisSpec_default] = true;
    dart.setMethodSignature(AxisSpec, () => ({
      __proto__: dart.getMethods(AxisSpec.__proto__),
      configure: dart.fnType(dart.dynamic, [core.Object, chart_context.ChartContext, graphics_factory.GraphicsFactory]),
      createAxis: dart.fnType(axis$.Axis$(D), []),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(AxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
    dart.setFieldSignature(AxisSpec, () => ({
      __proto__: dart.getFields(AxisSpec.__proto__),
      showAxisLine: dart.finalFieldType(core.bool),
      renderSpec: dart.finalFieldType(axis_spec.RenderSpec$(D)),
      tickProviderSpec: dart.finalFieldType(axis_spec.TickProviderSpec$(D)),
      tickFormatterSpec: dart.finalFieldType(axis_spec.TickFormatterSpec$(D)),
      scaleSpec: dart.finalFieldType(axis_spec.ScaleSpec)
    }));
    dart.defineExtensionMethods(AxisSpec, ['_equals']);
    dart.defineExtensionAccessors(AxisSpec, ['hashCode']);
    return AxisSpec;
  });
  axis_spec.AxisSpec = axis_spec.AxisSpec$();
  dart.addTypeTests(axis_spec.AxisSpec, _is_AxisSpec_default);
  const _is_TickProviderSpec_default = Symbol('_is_TickProviderSpec_default');
  axis_spec.TickProviderSpec$ = dart.generic(D => {
    class TickProviderSpec extends core.Object {}
    (TickProviderSpec.new = function() {
      ;
    }).prototype = TickProviderSpec.prototype;
    dart.addTypeTests(TickProviderSpec);
    TickProviderSpec.prototype[_is_TickProviderSpec_default] = true;
    dart.setLibraryUri(TickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
    return TickProviderSpec;
  });
  axis_spec.TickProviderSpec = axis_spec.TickProviderSpec$();
  dart.addTypeTests(axis_spec.TickProviderSpec, _is_TickProviderSpec_default);
  const _is_TickFormatterSpec_default = Symbol('_is_TickFormatterSpec_default');
  axis_spec.TickFormatterSpec$ = dart.generic(D => {
    class TickFormatterSpec extends core.Object {}
    (TickFormatterSpec.new = function() {
      ;
    }).prototype = TickFormatterSpec.prototype;
    dart.addTypeTests(TickFormatterSpec);
    TickFormatterSpec.prototype[_is_TickFormatterSpec_default] = true;
    dart.setLibraryUri(TickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
    return TickFormatterSpec;
  });
  axis_spec.TickFormatterSpec = axis_spec.TickFormatterSpec$();
  dart.addTypeTests(axis_spec.TickFormatterSpec, _is_TickFormatterSpec_default);
  const _is_ScaleSpec_default = Symbol('_is_ScaleSpec_default');
  axis_spec.ScaleSpec$ = dart.generic(D => {
    class ScaleSpec extends core.Object {}
    (ScaleSpec.new = function() {
      ;
    }).prototype = ScaleSpec.prototype;
    dart.addTypeTests(ScaleSpec);
    ScaleSpec.prototype[_is_ScaleSpec_default] = true;
    dart.setLibraryUri(ScaleSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
    return ScaleSpec;
  });
  axis_spec.ScaleSpec = axis_spec.ScaleSpec$();
  dart.addTypeTests(axis_spec.ScaleSpec, _is_ScaleSpec_default);
  const _is_RenderSpec_default = Symbol('_is_RenderSpec_default');
  axis_spec.RenderSpec$ = dart.generic(D => {
    class RenderSpec extends core.Object {}
    (RenderSpec.new = function() {
      ;
    }).prototype = RenderSpec.prototype;
    dart.addTypeTests(RenderSpec);
    RenderSpec.prototype[_is_RenderSpec_default] = true;
    dart.setLibraryUri(RenderSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
    return RenderSpec;
  });
  axis_spec.RenderSpec = axis_spec.RenderSpec$();
  dart.addTypeTests(axis_spec.RenderSpec, _is_RenderSpec_default);
  const fontFamily$ = dart.privateName(axis_spec, "TextStyleSpec.fontFamily");
  const fontSize$ = dart.privateName(axis_spec, "TextStyleSpec.fontSize");
  const lineHeight$ = dart.privateName(axis_spec, "TextStyleSpec.lineHeight");
  const color$1 = dart.privateName(axis_spec, "TextStyleSpec.color");
  const fontWeight$ = dart.privateName(axis_spec, "TextStyleSpec.fontWeight");
  axis_spec.TextStyleSpec = class TextStyleSpec extends core.Object {
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || axis_spec.TextStyleSpec.is(other) && this.fontFamily == other.fontFamily && this.fontSize == other.fontSize && this.lineHeight == other.lineHeight && dart.equals(this.color, other.color) && this.fontWeight == other.fontWeight;
    }
    get hashCode() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let hashcode = (t0$ = (t0 = this.fontFamily, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$);
      hashcode = (t0$1 = dart.notNull(hashcode) * 37 + dart.notNull((t0$0 = this.fontSize, t0$0 == null ? null : dart.hashCode(t0$0))), t0$1 === null ? 0 : t0$1);
      hashcode = (t0$3 = dart.notNull(hashcode) * 37 + dart.notNull((t0$2 = this.lineHeight, t0$2 == null ? null : dart.hashCode(t0$2))), t0$3 === null ? 0 : t0$3);
      hashcode = (t0$5 = dart.notNull(hashcode) * 37 + dart.notNull((t0$4 = this.color, t0$4 == null ? null : dart.hashCode(t0$4))), t0$5 === null ? 0 : t0$5);
      hashcode = (t0$7 = dart.notNull(hashcode) * 37 + dart.notNull((t0$6 = this.fontWeight, t0$6 == null ? null : dart.hashCode(t0$6))), t0$7 === null ? 0 : t0$7);
      return hashcode;
    }
  };
  (axis_spec.TextStyleSpec.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[lineHeight$] = lineHeight;
    this[color$1] = color;
    this[fontWeight$] = fontWeight;
    ;
  }).prototype = axis_spec.TextStyleSpec.prototype;
  dart.addTypeTests(axis_spec.TextStyleSpec);
  dart.setMethodSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.TextStyleSpec.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(axis_spec.TextStyleSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
  dart.setFieldSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.TextStyleSpec.__proto__),
    fontFamily: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.int),
    lineHeight: dart.finalFieldType(core.double),
    color: dart.finalFieldType(color$.Color),
    fontWeight: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis_spec.TextStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.TextStyleSpec, ['hashCode']);
  const color$2 = dart.privateName(axis_spec, "LineStyleSpec.color");
  const dashPattern$1 = dart.privateName(axis_spec, "LineStyleSpec.dashPattern");
  const thickness$ = dart.privateName(axis_spec, "LineStyleSpec.thickness");
  axis_spec.LineStyleSpec = class LineStyleSpec extends core.Object {
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get dashPattern() {
      return this[dashPattern$1];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || axis_spec.LineStyleSpec.is(other) && dart.equals(this.color, other.color) && dart.equals(this.dashPattern, other.dashPattern) && this.thickness == other.thickness;
    }
    get hashCode() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3;
      let hashcode = (t0$ = (t0 = this.color, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$);
      hashcode = (t0$1 = dart.notNull(hashcode) * 37 + dart.notNull((t0$0 = this.dashPattern, t0$0 == null ? null : dart.hashCode(t0$0))), t0$1 === null ? 0 : t0$1);
      hashcode = (t0$3 = dart.notNull(hashcode) * 37 + dart.notNull((t0$2 = this.thickness, t0$2 == null ? null : dart.hashCode(t0$2))), t0$3 === null ? 0 : t0$3);
      return hashcode;
    }
  };
  (axis_spec.LineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[color$2] = color;
    this[dashPattern$1] = dashPattern;
    this[thickness$] = thickness;
    ;
  }).prototype = axis_spec.LineStyleSpec.prototype;
  dart.addTypeTests(axis_spec.LineStyleSpec);
  dart.setMethodSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.LineStyleSpec.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(axis_spec.LineStyleSpec, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
  dart.setFieldSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.LineStyleSpec.__proto__),
    color: dart.finalFieldType(color$.Color),
    dashPattern: dart.finalFieldType(core.List$(core.int)),
    thickness: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(axis_spec.LineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.LineStyleSpec, ['hashCode']);
  const _name$2 = dart.privateName(axis_spec, "_name");
  let C20;
  let C21;
  let C22;
  let C23;
  let C24;
  axis_spec.TickLabelAnchor = class TickLabelAnchor extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelAnchor.prototype;
  dart.addTypeTests(axis_spec.TickLabelAnchor);
  dart.setLibraryUri(axis_spec.TickLabelAnchor, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
  dart.setFieldSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelAnchor, ['toString']);
  axis_spec.TickLabelAnchor.before = C20 || CT.C20;
  axis_spec.TickLabelAnchor.centered = C21 || CT.C21;
  axis_spec.TickLabelAnchor.after = C22 || CT.C22;
  axis_spec.TickLabelAnchor.inside = C23 || CT.C23;
  axis_spec.TickLabelAnchor.values = C24 || CT.C24;
  let C25;
  let C26;
  let C27;
  axis_spec.TickLabelJustification = class TickLabelJustification extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelJustification.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelJustification.prototype;
  dart.addTypeTests(axis_spec.TickLabelJustification);
  dart.setLibraryUri(axis_spec.TickLabelJustification, "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart");
  dart.setFieldSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$2]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelJustification, ['toString']);
  axis_spec.TickLabelJustification.inside = C25 || CT.C25;
  axis_spec.TickLabelJustification.outside = C26 || CT.C26;
  axis_spec.TickLabelJustification.values = C27 || CT.C27;
  const _is_TickProvider_default = Symbol('_is_TickProvider_default');
  tick_provider.TickProvider$ = dart.generic(D => {
    class TickProvider extends core.Object {}
    (TickProvider.new = function() {
      ;
    }).prototype = TickProvider.prototype;
    dart.addTypeTests(TickProvider);
    TickProvider.prototype[_is_TickProvider_default] = true;
    dart.setLibraryUri(TickProvider, "package:charts_common/src/chart/cartesian/axis/tick_provider.dart");
    return TickProvider;
  });
  tick_provider.TickProvider = tick_provider.TickProvider$();
  dart.addTypeTests(tick_provider.TickProvider, _is_TickProvider_default);
  const _is_BaseTickProvider_default = Symbol('_is_BaseTickProvider_default');
  tick_provider.BaseTickProvider$ = dart.generic(D => {
    let ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    let TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    let MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    let JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    class BaseTickProvider extends core.Object {
      createTicks(domainValues, opts) {
        ListOfD()._check(domainValues);
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD()._check(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD()._check(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String()._check(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        let ticks = JSArrayOfTickOfD().of([]);
        let labels = formatter.format(domainValues, formatterValueCache, {stepSize: stepSize});
        for (let i = 0; i < dart.notNull(domainValues[$length]); i = i + 1) {
          let value = domainValues[$_get](i);
          let tick = new (TickOfD()).new({value: value, textElement: graphicsFactory.createTextElement(labels[$_get](i)), locationPx: scale._get(value)});
          ticks[$add](tick);
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
    }
    (BaseTickProvider.new = function() {
      ;
    }).prototype = BaseTickProvider.prototype;
    dart.addTypeTests(BaseTickProvider);
    BaseTickProvider.prototype[_is_BaseTickProvider_default] = true;
    BaseTickProvider[dart.implements] = () => [tick_provider.TickProvider$(D)];
    dart.setMethodSignature(BaseTickProvider, () => ({
      __proto__: dart.getMethods(BaseTickProvider.__proto__),
      createTicks: dart.fnType(core.List$(tick.Tick$(D)), [core.Object], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, scale: core.Object, stepSize: core.num, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy}, {})
    }));
    dart.setLibraryUri(BaseTickProvider, "package:charts_common/src/chart/cartesian/axis/tick_provider.dart");
    return BaseTickProvider;
  });
  tick_provider.BaseTickProvider = tick_provider.BaseTickProvider$();
  dart.addTypeTests(tick_provider.BaseTickProvider, _is_BaseTickProvider_default);
  const _is_TickHint_default = Symbol('_is_TickHint_default');
  const start$ = dart.privateName(tick_provider, "TickHint.start");
  const end$ = dart.privateName(tick_provider, "TickHint.end");
  const tickCount$ = dart.privateName(tick_provider, "TickHint.tickCount");
  tick_provider.TickHint$ = dart.generic(D => {
    class TickHint extends core.Object {
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        super.end = value;
      }
      get tickCount() {
        return this[tickCount$];
      }
      set tickCount(value) {
        super.tickCount = value;
      }
    }
    (TickHint.new = function(start, end, opts) {
      let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
      this[start$] = start;
      this[end$] = end;
      this[tickCount$] = tickCount;
      ;
    }).prototype = TickHint.prototype;
    dart.addTypeTests(TickHint);
    TickHint.prototype[_is_TickHint_default] = true;
    dart.setLibraryUri(TickHint, "package:charts_common/src/chart/cartesian/axis/tick_provider.dart");
    dart.setFieldSignature(TickHint, () => ({
      __proto__: dart.getFields(TickHint.__proto__),
      start: dart.finalFieldType(D),
      end: dart.finalFieldType(D),
      tickCount: dart.finalFieldType(core.int)
    }));
    return TickHint;
  });
  tick_provider.TickHint = tick_provider.TickHint$();
  dart.addTypeTests(tick_provider.TickHint, _is_TickHint_default);
  const _is_Tick_default = Symbol('_is_Tick_default');
  const value$ = dart.privateName(tick, "Tick.value");
  const textElement$ = dart.privateName(tick, "Tick.textElement");
  const locationPx$ = dart.privateName(tick, "Tick.locationPx");
  const labelOffsetPx$ = dart.privateName(tick, "Tick.labelOffsetPx");
  tick.Tick$ = dart.generic(D => {
    class Tick extends core.Object {
      get value() {
        return this[value$];
      }
      set value(value) {
        super.value = value;
      }
      get textElement() {
        return this[textElement$];
      }
      set textElement(value) {
        this[textElement$] = value;
      }
      get locationPx() {
        return this[locationPx$];
      }
      set locationPx(value) {
        this[locationPx$] = value;
      }
      get labelOffsetPx() {
        return this[labelOffsetPx$];
      }
      set labelOffsetPx(value) {
        this[labelOffsetPx$] = value;
      }
      toString() {
        return "Tick(value: " + dart.str(this.value) + ", locationPx: " + dart.str(this.locationPx) + ", " + "labelOffsetPx: " + dart.str(this.labelOffsetPx) + ")";
      }
    }
    (Tick.new = function(opts) {
      let value = opts && 'value' in opts ? opts.value : null;
      let textElement = opts && 'textElement' in opts ? opts.textElement : null;
      let locationPx = opts && 'locationPx' in opts ? opts.locationPx : null;
      let labelOffsetPx = opts && 'labelOffsetPx' in opts ? opts.labelOffsetPx : null;
      this[value$] = value;
      this[textElement$] = textElement;
      this[locationPx$] = locationPx;
      this[labelOffsetPx$] = labelOffsetPx;
      ;
    }).prototype = Tick.prototype;
    dart.addTypeTests(Tick);
    Tick.prototype[_is_Tick_default] = true;
    dart.setLibraryUri(Tick, "package:charts_common/src/chart/cartesian/axis/tick.dart");
    dart.setFieldSignature(Tick, () => ({
      __proto__: dart.getFields(Tick.__proto__),
      value: dart.finalFieldType(D),
      textElement: dart.fieldType(text_element.TextElement),
      locationPx: dart.fieldType(core.double),
      labelOffsetPx: dart.fieldType(core.double)
    }));
    dart.defineExtensionMethods(Tick, ['toString']);
    return Tick;
  });
  tick.Tick = tick.Tick$();
  dart.addTypeTests(tick.Tick, _is_Tick_default);
  const _is_Scale_default = Symbol('_is_Scale_default');
  scale$.Scale$ = dart.generic(D => {
    class Scale extends core.Object {}
    (Scale.new = function() {
      ;
    }).prototype = Scale.prototype;
    dart.addTypeTests(Scale);
    Scale.prototype[_is_Scale_default] = true;
    dart.setLibraryUri(Scale, "package:charts_common/src/chart/cartesian/axis/scale.dart");
    return Scale;
  });
  scale$.Scale = scale$.Scale$();
  dart.addTypeTests(scale$.Scale, _is_Scale_default);
  const _is_MutableScale_default = Symbol('_is_MutableScale_default');
  scale$.MutableScale$ = dart.generic(D => {
    class MutableScale extends scale$.Scale$(D) {}
    (MutableScale.new = function() {
      ;
    }).prototype = MutableScale.prototype;
    dart.addTypeTests(MutableScale);
    MutableScale.prototype[_is_MutableScale_default] = true;
    dart.setLibraryUri(MutableScale, "package:charts_common/src/chart/cartesian/axis/scale.dart");
    return MutableScale;
  });
  scale$.MutableScale = scale$.MutableScale$();
  dart.addTypeTests(scale$.MutableScale, _is_MutableScale_default);
  const start$0 = dart.privateName(scale$, "ScaleOutputExtent.start");
  const end$0 = dart.privateName(scale$, "ScaleOutputExtent.end");
  scale$.ScaleOutputExtent = class ScaleOutputExtent extends core.Object {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      super.end = value;
    }
    get min() {
      return math.min(core.int, this.start, this.end);
    }
    get max() {
      return math.max(core.int, this.start, this.end);
    }
    containsValue(value) {
      return dart.notNull(value) >= dart.notNull(this.min) && dart.notNull(value) <= dart.notNull(this.max);
    }
    get diff() {
      return dart.notNull(this.end) - dart.notNull(this.start);
    }
    get width() {
      return this.diff[$abs]();
    }
    _equals(other) {
      if (other == null) return false;
      return scale$.ScaleOutputExtent.is(other) && this.start == other.start && this.end == other.end;
    }
    get hashCode() {
      return dart.hashCode(this.start) + dart.hashCode(this.end) * 31;
    }
    toString() {
      return "ScaleOutputRange(" + dart.str(this.start) + ", " + dart.str(this.end) + ")";
    }
  };
  (scale$.ScaleOutputExtent.new = function(start, end) {
    this[start$0] = start;
    this[end$0] = end;
    ;
  }).prototype = scale$.ScaleOutputExtent.prototype;
  dart.addTypeTests(scale$.ScaleOutputExtent);
  dart.setMethodSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getMethods(scale$.ScaleOutputExtent.__proto__),
    containsValue: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getGetters(scale$.ScaleOutputExtent.__proto__),
    min: core.int,
    max: core.int,
    diff: core.int,
    width: core.int
  }));
  dart.setLibraryUri(scale$.ScaleOutputExtent, "package:charts_common/src/chart/cartesian/axis/scale.dart");
  dart.setFieldSignature(scale$.ScaleOutputExtent, () => ({
    __proto__: dart.getFields(scale$.ScaleOutputExtent.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(scale$.ScaleOutputExtent, ['_equals', 'toString']);
  dart.defineExtensionAccessors(scale$.ScaleOutputExtent, ['hashCode']);
  const _name$3 = dart.privateName(scale$, "_name");
  let C28;
  let C29;
  let C30;
  let C31;
  let C32;
  let C33;
  let C34;
  scale$.RangeBandType = class RangeBandType extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (scale$.RangeBandType.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = scale$.RangeBandType.prototype;
  dart.addTypeTests(scale$.RangeBandType);
  dart.setLibraryUri(scale$.RangeBandType, "package:charts_common/src/chart/cartesian/axis/scale.dart");
  dart.setFieldSignature(scale$.RangeBandType, () => ({
    __proto__: dart.getFields(scale$.RangeBandType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scale$.RangeBandType, ['toString']);
  scale$.RangeBandType.none = C28 || CT.C28;
  scale$.RangeBandType.fixedPixel = C29 || CT.C29;
  scale$.RangeBandType.fixedDomain = C30 || CT.C30;
  scale$.RangeBandType.fixedPercentOfStep = C31 || CT.C31;
  scale$.RangeBandType.styleAssignedPercentOfStep = C32 || CT.C32;
  scale$.RangeBandType.fixedPixelSpaceFromStep = C33 || CT.C33;
  scale$.RangeBandType.values = C34 || CT.C34;
  const type = dart.privateName(scale$, "RangeBandConfig.type");
  const size = dart.privateName(scale$, "RangeBandConfig.size");
  scale$.RangeBandConfig = class RangeBandConfig extends core.Object {
    get type() {
      return this[type];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale$.RangeBandConfig.none = function() {
    this[type] = scale$.RangeBandType.none;
    this[size] = 0.0;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedPixel = function(pixels) {
    this[type] = scale$.RangeBandType.fixedPixel;
    this[size] = pixels;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedDomain = function(domainSize) {
    this[type] = scale$.RangeBandType.fixedDomain;
    this[size] = domainSize;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.stepChartBand = function() {
    this[type] = scale$.RangeBandType.fixedPercentOfStep;
    this[size] = 1.0;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.percentOfStep = function(percentOfStepWidth) {
    this[type] = scale$.RangeBandType.fixedPercentOfStep;
    this[size] = percentOfStepWidth;
    if (!(dart.notNull(percentOfStepWidth) >= 0 && dart.notNull(percentOfStepWidth) <= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/scale.dart", 261, 12, "percentOfStepWidth >= 0 && percentOfStepWidth <= 1.0");
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.styleAssignedPercent = function(seriesCount) {
    let t0;
    if (seriesCount === void 0) seriesCount = 1;
    this[type] = scale$.RangeBandType.styleAssignedPercentOfStep;
    this[size] = (t0 = style_factory.StyleFactory.style.rangeBandSize, t0 == null ? 0.65 : t0);
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  (scale$.RangeBandConfig.fixedPixelSpaceBetweenStep = function(pixels) {
    this[type] = scale$.RangeBandType.fixedPixelSpaceFromStep;
    this[size] = pixels;
    ;
  }).prototype = scale$.RangeBandConfig.prototype;
  dart.addTypeTests(scale$.RangeBandConfig);
  dart.setLibraryUri(scale$.RangeBandConfig, "package:charts_common/src/chart/cartesian/axis/scale.dart");
  dart.setFieldSignature(scale$.RangeBandConfig, () => ({
    __proto__: dart.getFields(scale$.RangeBandConfig.__proto__),
    type: dart.finalFieldType(scale$.RangeBandType),
    size: dart.finalFieldType(core.double)
  }));
  let C35;
  let C36;
  let C37;
  let C38;
  scale$.StepSizeType = class StepSizeType extends core.Object {
    toString() {
      return this[_name$3];
    }
  };
  (scale$.StepSizeType.new = function(index, _name) {
    this.index = index;
    this[_name$3] = _name;
    ;
  }).prototype = scale$.StepSizeType.prototype;
  dart.addTypeTests(scale$.StepSizeType);
  dart.setLibraryUri(scale$.StepSizeType, "package:charts_common/src/chart/cartesian/axis/scale.dart");
  dart.setFieldSignature(scale$.StepSizeType, () => ({
    __proto__: dart.getFields(scale$.StepSizeType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$3]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(scale$.StepSizeType, ['toString']);
  scale$.StepSizeType.autoDetect = C35 || CT.C35;
  scale$.StepSizeType.fixedDomain = C36 || CT.C36;
  scale$.StepSizeType.fixedPixels = C37 || CT.C37;
  scale$.StepSizeType.values = C38 || CT.C38;
  const type$ = dart.privateName(scale$, "StepSizeConfig.type");
  const size$ = dart.privateName(scale$, "StepSizeConfig.size");
  scale$.StepSizeConfig = class StepSizeConfig extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale$.StepSizeConfig.auto = function() {
    this[type$] = scale$.StepSizeType.autoDetect;
    this[size$] = 0.0;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  (scale$.StepSizeConfig.fixedPixels = function(pixels) {
    this[type$] = scale$.StepSizeType.fixedPixels;
    this[size$] = pixels;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  (scale$.StepSizeConfig.fixedDomain = function(domainSize) {
    this[type$] = scale$.StepSizeType.fixedDomain;
    this[size$] = domainSize;
    ;
  }).prototype = scale$.StepSizeConfig.prototype;
  dart.addTypeTests(scale$.StepSizeConfig);
  dart.setLibraryUri(scale$.StepSizeConfig, "package:charts_common/src/chart/cartesian/axis/scale.dart");
  dart.setFieldSignature(scale$.StepSizeConfig, () => ({
    __proto__: dart.getFields(scale$.StepSizeConfig.__proto__),
    type: dart.finalFieldType(scale$.StepSizeType),
    size: dart.finalFieldType(core.double)
  }));
  const _is_Extents_default = Symbol('_is_Extents_default');
  scale$.Extents$ = dart.generic(D => {
    class Extents extends core.Object {}
    (Extents.new = function() {
      ;
    }).prototype = Extents.prototype;
    dart.addTypeTests(Extents);
    Extents.prototype[_is_Extents_default] = true;
    dart.setLibraryUri(Extents, "package:charts_common/src/chart/cartesian/axis/scale.dart");
    return Extents;
  });
  scale$.Extents = scale$.Extents$();
  dart.addTypeTests(scale$.Extents, _is_Extents_default);
  const _style = dart.privateName(style_factory, "_style");
  let C39;
  style_factory.StyleFactory = class StyleFactory extends core.Object {
    static get style() {
      return style_factory.StyleFactory._styleFactory[_style];
    }
    static set style(value) {
      style_factory.StyleFactory._styleFactory[_style] = value;
    }
  };
  (style_factory.StyleFactory._internal = function() {
    this[_style] = C39 || CT.C39;
    ;
  }).prototype = style_factory.StyleFactory.prototype;
  dart.addTypeTests(style_factory.StyleFactory);
  dart.setLibraryUri(style_factory.StyleFactory, "package:charts_common/src/common/style/style_factory.dart");
  dart.setFieldSignature(style_factory.StyleFactory, () => ({
    __proto__: dart.getFields(style_factory.StyleFactory.__proto__),
    [_style]: dart.fieldType(style.Style)
  }));
  dart.defineLazy(style_factory.StyleFactory, {
    /*style_factory.StyleFactory._styleFactory*/get _styleFactory() {
      return new style_factory.StyleFactory._internal();
    }
  });
  style.Style = class Style extends core.Object {};
  (style.Style.new = function() {
    ;
  }).prototype = style.Style.prototype;
  dart.addTypeTests(style.Style);
  dart.setLibraryUri(style.Style, "package:charts_common/src/common/style/style.dart");
  const _getSteppedColor = dart.privateName(palette, "_getSteppedColor");
  palette.Palette = class Palette extends core.Object {
    makeShades(colorCnt) {
      let colors = JSArrayOfColor().of([this.shadeDefault]);
      let lighterColor = dart.notNull(colorCnt) < 3 ? this.shadeDefault.lighter : this[_getSteppedColor](this.shadeDefault, dart.notNull(colorCnt) * 2 - 1, dart.notNull(colorCnt) * 2);
      for (let i = 1; i < dart.notNull(colorCnt); i = i + 1) {
        colors[$add](this[_getSteppedColor](this.shadeDefault, i, colorCnt, {darker: this.shadeDefault.darker, lighter: lighterColor}));
      }
      colors[$add](new color$.Color.fromOther({color: this.shadeDefault, lighter: lighterColor}));
      return colors;
    }
    [_getSteppedColor](color, index, steps, opts) {
      let darker = opts && 'darker' in opts ? opts.darker : null;
      let lighter = opts && 'lighter' in opts ? opts.lighter : null;
      let fraction = dart.notNull(index) / dart.notNull(steps);
      return new color$.Color.new({r: dart.notNull(color.r) + ((255 - dart.notNull(color.r)) * fraction)[$round](), g: dart.notNull(color.g) + ((255 - dart.notNull(color.g)) * fraction)[$round](), b: dart.notNull(color.b) + ((255 - dart.notNull(color.b)) * fraction)[$round](), a: dart.notNull(color.a) + ((255 - dart.notNull(color.a)) * fraction)[$round](), darker: darker, lighter: lighter});
    }
  };
  (palette.Palette.new = function() {
    ;
  }).prototype = palette.Palette.prototype;
  dart.addTypeTests(palette.Palette);
  dart.setMethodSignature(palette.Palette, () => ({
    __proto__: dart.getMethods(palette.Palette.__proto__),
    makeShades: dart.fnType(core.List$(color$.Color), [core.int]),
    [_getSteppedColor]: dart.fnType(color$.Color, [color$.Color, core.int, core.int], {darker: color$.Color, lighter: color$.Color}, {})
  }));
  dart.setLibraryUri(palette.Palette, "package:charts_common/src/common/palette.dart");
  material_style.MaterialStyle = class MaterialStyle extends core.Object {
    get black() {
      return material_palette.MaterialPalette.black;
    }
    get transparent() {
      return material_palette.MaterialPalette.transparent;
    }
    get white() {
      return material_palette.MaterialPalette.white;
    }
    getOrderedPalettes(count) {
      return material_palette.MaterialPalette.getOrderedPalettes(count);
    }
    createAxisLineStyle(graphicsFactory, spec) {
      let t1, t1$, t1$0, t1$1, t1$2, t0;
      t0 = graphicsFactory.createLinePaint();
      t0.color = (t1$ = (t1 = spec, t1 == null ? null : t1.color), t1$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t1$);
      t0.dashPattern = (t1$0 = spec, t1$0 == null ? null : t1$0.dashPattern);
      t0.strokeWidth = (t1$2 = (t1$1 = spec, t1$1 == null ? null : t1$1.thickness), t1$2 == null ? 1 : t1$2);
      return t0;
    }
    createTickLineStyle(graphicsFactory, spec) {
      let t1, t1$, t1$0, t1$1, t1$2, t0;
      t0 = graphicsFactory.createLinePaint();
      t0.color = (t1$ = (t1 = spec, t1 == null ? null : t1.color), t1$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t1$);
      t0.dashPattern = (t1$0 = spec, t1$0 == null ? null : t1$0.dashPattern);
      t0.strokeWidth = (t1$2 = (t1$1 = spec, t1$1 == null ? null : t1$1.thickness), t1$2 == null ? 1 : t1$2);
      return t0;
    }
    get tickLength() {
      return 3;
    }
    get tickColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    createGridlineStyle(graphicsFactory, spec) {
      let t1, t1$, t1$0, t1$1, t1$2, t0;
      t0 = graphicsFactory.createLinePaint();
      t0.color = (t1$ = (t1 = spec, t1 == null ? null : t1.color), t1$ == null ? material_palette.MaterialPalette.gray.shade300 : t1$);
      t0.dashPattern = (t1$0 = spec, t1$0 == null ? null : t1$0.dashPattern);
      t0.strokeWidth = (t1$2 = (t1$1 = spec, t1$1 == null ? null : t1$1.thickness), t1$2 == null ? 1 : t1$2);
      return t0;
    }
    get arcLabelOutsideLeaderLine() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get defaultSeriesColor() {
      return material_palette.MaterialPalette.gray.shadeDefault;
    }
    get arcStrokeColor() {
      return material_palette.MaterialPalette.white;
    }
    get legendEntryTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get legendTitleTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get linePointHighlighterColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get noDataColor() {
      return material_palette.MaterialPalette.gray.shade200;
    }
    get rangeAnnotationColor() {
      return material_palette.MaterialPalette.gray.shade100;
    }
    get sliderFillColor() {
      return material_palette.MaterialPalette.white;
    }
    get sliderStrokeColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get chartBackgroundColor() {
      return material_palette.MaterialPalette.white;
    }
    get rangeBandSize() {
      return 0.65;
    }
  };
  (material_style.MaterialStyle.new = function() {
    ;
  }).prototype = material_style.MaterialStyle.prototype;
  dart.addTypeTests(material_style.MaterialStyle);
  material_style.MaterialStyle[dart.implements] = () => [style.Style];
  dart.setMethodSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getMethods(material_style.MaterialStyle.__proto__),
    getOrderedPalettes: dart.fnType(core.List$(palette.Palette), [core.int]),
    createAxisLineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, axis_spec.LineStyleSpec]),
    createTickLineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, axis_spec.LineStyleSpec]),
    createGridlineStyle: dart.fnType(line_style.LineStyle, [graphics_factory.GraphicsFactory, axis_spec.LineStyleSpec])
  }));
  dart.setGetterSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getGetters(material_style.MaterialStyle.__proto__),
    black: color$.Color,
    transparent: color$.Color,
    white: color$.Color,
    tickLength: core.int,
    tickColor: color$.Color,
    arcLabelOutsideLeaderLine: color$.Color,
    defaultSeriesColor: color$.Color,
    arcStrokeColor: color$.Color,
    legendEntryTextColor: color$.Color,
    legendTitleTextColor: color$.Color,
    linePointHighlighterColor: color$.Color,
    noDataColor: color$.Color,
    rangeAnnotationColor: color$.Color,
    sliderFillColor: color$.Color,
    sliderStrokeColor: color$.Color,
    chartBackgroundColor: color$.Color,
    rangeBandSize: core.double
  }));
  dart.setLibraryUri(material_style.MaterialStyle, "package:charts_common/src/common/style/material_style.dart");
  let C40;
  let C41;
  let C42;
  let C43;
  let C44;
  let C45;
  let C46;
  let C47;
  let C48;
  let C49;
  let C50;
  let C51;
  material_palette.MaterialPalette = class MaterialPalette extends core.Object {
    static get blue() {
      return C40 || CT.C40;
    }
    static get red() {
      return C41 || CT.C41;
    }
    static get yellow() {
      return C42 || CT.C42;
    }
    static get green() {
      return C43 || CT.C43;
    }
    static get purple() {
      return C44 || CT.C44;
    }
    static get cyan() {
      return C45 || CT.C45;
    }
    static get deepOrange() {
      return C46 || CT.C46;
    }
    static get lime() {
      return C47 || CT.C47;
    }
    static get indigo() {
      return C48 || CT.C48;
    }
    static get pink() {
      return C49 || CT.C49;
    }
    static get teal() {
      return C50 || CT.C50;
    }
    static get gray() {
      return C51 || CT.C51;
    }
    static getOrderedPalettes(count) {
      return material_palette.MaterialPalette._orderedPalettes[$take](count)[$toList]();
    }
  };
  (material_palette.MaterialPalette.new = function() {
    ;
  }).prototype = material_palette.MaterialPalette.prototype;
  dart.addTypeTests(material_palette.MaterialPalette);
  dart.setLibraryUri(material_palette.MaterialPalette, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialPalette, {
    /*material_palette.MaterialPalette.black*/get black() {
      return C10 || CT.C10;
    },
    /*material_palette.MaterialPalette.transparent*/get transparent() {
      return C12 || CT.C12;
    },
    /*material_palette.MaterialPalette.white*/get white() {
      return C11 || CT.C11;
    },
    /*material_palette.MaterialPalette._orderedPalettes*/get _orderedPalettes() {
      return JSArrayOfVoidToPalette().of([dart.fn(() => material_palette.MaterialPalette.blue, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.red, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.yellow, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.green, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.purple, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.cyan, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.deepOrange, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.lime, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.indigo, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.pink, VoidToPalette()), dart.fn(() => material_palette.MaterialPalette.teal, VoidToPalette())])[$map](palette.Palette, dart.fn(f => f(), FnToPalette()));
    }
  });
  let C52;
  let C54;
  let C53;
  material_palette.MaterialBlue = class MaterialBlue extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialBlue._shade500;
    }
  };
  (material_palette.MaterialBlue.new = function() {
    material_palette.MaterialBlue.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialBlue.prototype;
  dart.addTypeTests(material_palette.MaterialBlue);
  dart.setGetterSignature(material_palette.MaterialBlue, () => ({
    __proto__: dart.getGetters(material_palette.MaterialBlue.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialBlue, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialBlue, {
    /*material_palette.MaterialBlue._shade200*/get _shade200() {
      return C52 || CT.C52;
    },
    /*material_palette.MaterialBlue._shade500*/get _shade500() {
      return C53 || CT.C53;
    },
    /*material_palette.MaterialBlue._shade700*/get _shade700() {
      return C54 || CT.C54;
    }
  });
  let C55;
  let C56;
  let C57;
  material_palette.MaterialRed = class MaterialRed extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialRed._shade500;
    }
  };
  (material_palette.MaterialRed.new = function() {
    material_palette.MaterialRed.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialRed.prototype;
  dart.addTypeTests(material_palette.MaterialRed);
  dart.setGetterSignature(material_palette.MaterialRed, () => ({
    __proto__: dart.getGetters(material_palette.MaterialRed.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialRed, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialRed, {
    /*material_palette.MaterialRed._shade200*/get _shade200() {
      return C55 || CT.C55;
    },
    /*material_palette.MaterialRed._shade700*/get _shade700() {
      return C56 || CT.C56;
    },
    /*material_palette.MaterialRed._shade500*/get _shade500() {
      return C57 || CT.C57;
    }
  });
  let C58;
  let C59;
  let C60;
  material_palette.MaterialYellow = class MaterialYellow extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialYellow._shade500;
    }
  };
  (material_palette.MaterialYellow.new = function() {
    material_palette.MaterialYellow.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialYellow.prototype;
  dart.addTypeTests(material_palette.MaterialYellow);
  dart.setGetterSignature(material_palette.MaterialYellow, () => ({
    __proto__: dart.getGetters(material_palette.MaterialYellow.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialYellow, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialYellow, {
    /*material_palette.MaterialYellow._shade200*/get _shade200() {
      return C58 || CT.C58;
    },
    /*material_palette.MaterialYellow._shade700*/get _shade700() {
      return C59 || CT.C59;
    },
    /*material_palette.MaterialYellow._shade500*/get _shade500() {
      return C60 || CT.C60;
    }
  });
  let C61;
  let C62;
  let C63;
  material_palette.MaterialGreen = class MaterialGreen extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialGreen._shade500;
    }
  };
  (material_palette.MaterialGreen.new = function() {
    material_palette.MaterialGreen.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialGreen.prototype;
  dart.addTypeTests(material_palette.MaterialGreen);
  dart.setGetterSignature(material_palette.MaterialGreen, () => ({
    __proto__: dart.getGetters(material_palette.MaterialGreen.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialGreen, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialGreen, {
    /*material_palette.MaterialGreen._shade200*/get _shade200() {
      return C61 || CT.C61;
    },
    /*material_palette.MaterialGreen._shade700*/get _shade700() {
      return C62 || CT.C62;
    },
    /*material_palette.MaterialGreen._shade500*/get _shade500() {
      return C63 || CT.C63;
    }
  });
  let C64;
  let C65;
  let C66;
  material_palette.MaterialPurple = class MaterialPurple extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialPurple._shade500;
    }
  };
  (material_palette.MaterialPurple.new = function() {
    material_palette.MaterialPurple.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialPurple.prototype;
  dart.addTypeTests(material_palette.MaterialPurple);
  dart.setGetterSignature(material_palette.MaterialPurple, () => ({
    __proto__: dart.getGetters(material_palette.MaterialPurple.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialPurple, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialPurple, {
    /*material_palette.MaterialPurple._shade200*/get _shade200() {
      return C64 || CT.C64;
    },
    /*material_palette.MaterialPurple._shade700*/get _shade700() {
      return C65 || CT.C65;
    },
    /*material_palette.MaterialPurple._shade500*/get _shade500() {
      return C66 || CT.C66;
    }
  });
  let C67;
  let C68;
  let C69;
  material_palette.MaterialCyan = class MaterialCyan extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialCyan._shade500;
    }
  };
  (material_palette.MaterialCyan.new = function() {
    material_palette.MaterialCyan.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialCyan.prototype;
  dart.addTypeTests(material_palette.MaterialCyan);
  dart.setGetterSignature(material_palette.MaterialCyan, () => ({
    __proto__: dart.getGetters(material_palette.MaterialCyan.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialCyan, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialCyan, {
    /*material_palette.MaterialCyan._shade200*/get _shade200() {
      return C67 || CT.C67;
    },
    /*material_palette.MaterialCyan._shade700*/get _shade700() {
      return C68 || CT.C68;
    },
    /*material_palette.MaterialCyan._shade500*/get _shade500() {
      return C69 || CT.C69;
    }
  });
  let C70;
  let C71;
  let C72;
  material_palette.MaterialDeepOrange = class MaterialDeepOrange extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialDeepOrange._shade500;
    }
  };
  (material_palette.MaterialDeepOrange.new = function() {
    material_palette.MaterialDeepOrange.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialDeepOrange.prototype;
  dart.addTypeTests(material_palette.MaterialDeepOrange);
  dart.setGetterSignature(material_palette.MaterialDeepOrange, () => ({
    __proto__: dart.getGetters(material_palette.MaterialDeepOrange.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialDeepOrange, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialDeepOrange, {
    /*material_palette.MaterialDeepOrange._shade200*/get _shade200() {
      return C70 || CT.C70;
    },
    /*material_palette.MaterialDeepOrange._shade700*/get _shade700() {
      return C71 || CT.C71;
    },
    /*material_palette.MaterialDeepOrange._shade500*/get _shade500() {
      return C72 || CT.C72;
    }
  });
  let C73;
  let C74;
  let C75;
  material_palette.MaterialLime = class MaterialLime extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialLime._shade500;
    }
  };
  (material_palette.MaterialLime.new = function() {
    material_palette.MaterialLime.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialLime.prototype;
  dart.addTypeTests(material_palette.MaterialLime);
  dart.setGetterSignature(material_palette.MaterialLime, () => ({
    __proto__: dart.getGetters(material_palette.MaterialLime.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialLime, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialLime, {
    /*material_palette.MaterialLime._shade200*/get _shade200() {
      return C73 || CT.C73;
    },
    /*material_palette.MaterialLime._shade700*/get _shade700() {
      return C74 || CT.C74;
    },
    /*material_palette.MaterialLime._shade500*/get _shade500() {
      return C75 || CT.C75;
    }
  });
  let C76;
  let C77;
  let C78;
  material_palette.MaterialIndigo = class MaterialIndigo extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialIndigo._shade500;
    }
  };
  (material_palette.MaterialIndigo.new = function() {
    material_palette.MaterialIndigo.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialIndigo.prototype;
  dart.addTypeTests(material_palette.MaterialIndigo);
  dart.setGetterSignature(material_palette.MaterialIndigo, () => ({
    __proto__: dart.getGetters(material_palette.MaterialIndigo.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialIndigo, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialIndigo, {
    /*material_palette.MaterialIndigo._shade200*/get _shade200() {
      return C76 || CT.C76;
    },
    /*material_palette.MaterialIndigo._shade700*/get _shade700() {
      return C77 || CT.C77;
    },
    /*material_palette.MaterialIndigo._shade500*/get _shade500() {
      return C78 || CT.C78;
    }
  });
  let C79;
  let C80;
  let C81;
  material_palette.MaterialPink = class MaterialPink extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialPink._shade500;
    }
  };
  (material_palette.MaterialPink.new = function() {
    material_palette.MaterialPink.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialPink.prototype;
  dart.addTypeTests(material_palette.MaterialPink);
  dart.setGetterSignature(material_palette.MaterialPink, () => ({
    __proto__: dart.getGetters(material_palette.MaterialPink.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialPink, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialPink, {
    /*material_palette.MaterialPink._shade200*/get _shade200() {
      return C79 || CT.C79;
    },
    /*material_palette.MaterialPink._shade700*/get _shade700() {
      return C80 || CT.C80;
    },
    /*material_palette.MaterialPink._shade500*/get _shade500() {
      return C81 || CT.C81;
    }
  });
  let C82;
  let C83;
  let C84;
  material_palette.MaterialTeal = class MaterialTeal extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialTeal._shade500;
    }
  };
  (material_palette.MaterialTeal.new = function() {
    material_palette.MaterialTeal.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialTeal.prototype;
  dart.addTypeTests(material_palette.MaterialTeal);
  dart.setGetterSignature(material_palette.MaterialTeal, () => ({
    __proto__: dart.getGetters(material_palette.MaterialTeal.__proto__),
    shadeDefault: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialTeal, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialTeal, {
    /*material_palette.MaterialTeal._shade200*/get _shade200() {
      return C82 || CT.C82;
    },
    /*material_palette.MaterialTeal._shade700*/get _shade700() {
      return C83 || CT.C83;
    },
    /*material_palette.MaterialTeal._shade500*/get _shade500() {
      return C84 || CT.C84;
    }
  });
  let C85;
  let C86;
  let C87;
  let C88;
  let C89;
  let C90;
  let C91;
  let C92;
  let C93;
  let C94;
  material_palette.MaterialGray = class MaterialGray extends palette.Palette {
    get shadeDefault() {
      return material_palette.MaterialGray._shade500;
    }
    get shade50() {
      return C85 || CT.C85;
    }
    get shade100() {
      return C86 || CT.C86;
    }
    get shade200() {
      return material_palette.MaterialGray._shade200;
    }
    get shade300() {
      return C87 || CT.C87;
    }
    get shade400() {
      return C88 || CT.C88;
    }
    get shade500() {
      return material_palette.MaterialGray._shade500;
    }
    get shade600() {
      return C89 || CT.C89;
    }
    get shade700() {
      return material_palette.MaterialGray._shade700;
    }
    get shade800() {
      return C90 || CT.C90;
    }
    get shade900() {
      return C91 || CT.C91;
    }
  };
  (material_palette.MaterialGray.new = function() {
    material_palette.MaterialGray.__proto__.new.call(this);
    ;
  }).prototype = material_palette.MaterialGray.prototype;
  dart.addTypeTests(material_palette.MaterialGray);
  dart.setGetterSignature(material_palette.MaterialGray, () => ({
    __proto__: dart.getGetters(material_palette.MaterialGray.__proto__),
    shadeDefault: color$.Color,
    shade50: color$.Color,
    shade100: color$.Color,
    shade200: color$.Color,
    shade300: color$.Color,
    shade400: color$.Color,
    shade500: color$.Color,
    shade600: color$.Color,
    shade700: color$.Color,
    shade800: color$.Color,
    shade900: color$.Color
  }));
  dart.setLibraryUri(material_palette.MaterialGray, "package:charts_common/src/common/material_palette.dart");
  dart.defineLazy(material_palette.MaterialGray, {
    /*material_palette.MaterialGray._shade200*/get _shade200() {
      return C92 || CT.C92;
    },
    /*material_palette.MaterialGray._shade700*/get _shade700() {
      return C93 || CT.C93;
    },
    /*material_palette.MaterialGray._shade500*/get _shade500() {
      return C94 || CT.C94;
    }
  });
  const _is_TickDrawStrategy_default = Symbol('_is_TickDrawStrategy_default');
  tick_draw_strategy.TickDrawStrategy$ = dart.generic(D => {
    class TickDrawStrategy extends core.Object {}
    (TickDrawStrategy.new = function() {
      ;
    }).prototype = TickDrawStrategy.prototype;
    dart.addTypeTests(TickDrawStrategy);
    TickDrawStrategy.prototype[_is_TickDrawStrategy_default] = true;
    dart.setLibraryUri(TickDrawStrategy, "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart");
    return TickDrawStrategy;
  });
  tick_draw_strategy.TickDrawStrategy = tick_draw_strategy.TickDrawStrategy$();
  dart.addTypeTests(tick_draw_strategy.TickDrawStrategy, _is_TickDrawStrategy_default);
  const ticksCollide$ = dart.privateName(collision_report, "CollisionReport.ticksCollide");
  const ticks$ = dart.privateName(collision_report, "CollisionReport.ticks");
  const alternateTicksUsed$ = dart.privateName(collision_report, "CollisionReport.alternateTicksUsed");
  collision_report.CollisionReport = class CollisionReport extends core.Object {
    get ticksCollide() {
      return this[ticksCollide$];
    }
    set ticksCollide(value) {
      super.ticksCollide = value;
    }
    get ticks() {
      return this[ticks$];
    }
    set ticks(value) {
      super.ticks = value;
    }
    get alternateTicksUsed() {
      return this[alternateTicksUsed$];
    }
    set alternateTicksUsed(value) {
      super.alternateTicksUsed = value;
    }
  };
  (collision_report.CollisionReport.new = function(opts) {
    let t0;
    let ticksCollide = opts && 'ticksCollide' in opts ? opts.ticksCollide : null;
    let ticks = opts && 'ticks' in opts ? opts.ticks : null;
    let alternateTicksUsed = opts && 'alternateTicksUsed' in opts ? opts.alternateTicksUsed : null;
    this[ticksCollide$] = ticksCollide;
    this[ticks$] = ticks;
    this[alternateTicksUsed$] = (t0 = alternateTicksUsed, t0 == null ? false : t0);
    ;
  }).prototype = collision_report.CollisionReport.prototype;
  (collision_report.CollisionReport.empty = function() {
    this[ticksCollide$] = false;
    this[ticks$] = JSArrayOfTick().of([]);
    this[alternateTicksUsed$] = false;
    ;
  }).prototype = collision_report.CollisionReport.prototype;
  dart.addTypeTests(collision_report.CollisionReport);
  dart.setLibraryUri(collision_report.CollisionReport, "package:charts_common/src/chart/cartesian/axis/collision_report.dart");
  dart.setFieldSignature(collision_report.CollisionReport, () => ({
    __proto__: dart.getFields(collision_report.CollisionReport.__proto__),
    ticksCollide: dart.finalFieldType(core.bool),
    ticks: dart.finalFieldType(core.List$(tick.Tick)),
    alternateTicksUsed: dart.finalFieldType(core.bool)
  }));
  const _name$4 = dart.privateName(axis$, "_name");
  let C95;
  let C96;
  let C97;
  let C98;
  let C99;
  axis$.AxisOrientation = class AxisOrientation extends core.Object {
    toString() {
      return this[_name$4];
    }
  };
  (axis$.AxisOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$4] = _name;
    ;
  }).prototype = axis$.AxisOrientation.prototype;
  dart.addTypeTests(axis$.AxisOrientation);
  dart.setLibraryUri(axis$.AxisOrientation, "package:charts_common/src/chart/cartesian/axis/axis.dart");
  dart.setFieldSignature(axis$.AxisOrientation, () => ({
    __proto__: dart.getFields(axis$.AxisOrientation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$4]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(axis$.AxisOrientation, ['toString']);
  axis$.AxisOrientation.top = C95 || CT.C95;
  axis$.AxisOrientation.right = C96 || CT.C96;
  axis$.AxisOrientation.bottom = C97 || CT.C97;
  axis$.AxisOrientation.left = C98 || CT.C98;
  axis$.AxisOrientation.values = C99 || CT.C99;
  const _is_ImmutableAxis_default = Symbol('_is_ImmutableAxis_default');
  axis$.ImmutableAxis$ = dart.generic(D => {
    class ImmutableAxis extends core.Object {}
    (ImmutableAxis.new = function() {
      ;
    }).prototype = ImmutableAxis.prototype;
    dart.addTypeTests(ImmutableAxis);
    ImmutableAxis.prototype[_is_ImmutableAxis_default] = true;
    dart.setLibraryUri(ImmutableAxis, "package:charts_common/src/chart/cartesian/axis/axis.dart");
    return ImmutableAxis;
  });
  axis$.ImmutableAxis = axis$.ImmutableAxis$();
  dart.addTypeTests(axis$.ImmutableAxis, _is_ImmutableAxis_default);
  const _previousScale = dart.privateName(axis$, "_previousScale");
  const _formatterValueCache = dart.privateName(axis$, "_formatterValueCache");
  const _autoViewport = dart.privateName(axis$, "_autoViewport");
  const _providedTicks = dart.privateName(axis$, "_providedTicks");
  const _axisTicks = dart.privateName(axis$, "_axisTicks");
  const _componentBounds = dart.privateName(axis$, "_componentBounds");
  const _drawAreaBounds = dart.privateName(axis$, "_drawAreaBounds");
  const _graphicsFactory = dart.privateName(axis$, "_graphicsFactory");
  const _scale = dart.privateName(axis$, "_scale");
  const _tickProvider = dart.privateName(axis$, "_tickProvider");
  const _tickFormatter = dart.privateName(axis$, "_tickFormatter");
  const _updateProvidedTicks = dart.privateName(axis$, "_updateProvidedTicks");
  const _updateAxisTicks = dart.privateName(axis$, "_updateAxisTicks");
  const _clampTranslatePx = dart.privateName(axis$, "_clampTranslatePx");
  const _layoutPosition = dart.privateName(axis$, "_layoutPosition");
  const _measureVerticalAxis = dart.privateName(axis$, "_measureVerticalAxis");
  const _measureHorizontalAxis = dart.privateName(axis$, "_measureHorizontalAxis");
  const _is_Axis_default = Symbol('_is_Axis_default');
  const tickDrawStrategy = dart.privateName(axis$, "Axis.tickDrawStrategy");
  const axisOrientation = dart.privateName(axis$, "Axis.axisOrientation");
  const context = dart.privateName(axis$, "Axis.context");
  const reverseOutputRange = dart.privateName(axis$, "Axis.reverseOutputRange");
  const forceDrawAxisLine = dart.privateName(axis$, "Axis.forceDrawAxisLine");
  const lockAxis = dart.privateName(axis$, "Axis.lockAxis");
  const layoutPaintOrder = dart.privateName(axis$, "Axis.layoutPaintOrder");
  axis$.Axis$ = dart.generic(D => {
    let LinkedMapOfD$String = () => (LinkedMapOfD$String = dart.constFn(_js_helper.LinkedMap$(D, core.String)))();
    let AxisTicksOfD = () => (AxisTicksOfD = dart.constFn(axis_tick.AxisTicks$(D)))();
    let JSArrayOfAxisTicksOfD = () => (JSArrayOfAxisTicksOfD = dart.constFn(_interceptors.JSArray$(AxisTicksOfD())))();
    let TickDrawStrategyOfD = () => (TickDrawStrategyOfD = dart.constFn(tick_draw_strategy.TickDrawStrategy$(D)))();
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    let TickProviderOfD = () => (TickProviderOfD = dart.constFn(tick_provider.TickProvider$(D)))();
    let TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    let ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    let AxisTicksOfDTobool = () => (AxisTicksOfDTobool = dart.constFn(dart.fnType(core.bool, [AxisTicksOfD()])))();
    class Axis extends axis$.ImmutableAxis$(D) {
      get tickDrawStrategy() {
        return this[tickDrawStrategy];
      }
      set tickDrawStrategy(value) {
        this[tickDrawStrategy] = TickDrawStrategyOfD()._check(value);
      }
      get axisOrientation() {
        return this[axisOrientation];
      }
      set axisOrientation(value) {
        this[axisOrientation] = value;
      }
      get context() {
        return this[context];
      }
      set context(value) {
        this[context] = value;
      }
      get reverseOutputRange() {
        return this[reverseOutputRange];
      }
      set reverseOutputRange(value) {
        this[reverseOutputRange] = value;
      }
      get forceDrawAxisLine() {
        return this[forceDrawAxisLine];
      }
      set forceDrawAxisLine(value) {
        this[forceDrawAxisLine] = value;
      }
      get lockAxis() {
        return this[lockAxis];
      }
      set lockAxis(value) {
        this[lockAxis] = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder];
      }
      set layoutPaintOrder(value) {
        this[layoutPaintOrder] = value;
      }
      get scale() {
        return this[_scale];
      }
      set scale(scale) {
        MutableScaleOfD()._check(scale);
        this[_scale] = scale;
      }
      get tickProvider() {
        return this[_tickProvider];
      }
      set tickProvider(tickProvider) {
        TickProviderOfD()._check(tickProvider);
        this[_tickProvider] = tickProvider;
      }
      set tickFormatter(formatter) {
        TickFormatterOfD()._check(formatter);
        if (!dart.equals(this[_tickFormatter], formatter)) {
          this[_tickFormatter] = formatter;
          this[_formatterValueCache][$clear]();
        }
      }
      get tickFormatter() {
        return this[_tickFormatter];
      }
      get mutableScale() {
        return this[_scale];
      }
      get rangeBand() {
        return this[_scale].rangeBand;
      }
      get stepSize() {
        return this[_scale].stepSize;
      }
      get range() {
        return this[_scale].range;
      }
      set autoViewport(autoViewport) {
        this[_autoViewport] = autoViewport;
      }
      get autoViewport() {
        return this[_autoViewport];
      }
      setRangeBandConfig(rangeBandConfig) {
        this.mutableScale.rangeBandConfig = rangeBandConfig;
      }
      get hasValidBarChartRangeBandConfig() {
        let t0, t0$, t0$0;
        return !dart.equals((t0$0 = (t0$ = (t0 = this.mutableScale, t0 == null ? null : t0.rangeBandConfig), t0$ == null ? null : t0$.type), t0$0 == null ? scale$.RangeBandType.none : t0$0), scale$.RangeBandType.none);
      }
      addDomainValue(domain) {
        D._check(domain);
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_scale].addDomain(domain);
      }
      resetDomains() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_formatterValueCache][$clear]();
        this[_scale].resetDomain();
        this.reverseOutputRange = false;
        if (dart.test(this[_autoViewport])) {
          this[_scale].resetViewportSettings();
        }
      }
      getLocation(domain) {
        D._check(domain);
        return domain != null ? this[_scale]._get(domain) : null;
      }
      getDomain(location) {
        return this[_scale].reverse(location);
      }
      compareDomainValueToViewport(domain) {
        D._check(domain);
        return this[_scale].compareDomainValueToViewport(domain);
      }
      setOutputRange(start, end) {
        this[_scale].range = new scale$.ScaleOutputExtent.new(start, end);
      }
      updateTicks() {
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      [_updateProvidedTicks]() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_providedTicks] = this.tickProvider.getTicks({context: this.context, graphicsFactory: this.graphicsFactory, scale: this[_scale], formatter: this.tickFormatter, formatterValueCache: this[_formatterValueCache], tickDrawStrategy: this.tickDrawStrategy, orientation: this.axisOrientation, viewportExtensionEnabled: this[_autoViewport]});
      }
      [_updateAxisTicks]() {
        let t0, t0$, t0$0;
        if (dart.test(this.lockAxis)) {
          return;
        }
        let providedTicks = core.List.from((t0 = this[_providedTicks], t0 == null ? [] : t0));
        for (let animatedTick of this[_axisTicks]) {
          let tick = (t0$ = providedTicks, t0$ == null ? null : t0$[$firstWhere](dart.fn(t => dart.equals(dart.dload(t, 'value'), animatedTick.value), dynamicTobool()), {orElse: dart.fn(() => null, VoidToNull())}));
          if (tick != null) {
            if (!dart.test(text_element.TextElement.elementSettingsSame(animatedTick.textElement, text_element.TextElement._check(dart.dload(tick, 'textElement'))))) {
              animatedTick.textElement = text_element.TextElement._check(dart.dload(tick, 'textElement'));
            }
            animatedTick.setNewTarget(this[_scale]._get(D._check(dart.dload(tick, 'value'))));
            providedTicks[$remove](tick);
          } else {
            animatedTick.animateOut(this[_scale]._get(animatedTick.value)[$toDouble]());
          }
        }
        t0$0 = providedTicks;
        t0$0 == null ? null : t0$0[$forEach](dart.fn(tick => {
          let animatedTick = new (AxisTicksOfD()).new(TickOfD()._check(tick));
          if (this[_previousScale] != null) {
            animatedTick.animateInFrom(this[_previousScale]._get(D._check(dart.dload(tick, 'value')))[$toDouble]());
          }
          this[_axisTicks][$add](animatedTick);
        }, dynamicToNull()));
        this[_axisTicks][$sort]();
        this[_previousScale] = this[_scale].copy();
      }
      setViewportSettings(viewportScale, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        viewportTranslatePx = this[_clampTranslatePx](viewportScale, viewportTranslatePx, {drawAreaWidth: drawAreaWidth});
        this[_scale].setViewportSettings(viewportScale, viewportTranslatePx);
      }
      get viewportScalingFactor() {
        return this[_scale].viewportScalingFactor;
      }
      get viewportTranslatePx() {
        let t0;
        t0 = this[_scale];
        return t0 == null ? null : t0.viewportTranslatePx;
      }
      [_clampTranslatePx](viewportScalingFactor, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        if (drawAreaWidth == null) {
          return viewportTranslatePx;
        }
        let maxNegativeTranslate = -1.0 * (dart.notNull(drawAreaWidth) * dart.notNull(viewportScalingFactor) - dart.notNull(drawAreaWidth));
        viewportTranslatePx = math.min(core.double, math.max(core.double, viewportTranslatePx, maxNegativeTranslate), 0.0);
        return viewportTranslatePx;
      }
      get graphicsFactory() {
        return this[_graphicsFactory];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory] = value;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: this.layoutPaintOrder, position: this[_layoutPosition], positionOrder: 20});
      }
      get [_layoutPosition]() {
        let position = null;
        switch (this.axisOrientation) {
          case C95 || CT.C95:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
          case C96 || CT.C96:
          {
            position = layout_view.LayoutPosition.Right;
            break;
          }
          case C97 || CT.C97:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C98 || CT.C98:
          {
            position = layout_view.LayoutPosition.Left;
            break;
          }
        }
        return position;
      }
      get isVertical() {
        return dart.equals(this.axisOrientation, axis$.AxisOrientation.left) || dart.equals(this.axisOrientation, axis$.AxisOrientation.right);
      }
      measure(maxWidth, maxHeight) {
        return dart.test(this.isVertical) ? this[_measureVerticalAxis](maxWidth, maxHeight) : this[_measureHorizontalAxis](maxWidth, maxHeight);
      }
      [_measureVerticalAxis](maxWidth, maxHeight) {
        this.setOutputRange(maxHeight, 0);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureVerticallyDrawnTicks(ListOfTickOfD()._check(this[_providedTicks]), maxWidth, maxHeight);
      }
      [_measureHorizontalAxis](maxWidth, maxHeight) {
        this.setOutputRange(0, maxWidth);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureHorizontallyDrawnTicks(ListOfTickOfD()._check(this[_providedTicks]), maxWidth, maxHeight);
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds] = componentBounds;
        this[_drawAreaBounds] = drawAreaBounds;
        let outputStart = dart.test(this.isVertical) ? this[_componentBounds][$bottom] : this[_componentBounds][$left];
        let outputEnd = dart.test(this.isVertical) ? this[_componentBounds][$top] : this[_componentBounds][$right];
        let outputRange = dart.test(this.reverseOutputRange) ? new scale$.ScaleOutputExtent.new(outputEnd, outputStart) : new scale$.ScaleOutputExtent.new(outputStart, outputEnd);
        if (!dart.equals(this[_scale].range, outputRange)) {
          this[_scale].range = outputRange;
        }
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      get isSeriesRenderer() {
        return false;
      }
      get componentBounds() {
        return this[_componentBounds];
      }
      get drawAxisLine() {
        if (this.forceDrawAxisLine != null) {
          return this.forceDrawAxisLine;
        }
        return small_tick_draw_strategy.SmallTickDrawStrategy.is(this.tickDrawStrategy);
      }
      paint(canvas, animationPercent) {
        let t0;
        if (animationPercent === 1.0) {
          this[_axisTicks][$removeWhere](dart.fn(t => t.markedForRemoval, AxisTicksOfDTobool()));
        }
        for (let i = 0; i < dart.notNull(this[_axisTicks][$length]); i = i + 1) {
          let animatedTick = this[_axisTicks][$_get](i);
          this.tickDrawStrategy.draw(canvas, (t0 = animatedTick, t0.setCurrentTick(animationPercent), t0), {orientation: this.axisOrientation, axisBounds: this[_componentBounds], drawAreaBounds: this[_drawAreaBounds], isFirst: i === 0, isLast: i === dart.notNull(this[_axisTicks][$length]) - 1});
        }
        if (dart.test(this.drawAxisLine)) {
          this.tickDrawStrategy.drawAxisLine(canvas, this.axisOrientation, this[_componentBounds]);
        }
      }
    }
    (Axis.new = function(opts) {
      let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
      let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      this[_previousScale] = null;
      this[_formatterValueCache] = new (LinkedMapOfD$String()).new();
      this[tickDrawStrategy] = null;
      this[axisOrientation] = null;
      this[context] = null;
      this[reverseOutputRange] = false;
      this[_autoViewport] = true;
      this[forceDrawAxisLine] = null;
      this[lockAxis] = false;
      this[_providedTicks] = null;
      this[_axisTicks] = JSArrayOfAxisTicksOfD().of([]);
      this[_componentBounds] = null;
      this[_drawAreaBounds] = null;
      this[_graphicsFactory] = null;
      this[layoutPaintOrder] = 0;
      this[_scale] = scale;
      this[_tickProvider] = tickProvider;
      this[_tickFormatter] = tickFormatter;
      ;
    }).prototype = Axis.prototype;
    dart.addTypeTests(Axis);
    Axis.prototype[_is_Axis_default] = true;
    Axis[dart.implements] = () => [layout_view.LayoutView];
    dart.setMethodSignature(Axis, () => ({
      __proto__: dart.getMethods(Axis.__proto__),
      setRangeBandConfig: dart.fnType(dart.void, [scale$.RangeBandConfig]),
      addDomainValue: dart.fnType(dart.void, [core.Object]),
      resetDomains: dart.fnType(dart.void, []),
      getLocation: dart.fnType(core.double, [core.Object]),
      getDomain: dart.fnType(D, [core.double]),
      compareDomainValueToViewport: dart.fnType(core.int, [core.Object]),
      setOutputRange: dart.fnType(dart.void, [core.int, core.int]),
      updateTicks: dart.fnType(dart.void, []),
      [_updateProvidedTicks]: dart.fnType(dart.void, []),
      [_updateAxisTicks]: dart.fnType(dart.void, []),
      setViewportSettings: dart.fnType(dart.void, [core.double, core.double], {drawAreaWidth: core.int}, {}),
      [_clampTranslatePx]: dart.fnType(core.double, [core.double, core.double], {drawAreaWidth: core.int}, {}),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      [_measureVerticalAxis]: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      [_measureHorizontalAxis]: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(Axis, () => ({
      __proto__: dart.getGetters(Axis.__proto__),
      scale: scale$.MutableScale$(D),
      tickProvider: tick_provider.TickProvider$(D),
      tickFormatter: tick_formatter.TickFormatter$(D),
      mutableScale: scale$.MutableScale$(D),
      rangeBand: core.double,
      stepSize: core.double,
      range: scale$.ScaleOutputExtent,
      autoViewport: core.bool,
      hasValidBarChartRangeBandConfig: core.bool,
      viewportScalingFactor: core.double,
      viewportTranslatePx: core.double,
      graphicsFactory: graphics_factory.GraphicsFactory,
      layoutConfig: layout_view.LayoutViewConfig,
      [_layoutPosition]: layout_view.LayoutPosition,
      isVertical: core.bool,
      isSeriesRenderer: core.bool,
      componentBounds: math.Rectangle$(core.int),
      drawAxisLine: core.bool
    }));
    dart.setSetterSignature(Axis, () => ({
      __proto__: dart.getSetters(Axis.__proto__),
      scale: core.Object,
      tickProvider: core.Object,
      tickFormatter: core.Object,
      autoViewport: core.bool,
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(Axis, "package:charts_common/src/chart/cartesian/axis/axis.dart");
    dart.setFieldSignature(Axis, () => ({
      __proto__: dart.getFields(Axis.__proto__),
      [_scale]: dart.fieldType(scale$.MutableScale$(D)),
      [_previousScale]: dart.fieldType(scale$.MutableScale$(D)),
      [_tickProvider]: dart.fieldType(tick_provider.TickProvider$(D)),
      [_tickFormatter]: dart.fieldType(tick_formatter.TickFormatter$(D)),
      [_formatterValueCache]: dart.finalFieldType(core.Map$(D, core.String)),
      tickDrawStrategy: dart.fieldType(tick_draw_strategy.TickDrawStrategy$(D)),
      axisOrientation: dart.fieldType(axis$.AxisOrientation),
      context: dart.fieldType(chart_context.ChartContext),
      reverseOutputRange: dart.fieldType(core.bool),
      [_autoViewport]: dart.fieldType(core.bool),
      forceDrawAxisLine: dart.fieldType(core.bool),
      lockAxis: dart.fieldType(core.bool),
      [_providedTicks]: dart.fieldType(core.List$(tick.Tick)),
      [_axisTicks]: dart.finalFieldType(core.List$(axis_tick.AxisTicks$(D))),
      [_componentBounds]: dart.fieldType(math.Rectangle$(core.int)),
      [_drawAreaBounds]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory]: dart.fieldType(graphics_factory.GraphicsFactory),
      layoutPaintOrder: dart.fieldType(core.int)
    }));
    return Axis;
  });
  axis$.Axis = axis$.Axis$();
  dart.defineLazy(axis$.Axis, {
    /*axis$.Axis.primaryMeasureAxisId*/get primaryMeasureAxisId() {
      return "primaryMeasureAxisId";
    },
    /*axis$.Axis.secondaryMeasureAxisId*/get secondaryMeasureAxisId() {
      return "secondaryMeasureAxisId";
    }
  });
  dart.addTypeTests(axis$.Axis, _is_Axis_default);
  axis$.NumericAxis = class NumericAxis extends axis$.Axis$(core.num) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      numeric_scale.NumericScale.as(this[_scale]).viewportDomain = viewport;
    }
  };
  (axis$.NumericAxis.new = function(opts) {
    let t0;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    axis$.NumericAxis.__proto__.new.call(this, {tickProvider: (t0 = tickProvider, t0 == null ? new numeric_tick_provider.NumericTickProvider.new() : t0), tickFormatter: tick_formatter.NumericTickFormatter.new(), scale: new linear_scale.LinearScale.new()});
    ;
  }).prototype = axis$.NumericAxis.prototype;
  dart.addTypeTests(axis$.NumericAxis);
  dart.setMethodSignature(axis$.NumericAxis, () => ({
    __proto__: dart.getMethods(axis$.NumericAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [numeric_extents.NumericExtents])
  }));
  dart.setLibraryUri(axis$.NumericAxis, "package:charts_common/src/chart/cartesian/axis/axis.dart");
  let C100;
  let C101;
  axis$.OrdinalAxis = class OrdinalAxis extends axis$.Axis$(core.String) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      ordinal_scale.OrdinalScale.as(this[_scale]).setViewport(viewport.dataSize, viewport.startingDomain);
    }
    layout(componentBounds, drawAreaBounds) {
      super.layout(componentBounds, drawAreaBounds);
      ordinal_scale.OrdinalScale.as(this[_scale]).setViewport(null, null);
    }
  };
  (axis$.OrdinalAxis.new = function(opts) {
    let t0, t0$;
    let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    axis$.OrdinalAxis.__proto__.new.call(this, {tickProvider: TickProviderOfString()._check((t0 = tickProvider, t0 == null ? C100 || CT.C100 : t0)), tickFormatter: TickFormatterOfString()._check((t0$ = tickFormatter, t0$ == null ? C101 || CT.C101 : t0$)), scale: new simple_ordinal_scale.SimpleOrdinalScale.new()});
    ;
  }).prototype = axis$.OrdinalAxis.prototype;
  dart.addTypeTests(axis$.OrdinalAxis);
  dart.setMethodSignature(axis$.OrdinalAxis, () => ({
    __proto__: dart.getMethods(axis$.OrdinalAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [axis$.OrdinalViewport])
  }));
  dart.setLibraryUri(axis$.OrdinalAxis, "package:charts_common/src/chart/cartesian/axis/axis.dart");
  const startingDomain$ = dart.privateName(axis$, "OrdinalViewport.startingDomain");
  const dataSize$ = dart.privateName(axis$, "OrdinalViewport.dataSize");
  axis$.OrdinalViewport = class OrdinalViewport extends core.Object {
    get startingDomain() {
      return this[startingDomain$];
    }
    set startingDomain(value) {
      super.startingDomain = value;
    }
    get dataSize() {
      return this[dataSize$];
    }
    set dataSize(value) {
      super.dataSize = value;
    }
    _equals(other) {
      if (other == null) return false;
      return axis$.OrdinalViewport.is(other) && this.startingDomain == other.startingDomain && this.dataSize == other.dataSize;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.startingDomain);
      hashcode = hashcode * 37 + dart.notNull(this.dataSize);
      return hashcode;
    }
  };
  (axis$.OrdinalViewport.new = function(startingDomain, dataSize) {
    this[startingDomain$] = startingDomain;
    this[dataSize$] = dataSize;
    ;
  }).prototype = axis$.OrdinalViewport.prototype;
  dart.addTypeTests(axis$.OrdinalViewport);
  dart.setMethodSignature(axis$.OrdinalViewport, () => ({
    __proto__: dart.getMethods(axis$.OrdinalViewport.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(axis$.OrdinalViewport, "package:charts_common/src/chart/cartesian/axis/axis.dart");
  dart.setFieldSignature(axis$.OrdinalViewport, () => ({
    __proto__: dart.getFields(axis$.OrdinalViewport.__proto__),
    startingDomain: dart.finalFieldType(core.String),
    dataSize: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(axis$.OrdinalViewport, ['_equals']);
  dart.defineExtensionAccessors(axis$.OrdinalViewport, ['hashCode']);
  const _axis$ = dart.privateName(axis$, "_axis");
  const _is_AxisTester_default = Symbol('_is_AxisTester_default');
  axis$.AxisTester$ = dart.generic(D => {
    let AxisTicksOfD = () => (AxisTicksOfD = dart.constFn(axis_tick.AxisTicks$(D)))();
    let AxisTicksOfDToD = () => (AxisTicksOfDToD = dart.constFn(dart.fnType(D, [AxisTicksOfD()])))();
    class AxisTester extends core.Object {
      get axisTicks() {
        return this[_axis$][_axisTicks];
      }
      get scale() {
        return this[_axis$][_scale];
      }
      get axisValues() {
        return this.axisTicks[$map](D, dart.fn(t => t.value, AxisTicksOfDToD()))[$toList]();
      }
    }
    (AxisTester.new = function(_axis) {
      this[_axis$] = _axis;
      ;
    }).prototype = AxisTester.prototype;
    dart.addTypeTests(AxisTester);
    AxisTester.prototype[_is_AxisTester_default] = true;
    dart.setGetterSignature(AxisTester, () => ({
      __proto__: dart.getGetters(AxisTester.__proto__),
      axisTicks: core.List$(axis_tick.AxisTicks$(D)),
      scale: scale$.MutableScale$(D),
      axisValues: core.List$(D)
    }));
    dart.setLibraryUri(AxisTester, "package:charts_common/src/chart/cartesian/axis/axis.dart");
    dart.setFieldSignature(AxisTester, () => ({
      __proto__: dart.getFields(AxisTester.__proto__),
      [_axis$]: dart.finalFieldType(axis$.Axis$(D))
    }));
    return AxisTester;
  });
  axis$.AxisTester = axis$.AxisTester$();
  dart.addTypeTests(axis$.AxisTester, _is_AxisTester_default);
  const TypedKey_uniqueKey = dart.privateName(typed_registry, "TypedKey.uniqueKey");
  let C102;
  let C103;
  let C104;
  dart.defineLazy(axis$, {
    /*axis$.measureAxisIdKey*/get measureAxisIdKey() {
      return C102 || CT.C102;
    },
    /*axis$.measureAxisKey*/get measureAxisKey() {
      return C103 || CT.C103;
    },
    /*axis$.domainAxisKey*/get domainAxisKey() {
      return C104 || CT.C104;
    }
  });
  ordinal_scale.OrdinalScale = class OrdinalScale extends scale$.MutableScale$(core.String) {};
  (ordinal_scale.OrdinalScale.new = function() {
    ;
  }).prototype = ordinal_scale.OrdinalScale.prototype;
  dart.addTypeTests(ordinal_scale.OrdinalScale);
  dart.setLibraryUri(ordinal_scale.OrdinalScale, "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart");
  const _index = dart.privateName(ordinal_scale_domain_info, "_index");
  const _domainsToOrder = dart.privateName(ordinal_scale_domain_info, "_domainsToOrder");
  const _domainList = dart.privateName(ordinal_scale_domain_info, "_domainList");
  ordinal_scale_domain_info.OrdinalScaleDomainInfo = class OrdinalScaleDomainInfo extends core.Object {
    copy() {
      let t0;
      t0 = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
      t0[_domainsToOrder][$addAll](this[_domainsToOrder]);
      t0[_index] = this[_index];
      t0[_domainList][$addAll](this[_domainList]);
      return t0;
    }
    add(domain) {
      if (!dart.test(this[_domainsToOrder][$containsKey](domain))) {
        this[_domainsToOrder][$_set](domain, this[_index]);
        this[_index] = dart.notNull(this[_index]) + 1;
        this[_domainList][$add](domain);
      }
    }
    indexOf(domain) {
      return this[_domainsToOrder][$_get](domain);
    }
    getDomainAtIndex(index) {
      if (!(dart.notNull(index) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart", 53, 12, "index >= 0");
      if (!(dart.notNull(index) < dart.notNull(this[_index]))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart", 54, 12, "index < _index");
      return this[_domainList][$_get](index);
    }
    get domains() {
      return this[_domainList];
    }
    get first() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$first];
    }
    get last() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$last];
    }
    get isEmpty() {
      return this[_index] === 0;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    get extent() {
      return ordinal_extents.OrdinalExtents.all(this[_domainList]);
    }
    get size() {
      return this[_index];
    }
    clear() {
      this[_domainsToOrder][$clear]();
      this[_domainList][$clear]();
      this[_index] = 0;
    }
  };
  (ordinal_scale_domain_info.OrdinalScaleDomainInfo.new = function() {
    this[_index] = 0;
    this[_domainsToOrder] = new (IdentityMapOfString$int()).new();
    this[_domainList] = JSArrayOfString().of([]);
    ;
  }).prototype = ordinal_scale_domain_info.OrdinalScaleDomainInfo.prototype;
  dart.addTypeTests(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.setMethodSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getMethods(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    copy: dart.fnType(ordinal_scale_domain_info.OrdinalScaleDomainInfo, []),
    add: dart.fnType(dart.void, [core.String]),
    indexOf: dart.fnType(core.int, [core.String]),
    getDomainAtIndex: dart.fnType(core.String, [core.int]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getGetters(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    domains: core.List$(core.String),
    first: core.String,
    last: core.String,
    isEmpty: core.bool,
    isNotEmpty: core.bool,
    extent: ordinal_extents.OrdinalExtents,
    size: core.int
  }));
  dart.setLibraryUri(ordinal_scale_domain_info.OrdinalScaleDomainInfo, "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart");
  dart.setFieldSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getFields(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    [_index]: dart.fieldType(core.int),
    [_domainsToOrder]: dart.finalFieldType(collection.HashMap$(core.String, core.int)),
    [_domainList]: dart.finalFieldType(core.List$(core.String))
  }));
  const _range = dart.privateName(ordinal_extents, "_range");
  ordinal_extents.OrdinalExtents = class OrdinalExtents extends scale$.Extents$(core.String) {
    static all(range) {
      return new ordinal_extents.OrdinalExtents.new(range);
    }
    get isEmpty() {
      return this[_range][$isEmpty];
    }
    get length() {
      return this[_range][$length];
    }
    _get(index) {
      return this[_range][$_get](index);
    }
    indexOf(value) {
      return this[_range][$indexOf](value);
    }
  };
  (ordinal_extents.OrdinalExtents.new = function(range) {
    this[_range] = range;
    let uniqueValueCount = collection.HashSet.from(this[_range])[$length];
    if (!(uniqueValueCount == range[$length])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/ordinal_extents.dart", 31, 12, "uniqueValueCount == range.length");
  }).prototype = ordinal_extents.OrdinalExtents.prototype;
  dart.addTypeTests(ordinal_extents.OrdinalExtents);
  dart.setMethodSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getMethods(ordinal_extents.OrdinalExtents.__proto__),
    _get: dart.fnType(core.String, [core.int]),
    indexOf: dart.fnType(core.int, [core.String])
  }));
  dart.setGetterSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getGetters(ordinal_extents.OrdinalExtents.__proto__),
    isEmpty: core.bool,
    length: core.int
  }));
  dart.setLibraryUri(ordinal_extents.OrdinalExtents, "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart");
  dart.setFieldSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getFields(ordinal_extents.OrdinalExtents.__proto__),
    [_range]: dart.finalFieldType(core.List$(core.String))
  }));
  const _stepSizeConfig = dart.privateName(simple_ordinal_scale, "_stepSizeConfig");
  const _range$ = dart.privateName(simple_ordinal_scale, "_range");
  const _viewportScale = dart.privateName(simple_ordinal_scale, "_viewportScale");
  const _viewportTranslatePx = dart.privateName(simple_ordinal_scale, "_viewportTranslatePx");
  const _rangeBandConfig = dart.privateName(simple_ordinal_scale, "_rangeBandConfig");
  const _scaleChanged = dart.privateName(simple_ordinal_scale, "_scaleChanged");
  const _cachedStepSizePixels = dart.privateName(simple_ordinal_scale, "_cachedStepSizePixels");
  const _cachedRangeBandShift = dart.privateName(simple_ordinal_scale, "_cachedRangeBandShift");
  const _cachedRangeBandSize = dart.privateName(simple_ordinal_scale, "_cachedRangeBandSize");
  const _viewportDataSize = dart.privateName(simple_ordinal_scale, "_viewportDataSize");
  const _viewportStartingDomain = dart.privateName(simple_ordinal_scale, "_viewportStartingDomain");
  const _domain = dart.privateName(simple_ordinal_scale, "_domain");
  const _updateScale = dart.privateName(simple_ordinal_scale, "_updateScale");
  const _recalculateScale = dart.privateName(simple_ordinal_scale, "_recalculateScale");
  const _updateViewport = dart.privateName(simple_ordinal_scale, "_updateViewport");
  const _updateCachedFields = dart.privateName(simple_ordinal_scale, "_updateCachedFields");
  simple_ordinal_scale.SimpleOrdinalScale = class SimpleOrdinalScale extends core.Object {
    get rangeBand() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedRangeBandSize];
    }
    get stepSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedStepSizePixels];
    }
    get domainStepSize() {
      return 1.0;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      if (barGroupWidthConfig == null) {
        dart.throw(new core.ArgumentError.notNull("RangeBandConfig must not be null."));
      }
      if (dart.equals(barGroupWidthConfig.type, scale$.RangeBandType.fixedDomain) || dart.equals(barGroupWidthConfig.type, scale$.RangeBandType.none)) {
        dart.throw(new core.ArgumentError.new("barGroupWidthConfig must not be NONE or FIXED_DOMAIN"));
      }
      this[_rangeBandConfig] = barGroupWidthConfig;
      this[_scaleChanged] = true;
    }
    get rangeBandConfig() {
      return this[_rangeBandConfig];
    }
    set stepSizeConfig(config) {
      if (config != null && !dart.equals(config.type, scale$.StepSizeType.autoDetect)) {
        dart.throw(new core.ArgumentError.new("Ordinal scales only support StepSizeConfig of type Auto"));
      }
    }
    get stepSizeConfig() {
      return this[_stepSizeConfig];
    }
    _get(domainValue) {
      core.String._check(domainValue);
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      let i = this[_domain].indexOf(domainValue);
      if (i != null) {
        return dart.notNull(this.viewportTranslatePx) + dart.notNull(this[_range$].start) + dart.notNull(this[_cachedRangeBandShift]) + dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(i);
      }
      return 0.0;
    }
    reverse(pixelLocation) {
      let index = (dart.notNull(pixelLocation) - dart.notNull(this.viewportTranslatePx) - dart.notNull(this[_range$].start) - dart.notNull(this[_cachedRangeBandShift])) / dart.notNull(this[_cachedStepSizePixels]);
      return this[_domain].getDomainAtIndex(math.max(core.int, 0, math.min(core.int, index[$round](), dart.notNull(this.domain.size) - 1)));
    }
    canTranslate(domainValue) {
      core.String._check(domainValue);
      return this[_domain].indexOf(domainValue) != null;
    }
    get domain() {
      return this[_domain];
    }
    addDomain(domainValue) {
      core.String._check(domainValue);
      this[_domain].add(domainValue);
      this[_scaleChanged] = true;
    }
    set range(extent) {
      this[_range$] = extent;
      this[_scaleChanged] = true;
    }
    get range() {
      return this[_range$];
    }
    resetDomain() {
      this[_domain].clear();
      this[_scaleChanged] = true;
    }
    resetViewportSettings() {
      this[_viewportScale] = 1.0;
      this[_viewportTranslatePx] = 0.0;
      this[_scaleChanged] = true;
    }
    get rangeWidth() {
      return (dart.notNull(this.range.start) - dart.notNull(this.range.end))[$abs]()[$toInt]();
    }
    get viewportScalingFactor() {
      return this[_viewportScale];
    }
    get viewportTranslatePx() {
      return this[_viewportTranslatePx];
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[_viewportScale] = viewportScale;
      this[_viewportTranslatePx] = math.min(core.double, 0.0, math.max(core.double, dart.notNull(this.rangeWidth) * (1.0 - dart.notNull(viewportScale)), viewportTranslatePx));
      this[_scaleChanged] = true;
    }
    setViewport(viewportDataSize, startingDomain) {
      if (startingDomain != null && viewportDataSize != null && dart.notNull(viewportDataSize) <= 0) {
        dart.throw(new core.ArgumentError.new("viewportDataSize can" + "t be less than 1."));
      }
      this[_scaleChanged] = true;
      this[_viewportDataSize] = viewportDataSize;
      this[_viewportStartingDomain] = startingDomain;
    }
    [_updateViewport]() {
      this.setViewportSettings(1.0, 0.0);
      this[_recalculateScale]();
      if (dart.test(this[_domain].isEmpty)) {
        return;
      }
      this.setViewportSettings(dart.notNull(this[_domain].size) / math.min(core.num, this[_viewportDataSize], this[_domain].size), 0.0);
      this[_recalculateScale]();
      let domainIndex = this[_domain].indexOf(this[_viewportStartingDomain]);
      if (domainIndex != null) {
        let viewportTranslatePx = -(dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(domainIndex));
        this.setViewportSettings(this[_viewportScale], viewportTranslatePx);
      }
    }
    get viewportDataSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return dart.test(this[_domain].isEmpty) ? 0 : (dart.notNull(this.rangeWidth) / dart.notNull(this[_cachedStepSizePixels]))[$truncate]();
    }
    get viewportStartingDomain() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      if (dart.test(this[_domain].isEmpty)) {
        return null;
      }
      return this[_domain].getDomainAtIndex((-dart.notNull(this[_viewportTranslatePx]) / dart.notNull(this[_cachedStepSizePixels]))[$ceil]()[$toInt]());
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range != null && dart.notNull(rangeValue) >= dart.notNull(this.range.min) && dart.notNull(rangeValue) <= dart.notNull(this.range.max);
    }
    compareDomainValueToViewport(domainValue) {
      core.String._check(domainValue);
      let i = this[_domain].indexOf(domainValue);
      if (i != null && this.range != null) {
        let domainPx = this._get(domainValue);
        if (dart.notNull(domainPx) < dart.notNull(this.range.min)) {
          return -1;
        }
        if (dart.notNull(domainPx) > dart.notNull(this.range.max)) {
          return 1;
        }
        return 0;
      }
      return -1;
    }
    copy() {
      return new simple_ordinal_scale.SimpleOrdinalScale._copy(this);
    }
    [_updateCachedFields](stepSizePixels, rangeBandPixels, rangeBandShift) {
      this[_cachedStepSizePixels] = stepSizePixels;
      this[_cachedRangeBandSize] = rangeBandPixels;
      this[_cachedRangeBandShift] = rangeBandShift;
      if (dart.notNull(this.range.start) > dart.notNull(this.range.end)) {
        this[_cachedStepSizePixels] = dart.notNull(this[_cachedStepSizePixels]) * -1;
        this[_cachedRangeBandShift] = dart.notNull(this[_cachedRangeBandShift]) * -1;
      }
      this[_scaleChanged] = false;
    }
    [_updateScale]() {
      if (this[_viewportStartingDomain] != null && this[_viewportDataSize] != null) {
        this[_updateViewport]();
      }
      this[_recalculateScale]();
    }
    [_recalculateScale]() {
      let stepSizePixels = dart.test(this[_domain].isEmpty) ? 0.0 : dart.notNull(this[_viewportScale]) * (this.rangeWidth[$toDouble]() / this[_domain].size[$toDouble]());
      let rangeBandPixels = null;
      switch (this.rangeBandConfig.type) {
        case C29 || CT.C29:
        {
          rangeBandPixels = this.rangeBandConfig.size[$toDouble]();
          break;
        }
        case C33 || CT.C33:
        {
          let spaceInPixels = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = math.max(core.double, 0.0, stepSizePixels - spaceInPixels);
          break;
        }
        case C32 || CT.C32:
        case C31 || CT.C31:
        {
          let percent = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = stepSizePixels * percent;
          break;
        }
        case C30 || CT.C30:
        case C28 || CT.C28:
        default:
        {
          dart.throw(new core.StateError.new("RangeBandType must not be NONE or FIXED_DOMAIN"));
          break;
        }
      }
      this[_updateCachedFields](stepSizePixels, rangeBandPixels, stepSizePixels / 2.0);
    }
  };
  (simple_ordinal_scale.SimpleOrdinalScale.new = function() {
    this[_stepSizeConfig] = new scale$.StepSizeConfig.auto();
    this[_range$] = new scale$.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale$.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  (simple_ordinal_scale.SimpleOrdinalScale._copy = function(other) {
    this[_stepSizeConfig] = new scale$.StepSizeConfig.auto();
    this[_range$] = new scale$.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale$.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = other[_domain].copy();
    this[_range$] = new scale$.ScaleOutputExtent.new(other[_range$].start, other[_range$].end);
    this[_viewportScale] = other[_viewportScale];
    this[_viewportTranslatePx] = other[_viewportTranslatePx];
    this[_rangeBandConfig] = other[_rangeBandConfig];
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  dart.addTypeTests(simple_ordinal_scale.SimpleOrdinalScale);
  simple_ordinal_scale.SimpleOrdinalScale[dart.implements] = () => [ordinal_scale.OrdinalScale];
  dart.setMethodSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getMethods(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    _get: dart.fnType(core.num, [core.Object]),
    reverse: dart.fnType(core.String, [core.double]),
    canTranslate: dart.fnType(core.bool, [core.Object]),
    addDomain: dart.fnType(dart.void, [core.Object]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    setViewport: dart.fnType(dart.void, [core.int, core.String]),
    [_updateViewport]: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    compareDomainValueToViewport: dart.fnType(core.int, [core.Object]),
    copy: dart.fnType(simple_ordinal_scale.SimpleOrdinalScale, []),
    [_updateCachedFields]: dart.fnType(dart.void, [core.double, core.double, core.double]),
    [_updateScale]: dart.fnType(dart.void, []),
    [_recalculateScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getGetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeBandConfig: scale$.RangeBandConfig,
    stepSizeConfig: scale$.StepSizeConfig,
    domain: ordinal_scale_domain_info.OrdinalScaleDomainInfo,
    range: scale$.ScaleOutputExtent,
    rangeWidth: core.int,
    viewportScalingFactor: core.double,
    viewportTranslatePx: core.double,
    viewportDataSize: core.int,
    viewportStartingDomain: core.String
  }));
  dart.setSetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getSetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    rangeBandConfig: scale$.RangeBandConfig,
    stepSizeConfig: scale$.StepSizeConfig,
    range: scale$.ScaleOutputExtent
  }));
  dart.setLibraryUri(simple_ordinal_scale.SimpleOrdinalScale, "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart");
  dart.setFieldSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getFields(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [_stepSizeConfig]: dart.finalFieldType(scale$.StepSizeConfig),
    [_domain]: dart.fieldType(ordinal_scale_domain_info.OrdinalScaleDomainInfo),
    [_range$]: dart.fieldType(scale$.ScaleOutputExtent),
    [_viewportScale]: dart.fieldType(core.double),
    [_viewportTranslatePx]: dart.fieldType(core.double),
    [_rangeBandConfig]: dart.fieldType(scale$.RangeBandConfig),
    [_scaleChanged]: dart.fieldType(core.bool),
    [_cachedStepSizePixels]: dart.fieldType(core.double),
    [_cachedRangeBandShift]: dart.fieldType(core.double),
    [_cachedRangeBandSize]: dart.fieldType(core.double),
    [_viewportDataSize]: dart.fieldType(core.int),
    [_viewportStartingDomain]: dart.fieldType(core.String)
  }));
  ordinal_tick_provider.OrdinalTickProvider = class OrdinalTickProvider extends tick_provider.BaseTickProvider$(core.String) {
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let domainValues = opts && 'domainValues' in opts ? opts.domainValues : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      ordinal_scale.OrdinalScale._check(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      tick_formatter.TickFormatter._check(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      MapOfString$String()._check(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      TickHintOfString()._check(tickHint);
      return this.createTicks(scale.domain.domains, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: TickFormatterOfString()._check(formatter), formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy});
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_tick_provider.OrdinalTickProvider.is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (ordinal_tick_provider.OrdinalTickProvider.new = function() {
    ordinal_tick_provider.OrdinalTickProvider.__proto__.new.call(this);
    ;
  }).prototype = ordinal_tick_provider.OrdinalTickProvider.prototype;
  dart.addTypeTests(ordinal_tick_provider.OrdinalTickProvider);
  dart.setMethodSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getMethods(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.String)), [], {context: chart_context.ChartContext, domainValues: core.List$(core.String), formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {})
  }));
  dart.setLibraryUri(ordinal_tick_provider.OrdinalTickProvider, "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart");
  dart.defineExtensionMethods(ordinal_tick_provider.OrdinalTickProvider, ['_equals']);
  dart.defineExtensionAccessors(ordinal_tick_provider.OrdinalTickProvider, ['hashCode']);
  chart_context.ChartContext = class ChartContext extends core.Object {};
  (chart_context.ChartContext.new = function() {
    ;
  }).prototype = chart_context.ChartContext.prototype;
  dart.addTypeTests(chart_context.ChartContext);
  dart.setLibraryUri(chart_context.ChartContext, "package:charts_common/src/chart/common/chart_context.dart");
  const boundingBox$ = dart.privateName(a11y_node, "A11yNode.boundingBox");
  const label$ = dart.privateName(a11y_node, "A11yNode.label");
  const onFocus$ = dart.privateName(a11y_node, "A11yNode.onFocus");
  a11y_node.A11yNode = class A11yNode extends core.Object {
    get boundingBox() {
      return this[boundingBox$];
    }
    set boundingBox(value) {
      super.boundingBox = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get onFocus() {
      return this[onFocus$];
    }
    set onFocus(value) {
      this[onFocus$] = value;
    }
  };
  (a11y_node.A11yNode.new = function(label, boundingBox, opts) {
    let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
    this[label$] = label;
    this[boundingBox$] = boundingBox;
    this[onFocus$] = onFocus;
    ;
  }).prototype = a11y_node.A11yNode.prototype;
  dart.addTypeTests(a11y_node.A11yNode);
  dart.setLibraryUri(a11y_node.A11yNode, "package:charts_common/src/chart/common/behavior/a11y/a11y_node.dart");
  dart.setFieldSignature(a11y_node.A11yNode, () => ({
    __proto__: dart.getFields(a11y_node.A11yNode.__proto__),
    boundingBox: dart.finalFieldType(math.Rectangle$(core.int)),
    label: dart.finalFieldType(core.String),
    onFocus: dart.fieldType(dart.fnType(dart.void, []))
  }));
  const _name$5 = dart.privateName(rtl_spec, "_name");
  let C105;
  const axisDirection$ = dart.privateName(rtl_spec, "RTLSpec.axisDirection");
  rtl_spec.RTLSpec = class RTLSpec extends core.Object {
    get axisDirection() {
      return this[axisDirection$];
    }
    set axisDirection(value) {
      super.axisDirection = value;
    }
  };
  (rtl_spec.RTLSpec.new = function(opts) {
    let axisDirection = opts && 'axisDirection' in opts ? opts.axisDirection : C105 || CT.C105;
    this[axisDirection$] = axisDirection;
    ;
  }).prototype = rtl_spec.RTLSpec.prototype;
  dart.addTypeTests(rtl_spec.RTLSpec);
  dart.setLibraryUri(rtl_spec.RTLSpec, "package:charts_common/src/common/rtl_spec.dart");
  dart.setFieldSignature(rtl_spec.RTLSpec, () => ({
    __proto__: dart.getFields(rtl_spec.RTLSpec.__proto__),
    axisDirection: dart.finalFieldType(rtl_spec.AxisDirection)
  }));
  let C106;
  let C107;
  rtl_spec.AxisDirection = class AxisDirection extends core.Object {
    toString() {
      return this[_name$5];
    }
  };
  (rtl_spec.AxisDirection.new = function(index, _name) {
    this.index = index;
    this[_name$5] = _name;
    ;
  }).prototype = rtl_spec.AxisDirection.prototype;
  dart.addTypeTests(rtl_spec.AxisDirection);
  dart.setLibraryUri(rtl_spec.AxisDirection, "package:charts_common/src/common/rtl_spec.dart");
  dart.setFieldSignature(rtl_spec.AxisDirection, () => ({
    __proto__: dart.getFields(rtl_spec.AxisDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$5]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(rtl_spec.AxisDirection, ['toString']);
  rtl_spec.AxisDirection.normal = C106 || CT.C106;
  rtl_spec.AxisDirection.reversed = C105 || CT.C105;
  rtl_spec.AxisDirection.values = C107 || CT.C107;
  const _desiredMaxTickCount = dart.privateName(numeric_tick_provider, "_desiredMaxTickCount");
  const _desiredMinTickCount = dart.privateName(numeric_tick_provider, "_desiredMinTickCount");
  const _allowedSteps = dart.privateName(numeric_tick_provider, "_allowedSteps");
  let C108;
  const _low = dart.privateName(numeric_tick_provider, "_low");
  const _high = dart.privateName(numeric_tick_provider, "_high");
  const _rangeWidth = dart.privateName(numeric_tick_provider, "_rangeWidth");
  const _minTickCount = dart.privateName(numeric_tick_provider, "_minTickCount");
  const _maxTickCount = dart.privateName(numeric_tick_provider, "_maxTickCount");
  const _prevLow = dart.privateName(numeric_tick_provider, "_prevLow");
  const _prevHigh = dart.privateName(numeric_tick_provider, "_prevHigh");
  const _prevRangeWidth = dart.privateName(numeric_tick_provider, "_prevRangeWidth");
  const _prevMinTickCount = dart.privateName(numeric_tick_provider, "_prevMinTickCount");
  const _prevMaxTickCount = dart.privateName(numeric_tick_provider, "_prevMaxTickCount");
  const _prevDataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "_prevDataIsInWholeNumbers");
  const _getTickValues = dart.privateName(numeric_tick_provider, "_getTickValues");
  const _getTicksFromHint = dart.privateName(numeric_tick_provider, "_getTicksFromHint");
  const _updateDomainExtents = dart.privateName(numeric_tick_provider, "_updateDomainExtents");
  const _hasTickParametersChanged = dart.privateName(numeric_tick_provider, "_hasTickParametersChanged");
  const _updateTickCounts = dart.privateName(numeric_tick_provider, "_updateTickCounts");
  const _getStepsForTickCount = dart.privateName(numeric_tick_provider, "_getStepsForTickCount");
  const _setPreviousTickCalculationParameters = dart.privateName(numeric_tick_provider, "_setPreviousTickCalculationParameters");
  const zeroBound = dart.privateName(numeric_tick_provider, "NumericTickProvider.zeroBound");
  const dataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataIsInWholeNumbers");
  const dataToAxisUnitConverter = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataToAxisUnitConverter");
  let C109;
  numeric_tick_provider.NumericTickProvider = class NumericTickProvider extends tick_provider.BaseTickProvider$(core.num) {
    get zeroBound() {
      return this[zeroBound];
    }
    set zeroBound(value) {
      this[zeroBound] = value;
    }
    get dataIsInWholeNumbers() {
      return this[dataIsInWholeNumbers];
    }
    set dataIsInWholeNumbers(value) {
      this[dataIsInWholeNumbers] = value;
    }
    get dataToAxisUnitConverter() {
      return this[dataToAxisUnitConverter];
    }
    set dataToAxisUnitConverter(value) {
      this[dataToAxisUnitConverter] = value;
    }
    setFixedTickCount(tickCount) {
      this[_desiredMinTickCount] = tickCount != null && dart.notNull(tickCount) > 1 ? tickCount : null;
      this[_desiredMaxTickCount] = this[_desiredMinTickCount];
    }
    setTickCount(maxTickCount, minTickCount) {
      if (maxTickCount != null && dart.notNull(maxTickCount) > 1) {
        this[_desiredMaxTickCount] = maxTickCount;
        if (minTickCount != null && dart.notNull(minTickCount) > 1 && dart.notNull(minTickCount) <= dart.notNull(this[_desiredMaxTickCount])) {
          this[_desiredMinTickCount] = minTickCount;
        } else {
          this[_desiredMinTickCount] = 2;
        }
      } else {
        this[_desiredMaxTickCount] = null;
        this[_desiredMinTickCount] = null;
      }
    }
    set allowedSteps(steps) {
      if (!(steps != null && dart.test(steps[$isNotEmpty]))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart", 187, 12, "steps != null && steps.isNotEmpty");
      steps[$sort]();
      let stepSet = collection.LinkedHashSet.from(steps);
      this[_allowedSteps] = ListOfdouble().new(dart.notNull(stepSet[$length]) * 3);
      let stepIndex = 0;
      for (let t0 of stepSet) {
        let step = core.double._check(t0);
        if (!(1.0 <= dart.notNull(step) && dart.notNull(step) < 10.0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart", 194, 14, "1.0 <= step && step < 10.0");
        this[_allowedSteps][$_set](stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 100));
        this[_allowedSteps][$_set](dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 10)[$toDouble]());
        this[_allowedSteps][$_set](2 * dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step));
        stepIndex = stepIndex + 1;
      }
    }
    [_getTicksFromHint](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      let stepSize = (dart.notNull(tickHint.end) - dart.notNull(tickHint.start)) / (dart.notNull(tickHint.tickCount) - 1);
      let tickZeroShift = dart.notNull(tickHint.start) - stepSize * (dart.notNull(tickHint.start) >= 0 ? (dart.notNull(tickHint.start) / stepSize)[$floor]() : (dart.notNull(tickHint.start) / stepSize)[$ceil]());
      let tickStart = (dart.notNull(scale.viewportDomain.min) / stepSize)[$ceil]() * stepSize + tickZeroShift;
      let stepInfo = new numeric_tick_provider._TickStepInfo.new(stepSize[$abs](), tickStart);
      let tickValues = this[_getTickValues](stepInfo, tickHint.tickCount);
      return this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
    }
    getTicks(opts) {
      let t1, t1$;
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      numeric_scale.NumericScale._check(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      TickFormatterOfnum()._check(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      MapOfnum$String()._check(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      TickHintOfnum()._check(tickHint);
      let ticks = null;
      this[_rangeWidth] = scale.rangeWidth;
      this[_updateDomainExtents](scale.viewportDomain);
      if (tickHint != null) {
        return this[_getTicksFromHint]({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, tickHint: tickHint});
      }
      if (dart.test(this[_hasTickParametersChanged]()) || ticks == null) {
        let selectedTicksRange = 1.7976931348623157e+308;
        let foundPreferredTicks = false;
        let viewportDomain = scale.viewportDomain;
        let axisUnitsHigh = this.dataToAxisUnitConverter.convert(this[_high]);
        let axisUnitsLow = this.dataToAxisUnitConverter.convert(this[_low]);
        this[_updateTickCounts](axisUnitsHigh, axisUnitsLow);
        let mutableScale = numeric_scale.NumericScale._check(dart.test(viewportExtensionEnabled) ? scale.copy() : null);
        for (let tickCount = this[_maxTickCount]; dart.notNull(tickCount) >= dart.notNull(this[_minTickCount]); tickCount = dart.notNull(tickCount) - 1) {
          let stepInfo = this[_getStepsForTickCount](tickCount, axisUnitsHigh, axisUnitsLow);
          if (stepInfo == null) {
            continue;
          }
          let firstTick = this.dataToAxisUnitConverter.invert(stepInfo.tickStart);
          let lastTick = this.dataToAxisUnitConverter.invert(dart.notNull(stepInfo.tickStart) + dart.notNull(stepInfo.stepSize) * (dart.notNull(tickCount) - 1));
          let range = dart.notNull(lastTick) - dart.notNull(firstTick);
          if (range < selectedTicksRange || !foundPreferredTicks) {
            let tickValues = this[_getTickValues](stepInfo, tickCount);
            if (dart.test(viewportExtensionEnabled)) {
              mutableScale.viewportDomain = new numeric_extents.NumericExtents.new(firstTick, lastTick);
            }
            let preferredTicks = this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: dart.test(viewportExtensionEnabled) ? mutableScale : scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
            let collisionReport = tickDrawStrategy.collides(preferredTicks, orientation);
            if (dart.test(collisionReport.ticksCollide) && dart.notNull(tickCount) > dart.notNull(this[_minTickCount])) {
              continue;
            }
            if (foundPreferredTicks && dart.test(collisionReport.alternateTicksUsed)) {
              continue;
            }
            ticks = ListOfTickOfnum()._check(dart.test(collisionReport.alternateTicksUsed) ? collisionReport.ticks : preferredTicks);
            foundPreferredTicks = !dart.test(collisionReport.alternateTicksUsed);
            selectedTicksRange = range;
            viewportDomain = (t1$ = (t1 = mutableScale, t1 == null ? null : t1.viewportDomain), t1$ == null ? scale.viewportDomain : t1$);
          }
        }
        this[_setPreviousTickCalculationParameters]();
        if (dart.test(viewportExtensionEnabled) && !dart.equals(scale.viewportDomain, viewportDomain)) {
          scale.viewportDomain = viewportDomain;
        }
      }
      return ticks;
    }
    [_hasTickParametersChanged]() {
      return this[_low] != this[_prevLow] || this[_high] != this[_prevHigh] || this[_rangeWidth] != this[_prevRangeWidth] || this[_minTickCount] != this[_prevMinTickCount] || this[_maxTickCount] != this[_prevMaxTickCount] || !dart.equals(this.dataIsInWholeNumbers, this[_prevDataIsInWholeNumbers]);
    }
    [_setPreviousTickCalculationParameters]() {
      this[_prevLow] = this[_low];
      this[_prevHigh] = this[_high];
      this[_prevRangeWidth] = this[_rangeWidth];
      this[_prevMinTickCount] = this[_minTickCount];
      this[_prevMaxTickCount] = this[_maxTickCount];
      this[_prevDataIsInWholeNumbers] = this.dataIsInWholeNumbers;
    }
    [_updateDomainExtents](axisExtents) {
      this[_low] = axisExtents.min;
      this[_high] = axisExtents.max;
      if (dart.test(this.zeroBound)) {
        this[_low] = dart.notNull(this[_low]) > 0.0 ? 0.0 : this[_low];
        this[_high] = dart.notNull(this[_high]) < 0.0 ? 0.0 : this[_high];
      }
      if (this[_high] == this[_low]) {
        if (this[_high] === 0.0) {
          this[_high] = 1.0;
        } else {
          if (dart.notNull(this[_high]) > 0.0) {
            this[_high] = dart.notNull(this[_high]) * 1.05;
            this[_low] = dart.notNull(this[_low]) * 0.95;
          } else {
            this[_high] = dart.notNull(this[_high]) * 0.95;
            this[_low] = dart.notNull(this[_low]) * 1.05;
          }
        }
      }
    }
    [_getStepsForTickCount](tickCount, high, low) {
      let regionCount = dart.notNull(tickCount) - 1;
      if (dart.notNull(high) >= 0 && dart.notNull(low) <= 0) {
        let posRegionRatio = dart.notNull(high) > 0 ? math.min(core.double, 1.0, dart.notNull(high) / (dart.notNull(high) - dart.notNull(low))) : 0.0;
        let positiveRegionCount = (regionCount * posRegionRatio)[$ceil]();
        let negativeRegionCount = regionCount - positiveRegionCount;
        if (negativeRegionCount === 0 && dart.notNull(low) < 0 && regionCount > 1) {
          positiveRegionCount = positiveRegionCount - 1;
          negativeRegionCount = negativeRegionCount + 1;
        }
        if (!!(dart.notNull(low) < 0 && dart.notNull(high) > 0 && (negativeRegionCount === 0 || positiveRegionCount === 0))) dart.assertFailed("Numeric tick provider cannot generate " + dart.str(tickCount) + " " + "ticks when the axis range contains both positive and negative " + "values. A minimum of three ticks are required to include zero.", "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart", 434, 11, "!(low < 0 &&\n              high > 0 &&\n              (negativeRegionCount == 0 || positiveRegionCount == 0))");
        let favorPositive = (dart.notNull(high) > 0 ? dart.notNull(high) / positiveRegionCount : 0)[$abs]() > (dart.notNull(low) < 0 ? dart.notNull(low) / negativeRegionCount : 0)[$abs]();
        let favoredNum = (favorPositive ? high : low)[$abs]();
        let favoredRegionCount = favorPositive ? positiveRegionCount : negativeRegionCount;
        let favoredTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(favoredNum)[$abs]();
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * favoredTensBase);
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          if (dart.notNull(tmpStepSize) * favoredRegionCount >= favoredNum) {
            let stepStart = negativeRegionCount > 0 ? -1 * dart.notNull(tmpStepSize) * negativeRegionCount : 0.0;
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, stepStart);
          }
        }
      } else {
        let diffTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(dart.notNull(high) - dart.notNull(low));
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * dart.notNull(diffTensBase));
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          let tmpStepStart = numeric_tick_provider.NumericTickProvider._getStepLessThan(low, tmpStepSize);
          if (dart.notNull(tmpStepStart) + dart.notNull(tmpStepSize) * regionCount >= dart.notNull(high)) {
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, tmpStepStart);
          }
        }
      }
      return new numeric_tick_provider._TickStepInfo.new(1.0, low[$floorToDouble]());
    }
    [_getTickValues](steps, tickCount) {
      let tickValues = ListOfdouble().new(tickCount);
      for (let i = 0; i < dart.notNull(tickCount); i = i + 1) {
        tickValues[$_set](i, this.dataToAxisUnitConverter.invert(numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(steps.tickStart) + i * dart.notNull(steps.stepSize))));
      }
      return tickValues;
    }
    [_updateTickCounts](high, low) {
      let tmpMaxNumMajorTicks = null;
      let tmpMinNumMajorTicks = null;
      let absoluteMinTicks = dart.notNull(low) < 0 && 0 < dart.notNull(high) ? 3 : 2;
      if (this[_desiredMaxTickCount] != null) {
        tmpMinNumMajorTicks = math.max(core.int, this[_desiredMinTickCount], absoluteMinTicks);
        tmpMaxNumMajorTicks = math.max(core.int, this[_desiredMaxTickCount], tmpMinNumMajorTicks);
      } else {
        let minPixelsPerTick = (25)[$toDouble]();
        tmpMinNumMajorTicks = absoluteMinTicks;
        tmpMaxNumMajorTicks = math.max(core.int, absoluteMinTicks, (dart.notNull(this[_rangeWidth]) / minPixelsPerTick)[$floor]());
      }
      if (tmpMaxNumMajorTicks != this[_maxTickCount] || tmpMinNumMajorTicks != this[_minTickCount]) {
        this[_maxTickCount] = tmpMaxNumMajorTicks;
        this[_minTickCount] = tmpMinNumMajorTicks;
      }
    }
    static _getEnclosingPowerOfTen(number) {
      if (number === 0) {
        return 1.0;
      }
      return math.pow(10, (0.4342944819032518 * math.log(number[$abs]()))[$ceil]()) * (dart.notNull(number) < 0.0 ? -1.0 : 1.0);
    }
    static _getStepLessThan(number, stepSize) {
      if (number === 0.0 || stepSize === 0.0) {
        return 0.0;
      }
      return (dart.notNull(stepSize) > 0.0 ? (dart.notNull(number) / dart.notNull(stepSize))[$floor]() : (dart.notNull(number) / dart.notNull(stepSize))[$ceil]()) * dart.notNull(stepSize);
    }
    static _removeRoundingErrors(number) {
      return dart.notNull(number) > 100.0 ? number[$roundToDouble]() : (dart.notNull(number) * 1000000000)[$roundToDouble]() / 1000000000;
    }
  };
  (numeric_tick_provider.NumericTickProvider.new = function() {
    this[zeroBound] = true;
    this[dataIsInWholeNumbers] = true;
    this[_desiredMaxTickCount] = null;
    this[_desiredMinTickCount] = null;
    this[_allowedSteps] = numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS;
    this[dataToAxisUnitConverter] = C108 || CT.C108;
    this[_low] = null;
    this[_high] = null;
    this[_rangeWidth] = null;
    this[_minTickCount] = null;
    this[_maxTickCount] = null;
    this[_prevLow] = null;
    this[_prevHigh] = null;
    this[_prevRangeWidth] = null;
    this[_prevMinTickCount] = null;
    this[_prevMaxTickCount] = null;
    this[_prevDataIsInWholeNumbers] = null;
    numeric_tick_provider.NumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = numeric_tick_provider.NumericTickProvider.prototype;
  dart.addTypeTests(numeric_tick_provider.NumericTickProvider);
  dart.setMethodSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getMethods(numeric_tick_provider.NumericTickProvider.__proto__),
    setFixedTickCount: dart.fnType(dart.void, [core.int]),
    setTickCount: dart.fnType(dart.void, [core.int, core.int]),
    [_getTicksFromHint]: dart.fnType(core.List$(tick.Tick$(core.num)), [], {context: chart_context.ChartContext, formatter: tick_formatter.TickFormatter$(core.num), formatterValueCache: core.Map$(core.num, core.String), graphicsFactory: graphics_factory.GraphicsFactory, scale: numeric_scale.NumericScale, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: tick_provider.TickHint$(core.num)}, {}),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.num)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {}),
    [_hasTickParametersChanged]: dart.fnType(core.bool, []),
    [_setPreviousTickCalculationParameters]: dart.fnType(dart.void, []),
    [_updateDomainExtents]: dart.fnType(dart.void, [numeric_extents.NumericExtents]),
    [_getStepsForTickCount]: dart.fnType(numeric_tick_provider._TickStepInfo, [core.int, core.num, core.num]),
    [_getTickValues]: dart.fnType(core.List$(core.double), [numeric_tick_provider._TickStepInfo, core.int]),
    [_updateTickCounts]: dart.fnType(dart.void, [core.num, core.num])
  }));
  dart.setSetterSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getSetters(numeric_tick_provider.NumericTickProvider.__proto__),
    allowedSteps: core.List$(core.double)
  }));
  dart.setLibraryUri(numeric_tick_provider.NumericTickProvider, "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart");
  dart.setFieldSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getFields(numeric_tick_provider.NumericTickProvider.__proto__),
    zeroBound: dart.fieldType(core.bool),
    dataIsInWholeNumbers: dart.fieldType(core.bool),
    [_desiredMaxTickCount]: dart.fieldType(core.int),
    [_desiredMinTickCount]: dart.fieldType(core.int),
    [_allowedSteps]: dart.fieldType(core.List$(core.double)),
    dataToAxisUnitConverter: dart.fieldType(unit_converter.UnitConverter$(core.num, core.num)),
    [_low]: dart.fieldType(core.num),
    [_high]: dart.fieldType(core.num),
    [_rangeWidth]: dart.fieldType(core.int),
    [_minTickCount]: dart.fieldType(core.int),
    [_maxTickCount]: dart.fieldType(core.int),
    [_prevLow]: dart.fieldType(core.num),
    [_prevHigh]: dart.fieldType(core.num),
    [_prevRangeWidth]: dart.fieldType(core.int),
    [_prevMinTickCount]: dart.fieldType(core.int),
    [_prevMaxTickCount]: dart.fieldType(core.int),
    [_prevDataIsInWholeNumbers]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(numeric_tick_provider.NumericTickProvider, {
    /*numeric_tick_provider.NumericTickProvider.MIN_DIPS_BETWEEN_TICKS*/get MIN_DIPS_BETWEEN_TICKS() {
      return 25;
    },
    /*numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS*/get DEFAULT_STEPS() {
      return C109 || CT.C109;
    }
  });
  numeric_tick_provider._TickStepInfo = class _TickStepInfo extends core.Object {};
  (numeric_tick_provider._TickStepInfo.new = function(stepSize, tickStart) {
    this.stepSize = stepSize;
    this.tickStart = tickStart;
    ;
  }).prototype = numeric_tick_provider._TickStepInfo.prototype;
  dart.addTypeTests(numeric_tick_provider._TickStepInfo);
  dart.setLibraryUri(numeric_tick_provider._TickStepInfo, "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart");
  dart.setFieldSignature(numeric_tick_provider._TickStepInfo, () => ({
    __proto__: dart.getFields(numeric_tick_provider._TickStepInfo.__proto__),
    stepSize: dart.fieldType(core.double),
    tickStart: dart.fieldType(core.double)
  }));
  numeric_scale.NumericScale = class NumericScale extends scale$.MutableScale$(core.num) {};
  (numeric_scale.NumericScale.new = function() {
    ;
  }).prototype = numeric_scale.NumericScale.prototype;
  dart.addTypeTests(numeric_scale.NumericScale);
  dart.setLibraryUri(numeric_scale.NumericScale, "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart");
  const _containsValue = dart.privateName(numeric_extents, "_containsValue");
  const min$ = dart.privateName(numeric_extents, "NumericExtents.min");
  const max$ = dart.privateName(numeric_extents, "NumericExtents.max");
  let C110;
  let C111;
  numeric_extents.NumericExtents = class NumericExtents extends core.Object {
    get min() {
      return this[min$];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      super.max = value;
    }
    static fromValues(values) {
      if (dart.test(values[$isEmpty])) {
        return numeric_extents.NumericExtents.empty;
      }
      let min = values[$first];
      let max = values[$first];
      for (let value of values) {
        if (dart.notNull(value) < dart.notNull(min)) {
          min = value;
        } else if (dart.notNull(max) < dart.notNull(value)) {
          max = value;
        }
      }
      return new numeric_extents.NumericExtents.new(min, max);
    }
    plus(other) {
      if (dart.notNull(this.min) <= dart.notNull(other.min)) {
        if (dart.notNull(this.max) >= dart.notNull(other.max)) {
          return this;
        } else {
          return new numeric_extents.NumericExtents.new(this.min, other.max);
        }
      } else {
        if (dart.notNull(other.max) >= dart.notNull(this.max)) {
          return other;
        } else {
          return new numeric_extents.NumericExtents.new(other.min, this.max);
        }
      }
    }
    compareValue(value) {
      if (dart.notNull(value) < dart.notNull(this.min)) {
        return -1;
      }
      if (dart.notNull(value) > dart.notNull(this.max)) {
        return 1;
      }
      return 0;
    }
    [_containsValue](value) {
      return this.compareValue(value) === 0;
    }
    overlaps(other) {
      return dart.test(this[_containsValue](other.min)) || dart.test(this[_containsValue](other.max)) || dart.test(other[_containsValue](this.min)) || dart.test(other[_containsValue](this.max));
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_extents.NumericExtents.is(other) && this.min == other.min && this.max == other.max;
    }
    get hashCode() {
      return dart.hashCode(this.min) + dart.hashCode(this.max) * 31;
    }
    get width() {
      return dart.notNull(this.max) - dart.notNull(this.min);
    }
    toString() {
      return "Extent(" + dart.str(this.min) + ", " + dart.str(this.max) + ")";
    }
  };
  (numeric_extents.NumericExtents.new = function(min, max) {
    this[min$] = min;
    this[max$] = max;
    ;
  }).prototype = numeric_extents.NumericExtents.prototype;
  dart.addTypeTests(numeric_extents.NumericExtents);
  numeric_extents.NumericExtents[dart.implements] = () => [scale$.Extents$(core.num)];
  dart.setMethodSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getMethods(numeric_extents.NumericExtents.__proto__),
    plus: dart.fnType(numeric_extents.NumericExtents, [numeric_extents.NumericExtents]),
    compareValue: dart.fnType(core.int, [core.num]),
    [_containsValue]: dart.fnType(core.bool, [core.double]),
    overlaps: dart.fnType(core.bool, [numeric_extents.NumericExtents])
  }));
  dart.setGetterSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getGetters(numeric_extents.NumericExtents.__proto__),
    width: core.num
  }));
  dart.setLibraryUri(numeric_extents.NumericExtents, "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart");
  dart.setFieldSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getFields(numeric_extents.NumericExtents.__proto__),
    min: dart.finalFieldType(core.num),
    max: dart.finalFieldType(core.num)
  }));
  dart.defineExtensionMethods(numeric_extents.NumericExtents, ['_equals', 'toString']);
  dart.defineExtensionAccessors(numeric_extents.NumericExtents, ['hashCode']);
  dart.defineLazy(numeric_extents.NumericExtents, {
    /*numeric_extents.NumericExtents.unbounded*/get unbounded() {
      return C110 || CT.C110;
    },
    /*numeric_extents.NumericExtents.empty*/get empty() {
      return C111 || CT.C111;
    }
  });
  const _is_UnitConverter_default = Symbol('_is_UnitConverter_default');
  unit_converter.UnitConverter$ = dart.generic((F, T) => {
    class UnitConverter extends core.Object {}
    (UnitConverter.new = function() {
      ;
    }).prototype = UnitConverter.prototype;
    dart.addTypeTests(UnitConverter);
    UnitConverter.prototype[_is_UnitConverter_default] = true;
    dart.setLibraryUri(UnitConverter, "package:charts_common/src/chart/common/unitconverter/unit_converter.dart");
    return UnitConverter;
  });
  unit_converter.UnitConverter = unit_converter.UnitConverter$();
  dart.addTypeTests(unit_converter.UnitConverter, _is_UnitConverter_default);
  const _is_IdentityConverter_default = Symbol('_is_IdentityConverter_default');
  identity_converter.IdentityConverter$ = dart.generic(U => {
    class IdentityConverter extends core.Object {
      convert(value) {
        U._check(value);
        return value;
      }
      invert(value) {
        U._check(value);
        return value;
      }
    }
    (IdentityConverter.new = function() {
      ;
    }).prototype = IdentityConverter.prototype;
    dart.addTypeTests(IdentityConverter);
    IdentityConverter.prototype[_is_IdentityConverter_default] = true;
    IdentityConverter[dart.implements] = () => [unit_converter.UnitConverter$(U, U)];
    dart.setMethodSignature(IdentityConverter, () => ({
      __proto__: dart.getMethods(IdentityConverter.__proto__),
      convert: dart.fnType(U, [core.Object]),
      invert: dart.fnType(U, [core.Object])
    }));
    dart.setLibraryUri(IdentityConverter, "package:charts_common/src/chart/common/unitconverter/identity_converter.dart");
    return IdentityConverter;
  });
  identity_converter.IdentityConverter = identity_converter.IdentityConverter$();
  dart.addTypeTests(identity_converter.IdentityConverter, _is_IdentityConverter_default);
  const _scaleFunction = dart.privateName(linear_scale, "_scaleFunction");
  let C112;
  let C113;
  const _scaleReady = dart.privateName(linear_scale, "_scaleReady");
  const _domainInfo = dart.privateName(linear_scale, "_domainInfo");
  const _viewportSettings = dart.privateName(linear_scale, "_viewportSettings");
  const _configureScale = dart.privateName(linear_scale, "_configureScale");
  const rangeBandConfig = dart.privateName(linear_scale, "LinearScale.rangeBandConfig");
  const stepSizeConfig = dart.privateName(linear_scale, "LinearScale.stepSizeConfig");
  linear_scale.LinearScale = class LinearScale extends core.Object {
    get rangeBandConfig() {
      return this[rangeBandConfig];
    }
    set rangeBandConfig(value) {
      this[rangeBandConfig] = value;
    }
    get stepSizeConfig() {
      return this[stepSizeConfig];
    }
    set stepSizeConfig(value) {
      this[stepSizeConfig] = value;
    }
    copy() {
      return new linear_scale.LinearScale._copy(this);
    }
    addDomain(domainValue) {
      core.num._check(domainValue);
      this[_domainInfo].addDomainValue(domainValue);
    }
    resetDomain() {
      this[_scaleReady] = false;
      this[_domainInfo].reset();
    }
    resetViewportSettings() {
      this[_viewportSettings].reset();
    }
    get dataExtent() {
      return new numeric_extents.NumericExtents.new(this[_domainInfo].dataDomainStart, this[_domainInfo].dataDomainEnd);
    }
    get minimumDomainStep() {
      return this[_domainInfo].minimumDetectedDomainStep;
    }
    canTranslate(_) {
      core.num._check(_);
      return true;
    }
    set domainOverride(domainMaxExtent) {
      this[_domainInfo].domainOverride = domainMaxExtent;
    }
    get domainOverride() {
      return this[_domainInfo].domainOverride;
    }
    compareDomainValueToViewport(domainValue) {
      core.num._check(domainValue);
      let dataExtent = this[_viewportSettings].domainExtent != null ? this[_viewportSettings].domainExtent : this[_domainInfo].extent;
      return dataExtent.compareValue(domainValue);
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      let t1;
      t1 = this[_viewportSettings];
      t1.scalingFactor = viewportScale;
      t1.translatePx = viewportTranslatePx;
      t1.domainExtent = null;
      t1;
      this[_scaleReady] = false;
    }
    get viewportScalingFactor() {
      return this[_viewportSettings].scalingFactor;
    }
    get viewportTranslatePx() {
      return this[_viewportSettings].translatePx;
    }
    set viewportDomain(extent) {
      this[_scaleReady] = false;
      this[_viewportSettings].domainExtent = extent;
    }
    get viewportDomain() {
      this[_configureScale]();
      return this[_viewportSettings].domainExtent;
    }
    set keepViewportWithinData(autoAdjustViewportToNiceValues) {
      this[_scaleReady] = false;
      this[_viewportSettings].keepViewportWithinData = true;
    }
    get keepViewportWithinData() {
      return this[_viewportSettings].keepViewportWithinData;
    }
    computeViewportScaleFactor(domainWindow) {
      return dart.notNull(this[_domainInfo].domainDiff) / dart.notNull(domainWindow);
    }
    set range(extent) {
      this[_viewportSettings].range = extent;
      this[_scaleReady] = false;
    }
    get range() {
      return this[_viewportSettings].range;
    }
    _get(domainValue) {
      core.num._check(domainValue);
      this[_configureScale]();
      return this[_scaleFunction]._get(domainValue);
    }
    reverse(viewPixels) {
      this[_configureScale]();
      let domain = this[_scaleFunction].reverse(viewPixels);
      return domain;
    }
    get rangeBand() {
      this[_configureScale]();
      return this[_scaleFunction].rangeBandPixels;
    }
    get stepSize() {
      this[_configureScale]();
      return this[_scaleFunction].stepSizePixels;
    }
    get domainStepSize() {
      return this[_domainInfo].minimumDetectedDomainStep[$toDouble]();
    }
    get rangeWidth() {
      return (dart.notNull(this.range.end) - dart.notNull(this.range.start))[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    [_configureScale]() {
      if (dart.test(this[_scaleReady])) return;
      if (!(this[_viewportSettings].range != null)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/linear/linear_scale.dart", 217, 12, "_viewportSettings.range != null");
      this[_viewportSettings].updateViewportScaleFactor(this[_domainInfo]);
      this[_scaleFunction].updateScaleFactor(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig, this.stepSizeConfig);
      this[_viewportSettings].updateViewportTranslatePx(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleFunction].updateTranslateAndRangeBand(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig);
      this[_viewportSettings].updateViewportDomainExtent(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleReady] = true;
    }
  };
  (linear_scale.LinearScale.new = function() {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[rangeBandConfig] = C112 || CT.C112;
    this[stepSizeConfig] = C113 || CT.C113;
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.new();
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.new();
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  (linear_scale.LinearScale._copy = function(other) {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.copy(other[_domainInfo]);
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.copy(other[_viewportSettings]);
    this[rangeBandConfig] = other.rangeBandConfig;
    this[stepSizeConfig] = other.stepSizeConfig;
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  dart.addTypeTests(linear_scale.LinearScale);
  linear_scale.LinearScale[dart.implements] = () => [numeric_scale.NumericScale];
  dart.setMethodSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getMethods(linear_scale.LinearScale.__proto__),
    copy: dart.fnType(linear_scale.LinearScale, []),
    addDomain: dart.fnType(dart.void, [core.Object]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    canTranslate: dart.fnType(core.bool, [core.Object]),
    compareDomainValueToViewport: dart.fnType(core.int, [core.Object]),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    computeViewportScaleFactor: dart.fnType(core.double, [core.double]),
    _get: dart.fnType(core.num, [core.Object]),
    reverse: dart.fnType(core.num, [core.double]),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    [_configureScale]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getGetters(linear_scale.LinearScale.__proto__),
    dataExtent: numeric_extents.NumericExtents,
    minimumDomainStep: core.num,
    domainOverride: numeric_extents.NumericExtents,
    viewportScalingFactor: core.double,
    viewportTranslatePx: core.double,
    viewportDomain: numeric_extents.NumericExtents,
    keepViewportWithinData: core.bool,
    range: scale$.ScaleOutputExtent,
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeWidth: core.int
  }));
  dart.setSetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getSetters(linear_scale.LinearScale.__proto__),
    domainOverride: numeric_extents.NumericExtents,
    viewportDomain: numeric_extents.NumericExtents,
    keepViewportWithinData: core.bool,
    range: scale$.ScaleOutputExtent
  }));
  dart.setLibraryUri(linear_scale.LinearScale, "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart");
  dart.setFieldSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getFields(linear_scale.LinearScale.__proto__),
    [_domainInfo]: dart.finalFieldType(linear_scale_domain_info.LinearScaleDomainInfo),
    [_viewportSettings]: dart.finalFieldType(linear_scale_viewport.LinearScaleViewportSettings),
    [_scaleFunction]: dart.finalFieldType(linear_scale_function.LinearScaleFunction),
    rangeBandConfig: dart.fieldType(scale$.RangeBandConfig),
    stepSizeConfig: dart.fieldType(scale$.StepSizeConfig),
    [_scaleReady]: dart.fieldType(core.bool)
  }));
  const _domainExtent = dart.privateName(linear_scale_viewport, "_domainExtent");
  const _manualDomainExtent = dart.privateName(linear_scale_viewport, "_manualDomainExtent");
  const range = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.range");
  const keepViewportWithinData = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.keepViewportWithinData");
  const scalingFactor = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.scalingFactor");
  const translatePx = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.translatePx");
  linear_scale_viewport.LinearScaleViewportSettings = class LinearScaleViewportSettings extends core.Object {
    get range() {
      return this[range];
    }
    set range(value) {
      this[range] = value;
    }
    get keepViewportWithinData() {
      return this[keepViewportWithinData];
    }
    set keepViewportWithinData(value) {
      this[keepViewportWithinData] = value;
    }
    get scalingFactor() {
      return this[scalingFactor];
    }
    set scalingFactor(value) {
      this[scalingFactor] = value;
    }
    get translatePx() {
      return this[translatePx];
    }
    set translatePx(value) {
      this[translatePx] = value;
    }
    set domainExtent(extent) {
      this[_domainExtent] = extent;
      this[_manualDomainExtent] = extent != null;
    }
    get domainExtent() {
      return this[_domainExtent];
    }
    reset() {
      this.scalingFactor = 1.0;
      this.translatePx = 0.0;
      this.domainExtent = null;
    }
    get rangeWidth() {
      return this.range.diff[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    updateViewportScaleFactor(domainInfo) {
      let t1, t1$, t1$0, t1$1;
      if (dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = (t1$ = (t1 = this[_domainExtent], t1 == null ? null : t1.width), t1$ == null ? null : t1$[$toDouble]());
        if (domainInfo.domainDiff !== 0.0) {
          this.scalingFactor = dart.notNull(domainInfo.domainDiff) / dart.notNull(viewportDomainDiff);
        } else {
          this.scalingFactor = 1.0;
          domainInfo.extendDomain((t1$0 = this[_domainExtent], t1$0 == null ? null : t1$0.min));
          domainInfo.extendDomain((t1$1 = this[_domainExtent], t1$1 == null ? null : t1$1.max));
        }
      }
      if (!dart.test(this.keepViewportWithinData)) {
        this.scalingFactor = math.max(core.double, 1.0, this.scalingFactor);
      }
    }
    updateViewportTranslatePx(domainInfo, scaleScalingFactor) {
      if (dart.test(this[_manualDomainExtent])) {
        this.translatePx = -1.0 * dart.notNull(scaleScalingFactor) * (dart.notNull(this[_domainExtent].min) - dart.notNull(domainInfo.extent.min));
      }
      if (!dart.test(this.keepViewportWithinData)) {
        let rangeDiff = this.range.diff[$toInt]();
        this.translatePx = math.min(core.double, 0.0, this.translatePx);
        this.translatePx = math.max(core.double, rangeDiff * (1.0 - dart.notNull(this.scalingFactor)), this.translatePx);
      }
    }
    updateViewportDomainExtent(domainInfo, scaleScalingFactor) {
      if (!dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = dart.notNull(domainInfo.domainDiff) / dart.notNull(this.scalingFactor);
        let viewportStart = -1.0 * dart.notNull(this.translatePx) / dart.notNull(scaleScalingFactor) + dart.notNull(domainInfo.extent.min);
        this[_domainExtent] = new numeric_extents.NumericExtents.new(viewportStart, viewportStart + viewportDomainDiff);
      }
    }
  };
  (linear_scale_viewport.LinearScaleViewportSettings.new = function() {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    ;
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  (linear_scale_viewport.LinearScaleViewportSettings.copy = function(other) {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    this.range = other.range;
    this.keepViewportWithinData = other.keepViewportWithinData;
    this.scalingFactor = other.scalingFactor;
    this.translatePx = other.translatePx;
    this[_manualDomainExtent] = other[_manualDomainExtent];
    this[_domainExtent] = other[_domainExtent];
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  dart.addTypeTests(linear_scale_viewport.LinearScaleViewportSettings);
  dart.setMethodSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getMethods(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    reset: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    updateViewportScaleFactor: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo]),
    updateViewportTranslatePx: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo, core.double]),
    updateViewportDomainExtent: dart.fnType(dart.void, [linear_scale_domain_info.LinearScaleDomainInfo, core.double])
  }));
  dart.setGetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getGetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: numeric_extents.NumericExtents,
    rangeWidth: core.int
  }));
  dart.setSetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getSetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: numeric_extents.NumericExtents
  }));
  dart.setLibraryUri(linear_scale_viewport.LinearScaleViewportSettings, "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart");
  dart.setFieldSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getFields(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    range: dart.fieldType(scale$.ScaleOutputExtent),
    keepViewportWithinData: dart.fieldType(core.bool),
    scalingFactor: dart.fieldType(core.double),
    translatePx: dart.fieldType(core.double),
    [_domainExtent]: dart.fieldType(numeric_extents.NumericExtents),
    [_manualDomainExtent]: dart.fieldType(core.bool)
  }));
  const _dataDomainStart = dart.privateName(linear_scale_domain_info, "_dataDomainStart");
  const _dataDomainEnd = dart.privateName(linear_scale_domain_info, "_dataDomainEnd");
  const _previouslyAddedDomain = dart.privateName(linear_scale_domain_info, "_previouslyAddedDomain");
  const _minimumDetectedDomainStep = dart.privateName(linear_scale_domain_info, "_minimumDetectedDomainStep");
  const domainOverride = dart.privateName(linear_scale_domain_info, "LinearScaleDomainInfo.domainOverride");
  linear_scale_domain_info.LinearScaleDomainInfo = class LinearScaleDomainInfo extends core.Object {
    get domainOverride() {
      return this[domainOverride];
    }
    set domainOverride(value) {
      this[domainOverride] = value;
    }
    get dataDomainStart() {
      return this[_dataDomainStart];
    }
    get dataDomainEnd() {
      return this[_dataDomainEnd];
    }
    get minimumDetectedDomainStep() {
      return this[_minimumDetectedDomainStep];
    }
    get domainDiff() {
      return this.extent.width;
    }
    reset() {
      this[_previouslyAddedDomain] = null;
      this[_dataDomainStart] = 1 / 0;
      this[_dataDomainEnd] = -1 / 0;
      this[_minimumDetectedDomainStep] = 1 / 0;
    }
    addDomainValue(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return;
      }
      this.extendDomain(domainValue);
      if (this[_previouslyAddedDomain] != null) {
        let domainStep = (dart.notNull(domainValue) - dart.notNull(this[_previouslyAddedDomain]))[$abs]();
        if (domainStep !== 0.0 && domainStep < dart.notNull(this.minimumDetectedDomainStep)) {
          this[_minimumDetectedDomainStep] = domainStep;
        }
      }
      this[_previouslyAddedDomain] = domainValue;
    }
    extendDomain(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return false;
      }
      let domainExtended = false;
      if (dart.notNull(domainValue) < dart.notNull(this[_dataDomainStart])) {
        this[_dataDomainStart] = domainValue;
        domainExtended = true;
      }
      if (dart.notNull(domainValue) > dart.notNull(this[_dataDomainEnd])) {
        this[_dataDomainEnd] = domainValue;
        domainExtended = true;
      }
      return domainExtended;
    }
    get extent() {
      let tmpDomainStart = null;
      let tmpDomainEnd = null;
      if (this.domainOverride != null) {
        tmpDomainStart = this.domainOverride.min;
        tmpDomainEnd = this.domainOverride.max;
      } else {
        tmpDomainStart = this[_dataDomainStart][$isFinite] ? this[_dataDomainStart] : 0.0;
        tmpDomainEnd = this[_dataDomainEnd][$isFinite] ? this[_dataDomainEnd] : 1.0;
      }
      return new numeric_extents.NumericExtents.new(tmpDomainStart, tmpDomainEnd);
    }
  };
  (linear_scale_domain_info.LinearScaleDomainInfo.new = function() {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    ;
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  (linear_scale_domain_info.LinearScaleDomainInfo.copy = function(other) {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    if (other.domainOverride != null) {
      this.domainOverride = other.domainOverride;
    }
    this[_dataDomainStart] = other[_dataDomainStart];
    this[_dataDomainEnd] = other[_dataDomainEnd];
    this[_previouslyAddedDomain] = other[_previouslyAddedDomain];
    this[_minimumDetectedDomainStep] = other[_minimumDetectedDomainStep];
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  dart.addTypeTests(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.setMethodSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getMethods(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    reset: dart.fnType(dart.void, []),
    addDomainValue: dart.fnType(dart.void, [core.num]),
    extendDomain: dart.fnType(core.bool, [core.num])
  }));
  dart.setGetterSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getGetters(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    dataDomainStart: core.num,
    dataDomainEnd: core.num,
    minimumDetectedDomainStep: core.num,
    domainDiff: core.num,
    extent: numeric_extents.NumericExtents
  }));
  dart.setLibraryUri(linear_scale_domain_info.LinearScaleDomainInfo, "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart");
  dart.setFieldSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getFields(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    domainOverride: dart.fieldType(numeric_extents.NumericExtents),
    [_dataDomainStart]: dart.fieldType(core.num),
    [_dataDomainEnd]: dart.fieldType(core.num),
    [_previouslyAddedDomain]: dart.fieldType(core.num),
    [_minimumDetectedDomainStep]: dart.fieldType(core.num)
  }));
  const _updateStepSizeAndScaleFactor = dart.privateName(linear_scale_function, "_updateStepSizeAndScaleFactor");
  const _calculateRangeBandSize = dart.privateName(linear_scale_function, "_calculateRangeBandSize");
  const rangeBandPixels = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeBandPixels");
  const domainTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.domainTranslate");
  const scalingFactor$ = dart.privateName(linear_scale_function, "LinearScaleFunction.scalingFactor");
  const rangeTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeTranslate");
  const stepSizePixels = dart.privateName(linear_scale_function, "LinearScaleFunction.stepSizePixels");
  linear_scale_function.LinearScaleFunction = class LinearScaleFunction extends core.Object {
    get rangeBandPixels() {
      return this[rangeBandPixels];
    }
    set rangeBandPixels(value) {
      this[rangeBandPixels] = value;
    }
    get domainTranslate() {
      return this[domainTranslate];
    }
    set domainTranslate(value) {
      this[domainTranslate] = value;
    }
    get scalingFactor() {
      return this[scalingFactor$];
    }
    set scalingFactor(value) {
      this[scalingFactor$] = value;
    }
    get rangeTranslate() {
      return this[rangeTranslate];
    }
    set rangeTranslate(value) {
      this[rangeTranslate] = value;
    }
    get stepSizePixels() {
      return this[stepSizePixels];
    }
    set stepSizePixels(value) {
      this[stepSizePixels] = value;
    }
    _get(domainValue) {
      return ((dart.notNull(domainValue) + dart.notNull(this.domainTranslate)) * dart.notNull(this.scalingFactor) + dart.notNull(this.rangeTranslate))[$toDouble]();
    }
    reverse(viewPixels) {
      return (dart.notNull(viewPixels) - dart.notNull(this.rangeTranslate)) / dart.notNull(this.scalingFactor) - dart.notNull(this.domainTranslate);
    }
    updateScaleFactor(viewportSettings, domainInfo, rangeBandConfig, stepSizeConfig) {
      let rangeDiff = viewportSettings.range.diff[$toDouble]();
      let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
      let hasHalfStepAtEnd = domainInfo.extent.max == domainInfo.dataDomainEnd;
      let reservedRangePercentOfStep = this.getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd);
      this[_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig);
    }
    getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd) {
      if (!dart.test(hasHalfStepAtStart) && !dart.test(hasHalfStepAtEnd)) {
        return 0.0;
      }
      if (dart.test(hasHalfStepAtStart) && dart.test(hasHalfStepAtEnd)) {
        return 1.0;
      }
      return 0.5;
    }
    updateTranslateAndRangeBand(viewportSettings, domainInfo, rangeBandConfig) {
      if (domainInfo.domainDiff === 0) {
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.range.diff) / 2;
      } else {
        let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
        let reservedRangePixelShift = hasHalfStepAtStart ? dart.notNull(this.stepSizePixels) / 2.0 : 0.0;
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.translatePx) + reservedRangePixelShift;
      }
      this.domainTranslate = -1 * dart.notNull(domainInfo.extent.min);
      this.rangeBandPixels = this[_calculateRangeBandSize](rangeBandConfig);
    }
    [_calculateRangeBandSize](rangeBandConfig) {
      switch (rangeBandConfig.type) {
        case C30 || CT.C30:
        {
          return dart.notNull(rangeBandConfig.size) * dart.notNull(this.scalingFactor);
        }
        case C29 || CT.C29:
        {
          return rangeBandConfig.size;
        }
        case C33 || CT.C33:
        {
          return dart.notNull(this.stepSizePixels) - dart.notNull(rangeBandConfig.size);
        }
        case C32 || CT.C32:
        case C31 || CT.C31:
        {
          return dart.notNull(this.stepSizePixels) * dart.notNull(rangeBandConfig.size);
        }
        case C28 || CT.C28:
        {
          return 0.0;
        }
      }
      return 0.0;
    }
    [_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig) {
      let domainDiff = domainInfo.domainDiff;
      if (!dart.equals(rangeBandConfig.type, scale$.RangeBandType.none)) {
        switch (stepSizeConfig.type) {
          case C35 || CT.C35:
          {
            let minimumDetectedDomainStep = domainInfo.minimumDetectedDomainStep[$toDouble]();
            if (minimumDetectedDomainStep !== null && minimumDetectedDomainStep[$isFinite]) {
              this.scalingFactor = dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / (dart.notNull(domainDiff) + minimumDetectedDomainStep * dart.notNull(reservedRangePercentOfStep)));
              this.stepSizePixels = minimumDetectedDomainStep * dart.notNull(this.scalingFactor);
            } else {
              this.stepSizePixels = rangeDiff[$abs]();
              this.scalingFactor = 1.0;
            }
            return;
          }
          case C37 || CT.C37:
          {
            this.stepSizePixels = stepSizeConfig.size;
            let reservedRangeForStepPixels = dart.notNull(this.stepSizePixels) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) - reservedRangeForStepPixels) / dart.notNull(domainDiff);
            return;
          }
          case C36 || CT.C36:
          {
            let domainStepWidth = stepSizeConfig.size;
            let totalDomainDiff = dart.notNull(domainDiff) + dart.notNull(domainStepWidth) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = totalDomainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / totalDomainDiff);
            this.stepSizePixels = dart.notNull(domainStepWidth) * dart.notNull(this.scalingFactor);
            return;
          }
        }
      }
      this.stepSizePixels = 0.0;
      this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * dart.notNull(rangeDiff) / dart.notNull(domainDiff);
    }
  };
  (linear_scale_function.LinearScaleFunction.new = function() {
    this[rangeBandPixels] = 0.0;
    this[domainTranslate] = 0.0;
    this[scalingFactor$] = 1.0;
    this[rangeTranslate] = 0.0;
    this[stepSizePixels] = 0.0;
    ;
  }).prototype = linear_scale_function.LinearScaleFunction.prototype;
  dart.addTypeTests(linear_scale_function.LinearScaleFunction);
  dart.setMethodSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getMethods(linear_scale_function.LinearScaleFunction.__proto__),
    _get: dart.fnType(core.double, [core.num]),
    reverse: dart.fnType(core.double, [core.double]),
    updateScaleFactor: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, scale$.RangeBandConfig, scale$.StepSizeConfig]),
    getStepReservationPercent: dart.fnType(core.double, [core.bool, core.bool]),
    updateTranslateAndRangeBand: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, scale$.RangeBandConfig]),
    [_calculateRangeBandSize]: dart.fnType(core.double, [scale$.RangeBandConfig]),
    [_updateStepSizeAndScaleFactor]: dart.fnType(dart.void, [linear_scale_viewport.LinearScaleViewportSettings, linear_scale_domain_info.LinearScaleDomainInfo, core.double, core.double, scale$.RangeBandConfig, scale$.StepSizeConfig])
  }));
  dart.setLibraryUri(linear_scale_function.LinearScaleFunction, "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart");
  dart.setFieldSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getFields(linear_scale_function.LinearScaleFunction.__proto__),
    rangeBandPixels: dart.fieldType(core.double),
    domainTranslate: dart.fieldType(core.num),
    scalingFactor: dart.fieldType(core.double),
    rangeTranslate: dart.fieldType(core.double),
    stepSizePixels: dart.fieldType(core.double)
  }));
  const _is_BaseRenderSpec_default = Symbol('_is_BaseRenderSpec_default');
  const labelStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelStyle");
  const labelAnchor$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelAnchor");
  const labelJustification$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelJustification");
  const labelOffsetFromAxisPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromAxisPx");
  const labelOffsetFromTickPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromTickPx");
  const minimumPaddingBetweenLabelsPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.minimumPaddingBetweenLabelsPx");
  const labelRotation$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelRotation");
  const axisLineStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.axisLineStyle");
  base_tick_draw_strategy.BaseRenderSpec$ = dart.generic(D => {
    class BaseRenderSpec extends core.Object {
      get labelStyle() {
        return this[labelStyle$];
      }
      set labelStyle(value) {
        super.labelStyle = value;
      }
      get labelAnchor() {
        return this[labelAnchor$];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelJustification() {
        return this[labelJustification$];
      }
      set labelJustification(value) {
        super.labelJustification = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$];
      }
      set labelOffsetFromAxisPx(value) {
        super.labelOffsetFromAxisPx = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$];
      }
      set labelOffsetFromTickPx(value) {
        super.labelOffsetFromTickPx = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        super.minimumPaddingBetweenLabelsPx = value;
      }
      get labelRotation() {
        return this[labelRotation$];
      }
      set labelRotation(value) {
        super.labelRotation = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle$];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || base_tick_draw_strategy.BaseRenderSpec.is(other) && dart.equals(this.labelStyle, other.labelStyle) && dart.equals(this.labelAnchor, other.labelAnchor) && dart.equals(this.labelJustification, other.labelJustification) && this.labelOffsetFromTickPx == other.labelOffsetFromTickPx && this.labelOffsetFromAxisPx == other.labelOffsetFromAxisPx && this.minimumPaddingBetweenLabelsPx == other.minimumPaddingBetweenLabelsPx && this.labelRotation == other.labelRotation && dart.equals(this.axisLineStyle, other.axisLineStyle);
      }
      get hashCode() {
        let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13;
        let hashcode = (t1$ = (t1 = this.labelStyle, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
        hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.labelAnchor, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
        hashcode = (t1$3 = dart.notNull(hashcode) * 37 + dart.notNull((t1$2 = this.labelJustification, t1$2 == null ? null : dart.hashCode(t1$2))), t1$3 === null ? 0 : t1$3);
        hashcode = (t1$5 = dart.notNull(hashcode) * 37 + dart.notNull((t1$4 = this.labelOffsetFromTickPx, t1$4 == null ? null : dart.hashCode(t1$4))), t1$5 === null ? 0 : t1$5);
        hashcode = (t1$7 = dart.notNull(hashcode) * 37 + dart.notNull((t1$6 = this.labelOffsetFromAxisPx, t1$6 == null ? null : dart.hashCode(t1$6))), t1$7 === null ? 0 : t1$7);
        hashcode = (t1$9 = dart.notNull(hashcode) * 37 + dart.notNull((t1$8 = this.minimumPaddingBetweenLabelsPx, t1$8 == null ? null : dart.hashCode(t1$8))), t1$9 === null ? 0 : t1$9);
        hashcode = (t1$11 = dart.notNull(hashcode) * 37 + dart.notNull((t1$10 = this.labelRotation, t1$10 == null ? null : dart.hashCode(t1$10))), t1$11 === null ? 0 : t1$11);
        hashcode = (t1$13 = dart.notNull(hashcode) * 37 + dart.notNull((t1$12 = this.axisLineStyle, t1$12 == null ? null : dart.hashCode(t1$12))), t1$13 === null ? 0 : t1$13);
        return hashcode;
      }
    }
    (BaseRenderSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[labelStyle$] = labelStyle;
      this[labelAnchor$] = labelAnchor;
      this[labelJustification$] = labelJustification;
      this[labelOffsetFromAxisPx$] = labelOffsetFromAxisPx;
      this[labelOffsetFromTickPx$] = labelOffsetFromTickPx;
      this[minimumPaddingBetweenLabelsPx$] = minimumPaddingBetweenLabelsPx;
      this[labelRotation$] = labelRotation;
      this[axisLineStyle$] = axisLineStyle;
      ;
    }).prototype = BaseRenderSpec.prototype;
    dart.addTypeTests(BaseRenderSpec);
    BaseRenderSpec.prototype[_is_BaseRenderSpec_default] = true;
    BaseRenderSpec[dart.implements] = () => [axis_spec.RenderSpec$(D)];
    dart.setMethodSignature(BaseRenderSpec, () => ({
      __proto__: dart.getMethods(BaseRenderSpec.__proto__),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(BaseRenderSpec, "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart");
    dart.setFieldSignature(BaseRenderSpec, () => ({
      __proto__: dart.getFields(BaseRenderSpec.__proto__),
      labelStyle: dart.finalFieldType(axis_spec.TextStyleSpec),
      labelAnchor: dart.finalFieldType(axis_spec.TickLabelAnchor),
      labelJustification: dart.finalFieldType(axis_spec.TickLabelJustification),
      labelOffsetFromAxisPx: dart.finalFieldType(core.int),
      labelOffsetFromTickPx: dart.finalFieldType(core.int),
      minimumPaddingBetweenLabelsPx: dart.finalFieldType(core.int),
      labelRotation: dart.finalFieldType(core.int),
      axisLineStyle: dart.finalFieldType(axis_spec.LineStyleSpec)
    }));
    dart.defineExtensionMethods(BaseRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(BaseRenderSpec, ['hashCode']);
    return BaseRenderSpec;
  });
  base_tick_draw_strategy.BaseRenderSpec = base_tick_draw_strategy.BaseRenderSpec$();
  dart.addTypeTests(base_tick_draw_strategy.BaseRenderSpec, _is_BaseRenderSpec_default);
  const _is_SmallTickRendererSpec_default = Symbol('_is_SmallTickRendererSpec_default');
  const lineStyle$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.lineStyle");
  const tickLengthPx$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.tickLengthPx");
  small_tick_draw_strategy.SmallTickRendererSpec$ = dart.generic(D => {
    let SmallTickDrawStrategyOfD = () => (SmallTickDrawStrategyOfD = dart.constFn(small_tick_draw_strategy.SmallTickDrawStrategy$(D)))();
    class SmallTickRendererSpec extends base_tick_draw_strategy.BaseRenderSpec$(D) {
      get lineStyle() {
        return this[lineStyle$];
      }
      set lineStyle(value) {
        super.lineStyle = value;
      }
      get tickLengthPx() {
        return this[tickLengthPx$];
      }
      set tickLengthPx(value) {
        super.tickLengthPx = value;
      }
      createDrawStrategy(context, graphicsFactory) {
        return new (SmallTickDrawStrategyOfD()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || small_tick_draw_strategy.SmallTickRendererSpec.is(other) && dart.equals(this.lineStyle, other.lineStyle) && this.tickLengthPx == other.tickLengthPx && super._equals(other);
      }
      get hashCode() {
        let t1, t1$, t1$0, t1$1;
        let hashcode = (t1$ = (t1 = this.lineStyle, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
        hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.tickLengthPx, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(super.hashCode);
        return hashcode;
      }
    }
    (SmallTickRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[lineStyle$] = lineStyle;
      this[tickLengthPx$] = tickLengthPx;
      SmallTickRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, axisLineStyle: axisLineStyle});
      ;
    }).prototype = SmallTickRendererSpec.prototype;
    dart.addTypeTests(SmallTickRendererSpec);
    SmallTickRendererSpec.prototype[_is_SmallTickRendererSpec_default] = true;
    dart.setMethodSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getMethods(SmallTickRendererSpec.__proto__),
      createDrawStrategy: dart.fnType(tick_draw_strategy.TickDrawStrategy$(D), [chart_context.ChartContext, graphics_factory.GraphicsFactory])
    }));
    dart.setLibraryUri(SmallTickRendererSpec, "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart");
    dart.setFieldSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getFields(SmallTickRendererSpec.__proto__),
      lineStyle: dart.finalFieldType(axis_spec.LineStyleSpec),
      tickLengthPx: dart.finalFieldType(core.int)
    }));
    dart.defineExtensionMethods(SmallTickRendererSpec, ['_equals']);
    dart.defineExtensionAccessors(SmallTickRendererSpec, ['hashCode']);
    return SmallTickRendererSpec;
  });
  small_tick_draw_strategy.SmallTickRendererSpec = small_tick_draw_strategy.SmallTickRendererSpec$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickRendererSpec, _is_SmallTickRendererSpec_default);
  const _normalizeHorizontalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeHorizontalAnchor");
  const _calculateWidthForRotatedLabel = dart.privateName(base_tick_draw_strategy, "_calculateWidthForRotatedLabel");
  const _calculateHeightForRotatedLabel = dart.privateName(base_tick_draw_strategy, "_calculateHeightForRotatedLabel");
  const _name$6 = dart.privateName(base_tick_draw_strategy, "_name");
  let C114;
  let C115;
  let C116;
  const _normalizeVerticalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeVerticalAnchor");
  const _is_BaseTickDrawStrategy_default = Symbol('_is_BaseTickDrawStrategy_default');
  const chartContext$ = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.chartContext");
  const axisLineStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.axisLineStyle");
  const labelStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelStyle");
  const tickLabelAnchor = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelAnchor");
  const tickLabelJustification = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelJustification");
  const labelOffsetFromAxisPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromAxisPx");
  const labelOffsetFromTickPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromTickPx");
  const minimumPaddingBetweenLabelsPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.minimumPaddingBetweenLabelsPx");
  const labelRotation$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelRotation");
  base_tick_draw_strategy.BaseTickDrawStrategy$ = dart.generic(D => {
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    let ListOfTickOfD = () => (ListOfTickOfD = dart.constFn(core.List$(TickOfD())))();
    let TickOfDAndTickOfDToint = () => (TickOfDAndTickOfDToint = dart.constFn(dart.fnType(core.int, [TickOfD(), TickOfD()])))();
    let doubleAndTickOfDTodouble = () => (doubleAndTickOfDTodouble = dart.constFn(dart.fnType(core.double, [core.double, TickOfD()])))();
    class BaseTickDrawStrategy extends core.Object {
      get chartContext() {
        return this[chartContext$];
      }
      set chartContext(value) {
        super.chartContext = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle];
      }
      set axisLineStyle(value) {
        this[axisLineStyle] = value;
      }
      get labelStyle() {
        return this[labelStyle];
      }
      set labelStyle(value) {
        this[labelStyle] = value;
      }
      get tickLabelAnchor() {
        return this[tickLabelAnchor];
      }
      set tickLabelAnchor(value) {
        this[tickLabelAnchor] = value;
      }
      get tickLabelJustification() {
        return this[tickLabelJustification];
      }
      set tickLabelJustification(value) {
        this[tickLabelJustification] = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$0];
      }
      set labelOffsetFromAxisPx(value) {
        this[labelOffsetFromAxisPx$0] = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$0];
      }
      set labelOffsetFromTickPx(value) {
        this[labelOffsetFromTickPx$0] = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$0];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        this[minimumPaddingBetweenLabelsPx$0] = value;
      }
      get labelRotation() {
        return this[labelRotation$0];
      }
      set labelRotation(value) {
        this[labelRotation$0] = value;
      }
      static _degToRad(deg) {
        return dart.notNull(deg) * (3.141592653589793 / 180.0);
      }
      decorateTicks(ticks) {
        let t1, t1$, t1$0, t1$1;
        ListOfTickOfD()._check(ticks);
        for (let tick of ticks) {
          if (tick.textElement.textStyle == null) {
            tick.textElement.textStyle = this.labelStyle;
          } else {
            t1 = tick.textElement.textStyle;
            t1.color == null ? t1.color = this.labelStyle.color : null;
            t1$ = tick.textElement.textStyle;
            t1$.fontFamily == null ? t1$.fontFamily = this.labelStyle.fontFamily : null;
            t1$0 = tick.textElement.textStyle;
            t1$0.fontSize == null ? t1$0.fontSize = this.labelStyle.fontSize : null;
            t1$1 = tick.textElement.textStyle;
            t1$1.lineHeight == null ? t1$1.lineHeight = this.labelStyle.lineHeight : null;
          }
        }
      }
      collides(ticks, orientation) {
        ListOfTickOfD()._check(ticks);
        if (ticks == null) {
          return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
        }
        let vertical = dart.equals(orientation, axis$.AxisOrientation.left) || dart.equals(orientation, axis$.AxisOrientation.right);
        ticks[$sort](dart.fn((a, b) => {
          if (dart.notNull(a.locationPx) < dart.notNull(b.locationPx)) {
            return -1;
          } else if (dart.notNull(a.locationPx) > dart.notNull(b.locationPx)) {
            return 1;
          } else {
            return 0;
          }
        }, TickOfDAndTickOfDToint()));
        let previousEnd = -1 / 0;
        let collides = false;
        for (let tick of ticks) {
          let tickSize = tick.textElement.measurement;
          if (vertical) {
            let adjustedHeight = dart.notNull(tickSize.verticalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            if (dart.equals(this.tickLabelAnchor, axis_spec.TickLabelAnchor.inside)) {
              if (tick == ticks[$first]) {
                collides = false;
                previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
              } else if (tick == ticks[$last]) {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedHeight;
                previousEnd = tick.locationPx;
              } else {
                let halfHeight = adjustedHeight / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfHeight;
                previousEnd = dart.notNull(tick.locationPx) + halfHeight;
              }
            } else {
              collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
              previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
            }
          } else {
            let textDirection = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, this.chartContext.isRtl, tick == ticks[$first], tick == ticks[$last]);
            let adjustedWidth = dart.notNull(tickSize.horizontalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            switch (textDirection) {
              case C13 || CT.C13:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
                previousEnd = dart.notNull(tick.locationPx) + adjustedWidth;
                break;
              }
              case C14 || CT.C14:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedWidth;
                previousEnd = tick.locationPx;
                break;
              }
              case C15 || CT.C15:
              {
                let halfWidth = adjustedWidth / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfWidth;
                previousEnd = dart.notNull(tick.locationPx) + halfWidth;
                break;
              }
            }
          }
          if (collides) {
            return new collision_report.CollisionReport.new({ticksCollide: true, ticks: ticks, alternateTicksUsed: false});
          }
        }
        return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListOfTickOfD()._check(ticks);
        let maxHorizontalSliceWidth = ticks[$fold](core.double, 0.0, dart.fn((prevMax, tick) => math.max(core.double, prevMax, dart.notNull(this[_calculateWidthForRotatedLabel](this.labelRotation, tick.textElement.measurement.verticalSliceWidth, tick.textElement.measurement.horizontalSliceWidth)) + dart.notNull(this.labelOffsetFromAxisPx)), doubleAndTickOfDTodouble()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxHorizontalSliceWidth, preferredHeight: maxHeight});
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListOfTickOfD()._check(ticks);
        let maxVerticalSliceWidth = ticks[$fold](core.double, 0.0, dart.fn((prevMax, tick) => math.max(core.double, prevMax, this[_calculateHeightForRotatedLabel](this.labelRotation, tick.textElement.measurement.verticalSliceWidth, tick.textElement.measurement.horizontalSliceWidth)), doubleAndTickOfDTodouble()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: maxVerticalSliceWidth + dart.notNull(this.labelOffsetFromAxisPx)});
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C95 || CT.C95:
          {
            start = axisBounds[$bottomLeft];
            end = axisBounds[$bottomRight];
            break;
          }
          case C97 || CT.C97:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$topRight];
            break;
          }
          case C96 || CT.C96:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$bottomLeft];
            break;
          }
          case C98 || CT.C98:
          {
            start = axisBounds[$topRight];
            end = axisBounds[$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: JSArrayOfPointOfnum().of([start, end]), fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[$toDouble](), dashPattern: this.axisLineStyle.dashPattern});
      }
      drawLabel(canvas, tick, opts) {
        let t1;
        TickOfD()._check(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let locationPx = tick.locationPx;
        let measurement = tick.textElement.measurement;
        let isRtl = this.chartContext.isRtl;
        let x = 0;
        let y = 0;
        let labelOffsetPx = (t1 = tick.labelOffsetPx, t1 == null ? 0.0 : t1);
        if (dart.equals(orientation, axis$.AxisOrientation.bottom) || dart.equals(orientation, axis$.AxisOrientation.top)) {
          y = dart.equals(orientation, axis$.AxisOrientation.bottom) ? dart.notNull(axisBounds[$top]) + dart.notNull(this.labelOffsetFromAxisPx) : dart.notNull(axisBounds[$bottom]) - measurement.verticalSliceWidth[$toInt]() - dart.notNull(this.labelOffsetFromAxisPx);
          let direction = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, isRtl, isFirst, isLast);
          tick.textElement.textDirection = direction;
          switch (direction) {
            case C14 || CT.C14:
            {
              x = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C13 || CT.C13:
            {
              x = (dart.notNull(locationPx) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C15 || CT.C15:
            default:
            {
              x = (dart.notNull(locationPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
          }
        } else {
          if (dart.equals(orientation, axis$.AxisOrientation.left)) {
            if (dart.equals(this.tickLabelJustification, axis_spec.TickLabelJustification.inside)) {
              x = dart.notNull(axisBounds[$right]) - dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.rtl;
            } else {
              x = dart.notNull(axisBounds[$left]) + dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.ltr;
            }
          } else {
            if (dart.equals(this.tickLabelJustification, axis_spec.TickLabelJustification.inside)) {
              x = dart.notNull(axisBounds[$left]) + dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              x = dart.notNull(axisBounds[$right]) - dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.rtl;
            }
          }
          switch (this[_normalizeVerticalAnchor](this.tickLabelAnchor, isFirst, isLast)) {
            case C114 || CT.C114:
            {
              y = (dart.notNull(locationPx) - dart.notNull(measurement.verticalSliceWidth) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C115 || CT.C115:
            {
              y = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C116 || CT.C116:
            default:
            {
              y = (dart.notNull(locationPx) - dart.notNull(measurement.verticalSliceWidth) / 2 + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
          }
        }
        canvas.drawText(tick.textElement, x, y, {rotation: base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(this.labelRotation)});
      }
      [_normalizeHorizontalAnchor](anchor, isRtl, isFirst, isLast) {
        switch (anchor) {
          case C20 || CT.C20:
          {
            return dart.test(isRtl) ? text_element.TextDirection.ltr : text_element.TextDirection.rtl;
          }
          case C22 || CT.C22:
          {
            return dart.test(isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
          }
          case C23 || CT.C23:
          {
            if (dart.test(isFirst)) {
              return text_element.TextDirection.ltr;
            }
            if (dart.test(isLast)) {
              return text_element.TextDirection.rtl;
            }
            return text_element.TextDirection.center;
          }
          case C21 || CT.C21:
          default:
          {
            return text_element.TextDirection.center;
          }
        }
      }
      [_normalizeVerticalAnchor](anchor, isFirst, isLast) {
        switch (anchor) {
          case C20 || CT.C20:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.under;
          }
          case C22 || CT.C22:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.over;
          }
          case C23 || CT.C23:
          {
            if (dart.test(isFirst)) {
              return base_tick_draw_strategy._PixelVerticalDirection.over;
            }
            if (dart.test(isLast)) {
              return base_tick_draw_strategy._PixelVerticalDirection.under;
            }
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
          case C21 || CT.C21:
          default:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
        }
      }
      [_calculateWidthForRotatedLabel](rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelLength;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        return dart.notNull(labelLength) * math.cos(rotationRadian);
      }
      [_calculateHeightForRotatedLabel](rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelHeight;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        let angle = 3.141592653589793 / 2.0 - rotationRadian[$abs]();
        return dart.notNull(labelLength) * math.cos(angle);
      }
    }
    (BaseTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t1, t2$4, t2$5, t2$6, t2$7, t2$8, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[axisLineStyle] = null;
      this[labelStyle] = null;
      this[tickLabelAnchor] = null;
      this[tickLabelJustification] = null;
      this[labelOffsetFromAxisPx$0] = null;
      this[labelOffsetFromTickPx$0] = null;
      this[minimumPaddingBetweenLabelsPx$0] = null;
      this[labelRotation$0] = null;
      this[chartContext$] = chartContext;
      this.labelStyle = (t1 = graphicsFactory.createTextPaint(), t1.color = (t2$ = (t2 = labelStyleSpec, t2 == null ? null : t2.color), t2$ == null ? style_factory.StyleFactory.style.tickColor : t2$), t1.fontFamily = (t2$0 = labelStyleSpec, t2$0 == null ? null : t2$0.fontFamily), t1.fontSize = (t2$2 = (t2$1 = labelStyleSpec, t2$1 == null ? null : t2$1.fontSize), t2$2 == null ? 12 : t2$2), t1.lineHeight = (t2$3 = labelStyleSpec, t2$3 == null ? null : t2$3.lineHeight), t1);
      this.axisLineStyle = (t1$ = graphicsFactory.createLinePaint(), t1$.color = (t2$5 = (t2$4 = axisLineStyleSpec, t2$4 == null ? null : t2$4.color), t2$5 == null ? this.labelStyle.color : t2$5), t1$.dashPattern = (t2$6 = axisLineStyleSpec, t2$6 == null ? null : t2$6.dashPattern), t1$.strokeWidth = (t2$8 = (t2$7 = axisLineStyleSpec, t2$7 == null ? null : t2$7.thickness), t2$8 == null ? 1 : t2$8), t1$);
      this.tickLabelAnchor = (t1$0 = labelAnchor, t1$0 == null ? axis_spec.TickLabelAnchor.centered : t1$0);
      this.tickLabelJustification = (t1$1 = labelJustification, t1$1 == null ? axis_spec.TickLabelJustification.inside : t1$1);
      this.labelOffsetFromAxisPx = (t1$2 = labelOffsetFromAxisPx, t1$2 == null ? 5 : t1$2);
      this.labelOffsetFromTickPx = (t1$3 = labelOffsetFromTickPx, t1$3 == null ? 5 : t1$3);
      this.minimumPaddingBetweenLabelsPx = (t1$4 = minimumPaddingBetweenLabelsPx, t1$4 == null ? 50 : t1$4);
      this.labelRotation = (t1$5 = labelRotation, t1$5 == null ? 0 : t1$5);
    }).prototype = BaseTickDrawStrategy.prototype;
    dart.addTypeTests(BaseTickDrawStrategy);
    BaseTickDrawStrategy.prototype[_is_BaseTickDrawStrategy_default] = true;
    BaseTickDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(D)];
    dart.setMethodSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getMethods(BaseTickDrawStrategy.__proto__),
      decorateTicks: dart.fnType(dart.void, [core.Object]),
      collides: dart.fnType(collision_report.CollisionReport, [core.Object, axis$.AxisOrientation]),
      measureVerticallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [core.Object, core.int, core.int]),
      measureHorizontallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [core.Object, core.int, core.int]),
      drawAxisLine: dart.fnType(dart.void, [chart_canvas.ChartCanvas, axis$.AxisOrientation, math.Rectangle$(core.int)]),
      drawLabel: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.Object], {axisBounds: math.Rectangle$(core.int), drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {}),
      [_normalizeHorizontalAnchor]: dart.fnType(text_element.TextDirection, [axis_spec.TickLabelAnchor, core.bool, core.bool, core.bool]),
      [_normalizeVerticalAnchor]: dart.fnType(base_tick_draw_strategy._PixelVerticalDirection, [axis_spec.TickLabelAnchor, core.bool, core.bool]),
      [_calculateWidthForRotatedLabel]: dart.fnType(core.double, [core.int, core.double, core.double]),
      [_calculateHeightForRotatedLabel]: dart.fnType(core.double, [core.int, core.double, core.double])
    }));
    dart.setLibraryUri(BaseTickDrawStrategy, "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart");
    dart.setFieldSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getFields(BaseTickDrawStrategy.__proto__),
      chartContext: dart.finalFieldType(chart_context.ChartContext),
      axisLineStyle: dart.fieldType(line_style.LineStyle),
      labelStyle: dart.fieldType(text_style.TextStyle),
      tickLabelAnchor: dart.fieldType(axis_spec.TickLabelAnchor),
      tickLabelJustification: dart.fieldType(axis_spec.TickLabelJustification),
      labelOffsetFromAxisPx: dart.fieldType(core.int),
      labelOffsetFromTickPx: dart.fieldType(core.int),
      minimumPaddingBetweenLabelsPx: dart.fieldType(core.int),
      labelRotation: dart.fieldType(core.int)
    }));
    return BaseTickDrawStrategy;
  });
  base_tick_draw_strategy.BaseTickDrawStrategy = base_tick_draw_strategy.BaseTickDrawStrategy$();
  dart.addTypeTests(base_tick_draw_strategy.BaseTickDrawStrategy, _is_BaseTickDrawStrategy_default);
  const _is_SmallTickDrawStrategy_default = Symbol('_is_SmallTickDrawStrategy_default');
  const tickLength = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.tickLength");
  const lineStyle = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.lineStyle");
  small_tick_draw_strategy.SmallTickDrawStrategy$ = dart.generic(D => {
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    class SmallTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(D) {
      get tickLength() {
        return this[tickLength];
      }
      set tickLength(value) {
        this[tickLength] = value;
      }
      get lineStyle() {
        return this[lineStyle];
      }
      set lineStyle(value) {
        this[lineStyle] = value;
      }
      draw(canvas, tick, opts) {
        TickOfD()._check(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let tickStart = null;
        let tickEnd = null;
        switch (orientation) {
          case C95 || CT.C95:
          {
            let x = tick.locationPx;
            tickStart = new (PointOfnum()).new(x, dart.notNull(axisBounds[$bottom]) - dart.notNull(this.tickLength));
            tickEnd = new (PointOfnum()).new(x, axisBounds[$bottom]);
            break;
          }
          case C97 || CT.C97:
          {
            let x = tick.locationPx;
            tickStart = new (PointOfnum()).new(x, axisBounds[$top]);
            tickEnd = new (PointOfnum()).new(x, dart.notNull(axisBounds[$top]) + dart.notNull(this.tickLength));
            break;
          }
          case C96 || CT.C96:
          {
            let y = tick.locationPx;
            tickStart = new (PointOfnum()).new(axisBounds[$left], y);
            tickEnd = new (PointOfnum()).new(dart.notNull(axisBounds[$left]) + dart.notNull(this.tickLength), y);
            break;
          }
          case C98 || CT.C98:
          {
            let y = tick.locationPx;
            tickStart = new (PointOfnum()).new(dart.notNull(axisBounds[$right]) - dart.notNull(this.tickLength), y);
            tickEnd = new (PointOfnum()).new(axisBounds[$right], y);
            break;
          }
        }
        canvas.drawLine({points: JSArrayOfPointOfnum().of([tickStart, tickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast});
      }
    }
    (SmallTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t1, t1$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[tickLength] = null;
      this[lineStyle] = null;
      SmallTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t1 = axisLineStyleSpec, t1 == null ? lineStyleSpec : t1), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation});
      this.tickLength = (t1$ = tickLengthPx, t1$ == null ? style_factory.StyleFactory.style.tickLength : t1$);
      this.lineStyle = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, lineStyleSpec);
    }).prototype = SmallTickDrawStrategy.prototype;
    dart.addTypeTests(SmallTickDrawStrategy);
    SmallTickDrawStrategy.prototype[_is_SmallTickDrawStrategy_default] = true;
    dart.setMethodSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getMethods(SmallTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.Object], {axisBounds: math.Rectangle$(core.int), drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {})
    }));
    dart.setLibraryUri(SmallTickDrawStrategy, "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart");
    dart.setFieldSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getFields(SmallTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(core.int),
      lineStyle: dart.fieldType(line_style.LineStyle)
    }));
    return SmallTickDrawStrategy;
  });
  small_tick_draw_strategy.SmallTickDrawStrategy = small_tick_draw_strategy.SmallTickDrawStrategy$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickDrawStrategy, _is_SmallTickDrawStrategy_default);
  let C117;
  base_tick_draw_strategy._PixelVerticalDirection = class _PixelVerticalDirection extends core.Object {
    toString() {
      return this[_name$6];
    }
  };
  (base_tick_draw_strategy._PixelVerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$6] = _name;
    ;
  }).prototype = base_tick_draw_strategy._PixelVerticalDirection.prototype;
  dart.addTypeTests(base_tick_draw_strategy._PixelVerticalDirection);
  dart.setLibraryUri(base_tick_draw_strategy._PixelVerticalDirection, "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart");
  dart.setFieldSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getFields(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$6]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(base_tick_draw_strategy._PixelVerticalDirection, ['toString']);
  base_tick_draw_strategy._PixelVerticalDirection.over = C114 || CT.C114;
  base_tick_draw_strategy._PixelVerticalDirection.center = C116 || CT.C116;
  base_tick_draw_strategy._PixelVerticalDirection.under = C115 || CT.C115;
  base_tick_draw_strategy._PixelVerticalDirection.values = C117 || CT.C117;
  const _name$7 = dart.privateName(layout_view, "_name");
  let C118;
  let C119;
  let C120;
  let C121;
  let C122;
  let C123;
  let C124;
  let C125;
  let C126;
  let C127;
  layout_view.LayoutPosition = class LayoutPosition extends core.Object {
    toString() {
      return this[_name$7];
    }
  };
  (layout_view.LayoutPosition.new = function(index, _name) {
    this.index = index;
    this[_name$7] = _name;
    ;
  }).prototype = layout_view.LayoutPosition.prototype;
  dart.addTypeTests(layout_view.LayoutPosition);
  dart.setLibraryUri(layout_view.LayoutPosition, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.setFieldSignature(layout_view.LayoutPosition, () => ({
    __proto__: dart.getFields(layout_view.LayoutPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$7]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(layout_view.LayoutPosition, ['toString']);
  layout_view.LayoutPosition.Bottom = C118 || CT.C118;
  layout_view.LayoutPosition.FullBottom = C119 || CT.C119;
  layout_view.LayoutPosition.Top = C120 || CT.C120;
  layout_view.LayoutPosition.FullTop = C121 || CT.C121;
  layout_view.LayoutPosition.Left = C122 || CT.C122;
  layout_view.LayoutPosition.FullLeft = C123 || CT.C123;
  layout_view.LayoutPosition.Right = C124 || CT.C124;
  layout_view.LayoutPosition.FullRight = C125 || CT.C125;
  layout_view.LayoutPosition.DrawArea = C126 || CT.C126;
  layout_view.LayoutPosition.values = C127 || CT.C127;
  layout_view.LayoutViewPaintOrder = class LayoutViewPaintOrder extends core.Object {};
  (layout_view.LayoutViewPaintOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPaintOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPaintOrder);
  dart.setLibraryUri(layout_view.LayoutViewPaintOrder, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.defineLazy(layout_view.LayoutViewPaintOrder, {
    /*layout_view.LayoutViewPaintOrder.rangeAnnotation*/get rangeAnnotation() {
      return -10;
    },
    /*layout_view.LayoutViewPaintOrder.measureAxis*/get measureAxis() {
      return 0;
    },
    /*layout_view.LayoutViewPaintOrder.domainAxis*/get domainAxis() {
      return 5;
    },
    /*layout_view.LayoutViewPaintOrder.arc*/get arc() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.bar*/get bar() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.treeMap*/get treeMap() {
      return 10;
    },
    /*layout_view.LayoutViewPaintOrder.barTargetLine*/get barTargetLine() {
      return 15;
    },
    /*layout_view.LayoutViewPaintOrder.line*/get line() {
      return 20;
    },
    /*layout_view.LayoutViewPaintOrder.point*/get point() {
      return 25;
    },
    /*layout_view.LayoutViewPaintOrder.legend*/get legend() {
      return 100;
    },
    /*layout_view.LayoutViewPaintOrder.linePointHighlighter*/get linePointHighlighter() {
      return 110;
    },
    /*layout_view.LayoutViewPaintOrder.slider*/get slider() {
      return 150;
    },
    /*layout_view.LayoutViewPaintOrder.chartTitle*/get chartTitle() {
      return 160;
    }
  });
  layout_view.LayoutViewPositionOrder = class LayoutViewPositionOrder extends core.Object {};
  (layout_view.LayoutViewPositionOrder.new = function() {
    ;
  }).prototype = layout_view.LayoutViewPositionOrder.prototype;
  dart.addTypeTests(layout_view.LayoutViewPositionOrder);
  dart.setLibraryUri(layout_view.LayoutViewPositionOrder, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.defineLazy(layout_view.LayoutViewPositionOrder, {
    /*layout_view.LayoutViewPositionOrder.drawArea*/get drawArea() {
      return 0;
    },
    /*layout_view.LayoutViewPositionOrder.symbolAnnotation*/get symbolAnnotation() {
      return 10;
    },
    /*layout_view.LayoutViewPositionOrder.axis*/get axis() {
      return 20;
    },
    /*layout_view.LayoutViewPositionOrder.legend*/get legend() {
      return 30;
    },
    /*layout_view.LayoutViewPositionOrder.chartTitle*/get chartTitle() {
      return 40;
    }
  });
  const topPx$ = dart.privateName(layout_view, "ViewMargin.topPx");
  const bottomPx$ = dart.privateName(layout_view, "ViewMargin.bottomPx");
  const rightPx$ = dart.privateName(layout_view, "ViewMargin.rightPx");
  const leftPx$ = dart.privateName(layout_view, "ViewMargin.leftPx");
  let C128;
  layout_view.ViewMargin = class ViewMargin extends core.Object {
    get topPx() {
      return this[topPx$];
    }
    set topPx(value) {
      super.topPx = value;
    }
    get bottomPx() {
      return this[bottomPx$];
    }
    set bottomPx(value) {
      super.bottomPx = value;
    }
    get rightPx() {
      return this[rightPx$];
    }
    set rightPx(value) {
      super.rightPx = value;
    }
    get leftPx() {
      return this[leftPx$];
    }
    set leftPx(value) {
      super.leftPx = value;
    }
    get width() {
      return dart.notNull(this.leftPx) + dart.notNull(this.rightPx);
    }
    get height() {
      return dart.notNull(this.topPx) + dart.notNull(this.bottomPx);
    }
  };
  (layout_view.ViewMargin.new = function(opts) {
    let t1, t1$, t1$0, t1$1;
    let topPx = opts && 'topPx' in opts ? opts.topPx : null;
    let bottomPx = opts && 'bottomPx' in opts ? opts.bottomPx : null;
    let rightPx = opts && 'rightPx' in opts ? opts.rightPx : null;
    let leftPx = opts && 'leftPx' in opts ? opts.leftPx : null;
    this[topPx$] = (t1 = topPx, t1 == null ? 0 : t1);
    this[bottomPx$] = (t1$ = bottomPx, t1$ == null ? 0 : t1$);
    this[rightPx$] = (t1$0 = rightPx, t1$0 == null ? 0 : t1$0);
    this[leftPx$] = (t1$1 = leftPx, t1$1 == null ? 0 : t1$1);
    ;
  }).prototype = layout_view.ViewMargin.prototype;
  dart.addTypeTests(layout_view.ViewMargin);
  dart.setGetterSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getGetters(layout_view.ViewMargin.__proto__),
    width: core.int,
    height: core.int
  }));
  dart.setLibraryUri(layout_view.ViewMargin, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.setFieldSignature(layout_view.ViewMargin, () => ({
    __proto__: dart.getFields(layout_view.ViewMargin.__proto__),
    topPx: dart.finalFieldType(core.int),
    bottomPx: dart.finalFieldType(core.int),
    rightPx: dart.finalFieldType(core.int),
    leftPx: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(layout_view.ViewMargin, {
    /*layout_view.ViewMargin.empty*/get empty() {
      return C128 || CT.C128;
    }
  });
  const id$ = dart.privateName(layout_view, "LayoutViewConfig.id");
  const paintOrder$ = dart.privateName(layout_view, "LayoutViewConfig.paintOrder");
  const position$ = dart.privateName(layout_view, "LayoutViewConfig.position");
  const positionOrder$ = dart.privateName(layout_view, "LayoutViewConfig.positionOrder");
  const viewMargin$ = dart.privateName(layout_view, "LayoutViewConfig.viewMargin");
  layout_view.LayoutViewConfig = class LayoutViewConfig extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get paintOrder() {
      return this[paintOrder$];
    }
    set paintOrder(value) {
      this[paintOrder$] = value;
    }
    get position() {
      return this[position$];
    }
    set position(value) {
      this[position$] = value;
    }
    get positionOrder() {
      return this[positionOrder$];
    }
    set positionOrder(value) {
      this[positionOrder$] = value;
    }
    get viewMargin() {
      return this[viewMargin$];
    }
    set viewMargin(value) {
      this[viewMargin$] = value;
    }
    get isFullPosition() {
      return dart.equals(this.position, layout_view.LayoutPosition.FullBottom) || dart.equals(this.position, layout_view.LayoutPosition.FullTop) || dart.equals(this.position, layout_view.LayoutPosition.FullRight) || dart.equals(this.position, layout_view.LayoutPosition.FullLeft);
    }
  };
  (layout_view.LayoutViewConfig.new = function(opts) {
    let t1;
    let paintOrder = opts && 'paintOrder' in opts ? opts.paintOrder : null;
    let position = opts && 'position' in opts ? opts.position : null;
    let positionOrder = opts && 'positionOrder' in opts ? opts.positionOrder : null;
    let viewMargin = opts && 'viewMargin' in opts ? opts.viewMargin : null;
    this[id$] = null;
    this[paintOrder$] = paintOrder;
    this[position$] = position;
    this[positionOrder$] = positionOrder;
    this[viewMargin$] = (t1 = viewMargin, t1 == null ? layout_view.ViewMargin.empty : t1);
    ;
  }).prototype = layout_view.LayoutViewConfig.prototype;
  dart.addTypeTests(layout_view.LayoutViewConfig);
  dart.setGetterSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getGetters(layout_view.LayoutViewConfig.__proto__),
    isFullPosition: core.bool
  }));
  dart.setLibraryUri(layout_view.LayoutViewConfig, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.setFieldSignature(layout_view.LayoutViewConfig, () => ({
    __proto__: dart.getFields(layout_view.LayoutViewConfig.__proto__),
    id: dart.fieldType(core.String),
    paintOrder: dart.fieldType(core.int),
    position: dart.fieldType(layout_view.LayoutPosition),
    positionOrder: dart.fieldType(core.int),
    viewMargin: dart.fieldType(layout_view.ViewMargin)
  }));
  const preferredWidth$ = dart.privateName(layout_view, "ViewMeasuredSizes.preferredWidth");
  const preferredHeight$ = dart.privateName(layout_view, "ViewMeasuredSizes.preferredHeight");
  const minWidth$ = dart.privateName(layout_view, "ViewMeasuredSizes.minWidth");
  const minHeight$ = dart.privateName(layout_view, "ViewMeasuredSizes.minHeight");
  let C129;
  layout_view.ViewMeasuredSizes = class ViewMeasuredSizes extends core.Object {
    get preferredWidth() {
      return this[preferredWidth$];
    }
    set preferredWidth(value) {
      super.preferredWidth = value;
    }
    get preferredHeight() {
      return this[preferredHeight$];
    }
    set preferredHeight(value) {
      super.preferredHeight = value;
    }
    get minWidth() {
      return this[minWidth$];
    }
    set minWidth(value) {
      super.minWidth = value;
    }
    get minHeight() {
      return this[minHeight$];
    }
    set minHeight(value) {
      super.minHeight = value;
    }
  };
  (layout_view.ViewMeasuredSizes.new = function(opts) {
    let t1, t1$;
    let preferredWidth = opts && 'preferredWidth' in opts ? opts.preferredWidth : null;
    let preferredHeight = opts && 'preferredHeight' in opts ? opts.preferredHeight : null;
    let minWidth = opts && 'minWidth' in opts ? opts.minWidth : null;
    let minHeight = opts && 'minHeight' in opts ? opts.minHeight : null;
    this[preferredWidth$] = preferredWidth;
    this[preferredHeight$] = preferredHeight;
    this[minWidth$] = (t1 = minWidth, t1 == null ? 0 : t1);
    this[minHeight$] = (t1$ = minHeight, t1$ == null ? 0 : t1$);
    ;
  }).prototype = layout_view.ViewMeasuredSizes.prototype;
  dart.addTypeTests(layout_view.ViewMeasuredSizes);
  dart.setLibraryUri(layout_view.ViewMeasuredSizes, "package:charts_common/src/chart/layout/layout_view.dart");
  dart.setFieldSignature(layout_view.ViewMeasuredSizes, () => ({
    __proto__: dart.getFields(layout_view.ViewMeasuredSizes.__proto__),
    preferredWidth: dart.finalFieldType(core.int),
    preferredHeight: dart.finalFieldType(core.int),
    minWidth: dart.finalFieldType(core.int),
    minHeight: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(layout_view.ViewMeasuredSizes, {
    /*layout_view.ViewMeasuredSizes.zero*/get zero() {
      return C129 || CT.C129;
    }
  });
  layout_view.LayoutView = class LayoutView extends core.Object {};
  (layout_view.LayoutView.new = function() {
    ;
  }).prototype = layout_view.LayoutView.prototype;
  dart.addTypeTests(layout_view.LayoutView);
  dart.setLibraryUri(layout_view.LayoutView, "package:charts_common/src/chart/layout/layout_view.dart");
  const _markedForRemoval = dart.privateName(axis_tick, "_markedForRemoval");
  const _currentLocation = dart.privateName(axis_tick, "_currentLocation");
  const _previousLocation = dart.privateName(axis_tick, "_previousLocation");
  const _targetLocation = dart.privateName(axis_tick, "_targetLocation");
  const _currentOpacity = dart.privateName(axis_tick, "_currentOpacity");
  const _previousOpacity = dart.privateName(axis_tick, "_previousOpacity");
  const _targetOpacity = dart.privateName(axis_tick, "_targetOpacity");
  const _lerpDouble = dart.privateName(axis_tick, "_lerpDouble");
  const _is_AxisTicks_default = Symbol('_is_AxisTicks_default');
  axis_tick.AxisTicks$ = dart.generic(D => {
    let AxisTicksOfD = () => (AxisTicksOfD = dart.constFn(axis_tick.AxisTicks$(D)))();
    class AxisTicks extends tick.Tick$(D) {
      get markedForRemoval() {
        return this[_markedForRemoval];
      }
      animateInFrom(previousLocation) {
        this[_markedForRemoval] = false;
        this[_previousLocation] = previousLocation;
        this[_previousOpacity] = 0.0;
        this[_targetOpacity] = 1.0;
      }
      animateOut(newLocation) {
        this[_markedForRemoval] = true;
        this[_previousLocation] = this[_currentLocation];
        this[_targetLocation] = newLocation;
        this[_previousOpacity] = this[_currentOpacity];
        this[_targetOpacity] = 0.0;
      }
      setNewTarget(newLocation) {
        this[_markedForRemoval] = false;
        this[_previousLocation] = this[_currentLocation];
        this[_targetLocation] = newLocation;
        this[_previousOpacity] = this[_currentOpacity];
        this[_targetOpacity] = 1.0;
      }
      setCurrentTick(animationPercent) {
        if (animationPercent === 1.0) {
          this[_currentLocation] = this[_targetLocation];
          this[_previousLocation] = this[_targetLocation];
          this[_currentOpacity] = dart.test(this.markedForRemoval) ? 0.0 : 1.0;
        } else if (this[_previousLocation] == null) {
          this[_currentLocation] = this[_targetLocation];
          this[_currentOpacity] = 1.0;
        } else {
          this[_currentLocation] = this[_lerpDouble](this[_previousLocation], this[_targetLocation], animationPercent);
          this[_currentOpacity] = this[_lerpDouble](this[_previousOpacity], this[_targetOpacity], animationPercent);
        }
        this.locationPx = this[_currentLocation];
        this.textElement.opacity = this[_currentOpacity];
      }
      [_lerpDouble](a, b, t) {
        if (a == null && b == null) return null;
        a == null ? a = 0.0 : null;
        b == null ? b = 0.0 : null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
      }
      compareTo(other) {
        AxisTicksOfD()._check(other);
        return this[_targetLocation][$compareTo](other[_targetLocation]);
      }
    }
    (AxisTicks.new = function(tick) {
      this[_markedForRemoval] = null;
      this[_currentLocation] = null;
      this[_previousLocation] = null;
      this[_targetLocation] = null;
      this[_currentOpacity] = null;
      this[_previousOpacity] = null;
      this[_targetOpacity] = null;
      AxisTicks.__proto__.new.call(this, {value: tick.value, textElement: tick.textElement, locationPx: tick.locationPx, labelOffsetPx: tick.labelOffsetPx});
      this[_markedForRemoval] = false;
      this[_targetLocation] = tick.locationPx;
    }).prototype = AxisTicks.prototype;
    dart.addTypeTests(AxisTicks);
    AxisTicks.prototype[_is_AxisTicks_default] = true;
    AxisTicks[dart.implements] = () => [core.Comparable$(axis_tick.AxisTicks$(D))];
    dart.setMethodSignature(AxisTicks, () => ({
      __proto__: dart.getMethods(AxisTicks.__proto__),
      animateInFrom: dart.fnType(dart.void, [core.double]),
      animateOut: dart.fnType(dart.void, [core.double]),
      setNewTarget: dart.fnType(dart.void, [core.double]),
      setCurrentTick: dart.fnType(dart.void, [core.double]),
      [_lerpDouble]: dart.fnType(core.double, [core.double, core.double, core.double]),
      compareTo: dart.fnType(core.int, [core.Object]),
      [$compareTo]: dart.fnType(core.int, [core.Object])
    }));
    dart.setGetterSignature(AxisTicks, () => ({
      __proto__: dart.getGetters(AxisTicks.__proto__),
      markedForRemoval: core.bool
    }));
    dart.setLibraryUri(AxisTicks, "package:charts_common/src/chart/cartesian/axis/axis_tick.dart");
    dart.setFieldSignature(AxisTicks, () => ({
      __proto__: dart.getFields(AxisTicks.__proto__),
      [_markedForRemoval]: dart.fieldType(core.bool),
      [_currentLocation]: dart.fieldType(core.double),
      [_previousLocation]: dart.fieldType(core.double),
      [_targetLocation]: dart.fieldType(core.double),
      [_currentOpacity]: dart.fieldType(core.double),
      [_previousOpacity]: dart.fieldType(core.double),
      [_targetOpacity]: dart.fieldType(core.double)
    }));
    dart.defineExtensionMethods(AxisTicks, ['compareTo']);
    return AxisTicks;
  });
  axis_tick.AxisTicks = axis_tick.AxisTicks$();
  dart.addTypeTests(axis_tick.AxisTicks, _is_AxisTicks_default);
  const _is_Series_default = Symbol('_is_Series_default');
  const id$0 = dart.privateName(series$, "Series.id");
  const displayName$ = dart.privateName(series$, "Series.displayName");
  const overlaySeries$ = dart.privateName(series$, "Series.overlaySeries");
  const seriesCategory$ = dart.privateName(series$, "Series.seriesCategory");
  const seriesColor$ = dart.privateName(series$, "Series.seriesColor");
  const data$ = dart.privateName(series$, "Series.data");
  const keyFn$0 = dart.privateName(series$, "Series.keyFn");
  const domainFn$ = dart.privateName(series$, "Series.domainFn");
  const domainFormatterFn$ = dart.privateName(series$, "Series.domainFormatterFn");
  const domainLowerBoundFn$ = dart.privateName(series$, "Series.domainLowerBoundFn");
  const domainUpperBoundFn$ = dart.privateName(series$, "Series.domainUpperBoundFn");
  const measureFn$ = dart.privateName(series$, "Series.measureFn");
  const measureFormatterFn$ = dart.privateName(series$, "Series.measureFormatterFn");
  const measureLowerBoundFn$ = dart.privateName(series$, "Series.measureLowerBoundFn");
  const measureUpperBoundFn$ = dart.privateName(series$, "Series.measureUpperBoundFn");
  const measureOffsetFn$ = dart.privateName(series$, "Series.measureOffsetFn");
  const areaColorFn$ = dart.privateName(series$, "Series.areaColorFn");
  const colorFn$ = dart.privateName(series$, "Series.colorFn");
  const dashPatternFn$ = dart.privateName(series$, "Series.dashPatternFn");
  const fillColorFn$ = dart.privateName(series$, "Series.fillColorFn");
  const patternColorFn$ = dart.privateName(series$, "Series.patternColorFn");
  const fillPatternFn$ = dart.privateName(series$, "Series.fillPatternFn");
  const radiusPxFn$ = dart.privateName(series$, "Series.radiusPxFn");
  const strokeWidthPxFn$ = dart.privateName(series$, "Series.strokeWidthPxFn");
  const labelAccessorFn$ = dart.privateName(series$, "Series.labelAccessorFn");
  const insideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.insideLabelStyleAccessorFn");
  const outsideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.outsideLabelStyleAccessorFn");
  const attributes = dart.privateName(series$, "Series.attributes");
  series$.Series$ = dart.generic((T, D) => {
    class Series extends core.Object {
      get id() {
        return this[id$0];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName$];
      }
      set displayName(value) {
        super.displayName = value;
      }
      get overlaySeries() {
        return this[overlaySeries$];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get seriesCategory() {
        return this[seriesCategory$];
      }
      set seriesCategory(value) {
        super.seriesCategory = value;
      }
      get seriesColor() {
        return this[seriesColor$];
      }
      set seriesColor(value) {
        super.seriesColor = value;
      }
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get keyFn() {
        return this[keyFn$0];
      }
      set keyFn(value) {
        super.keyFn = value;
      }
      get domainFn() {
        return this[domainFn$];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get domainFormatterFn() {
        return this[domainFormatterFn$];
      }
      set domainFormatterFn(value) {
        super.domainFormatterFn = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn$];
      }
      set domainLowerBoundFn(value) {
        super.domainLowerBoundFn = value;
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn$];
      }
      set domainUpperBoundFn(value) {
        super.domainUpperBoundFn = value;
      }
      get measureFn() {
        return this[measureFn$];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn$];
      }
      set measureFormatterFn(value) {
        super.measureFormatterFn = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn$];
      }
      set measureLowerBoundFn(value) {
        super.measureLowerBoundFn = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn$];
      }
      set measureUpperBoundFn(value) {
        super.measureUpperBoundFn = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn$];
      }
      set measureOffsetFn(value) {
        super.measureOffsetFn = value;
      }
      get areaColorFn() {
        return this[areaColorFn$];
      }
      set areaColorFn(value) {
        super.areaColorFn = value;
      }
      get colorFn() {
        return this[colorFn$];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn$];
      }
      set dashPatternFn(value) {
        super.dashPatternFn = value;
      }
      get fillColorFn() {
        return this[fillColorFn$];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[patternColorFn$];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn$];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn$];
      }
      set radiusPxFn(value) {
        super.radiusPxFn = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn$];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn$];
      }
      set labelAccessorFn(value) {
        super.labelAccessorFn = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$0];
      }
      set insideLabelStyleAccessorFn(value) {
        super.insideLabelStyleAccessorFn = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$0];
      }
      set outsideLabelStyleAccessorFn(value) {
        super.outsideLabelStyleAccessorFn = value;
      }
      get attributes() {
        return this[attributes];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let data = opts && 'data' in opts ? opts.data : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let displayName = opts && 'displayName' in opts ? opts.displayName : null;
        let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
        let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
        let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
        let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
        let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
        let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
        let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
        let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
        let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
        let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
        let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
        let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
        let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
        let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
        let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let _domainFn = dart.fn(index => domainFn(data[$_get](index), index), dart.fnType(D, [core.int]));
        let _measureFn = dart.fn(index => measureFn(data[$_get](index), index), intTonum());
        let _areaColorFn = areaColorFn == null ? null : dart.fn(index => areaColorFn(data[$_get](index), index), intToColor());
        let _colorFn = colorFn == null ? null : dart.fn(index => colorFn(data[$_get](index), index), intToColor());
        let _dashPatternFn = dashPatternFn == null ? null : dart.fn(index => dashPatternFn(data[$_get](index), index), intToListOfint());
        let _domainFormatterFn = domainFormatterFn == null ? null : dart.fn(index => domainFormatterFn(data[$_get](index), index), dart.fnType(dart.fnType(core.String, [D]), [core.int]));
        let _domainLowerBoundFn = domainLowerBoundFn == null ? null : dart.fn(index => domainLowerBoundFn(data[$_get](index), index), dart.fnType(D, [core.int]));
        let _domainUpperBoundFn = domainUpperBoundFn == null ? null : dart.fn(index => domainUpperBoundFn(data[$_get](index), index), dart.fnType(D, [core.int]));
        let _fillColorFn = fillColorFn == null ? null : dart.fn(index => fillColorFn(data[$_get](index), index), intToColor());
        let _patternColorFn = patternColorFn == null ? null : dart.fn(index => patternColorFn(data[$_get](index), index), intToColor());
        let _fillPatternFn = fillPatternFn == null ? null : dart.fn(index => fillPatternFn(data[$_get](index), index), intToFillPatternType());
        let _labelAccessorFn = labelAccessorFn == null ? null : dart.fn(index => labelAccessorFn(data[$_get](index), index), intToString());
        let _insideLabelStyleAccessorFn = insideLabelStyleAccessorFn == null ? null : dart.fn(index => insideLabelStyleAccessorFn(data[$_get](index), index), intToTextStyleSpec());
        let _outsideLabelStyleAccessorFn = outsideLabelStyleAccessorFn == null ? null : dart.fn(index => outsideLabelStyleAccessorFn(data[$_get](index), index), intToTextStyleSpec());
        let _measureFormatterFn = measureFormatterFn == null ? null : dart.fn(index => measureFormatterFn(data[$_get](index), index), intToFn());
        let _measureLowerBoundFn = measureLowerBoundFn == null ? null : dart.fn(index => measureLowerBoundFn(data[$_get](index), index), intTonum());
        let _measureUpperBoundFn = measureUpperBoundFn == null ? null : dart.fn(index => measureUpperBoundFn(data[$_get](index), index), intTonum());
        let _measureOffsetFn = measureOffsetFn == null ? null : dart.fn(index => measureOffsetFn(data[$_get](index), index), intTonum());
        let _radiusPxFn = radiusPxFn == null ? null : dart.fn(index => radiusPxFn(data[$_get](index), index), intTonum());
        let _strokeWidthPxFn = strokeWidthPxFn == null ? null : dart.fn(index => strokeWidthPxFn(data[$_get](index), index), intTonum());
        return new (series$.Series$(T, D))._internal({id: id, data: data, domainFn: _domainFn, measureFn: _measureFn, displayName: displayName, areaColorFn: _areaColorFn, colorFn: _colorFn, dashPatternFn: _dashPatternFn, domainFormatterFn: _domainFormatterFn, domainLowerBoundFn: _domainLowerBoundFn, domainUpperBoundFn: _domainUpperBoundFn, fillColorFn: _fillColorFn, fillPatternFn: _fillPatternFn, patternColorFn: _patternColorFn, labelAccessorFn: _labelAccessorFn, insideLabelStyleAccessorFn: _insideLabelStyleAccessorFn, outsideLabelStyleAccessorFn: _outsideLabelStyleAccessorFn, measureFormatterFn: _measureFormatterFn, measureLowerBoundFn: _measureLowerBoundFn, measureUpperBoundFn: _measureUpperBoundFn, measureOffsetFn: _measureOffsetFn, overlaySeries: overlaySeries, radiusPxFn: _radiusPxFn, seriesCategory: seriesCategory, seriesColor: seriesColor, strokeWidthPxFn: _strokeWidthPxFn});
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(R, key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(R, key);
      }
    }
    (Series._internal = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let displayName = opts && 'displayName' in opts ? opts.displayName : null;
      let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
      let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
      let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
      let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
      let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
      let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
      let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
      let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
      let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
      let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
      let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
      let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
      let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
      let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      this[attributes] = new series$.SeriesAttributes.new();
      this[id$0] = id;
      this[data$] = data;
      this[domainFn$] = domainFn;
      this[measureFn$] = measureFn;
      this[displayName$] = displayName;
      this[areaColorFn$] = areaColorFn;
      this[colorFn$] = colorFn;
      this[dashPatternFn$] = dashPatternFn;
      this[domainFormatterFn$] = domainFormatterFn;
      this[domainLowerBoundFn$] = domainLowerBoundFn;
      this[domainUpperBoundFn$] = domainUpperBoundFn;
      this[fillColorFn$] = fillColorFn;
      this[fillPatternFn$] = fillPatternFn;
      this[patternColorFn$] = patternColorFn;
      this[keyFn$0] = keyFn;
      this[labelAccessorFn$] = labelAccessorFn;
      this[insideLabelStyleAccessorFn$0] = insideLabelStyleAccessorFn;
      this[outsideLabelStyleAccessorFn$0] = outsideLabelStyleAccessorFn;
      this[measureFormatterFn$] = measureFormatterFn;
      this[measureLowerBoundFn$] = measureLowerBoundFn;
      this[measureUpperBoundFn$] = measureUpperBoundFn;
      this[measureOffsetFn$] = measureOffsetFn;
      this[overlaySeries$] = overlaySeries;
      this[radiusPxFn$] = radiusPxFn;
      this[seriesCategory$] = seriesCategory;
      this[seriesColor$] = seriesColor;
      this[strokeWidthPxFn$] = strokeWidthPxFn;
      ;
    }).prototype = Series.prototype;
    dart.addTypeTests(Series);
    Series.prototype[_is_Series_default] = true;
    dart.setMethodSignature(Series, () => ({
      __proto__: dart.getMethods(Series.__proto__),
      setAttribute: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]]),
      getAttribute: dart.gFnType(R => [R, [series$.AttributeKey$(R)]])
    }));
    dart.setLibraryUri(Series, "package:charts_common/src/data/series.dart");
    dart.setFieldSignature(Series, () => ({
      __proto__: dart.getFields(Series.__proto__),
      id: dart.finalFieldType(core.String),
      displayName: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      seriesCategory: dart.finalFieldType(core.String),
      seriesColor: dart.finalFieldType(color$.Color),
      data: dart.finalFieldType(core.List$(T)),
      keyFn: dart.finalFieldType(dart.fnType(core.String, [core.int])),
      domainFn: dart.finalFieldType(dart.fnType(D, [core.int])),
      domainFormatterFn: dart.finalFieldType(dart.fnType(dart.fnType(core.String, [D]), [core.int])),
      domainLowerBoundFn: dart.finalFieldType(dart.fnType(D, [core.int])),
      domainUpperBoundFn: dart.finalFieldType(dart.fnType(D, [core.int])),
      measureFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      measureFormatterFn: dart.finalFieldType(dart.fnType(dart.fnType(core.String, [core.num]), [core.int])),
      measureLowerBoundFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      measureUpperBoundFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      measureOffsetFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      areaColorFn: dart.finalFieldType(dart.fnType(color$.Color, [core.int])),
      colorFn: dart.finalFieldType(dart.fnType(color$.Color, [core.int])),
      dashPatternFn: dart.finalFieldType(dart.fnType(core.List$(core.int), [core.int])),
      fillColorFn: dart.finalFieldType(dart.fnType(color$.Color, [core.int])),
      patternColorFn: dart.finalFieldType(dart.fnType(color$.Color, [core.int])),
      fillPatternFn: dart.finalFieldType(dart.fnType(chart_canvas.FillPatternType, [core.int])),
      radiusPxFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      strokeWidthPxFn: dart.finalFieldType(dart.fnType(core.num, [core.int])),
      labelAccessorFn: dart.finalFieldType(dart.fnType(core.String, [core.int])),
      insideLabelStyleAccessorFn: dart.finalFieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int])),
      outsideLabelStyleAccessorFn: dart.finalFieldType(dart.fnType(axis_spec.TextStyleSpec, [core.int])),
      attributes: dart.finalFieldType(series$.SeriesAttributes)
    }));
    return Series;
  });
  series$.Series = series$.Series$();
  dart.addTypeTests(series$.Series, _is_Series_default);
  const _is_TypedKey_default = Symbol('_is_TypedKey_default');
  typed_registry.TypedKey$ = dart.generic(R => {
    class TypedKey extends core.Object {
      get uniqueKey() {
        return this[uniqueKey$];
      }
      set uniqueKey(value) {
        super.uniqueKey = value;
      }
      get hashCode() {
        return dart.hashCode(this.uniqueKey);
      }
      _equals(other) {
        if (other == null) return false;
        return typed_registry.TypedKey.is(other) && this.uniqueKey == other.uniqueKey;
      }
    }
    (TypedKey.new = function(uniqueKey) {
      this[uniqueKey$] = uniqueKey;
      ;
    }).prototype = TypedKey.prototype;
    dart.addTypeTests(TypedKey);
    TypedKey.prototype[_is_TypedKey_default] = true;
    const uniqueKey$ = TypedKey_uniqueKey;
    dart.setLibraryUri(TypedKey, "package:charts_common/src/common/typed_registry.dart");
    dart.setFieldSignature(TypedKey, () => ({
      __proto__: dart.getFields(TypedKey.__proto__),
      uniqueKey: dart.finalFieldType(core.String)
    }));
    dart.defineExtensionMethods(TypedKey, ['_equals']);
    dart.defineExtensionAccessors(TypedKey, ['hashCode']);
    return TypedKey;
  });
  typed_registry.TypedKey = typed_registry.TypedKey$();
  dart.addTypeTests(typed_registry.TypedKey, _is_TypedKey_default);
  const _is_AttributeKey_default = Symbol('_is_AttributeKey_default');
  series$.AttributeKey$ = dart.generic(R => {
    class AttributeKey extends typed_registry.TypedKey$(R) {}
    (AttributeKey.new = function(uniqueKey) {
      AttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = AttributeKey.prototype;
    dart.addTypeTests(AttributeKey);
    AttributeKey.prototype[_is_AttributeKey_default] = true;
    dart.setLibraryUri(AttributeKey, "package:charts_common/src/data/series.dart");
    return AttributeKey;
  });
  series$.AttributeKey = series$.AttributeKey$();
  dart.addTypeTests(series$.AttributeKey, _is_AttributeKey_default);
  const _registry = dart.privateName(typed_registry, "_registry");
  typed_registry.TypedRegistry = class TypedRegistry extends core.Object {
    getAttr(R, key) {
      return R.as(this[_registry][$_get](key));
    }
    setAttr(R, key, value) {
      this[_registry][$_set](key, value);
    }
    mergeFrom(other) {
      this[_registry][$addAll](other[_registry]);
    }
  };
  (typed_registry.TypedRegistry.new = function() {
    this[_registry] = new (LinkedMapOfTypedKey$Object()).new();
    ;
  }).prototype = typed_registry.TypedRegistry.prototype;
  dart.addTypeTests(typed_registry.TypedRegistry);
  dart.setMethodSignature(typed_registry.TypedRegistry, () => ({
    __proto__: dart.getMethods(typed_registry.TypedRegistry.__proto__),
    getAttr: dart.gFnType(R => [R, [typed_registry.TypedKey$(R)]]),
    setAttr: dart.gFnType(R => [dart.void, [typed_registry.TypedKey$(R), R]]),
    mergeFrom: dart.fnType(dart.void, [typed_registry.TypedRegistry])
  }));
  dart.setLibraryUri(typed_registry.TypedRegistry, "package:charts_common/src/common/typed_registry.dart");
  dart.setFieldSignature(typed_registry.TypedRegistry, () => ({
    __proto__: dart.getFields(typed_registry.TypedRegistry.__proto__),
    [_registry]: dart.finalFieldType(core.Map$(typed_registry.TypedKey, core.Object))
  }));
  series$.SeriesAttributes = class SeriesAttributes extends typed_registry.TypedRegistry {};
  (series$.SeriesAttributes.new = function() {
    series$.SeriesAttributes.__proto__.new.call(this);
    ;
  }).prototype = series$.SeriesAttributes.prototype;
  dart.addTypeTests(series$.SeriesAttributes);
  dart.setLibraryUri(series$.SeriesAttributes, "package:charts_common/src/data/series.dart");
  symbol_renderer.BaseSymbolRenderer = class BaseSymbolRenderer extends core.Object {};
  (symbol_renderer.BaseSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.BaseSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.BaseSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.BaseSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  const isSolid$ = dart.privateName(symbol_renderer, "SymbolRenderer.isSolid");
  symbol_renderer.SymbolRenderer = class SymbolRenderer extends symbol_renderer.BaseSymbolRenderer {
    get isSolid() {
      return this[isSolid$];
    }
    set isSolid(value) {
      super.isSolid = value;
    }
    getSolidStrokeWidthPx(strokeWidthPx) {
      let t1;
      return dart.test(this.isSolid) ? strokeWidthPx : (t1 = strokeWidthPx, t1 == null ? 2.0 : t1);
    }
    getSolidFillColor(fillColor) {
      return dart.test(this.isSolid) ? fillColor : style_factory.StyleFactory.style.white;
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.SymbolRenderer.is(other) && dart.equals(other.isSolid, this.isSolid);
    }
    get hashCode() {
      return dart.hashCode(this.isSolid);
    }
  };
  (symbol_renderer.SymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : null;
    this[isSolid$] = isSolid;
    ;
  }).prototype = symbol_renderer.SymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.SymbolRenderer);
  dart.setMethodSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.SymbolRenderer.__proto__),
    getSolidStrokeWidthPx: dart.fnType(core.double, [core.double]),
    getSolidFillColor: dart.fnType(color$.Color, [color$.Color]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.SymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.setFieldSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.SymbolRenderer.__proto__),
    isSolid: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(symbol_renderer.SymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.SymbolRenderer, ['hashCode']);
  symbol_renderer.PointSymbolRenderer = class PointSymbolRenderer extends symbol_renderer.BaseSymbolRenderer {};
  (symbol_renderer.PointSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.PointSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.PointSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.PointSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  const radius$1 = dart.privateName(symbol_renderer, "RoundedRectSymbolRenderer.radius");
  symbol_renderer.RoundedRectSymbolRenderer = class RoundedRectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get radius() {
      return this[radius$1];
    }
    set radius(value) {
      super.radius = value;
    }
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, radius: this.radius, roundTopLeft: true, roundTopRight: true, roundBottomRight: true, roundBottomLeft: true});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RoundedRectSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RoundedRectSymbolRenderer.is(other) && other.radius == this.radius && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.radius);
      return hashcode;
    }
  };
  (symbol_renderer.RoundedRectSymbolRenderer.new = function(opts) {
    let t1;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    this[radius$1] = (t1 = radius, t1 == null ? 1.0 : t1);
    symbol_renderer.RoundedRectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RoundedRectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RoundedRectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: core.List$(core.int), fillColor: color$.Color, strokeColor: color$.Color, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.RoundedRectSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.setFieldSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    radius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(symbol_renderer.RoundedRectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RoundedRectSymbolRenderer, ['hashCode']);
  const _dashPattern = dart.privateName(symbol_renderer, "_dashPattern");
  const strokeWidth$ = dart.privateName(symbol_renderer, "LineSymbolRenderer.strokeWidth");
  symbol_renderer.LineSymbolRenderer = class LineSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    paint(canvas, bounds, opts) {
      let t1, t1$;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let centerHeight = (dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$top])) / 2;
      let localDashPattern = (t1 = dashPattern, t1 == null ? this[_dashPattern] : t1);
      let roundEndCaps = localDashPattern == null;
      let localStrokeWidthPx = localDashPattern == null ? this.getSolidStrokeWidthPx((t1$ = strokeWidthPx, t1$ == null ? this.strokeWidth : t1$)) : 2;
      let left = bounds[$left];
      let right = bounds[$right];
      if (roundEndCaps && dart.notNull(bounds[$width]) >= 5) {
        left = dart.notNull(left) + 2;
        right = dart.notNull(right) - 2;
      }
      canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(left, centerHeight), new (PointOfnum()).new(right, centerHeight)]), dashPattern: localDashPattern, fill: this.getSolidFillColor(fillColor), roundEndCaps: roundEndCaps, stroke: strokeColor, strokeWidthPx: localStrokeWidthPx});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.LineSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.LineSymbolRenderer.is(other) && other.strokeWidth == this.strokeWidth && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.strokeWidth);
      return hashcode;
    }
  };
  (symbol_renderer.LineSymbolRenderer.new = function(opts) {
    let t1;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[strokeWidth$] = (t1 = strokeWidth, t1 == null ? 4 : t1);
    this[_dashPattern] = dashPattern;
    symbol_renderer.LineSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.LineSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.LineSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.LineSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: core.List$(core.int), fillColor: color$.Color, strokeColor: color$.Color, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.LineSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.setFieldSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.LineSymbolRenderer.__proto__),
    strokeWidth: dart.finalFieldType(core.double),
    [_dashPattern]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(symbol_renderer.LineSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.LineSymbolRenderer, ['hashCode']);
  dart.defineLazy(symbol_renderer.LineSymbolRenderer, {
    /*symbol_renderer.LineSymbolRenderer.roundEndCapsPixels*/get roundEndCapsPixels() {
      return 2;
    },
    /*symbol_renderer.LineSymbolRenderer.minLengthToRoundCaps*/get minLengthToRoundCaps() {
      return 5;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForRoundEndCaps*/get strokeWidthForRoundEndCaps() {
      return 4;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForNonRoundedEndCaps*/get strokeWidthForNonRoundedEndCaps() {
      return 2;
    }
  });
  symbol_renderer.CircleSymbolRenderer = class CircleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let center = new (PointOfnum()).new(dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2, dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2);
      let radius = math.min(core.num, bounds[$width], bounds[$height]) / 2;
      canvas.drawPoint({point: center, radius: radius, fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.CircleSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.CircleSymbolRenderer.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this[$runtimeType]));
      return hashcode;
    }
  };
  (symbol_renderer.CircleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.CircleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.CircleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CircleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CircleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CircleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: core.List$(core.int), fillColor: color$.Color, strokeColor: color$.Color, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.CircleSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.defineExtensionMethods(symbol_renderer.CircleSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CircleSymbolRenderer, ['hashCode']);
  symbol_renderer.RectSymbolRenderer = class RectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RectSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RectSymbolRenderer.is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this[$runtimeType]));
      return hashcode;
    }
  };
  (symbol_renderer.RectSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.RectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num)], {dashPattern: core.List$(core.int), fillColor: color$.Color, strokeColor: color$.Color, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.RectSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.defineExtensionMethods(symbol_renderer.RectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectSymbolRenderer, ['hashCode']);
  symbol_renderer.CylinderSymbolRenderer = class CylinderSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (PointOfdouble()).new(p1.x, p1.y);
      let adjustedP2 = new (PointOfdouble()).new(p2.x, p2.y);
      canvas.drawLine({points: JSArrayOfPointOfnum().of([adjustedP1, adjustedP2]), stroke: color$.Color._check(strokeColor), roundEndCaps: true, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.CylinderSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.CylinderSymbolRenderer.is(other);
    }
    get hashCode() {
      return dart.hashCode(this[$runtimeType]);
    }
  };
  (symbol_renderer.CylinderSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.CylinderSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CylinderSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CylinderSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Point$(core.double), core.double], {fillColor: color$.Color, p2: math.Point$(core.double), strokeColor: dart.dynamic, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.CylinderSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.defineExtensionMethods(symbol_renderer.CylinderSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CylinderSymbolRenderer, ['hashCode']);
  symbol_renderer.RectangleRangeSymbolRenderer = class RectangleRangeSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (PointOfdouble()).new(p1.x, p1.y);
      let adjustedP2 = new (PointOfdouble()).new(p2.x, p2.y);
      canvas.drawLine({points: JSArrayOfPointOfnum().of([adjustedP1, adjustedP2]), stroke: color$.Color._check(strokeColor), roundEndCaps: false, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      symbol_renderer.RectangleRangeSymbolRenderer._check(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return symbol_renderer.RectangleRangeSymbolRenderer.is(other);
    }
    get hashCode() {
      return dart.hashCode(this[$runtimeType]);
    }
  };
  (symbol_renderer.RectangleRangeSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.RectangleRangeSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Point$(core.double), core.double], {fillColor: color$.Color, p2: math.Point$(core.double), strokeColor: dart.dynamic, strokeWidthPx: core.double}, {}),
    shouldRepaint: dart.fnType(core.bool, [core.Object]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(symbol_renderer.RectangleRangeSymbolRenderer, "package:charts_common/src/common/symbol_renderer.dart");
  dart.defineExtensionMethods(symbol_renderer.RectangleRangeSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectangleRangeSymbolRenderer, ['hashCode']);
  const BasicNumericTickProviderSpec_desiredMaxTickCount = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMaxTickCount");
  const BasicNumericTickProviderSpec_desiredMinTickCount = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMinTickCount");
  const BasicNumericTickProviderSpec_desiredTickCount = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredTickCount");
  const BasicNumericTickProviderSpec_dataIsInWholeNumbers = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.dataIsInWholeNumbers");
  const BasicNumericTickProviderSpec_zeroBound = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.zeroBound");
  let C130;
  let C131;
  const viewport$ = dart.privateName(numeric_axis_spec, "NumericAxisSpec.viewport");
  numeric_axis_spec.NumericAxisSpec = class NumericAxisSpec extends axis_spec.AxisSpec$(core.num) {
    get viewport() {
      return this[viewport$];
    }
    set viewport(value) {
      super.viewport = value;
    }
    static from(other, opts) {
      let t1, t1$, t1$0, t1$1, t1$2;
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let viewport = opts && 'viewport' in opts ? opts.viewport : null;
      return new numeric_axis_spec.NumericAxisSpec.new({renderSpec: (t1 = renderSpec, t1 == null ? other.renderSpec : t1), tickProviderSpec: numeric_axis_spec.NumericTickProviderSpec._check((t1$ = tickProviderSpec, t1$ == null ? other.tickProviderSpec : t1$)), tickFormatterSpec: numeric_axis_spec.NumericTickFormatterSpec._check((t1$0 = tickFormatterSpec, t1$0 == null ? other.tickFormatterSpec : t1$0)), showAxisLine: (t1$1 = showAxisLine, t1$1 == null ? other.showAxisLine : t1$1), viewport: (t1$2 = viewport, t1$2 == null ? other.viewport : t1$2)});
    }
    configure(axis, context, graphicsFactory) {
      AxisOfnum()._check(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.NumericAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(this.viewport);
      }
    }
    createAxis() {
      return new axis$.NumericAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.NumericAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.viewport));
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(super.hashCode);
      return hashcode;
    }
  };
  (numeric_axis_spec.NumericAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[viewport$] = viewport;
    numeric_axis_spec.NumericAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine});
    ;
  }).prototype = numeric_axis_spec.NumericAxisSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericAxisSpec);
  dart.setMethodSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericAxisSpec.__proto__),
    createAxis: dart.fnType(axis$.NumericAxis, [])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  dart.setFieldSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.NumericAxisSpec.__proto__),
    viewport: dart.finalFieldType(numeric_extents.NumericExtents)
  }));
  dart.defineExtensionMethods(numeric_axis_spec.NumericAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.NumericAxisSpec, ['hashCode']);
  percent_axis_spec.PercentAxisSpec = class PercentAxisSpec extends numeric_axis_spec.NumericAxisSpec {
    _equals(other) {
      if (other == null) return false;
      return percent_axis_spec.PercentAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
  };
  (percent_axis_spec.PercentAxisSpec.new = function(opts) {
    let t1, t1$, t1$0;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    percent_axis_spec.PercentAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: (t1 = tickProviderSpec, t1 == null ? C130 || CT.C130 : t1), tickFormatterSpec: (t1$ = tickFormatterSpec, t1$ == null ? new numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat(new intl.NumberFormat.percentPattern()) : t1$), showAxisLine: showAxisLine, viewport: (t1$0 = viewport, t1$0 == null ? C131 || CT.C131 : t1$0)});
    ;
  }).prototype = percent_axis_spec.PercentAxisSpec.prototype;
  dart.addTypeTests(percent_axis_spec.PercentAxisSpec);
  dart.setLibraryUri(percent_axis_spec.PercentAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/percent_axis_spec.dart");
  dart.defineExtensionMethods(percent_axis_spec.PercentAxisSpec, ['_equals']);
  numeric_axis_spec.NumericTickProviderSpec = class NumericTickProviderSpec extends axis_spec.TickProviderSpec$(core.num) {};
  (numeric_axis_spec.NumericTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickProviderSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  numeric_axis_spec.NumericTickFormatterSpec = class NumericTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.num) {};
  (numeric_axis_spec.NumericTickFormatterSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickFormatterSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  numeric_axis_spec.BasicNumericTickProviderSpec = class BasicNumericTickProviderSpec extends core.Object {
    get zeroBound() {
      return this[zeroBound$];
    }
    set zeroBound(value) {
      super.zeroBound = value;
    }
    get dataIsInWholeNumbers() {
      return this[dataIsInWholeNumbers$];
    }
    set dataIsInWholeNumbers(value) {
      super.dataIsInWholeNumbers = value;
    }
    get desiredTickCount() {
      return this[desiredTickCount$];
    }
    set desiredTickCount(value) {
      super.desiredTickCount = value;
    }
    get desiredMinTickCount() {
      return this[desiredMinTickCount$];
    }
    set desiredMinTickCount(value) {
      super.desiredMinTickCount = value;
    }
    get desiredMaxTickCount() {
      return this[desiredMaxTickCount$];
    }
    set desiredMaxTickCount(value) {
      super.desiredMaxTickCount = value;
    }
    createTickProvider(context) {
      let t1, t1$, t1$0, t1$1;
      let provider = new numeric_tick_provider.NumericTickProvider.new();
      if (this.zeroBound != null) {
        provider.zeroBound = this.zeroBound;
      }
      if (this.dataIsInWholeNumbers != null) {
        provider.dataIsInWholeNumbers = this.dataIsInWholeNumbers;
      }
      if (this.desiredMinTickCount != null || this.desiredMaxTickCount != null || this.desiredTickCount != null) {
        provider.setTickCount((t1$ = (t1 = this.desiredMaxTickCount, t1 == null ? this.desiredTickCount : t1), t1$ == null ? 10 : t1$), (t1$1 = (t1$0 = this.desiredMinTickCount, t1$0 == null ? this.desiredTickCount : t1$0), t1$1 == null ? 2 : t1$1));
      }
      return provider;
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.BasicNumericTickProviderSpec.is(other) && dart.equals(this.zeroBound, other.zeroBound) && dart.equals(this.dataIsInWholeNumbers, other.dataIsInWholeNumbers) && this.desiredTickCount == other.desiredTickCount && this.desiredMinTickCount == other.desiredMinTickCount && this.desiredMaxTickCount == other.desiredMaxTickCount;
    }
    get hashCode() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7;
      let hashcode = (t1$ = (t1 = this.zeroBound, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
      hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.dataIsInWholeNumbers, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
      hashcode = (t1$3 = dart.notNull(hashcode) * 37 + dart.notNull((t1$2 = this.desiredTickCount, t1$2 == null ? null : dart.hashCode(t1$2))), t1$3 === null ? 0 : t1$3);
      hashcode = (t1$5 = dart.notNull(hashcode) * 37 + dart.notNull((t1$4 = this.desiredMinTickCount, t1$4 == null ? null : dart.hashCode(t1$4))), t1$5 === null ? 0 : t1$5);
      hashcode = (t1$7 = dart.notNull(hashcode) * 37 + dart.notNull((t1$6 = this.desiredMaxTickCount, t1$6 == null ? null : dart.hashCode(t1$6))), t1$7 === null ? 0 : t1$7);
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickProviderSpec.new = function(opts) {
    let zeroBound = opts && 'zeroBound' in opts ? opts.zeroBound : null;
    let dataIsInWholeNumbers = opts && 'dataIsInWholeNumbers' in opts ? opts.dataIsInWholeNumbers : null;
    let desiredTickCount = opts && 'desiredTickCount' in opts ? opts.desiredTickCount : null;
    let desiredMinTickCount = opts && 'desiredMinTickCount' in opts ? opts.desiredMinTickCount : null;
    let desiredMaxTickCount = opts && 'desiredMaxTickCount' in opts ? opts.desiredMaxTickCount : null;
    this[zeroBound$] = zeroBound;
    this[dataIsInWholeNumbers$] = dataIsInWholeNumbers;
    this[desiredTickCount$] = desiredTickCount;
    this[desiredMinTickCount$] = desiredMinTickCount;
    this[desiredMaxTickCount$] = desiredMaxTickCount;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickProviderSpec);
  const zeroBound$ = BasicNumericTickProviderSpec_zeroBound;
  const dataIsInWholeNumbers$ = BasicNumericTickProviderSpec_dataIsInWholeNumbers;
  const desiredTickCount$ = BasicNumericTickProviderSpec_desiredTickCount;
  const desiredMinTickCount$ = BasicNumericTickProviderSpec_desiredMinTickCount;
  const desiredMaxTickCount$ = BasicNumericTickProviderSpec_desiredMaxTickCount;
  numeric_axis_spec.BasicNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(numeric_tick_provider.NumericTickProvider, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    zeroBound: dart.finalFieldType(core.bool),
    dataIsInWholeNumbers: dart.finalFieldType(core.bool),
    desiredTickCount: dart.finalFieldType(core.int),
    desiredMinTickCount: dart.finalFieldType(core.int),
    desiredMaxTickCount: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickProviderSpec, ['hashCode']);
  numeric_axis_spec.NumericEndPointsTickProviderSpec = class NumericEndPointsTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new (EndPointsTickProviderOfnum()).new();
    }
    _equals(other) {
      if (other == null) return false;
      return numeric_axis_spec.NumericEndPointsTickProviderSpec.is(other);
    }
  };
  (numeric_axis_spec.NumericEndPointsTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericEndPointsTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericEndPointsTickProviderSpec);
  numeric_axis_spec.NumericEndPointsTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.NumericEndPointsTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(end_points_tick_provider.EndPointsTickProvider$(core.num), [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericEndPointsTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  dart.defineExtensionMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec, ['_equals']);
  const tickSpecs$ = dart.privateName(numeric_axis_spec, "StaticNumericTickProviderSpec.tickSpecs");
  numeric_axis_spec.StaticNumericTickProviderSpec = class StaticNumericTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[tickSpecs$];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (StaticTickProviderOfnum()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || numeric_axis_spec.StaticNumericTickProviderSpec.is(other) && dart.equals(this.tickSpecs, other.tickSpecs);
    }
    get hashCode() {
      return dart.hashCode(this.tickSpecs);
    }
  };
  (numeric_axis_spec.StaticNumericTickProviderSpec.new = function(tickSpecs) {
    this[tickSpecs$] = tickSpecs;
    ;
  }).prototype = numeric_axis_spec.StaticNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.StaticNumericTickProviderSpec);
  numeric_axis_spec.StaticNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.num), [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(numeric_axis_spec.StaticNumericTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  dart.setFieldSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.num)))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.StaticNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.StaticNumericTickProviderSpec, ['hashCode']);
  const formatter$0 = dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.formatter");
  const numberFormat$ = dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.numberFormat");
  numeric_axis_spec.BasicNumericTickFormatterSpec = class BasicNumericTickFormatterSpec extends core.Object {
    get formatter() {
      return this[formatter$0];
    }
    set formatter(value) {
      super.formatter = value;
    }
    get numberFormat() {
      return this[numberFormat$];
    }
    set numberFormat(value) {
      super.numberFormat = value;
    }
    createTickFormatter(context) {
      return this.numberFormat != null ? tick_formatter.NumericTickFormatter.fromNumberFormat(this.numberFormat) : tick_formatter.NumericTickFormatter.new({formatter: this.formatter});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || numeric_axis_spec.BasicNumericTickFormatterSpec.is(other) && dart.equals(this.formatter, other.formatter) && dart.equals(this.numberFormat, other.numberFormat);
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.formatter);
      hashcode = dart.notNull(hashcode) * 37 * dart.notNull(dart.hashCode(this.numberFormat));
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickFormatterSpec.new = function(formatter) {
    this[formatter$0] = formatter;
    this[numberFormat$] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  (numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat = function(numberFormat) {
    this[numberFormat$] = numberFormat;
    this[formatter$0] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickFormatterSpec);
  numeric_axis_spec.BasicNumericTickFormatterSpec[dart.implements] = () => [numeric_axis_spec.NumericTickFormatterSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(tick_formatter.NumericTickFormatter, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart");
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    formatter: dart.finalFieldType(dart.fnType(core.String, [core.num])),
    numberFormat: dart.finalFieldType(intl.NumberFormat)
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickFormatterSpec, ['hashCode']);
  const _is_TickSpec_default = Symbol('_is_TickSpec_default');
  const value$0 = dart.privateName(tick_spec, "TickSpec.value");
  const label$0 = dart.privateName(tick_spec, "TickSpec.label");
  const style$ = dart.privateName(tick_spec, "TickSpec.style");
  tick_spec.TickSpec$ = dart.generic(D => {
    class TickSpec extends core.Object {
      get value() {
        return this[value$0];
      }
      set value(value) {
        super.value = value;
      }
      get label() {
        return this[label$0];
      }
      set label(value) {
        super.label = value;
      }
      get style() {
        return this[style$];
      }
      set style(value) {
        super.style = value;
      }
    }
    (TickSpec.new = function(value, opts) {
      let label = opts && 'label' in opts ? opts.label : null;
      let style = opts && 'style' in opts ? opts.style : null;
      this[value$0] = value;
      this[label$0] = label;
      this[style$] = style;
      ;
    }).prototype = TickSpec.prototype;
    dart.addTypeTests(TickSpec);
    TickSpec.prototype[_is_TickSpec_default] = true;
    dart.setLibraryUri(TickSpec, "package:charts_common/src/chart/cartesian/axis/spec/tick_spec.dart");
    dart.setFieldSignature(TickSpec, () => ({
      __proto__: dart.getFields(TickSpec.__proto__),
      value: dart.finalFieldType(D),
      label: dart.finalFieldType(core.String),
      style: dart.finalFieldType(axis_spec.TextStyleSpec)
    }));
    return TickSpec;
  });
  tick_spec.TickSpec = tick_spec.TickSpec$();
  dart.addTypeTests(tick_spec.TickSpec, _is_TickSpec_default);
  const _is_StaticTickProvider_default = Symbol('_is_StaticTickProvider_default');
  const tickSpec$ = dart.privateName(static_tick_provider, "StaticTickProvider.tickSpec");
  static_tick_provider.StaticTickProvider$ = dart.generic(D => {
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    let TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    let MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    let TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    let JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    let TickSpecOfD = () => (TickSpecOfD = dart.constFn(tick_spec.TickSpec$(D)))();
    let TickSpecOfDToD = () => (TickSpecOfDToD = dart.constFn(dart.fnType(D, [TickSpecOfD()])))();
    class StaticTickProvider extends tick_provider.TickProvider$(D) {
      get tickSpec() {
        return this[tickSpec$];
      }
      set tickSpec(value) {
        super.tickSpec = value;
      }
      getTicks(opts) {
        let t1, t1$;
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD()._check(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD()._check(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String()._check(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintOfD()._check(tickHint);
        let ticks = JSArrayOfTickOfD().of([]);
        let allTicksHaveLabels = true;
        for (let spec of this.tickSpec) {
          if (numeric_scale.NumericScale.is(scale) || date_time_scale.DateTimeScale.is(scale)) {
            scale.addDomain(spec.value);
          }
          allTicksHaveLabels = allTicksHaveLabels && spec.label != null;
        }
        let formattedValues = null;
        if (allTicksHaveLabels[$_equals](false)) {
          formattedValues = formatter.format(this.tickSpec[$map](D, dart.fn(spec => spec.value, TickSpecOfDToD()))[$toList](), formatterValueCache, {stepSize: scale.domainStepSize});
        }
        for (let i = 0; i < dart.notNull(this.tickSpec[$length]); i = i + 1) {
          let spec = this.tickSpec[$_get](i);
          if (scale.compareDomainValueToViewport(spec.value) === 0) {
            let tick = new (TickOfD()).new({value: spec.value, textElement: graphicsFactory.createTextElement((t1 = spec.label, t1 == null ? formattedValues[$_get](i) : t1)), locationPx: scale._get(spec.value)});
            if (spec.style != null) {
              tick.textElement.textStyle = (t1$ = graphicsFactory.createTextPaint(), t1$.fontFamily = spec.style.fontFamily, t1$.fontSize = spec.style.fontSize, t1$.color = spec.style.color, t1$.lineHeight = spec.style.lineHeight, t1$);
            }
            ticks[$add](tick);
          }
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
      _equals(other) {
        if (other == null) return false;
        return static_tick_provider.StaticTickProvider.is(other) && dart.equals(this.tickSpec, other.tickSpec);
      }
      get hashCode() {
        return dart.hashCode(this.tickSpec);
      }
    }
    (StaticTickProvider.new = function(tickSpec) {
      this[tickSpec$] = tickSpec;
      ;
    }).prototype = StaticTickProvider.prototype;
    dart.addTypeTests(StaticTickProvider);
    StaticTickProvider.prototype[_is_StaticTickProvider_default] = true;
    dart.setMethodSignature(StaticTickProvider, () => ({
      __proto__: dart.getMethods(StaticTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {})
    }));
    dart.setLibraryUri(StaticTickProvider, "package:charts_common/src/chart/cartesian/axis/static_tick_provider.dart");
    dart.setFieldSignature(StaticTickProvider, () => ({
      __proto__: dart.getFields(StaticTickProvider.__proto__),
      tickSpec: dart.finalFieldType(core.List$(tick_spec.TickSpec$(D)))
    }));
    dart.defineExtensionMethods(StaticTickProvider, ['_equals']);
    dart.defineExtensionAccessors(StaticTickProvider, ['hashCode']);
    return StaticTickProvider;
  });
  static_tick_provider.StaticTickProvider = static_tick_provider.StaticTickProvider$();
  dart.addTypeTests(static_tick_provider.StaticTickProvider, _is_StaticTickProvider_default);
  const _linearScale = dart.privateName(date_time_scale, "_linearScale");
  const dateTimeFactory$ = dart.privateName(date_time_scale, "DateTimeScale.dateTimeFactory");
  date_time_scale.DateTimeScale = class DateTimeScale extends scale$.MutableScale$(core.DateTime) {
    get dateTimeFactory() {
      return this[dateTimeFactory$];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    _get(domainValue) {
      core.DateTime._check(domainValue);
      return this[_linearScale]._get(domainValue.millisecondsSinceEpoch);
    }
    reverse(pixelLocation) {
      return this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(this[_linearScale].reverse(pixelLocation)[$round]());
    }
    resetDomain() {
      this[_linearScale].resetDomain();
    }
    set stepSizeConfig(config) {
      this[_linearScale].stepSizeConfig = config;
    }
    get stepSizeConfig() {
      return this[_linearScale].stepSizeConfig;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      this[_linearScale].rangeBandConfig = barGroupWidthConfig;
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[_linearScale].setViewportSettings(viewportScale, viewportTranslatePx);
    }
    set range(extent) {
      this[_linearScale].range = extent;
    }
    addDomain(domainValue) {
      core.DateTime._check(domainValue);
      this[_linearScale].addDomain(domainValue.millisecondsSinceEpoch);
    }
    resetViewportSettings() {
      this[_linearScale].resetViewportSettings();
    }
    get viewportDomain() {
      let extents = this[_linearScale].viewportDomain;
      return new date_time_extents.DateTimeExtents.new({start: this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(extents.min[$toInt]()), end: this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(extents.max[$toInt]())});
    }
    set viewportDomain(extents) {
      this[_linearScale].viewportDomain = new numeric_extents.NumericExtents.new(extents.start.millisecondsSinceEpoch, extents.end.millisecondsSinceEpoch);
    }
    copy() {
      return new date_time_scale.DateTimeScale._copy(this);
    }
    get viewportTranslatePx() {
      return this[_linearScale].viewportTranslatePx;
    }
    get viewportScalingFactor() {
      return this[_linearScale].viewportScalingFactor;
    }
    isRangeValueWithinViewport(rangeValue) {
      return this[_linearScale].isRangeValueWithinViewport(rangeValue);
    }
    compareDomainValueToViewport(domainValue) {
      core.DateTime._check(domainValue);
      return this[_linearScale].compareDomainValueToViewport(domainValue.millisecondsSinceEpoch);
    }
    get rangeBand() {
      return this[_linearScale].rangeBand;
    }
    get stepSize() {
      return this[_linearScale].stepSize;
    }
    get domainStepSize() {
      return this[_linearScale].domainStepSize;
    }
    get rangeBandConfig() {
      return this[_linearScale].rangeBandConfig;
    }
    get rangeWidth() {
      return this[_linearScale].rangeWidth;
    }
    get range() {
      return this[_linearScale].range;
    }
    canTranslate(domainValue) {
      core.DateTime._check(domainValue);
      return this[_linearScale].canTranslate(domainValue.millisecondsSinceEpoch);
    }
    get dataExtent() {
      return this[_linearScale].dataExtent;
    }
  };
  (date_time_scale.DateTimeScale.new = function(dateTimeFactory) {
    this[dateTimeFactory$] = dateTimeFactory;
    this[_linearScale] = new linear_scale.LinearScale.new();
    ;
  }).prototype = date_time_scale.DateTimeScale.prototype;
  (date_time_scale.DateTimeScale._copy = function(other) {
    this[dateTimeFactory$] = other.dateTimeFactory;
    this[_linearScale] = other[_linearScale].copy();
    ;
  }).prototype = date_time_scale.DateTimeScale.prototype;
  dart.addTypeTests(date_time_scale.DateTimeScale);
  dart.setMethodSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getMethods(date_time_scale.DateTimeScale.__proto__),
    _get: dart.fnType(core.num, [core.Object]),
    reverse: dart.fnType(core.DateTime, [core.double]),
    resetDomain: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [core.double, core.double]),
    addDomain: dart.fnType(dart.void, [core.Object]),
    resetViewportSettings: dart.fnType(dart.void, []),
    copy: dart.fnType(date_time_scale.DateTimeScale, []),
    isRangeValueWithinViewport: dart.fnType(core.bool, [core.double]),
    compareDomainValueToViewport: dart.fnType(core.int, [core.Object]),
    canTranslate: dart.fnType(core.bool, [core.Object])
  }));
  dart.setGetterSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getGetters(date_time_scale.DateTimeScale.__proto__),
    stepSizeConfig: scale$.StepSizeConfig,
    viewportDomain: date_time_extents.DateTimeExtents,
    viewportTranslatePx: core.double,
    viewportScalingFactor: core.double,
    rangeBand: core.double,
    stepSize: core.double,
    domainStepSize: core.double,
    rangeBandConfig: scale$.RangeBandConfig,
    rangeWidth: core.int,
    range: scale$.ScaleOutputExtent,
    dataExtent: numeric_extents.NumericExtents
  }));
  dart.setSetterSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getSetters(date_time_scale.DateTimeScale.__proto__),
    stepSizeConfig: scale$.StepSizeConfig,
    rangeBandConfig: scale$.RangeBandConfig,
    range: scale$.ScaleOutputExtent,
    viewportDomain: date_time_extents.DateTimeExtents
  }));
  dart.setLibraryUri(date_time_scale.DateTimeScale, "package:charts_common/src/chart/cartesian/axis/time/date_time_scale.dart");
  dart.setFieldSignature(date_time_scale.DateTimeScale, () => ({
    __proto__: dart.getFields(date_time_scale.DateTimeScale.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory),
    [_linearScale]: dart.finalFieldType(linear_scale.LinearScale)
  }));
  const start$1 = dart.privateName(date_time_extents, "DateTimeExtents.start");
  const end$1 = dart.privateName(date_time_extents, "DateTimeExtents.end");
  date_time_extents.DateTimeExtents = class DateTimeExtents extends scale$.Extents$(core.DateTime) {
    get start() {
      return this[start$1];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$1];
    }
    set end(value) {
      super.end = value;
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_extents.DateTimeExtents.is(other) && dart.equals(this.start, other.start) && dart.equals(this.end, other.end);
    }
    get hashCode() {
      return dart.notNull(dart.hashCode(this.start)) + dart.notNull(dart.hashCode(this.end)) * 37;
    }
  };
  (date_time_extents.DateTimeExtents.new = function(opts) {
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[start$1] = start;
    this[end$1] = end;
    ;
  }).prototype = date_time_extents.DateTimeExtents.prototype;
  dart.addTypeTests(date_time_extents.DateTimeExtents);
  dart.setLibraryUri(date_time_extents.DateTimeExtents, "package:charts_common/src/chart/cartesian/axis/time/date_time_extents.dart");
  dart.setFieldSignature(date_time_extents.DateTimeExtents, () => ({
    __proto__: dart.getFields(date_time_extents.DateTimeExtents.__proto__),
    start: dart.finalFieldType(core.DateTime),
    end: dart.finalFieldType(core.DateTime)
  }));
  dart.defineExtensionMethods(date_time_extents.DateTimeExtents, ['_equals']);
  dart.defineExtensionAccessors(date_time_extents.DateTimeExtents, ['hashCode']);
  const _getStartValue = dart.privateName(end_points_tick_provider, "_getStartValue");
  const _getEndValue = dart.privateName(end_points_tick_provider, "_getEndValue");
  const _is_EndPointsTickProvider_default = Symbol('_is_EndPointsTickProvider_default');
  end_points_tick_provider.EndPointsTickProvider$ = dart.generic(D => {
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    let TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    let MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    let TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    let JSArrayOfTickOfD = () => (JSArrayOfTickOfD = dart.constFn(_interceptors.JSArray$(TickOfD())))();
    let JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    class EndPointsTickProvider extends tick_provider.BaseTickProvider$(D) {
      getTicks(opts) {
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD()._check(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD()._check(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String()._check(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintOfD()._check(tickHint);
        let ticks = JSArrayOfTickOfD().of([]);
        if (scale.domainStepSize[$abs]() !== 1 / 0) {
          let start = this[_getStartValue](tickHint, scale);
          let end = this[_getEndValue](tickHint, scale);
          let labels = formatter.format(JSArrayOfD().of([start, end]), formatterValueCache, {stepSize: scale.domainStepSize});
          ticks[$add](new (TickOfD()).new({value: start, textElement: graphicsFactory.createTextElement(labels[$_get](0)), locationPx: scale._get(start)}));
          ticks[$add](new (TickOfD()).new({value: end, textElement: graphicsFactory.createTextElement(labels[$_get](1)), locationPx: scale._get(end)}));
          tickDrawStrategy.decorateTicks(ticks);
        }
        return ticks;
      }
      [_getStartValue](tickHint, scale) {
        let start = null;
        if (tickHint != null) {
          start = tickHint.start;
        } else {
          if (numeric_scale.NumericScale.is(scale)) {
            start = numeric_scale.NumericScale.as(scale).viewportDomain.min;
          } else if (date_time_scale.DateTimeScale.is(scale)) {
            start = date_time_scale.DateTimeScale.as(scale).viewportDomain.start;
          } else if (ordinal_scale.OrdinalScale.is(scale)) {
            start = ordinal_scale.OrdinalScale.as(scale).domain.first;
          }
        }
        return D._check(start);
      }
      [_getEndValue](tickHint, scale) {
        let end = null;
        if (tickHint != null) {
          end = tickHint.end;
        } else {
          if (numeric_scale.NumericScale.is(scale)) {
            end = numeric_scale.NumericScale.as(scale).viewportDomain.max;
          } else if (date_time_scale.DateTimeScale.is(scale)) {
            end = date_time_scale.DateTimeScale.as(scale).viewportDomain.end;
          } else if (ordinal_scale.OrdinalScale.is(scale)) {
            end = ordinal_scale.OrdinalScale.as(scale).domain.last;
          }
        }
        return D._check(end);
      }
    }
    (EndPointsTickProvider.new = function() {
      EndPointsTickProvider.__proto__.new.call(this);
      ;
    }).prototype = EndPointsTickProvider.prototype;
    dart.addTypeTests(EndPointsTickProvider);
    EndPointsTickProvider.prototype[_is_EndPointsTickProvider_default] = true;
    dart.setMethodSignature(EndPointsTickProvider, () => ({
      __proto__: dart.getMethods(EndPointsTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {}),
      [_getStartValue]: dart.fnType(D, [tick_provider.TickHint$(D), scale$.MutableScale$(D)]),
      [_getEndValue]: dart.fnType(D, [tick_provider.TickHint$(D), scale$.MutableScale$(D)])
    }));
    dart.setLibraryUri(EndPointsTickProvider, "package:charts_common/src/chart/cartesian/axis/end_points_tick_provider.dart");
    return EndPointsTickProvider;
  });
  end_points_tick_provider.EndPointsTickProvider = end_points_tick_provider.EndPointsTickProvider$();
  dart.addTypeTests(end_points_tick_provider.EndPointsTickProvider, _is_EndPointsTickProvider_default);
  const formatter$1 = dart.privateName(simple_time_tick_formatter, "SimpleTimeTickFormatter.formatter");
  simple_time_tick_formatter.SimpleTimeTickFormatter = class SimpleTimeTickFormatter extends core.Object {
    get formatter() {
      return this[formatter$1];
    }
    set formatter(value) {
      this[formatter$1] = value;
    }
    formatFirstTick(date) {
      return this.formatter(date);
    }
    formatSimpleTick(date) {
      return this.formatter(date);
    }
    formatTransitionTick(date) {
      return this.formatter(date);
    }
    isTransition(tickValue, prevTickValue) {
      return false;
    }
  };
  (simple_time_tick_formatter.SimpleTimeTickFormatter.new = function(opts) {
    let formatter = opts && 'formatter' in opts ? opts.formatter : null;
    this[formatter$1] = formatter;
    ;
  }).prototype = simple_time_tick_formatter.SimpleTimeTickFormatter.prototype;
  dart.addTypeTests(simple_time_tick_formatter.SimpleTimeTickFormatter);
  simple_time_tick_formatter.SimpleTimeTickFormatter[dart.implements] = () => [time_tick_formatter.TimeTickFormatter];
  dart.setMethodSignature(simple_time_tick_formatter.SimpleTimeTickFormatter, () => ({
    __proto__: dart.getMethods(simple_time_tick_formatter.SimpleTimeTickFormatter.__proto__),
    formatFirstTick: dart.fnType(core.String, [core.DateTime]),
    formatSimpleTick: dart.fnType(core.String, [core.DateTime]),
    formatTransitionTick: dart.fnType(core.String, [core.DateTime]),
    isTransition: dart.fnType(core.bool, [core.DateTime, core.DateTime])
  }));
  dart.setLibraryUri(simple_time_tick_formatter.SimpleTimeTickFormatter, "package:charts_common/src/chart/cartesian/axis/time/simple_time_tick_formatter.dart");
  dart.setFieldSignature(simple_time_tick_formatter.SimpleTimeTickFormatter, () => ({
    __proto__: dart.getFields(simple_time_tick_formatter.SimpleTimeTickFormatter.__proto__),
    formatter: dart.fieldType(dart.fnType(core.String, [core.DateTime]))
  }));
  const _is_SeriesRenderer_default = Symbol('_is_SeriesRenderer_default');
  series_renderer.SeriesRenderer$ = dart.generic(D => {
    class SeriesRenderer extends layout_view.LayoutView {}
    (SeriesRenderer.new = function() {
      ;
    }).prototype = SeriesRenderer.prototype;
    dart.addTypeTests(SeriesRenderer);
    SeriesRenderer.prototype[_is_SeriesRenderer_default] = true;
    dart.setLibraryUri(SeriesRenderer, "package:charts_common/src/chart/common/series_renderer.dart");
    return SeriesRenderer;
  });
  series_renderer.SeriesRenderer = series_renderer.SeriesRenderer$();
  dart.defineLazy(series_renderer.SeriesRenderer, {
    /*series_renderer.SeriesRenderer.defaultRendererId*/get defaultRendererId() {
      return "default";
    }
  });
  dart.addTypeTests(series_renderer.SeriesRenderer, _is_SeriesRenderer_default);
  const _is_CartesianRenderer_default = Symbol('_is_CartesianRenderer_default');
  cartesian_renderer.CartesianRenderer$ = dart.generic(D => {
    class CartesianRenderer extends series_renderer.SeriesRenderer$(D) {}
    (CartesianRenderer.new = function() {
      ;
    }).prototype = CartesianRenderer.prototype;
    dart.addTypeTests(CartesianRenderer);
    CartesianRenderer.prototype[_is_CartesianRenderer_default] = true;
    dart.setLibraryUri(CartesianRenderer, "package:charts_common/src/chart/cartesian/cartesian_renderer.dart");
    return CartesianRenderer;
  });
  cartesian_renderer.CartesianRenderer = cartesian_renderer.CartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.CartesianRenderer, _is_CartesianRenderer_default);
  const _renderingVertically = dart.privateName(cartesian_renderer, "_renderingVertically");
  const _drawAreaBounds$ = dart.privateName(series_renderer, "_drawAreaBounds");
  const _graphicsFactory$ = dart.privateName(series_renderer, "_graphicsFactory");
  const _is_BaseSeriesRenderer_default = Symbol('_is_BaseSeriesRenderer_default');
  const layoutConfig = dart.privateName(series_renderer, "BaseSeriesRenderer.layoutConfig");
  const rendererId$ = dart.privateName(series_renderer, "BaseSeriesRenderer.rendererId");
  const symbolRenderer$0 = dart.privateName(series_renderer, "BaseSeriesRenderer.symbolRenderer");
  series_renderer.BaseSeriesRenderer$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    class BaseSeriesRenderer extends core.Object {
      get layoutConfig() {
        return this[layoutConfig];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get rendererId() {
        return this[rendererId$];
      }
      set rendererId(value) {
        this[rendererId$] = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$0];
      }
      set symbolRenderer(value) {
        this[symbolRenderer$0] = value;
      }
      get drawBounds() {
        return this[_drawAreaBounds$];
      }
      get graphicsFactory() {
        return this[_graphicsFactory$];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$] = value;
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
      }
      onDetach(chart) {
        BaseChartOfD()._check(chart);
      }
      assignMissingColors(seriesList, opts) {
        IterableOfMutableSeriesOfD()._check(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        let missingColorCountPerCategory = new (IdentityMapOfString$int()).new();
        let maxMissing = 0;
        let hasSpecifiedCategory = false;
        seriesList[$forEach](dart.fn(series => {
          let t1;
          if (series.colorFn == null && series.seriesColor != null) {
            series.colorFn = dart.fn(_ => series.seriesColor, intToColor());
          }
          if (series.colorFn == null) {
            let category = series.seriesCategory;
            if (category == null) {
              category = "__default__";
            } else {
              hasSpecifiedCategory = true;
            }
            let missingCnt = dart.notNull((t1 = missingColorCountPerCategory[$_get](category), t1 == null ? 0 : t1)) + 1;
            missingColorCountPerCategory[$_set](category, missingCnt);
            maxMissing = math.max(core.int, maxMissing, missingCnt);
          }
        }, MutableSeriesOfDToNull()));
        if (maxMissing > 0) {
          if (!dart.test(emptyCategoryUsesSinglePalette) && !hasSpecifiedCategory) {
            let palettes = style_factory.StyleFactory.style.getOrderedPalettes(maxMissing);
            let index = 0;
            seriesList[$forEach](dart.fn(series => {
              let t1;
              if (series.colorFn == null) {
                let color = palettes[$_get](index[$modulo](palettes[$length])).shadeDefault;
                index = index + 1;
                series.colorFn = dart.fn(_ => color, intToColor());
                t1 = series;
                t1.seriesColor == null ? t1.seriesColor = color : null;
              } else {
                if (series.seriesColor == null) {
                  try {
                    series.seriesColor = series.colorFn(0);
                  } catch (e) {
                    let exception = dart.getThrown(e);
                    series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
                  }
                }
              }
            }, MutableSeriesToNull()));
            return;
          }
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(missingColorCountPerCategory[$length]);
          let colorsByCategory = new (IdentityMapOfString$ListOfColor()).new();
          let index = 0;
          missingColorCountPerCategory[$keys][$forEach](dart.fn(category => {
            colorsByCategory[$_set](category, colorPalettes[$_get](index[$modulo](colorPalettes[$length])).makeShades(maxMissing));
            index = index + 1;
            missingColorCountPerCategory[$_set](category, 0);
          }, StringToNull()));
          seriesList[$forEach](dart.fn(series => {
            let t2, t2$;
            if (series.colorFn == null) {
              let category = (t2 = series.seriesCategory, t2 == null ? "__default__" : t2);
              let colorIndex = missingColorCountPerCategory[$_get](category);
              missingColorCountPerCategory[$_set](category, dart.notNull(colorIndex) + 1);
              let color = colorsByCategory[$_get](category)[$_get](colorIndex);
              series.colorFn = dart.fn(_ => color, intToColor());
            }
            t2$ = series;
            t2$.fillColorFn == null ? t2$.fillColorFn = dart.fn(index => series.colorFn(index), intToColor()) : null;
          }, MutableSeriesToNull()));
        } else {
          seriesList[$forEach](dart.fn(series => {
            let t2;
            t2 = series;
            t2.fillColorFn == null ? t2.fillColorFn = dart.fn(index => series.colorFn(index), intToColor()) : null;
          }, MutableSeriesToNull()));
        }
        seriesList[$forEach](dart.fn(series => {
          if (series.seriesColor == null) {
            try {
              series.seriesColor = series.colorFn(0);
            } catch (e) {
              let exception = dart.getThrown(e);
              series.seriesColor = style_factory.StyleFactory.style.defaultSeriesColor;
            }
          }
        }, MutableSeriesToNull()));
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds$] = drawAreaBounds;
      }
      get componentBounds() {
        return this[_drawAreaBounds$];
      }
      get isSeriesRenderer() {
        return true;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      getDetailsForSeriesDatum(seriesDatum) {
        let t3, t3$, t3$0, t3$1;
        SeriesDatumOfD()._check(seriesDatum);
        let series = seriesDatum.series;
        let index = seriesDatum.index;
        let domainFn = series.domainFn;
        let domainLowerBoundFn = series.domainLowerBoundFn;
        let domainUpperBoundFn = series.domainUpperBoundFn;
        let measureFn = series.measureFn;
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        let measureOffsetFn = series.measureOffsetFn;
        let rawMeasureFn = series.rawMeasureFn;
        let rawMeasureLowerBoundFn = series.rawMeasureLowerBoundFn;
        let rawMeasureUpperBoundFn = series.rawMeasureUpperBoundFn;
        let colorFn = series.colorFn;
        let areaColorFn = (t3 = series.areaColorFn, t3 == null ? colorFn : t3);
        let fillColorFn = (t3$ = series.fillColorFn, t3$ == null ? colorFn : t3$);
        let radiusPxFn = series.radiusPxFn;
        let strokeWidthPxFn = series.strokeWidthPxFn;
        let domainValue = domainFn(index);
        let domainLowerBoundValue = domainLowerBoundFn != null ? domainLowerBoundFn(index) : null;
        let domainUpperBoundValue = domainUpperBoundFn != null ? domainUpperBoundFn(index) : null;
        let measureValue = measureFn(index);
        let measureLowerBoundValue = measureLowerBoundFn != null ? measureLowerBoundFn(index) : null;
        let measureUpperBoundValue = measureUpperBoundFn != null ? measureUpperBoundFn(index) : null;
        let measureOffsetValue = measureOffsetFn != null ? measureOffsetFn(index) : null;
        let rawMeasureValue = rawMeasureFn(index);
        let rawMeasureLowerBoundValue = rawMeasureLowerBoundFn != null ? rawMeasureLowerBoundFn(index) : null;
        let rawMeasureUpperBoundValue = rawMeasureUpperBoundFn != null ? rawMeasureUpperBoundFn(index) : null;
        let color = colorFn(index);
        let fillColor = fillColorFn(index);
        fillColor == null ? fillColor = color : null;
        let areaColor = areaColorFn(index);
        let radiusPx = radiusPxFn != null ? radiusPxFn(index) : null;
        radiusPx = (t3$0 = radiusPx, t3$0 == null ? null : t3$0[$toDouble]());
        let strokeWidthPx = strokeWidthPxFn != null ? strokeWidthPxFn(index) : null;
        strokeWidthPx = (t3$1 = strokeWidthPx, t3$1 == null ? null : t3$1[$toDouble]());
        let details = new (DatumDetailsOfD()).new({datum: seriesDatum.datum, index: seriesDatum.index, domain: domainValue, domainLowerBound: domainLowerBoundValue, domainUpperBound: domainUpperBoundValue, measure: measureValue, measureLowerBound: measureLowerBoundValue, measureUpperBound: measureUpperBoundValue, measureOffset: measureOffsetValue, rawMeasure: rawMeasureValue, rawMeasureLowerBound: rawMeasureLowerBoundValue, rawMeasureUpperBound: rawMeasureUpperBoundValue, series: series, color: color, fillColor: fillColor, areaColor: areaColor, radiusPx: radiusPx, strokeWidthPx: strokeWidthPx});
        return this.addPositionToDetailsForSeriesDatum(details, seriesDatum);
      }
      isPointWithinBounds(chartPoint, bounds) {
        if (bounds != null) {
          if (!dart.test(bounds[$containsPoint](chartPoint))) {
            return false;
          }
        } else if (this.componentBounds == null || !dart.test(this.componentBounds[$containsPoint](chartPoint))) {
          return false;
        }
        return true;
      }
    }
    (BaseSeriesRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_drawAreaBounds$] = null;
      this[_graphicsFactory$] = null;
      this[rendererId$] = rendererId;
      this[symbolRenderer$0] = symbolRenderer;
      this[layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      ;
    }).prototype = BaseSeriesRenderer.prototype;
    dart.addTypeTests(BaseSeriesRenderer);
    BaseSeriesRenderer.prototype[_is_BaseSeriesRenderer_default] = true;
    BaseSeriesRenderer[dart.implements] = () => [series_renderer.SeriesRenderer$(D)];
    dart.setMethodSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getMethods(BaseSeriesRenderer.__proto__),
      onAttach: dart.fnType(dart.void, [core.Object]),
      onDetach: dart.fnType(dart.void, [core.Object]),
      assignMissingColors: dart.fnType(dart.dynamic, [core.Object], {emptyCategoryUsesSinglePalette: core.bool}, {}),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      configureSeries: dart.fnType(dart.void, [core.Object]),
      preprocessSeries: dart.fnType(dart.void, [core.Object]),
      configureDomainAxes: dart.fnType(dart.void, [core.Object]),
      configureMeasureAxes: dart.fnType(dart.void, [core.Object]),
      getDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object]),
      isPointWithinBounds: dart.fnType(core.bool, [math.Point$(core.double), math.Rectangle$(core.int)])
    }));
    dart.setGetterSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getGetters(BaseSeriesRenderer.__proto__),
      drawBounds: math.Rectangle$(core.int),
      graphicsFactory: graphics_factory.GraphicsFactory,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getSetters(BaseSeriesRenderer.__proto__),
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(BaseSeriesRenderer, "package:charts_common/src/chart/common/series_renderer.dart");
    dart.setFieldSignature(BaseSeriesRenderer, () => ({
      __proto__: dart.getFields(BaseSeriesRenderer.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      rendererId: dart.fieldType(core.String),
      symbolRenderer: dart.fieldType(symbol_renderer.SymbolRenderer),
      [_drawAreaBounds$]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$]: dart.fieldType(graphics_factory.GraphicsFactory)
    }));
    return BaseSeriesRenderer;
  });
  series_renderer.BaseSeriesRenderer = series_renderer.BaseSeriesRenderer$();
  dart.addTypeTests(series_renderer.BaseSeriesRenderer, _is_BaseSeriesRenderer_default);
  const _is_BaseCartesianRenderer_default = Symbol('_is_BaseCartesianRenderer_default');
  cartesian_renderer.BaseCartesianRenderer$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let intToD = () => (intToD = dart.constFn(dart.fnType(D, [core.int])))();
    class BaseCartesianRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this[_renderingVertically] = cartesian_chart.CartesianChart.as(chart).vertical;
      }
      get renderingVertically() {
        return this[_renderingVertically];
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          if (dart.test(series.data[$isEmpty])) {
            return;
          }
          let domainAxis = series.getAttr(axis$.Axis, axis$.domainAxisKey);
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          if (domainAxis == null) {
            return;
          }
          if (dart.test(this.renderingVertically)) {
            for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
              domainAxis.addDomainValue(domainFn(i));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          } else {
            for (let i = dart.notNull(series.data[$length]) - 1; i >= 0; i = i - 1) {
              domainAxis.addDomainValue(domainFn(i));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          }
        }, MutableSeriesOfDToNull()));
      }
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          if (dart.test(series.data[$isEmpty])) {
            return;
          }
          let domainAxis = series.getAttr(axis$.Axis, axis$.domainAxisKey);
          let domainFn = series.domainFn;
          if (domainAxis == null) {
            return;
          }
          let measureAxis = series.getAttr(axis$.Axis, axis$.measureAxisKey);
          if (measureAxis == null) {
            return;
          }
          let startIndex = this.findNearestViewportStart(domainAxis, domainFn, series.data);
          let endIndex = this.findNearestViewportEnd(domainAxis, domainFn, series.data);
          this.addMeasureValuesFor(series, measureAxis, startIndex, endIndex);
        }, MutableSeriesOfDToNull()));
      }
      addMeasureValuesFor(series, measureAxis, startIndex, endIndex) {
        MutableSeriesOfD()._check(series);
        let measureFn = series.measureFn;
        let measureOffsetFn = series.measureOffsetFn;
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        for (let i = startIndex; dart.notNull(i) <= dart.notNull(endIndex); i = dart.notNull(i) + 1) {
          let measure = measureFn(i);
          let measureOffset = measureOffsetFn(i);
          if (measure != null && measureOffset != null) {
            measureAxis.addDomainValue(dart.notNull(measure) + dart.notNull(measureOffset));
            if (measureLowerBoundFn != null && measureUpperBoundFn != null) {
              measureAxis.addDomainValue(dart.notNull(measureLowerBoundFn(i)) + dart.notNull(measureOffset));
              measureAxis.addDomainValue(dart.notNull(measureUpperBoundFn(i)) + dart.notNull(measureOffset));
            }
          }
        }
      }
      findNearestViewportStart(domainAxis, domainFn, data) {
        intToD()._check(domainFn);
        if (dart.test(data[$isEmpty])) {
          return null;
        }
        if (domainAxis.compareDomainValueToViewport(domainFn(0)) === 0) {
          return 0;
        }
        let start = 1;
        let end = dart.notNull(data[$length]) - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === -1 && comparisonValue === 0) {
            return searchIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex - 1;
          }
          if (comparisonValue === -1) {
            start = searchIndex + 1;
          } else {
            end = searchIndex - 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(dart.notNull(data[$length]) - 1));
        return lastComparison === 1 ? dart.notNull(data[$length]) - 1 : 0;
      }
      findNearestViewportEnd(domainAxis, domainFn, data) {
        intToD()._check(domainFn);
        if (dart.test(data[$isEmpty])) {
          return null;
        }
        let start = 1;
        let end = dart.notNull(data[$length]) - 1;
        if (domainAxis.compareDomainValueToViewport(domainFn(end)) === 0) {
          return end;
        }
        end = end - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === 0 && comparisonValue === 1) {
            return prevIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex;
          }
          if (comparisonValue === 1) {
            end = searchIndex - 1;
          } else {
            start = searchIndex + 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(dart.notNull(data[$length]) - 1));
        return lastComparison === 1 ? dart.notNull(data[$length]) - 1 : 0;
      }
    }
    (BaseCartesianRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_renderingVertically] = true;
      BaseCartesianRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: symbolRenderer});
      ;
    }).prototype = BaseCartesianRenderer.prototype;
    dart.addTypeTests(BaseCartesianRenderer);
    BaseCartesianRenderer.prototype[_is_BaseCartesianRenderer_default] = true;
    BaseCartesianRenderer[dart.implements] = () => [cartesian_renderer.CartesianRenderer$(D)];
    dart.setMethodSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getMethods(BaseCartesianRenderer.__proto__),
      addMeasureValuesFor: dart.fnType(dart.void, [core.Object, axis$.Axis, core.int, core.int]),
      findNearestViewportStart: dart.fnType(core.int, [axis$.Axis, core.Object, core.List]),
      findNearestViewportEnd: dart.fnType(core.int, [axis$.Axis, core.Object, core.List])
    }));
    dart.setGetterSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getGetters(BaseCartesianRenderer.__proto__),
      renderingVertically: core.bool
    }));
    dart.setLibraryUri(BaseCartesianRenderer, "package:charts_common/src/chart/cartesian/cartesian_renderer.dart");
    dart.setFieldSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getFields(BaseCartesianRenderer.__proto__),
      [_renderingVertically]: dart.fieldType(core.bool)
    }));
    return BaseCartesianRenderer;
  });
  cartesian_renderer.BaseCartesianRenderer = cartesian_renderer.BaseCartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.BaseCartesianRenderer, _is_BaseCartesianRenderer_default);
  const _domainAxis = dart.privateName(cartesian_chart, "_domainAxis");
  const _domainAxisSpec = dart.privateName(cartesian_chart, "_domainAxisSpec");
  const _newDomainAxisSpec = dart.privateName(cartesian_chart, "_newDomainAxisSpec");
  const _usePrimaryMeasureAxis = dart.privateName(cartesian_chart, "_usePrimaryMeasureAxis");
  const _useSecondaryMeasureAxis = dart.privateName(cartesian_chart, "_useSecondaryMeasureAxis");
  const _newDomainAxis = dart.privateName(cartesian_chart, "_newDomainAxis");
  const _primaryMeasureAxis = dart.privateName(cartesian_chart, "_primaryMeasureAxis");
  const _secondaryMeasureAxis = dart.privateName(cartesian_chart, "_secondaryMeasureAxis");
  const _disjointMeasureAxes = dart.privateName(cartesian_chart, "_disjointMeasureAxes");
  const _layoutManager = dart.privateName(base_chart, "_layoutManager");
  const _chartWidth = dart.privateName(base_chart, "_chartWidth");
  const _chartHeight = dart.privateName(base_chart, "_chartHeight");
  const Duration__duration = dart.privateName(core, "Duration._duration");
  let C132;
  const _animationsTemporarilyDisabled = dart.privateName(base_chart, "_animationsTemporarilyDisabled");
  const _originalSeriesList = dart.privateName(base_chart, "_originalSeriesList");
  const _currentSeriesList = dart.privateName(base_chart, "_currentSeriesList");
  const _usingRenderers = dart.privateName(base_chart, "_usingRenderers");
  const _rendererToSeriesList = dart.privateName(base_chart, "_rendererToSeriesList");
  const _seriesRenderers = dart.privateName(base_chart, "_seriesRenderers");
  const _behaviorRoleMap = dart.privateName(base_chart, "_behaviorRoleMap");
  const _behaviorStack = dart.privateName(base_chart, "_behaviorStack");
  const _behaviorTappableMap = dart.privateName(base_chart, "_behaviorTappableMap");
  const _gestureProxy = dart.privateName(base_chart, "_gestureProxy");
  const _selectionModels = dart.privateName(base_chart, "_selectionModels");
  const _lifecycleListeners = dart.privateName(base_chart, "_lifecycleListeners");
  const _is_BaseChart_default = Symbol('_is_BaseChart_default');
  const context$ = dart.privateName(base_chart, "BaseChart.context");
  const graphicsFactory = dart.privateName(base_chart, "BaseChart.graphicsFactory");
  const transition = dart.privateName(base_chart, "BaseChart.transition");
  const animationPercent = dart.privateName(base_chart, "BaseChart.animationPercent");
  base_chart.BaseChart$ = dart.generic(D => {
    let SeriesRendererOfD = () => (SeriesRendererOfD = dart.constFn(series_renderer.SeriesRenderer$(D)))();
    let IdentityMapOfString$SeriesRendererOfD = () => (IdentityMapOfString$SeriesRendererOfD = dart.constFn(_js_helper.IdentityMap$(core.String, SeriesRendererOfD())))();
    let ChartBehaviorOfD = () => (ChartBehaviorOfD = dart.constFn(chart_behavior.ChartBehavior$(D)))();
    let IdentityMapOfString$ChartBehaviorOfD = () => (IdentityMapOfString$ChartBehaviorOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ChartBehaviorOfD())))();
    let JSArrayOfChartBehaviorOfD = () => (JSArrayOfChartBehaviorOfD = dart.constFn(_interceptors.JSArray$(ChartBehaviorOfD())))();
    let MutableSelectionModelOfD = () => (MutableSelectionModelOfD = dart.constFn(selection_model.MutableSelectionModel$(D)))();
    let LinkedMapOfSelectionModelType$MutableSelectionModelOfD = () => (LinkedMapOfSelectionModelType$MutableSelectionModelOfD = dart.constFn(_js_helper.LinkedMap$(selection_model.SelectionModelType, MutableSelectionModelOfD())))();
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let JSArrayOfLifecycleListenerOfD = () => (JSArrayOfLifecycleListenerOfD = dart.constFn(_interceptors.JSArray$(LifecycleListenerOfD())))();
    let VoidToMutableSelectionModelOfD = () => (VoidToMutableSelectionModelOfD = dart.constFn(dart.fnType(MutableSelectionModelOfD(), [])))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let ListOfChartBehaviorOfD = () => (ListOfChartBehaviorOfD = dart.constFn(core.List$(ChartBehaviorOfD())))();
    let SeriesOfdynamic$D = () => (SeriesOfdynamic$D = dart.constFn(series$.Series$(dart.dynamic, D)))();
    let ListOfSeriesOfdynamic$D = () => (ListOfSeriesOfdynamic$D = dart.constFn(core.List$(SeriesOfdynamic$D())))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToint = () => (MutableSeriesOfDToint = dart.constFn(dart.fnType(core.int, [MutableSeriesOfD()])))();
    let MutableSeriesOfDToMutableSeriesOfD = () => (MutableSeriesOfDToMutableSeriesOfD = dart.constFn(dart.fnType(MutableSeriesOfD(), [MutableSeriesOfD()])))();
    let IdentityMapOfString$ListOfMutableSeriesOfD = () => (IdentityMapOfString$ListOfMutableSeriesOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfMutableSeriesOfD())))();
    let JSArrayOfMutableSeriesOfD = () => (JSArrayOfMutableSeriesOfD = dart.constFn(_interceptors.JSArray$(MutableSeriesOfD())))();
    let VoidToListOfMutableSeriesOfD = () => (VoidToListOfMutableSeriesOfD = dart.constFn(dart.fnType(ListOfMutableSeriesOfD(), [])))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let StringAndListOfMutableSeriesOfDToNull = () => (StringAndListOfMutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfMutableSeriesOfD()])))();
    let StringToListOfMutableSeriesOfD = () => (StringToListOfMutableSeriesOfD = dart.constFn(dart.fnType(ListOfMutableSeriesOfD(), [core.String])))();
    let MapOfString$ListOfMutableSeriesOfD = () => (MapOfString$ListOfMutableSeriesOfD = dart.constFn(core.Map$(core.String, ListOfMutableSeriesOfD())))();
    let LifecycleListenerOfDToNull = () => (LifecycleListenerOfDToNull = dart.constFn(dart.fnType(core.Null, [LifecycleListenerOfD()])))();
    class BaseChart extends core.Object {
      get context() {
        return this[context$];
      }
      set context(value) {
        this[context$] = value;
      }
      get graphicsFactory() {
        return this[graphicsFactory];
      }
      set graphicsFactory(value) {
        this[graphicsFactory] = value;
      }
      get transition() {
        return this[transition];
      }
      set transition(value) {
        this[transition] = value;
      }
      get animationPercent() {
        return this[animationPercent];
      }
      set animationPercent(value) {
        this[animationPercent] = value;
      }
      get isTappable() {
        return this[_behaviorTappableMap][$isNotEmpty];
      }
      get selectNearestByDomain() {
        return true;
      }
      init(context, graphicsFactory) {
        this.context = context;
        if (!dart.equals(this.graphicsFactory, graphicsFactory)) {
          this.graphicsFactory = graphicsFactory;
          this[_layoutManager].applyToViews(dart.fn(view => view.graphicsFactory = graphicsFactory, LayoutViewToGraphicsFactory()));
        }
        this.configurationChanged();
      }
      configurationChanged() {
      }
      get chartWidth() {
        return this[_chartWidth];
      }
      get chartHeight() {
        return this[_chartHeight];
      }
      get gestureProxy() {
        return this[_gestureProxy];
      }
      addGestureListener(listener) {
        this[_gestureProxy].add(listener);
        return listener;
      }
      removeGestureListener(listener) {
        this[_gestureProxy].remove(listener);
      }
      addLifecycleListener(listener) {
        LifecycleListenerOfD()._check(listener);
        this[_lifecycleListeners][$add](listener);
        return listener;
      }
      removeLifecycleListener(listener) {
        LifecycleListenerOfD()._check(listener);
        return this[_lifecycleListeners][$remove](listener);
      }
      getSelectionModel(type) {
        return this[_selectionModels][$putIfAbsent](type, dart.fn(() => new (MutableSelectionModelOfD()).new(), VoidToMutableSelectionModelOfD()));
      }
      set defaultRenderer(renderer) {
        SeriesRendererOfD()._check(renderer);
        renderer.rendererId = "default";
        this.addSeriesRenderer(renderer);
      }
      get defaultRenderer() {
        return this.getSeriesRenderer("default");
      }
      addSeriesRenderer(renderer) {
        let rendererId = renderer.rendererId;
        let previousRenderer = this[_seriesRenderers][$_get](rendererId);
        if (previousRenderer != null) {
          this.removeView(previousRenderer);
          previousRenderer.onDetach(this);
        }
        this.addView(renderer);
        renderer.onAttach(this);
        this[_seriesRenderers][$_set](rendererId, SeriesRendererOfD()._check(renderer));
      }
      getSeriesRenderer(rendererId) {
        let renderer = this[_seriesRenderers][$_get](rendererId);
        if (renderer == null) {
          if (rendererId === "default") {
            renderer = this.makeDefaultRenderer();
            this.defaultRenderer = renderer;
          }
        }
        return renderer;
      }
      pointWithinRenderer(chartPosition) {
        return this[_usingRenderers][$any](dart.fn(rendererId => this.getSeriesRenderer(rendererId).componentBounds[$containsPoint](chartPosition), StringTobool()));
      }
      getNearestDatumDetailPerSeries(drawAreaPoint, selectAcrossAllDrawAreaComponents) {
        let boundsOverride = dart.test(selectAcrossAllDrawAreaComponents) ? this.drawableLayoutAreaBounds : null;
        let details = JSArrayOfDatumDetailsOfD().of([]);
        this[_usingRenderers][$forEach](dart.fn(rendererId => {
          details[$addAll](this.getSeriesRenderer(rendererId).getNearestDatumDetailPerSeries(drawAreaPoint, this.selectNearestByDomain, boundsOverride));
        }, StringToNull()));
        details[$sort](dart.fn((a, b) => {
          if (dart.test(this.selectNearestByDomain)) {
            let domainDiff = a.domainDistance[$compareTo](b.domainDistance);
            if (domainDiff === 0) {
              return a.measureDistance[$compareTo](b.measureDistance);
            }
            return domainDiff;
          } else {
            return a.relativeDistance[$compareTo](b.relativeDistance);
          }
        }, DatumDetailsOfDAndDatumDetailsOfDToint()));
        return details;
      }
      getSelectedDatumDetails(selectionModelType) {
        let details = JSArrayOfDatumDetailsOfD().of([]);
        if (this[_currentSeriesList] == null) {
          return details;
        }
        let selectionModel = this.getSelectionModel(selectionModelType);
        if (selectionModel == null || !dart.test(selectionModel.hasDatumSelection)) {
          return details;
        }
        for (let seriesDatum of selectionModel.selectedDatum) {
          let rendererId = seriesDatum.series.getAttr(core.String, series_renderer.rendererIdKey);
          details[$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(seriesDatum));
        }
        return details;
      }
      getAllDatumDetails(opts) {
        let includeOverlaySeries = opts && 'includeOverlaySeries' in opts ? opts.includeOverlaySeries : false;
        let details = JSArrayOfDatumDetailsOfD().of([]);
        if (this[_currentSeriesList] == null) {
          return details;
        }
        for (let series of this[_currentSeriesList]) {
          let rendererId = series.getAttr(core.String, series_renderer.rendererIdKey);
          if (!dart.test(includeOverlaySeries) && dart.test(series.overlaySeries)) {
            continue;
          }
          for (let datum of series.data) {
            details[$add](this.getSeriesRenderer(rendererId).getDetailsForSeriesDatum(new (SeriesDatumOfD()).new(series, datum)));
          }
        }
        return details;
      }
      createBehavior(creator) {
        return creator(D);
      }
      addBehavior(behavior) {
        ChartBehaviorOfD()._check(behavior);
        let role = behavior.role;
        if (role != null && !dart.equals(this[_behaviorRoleMap][$_get](role), behavior)) {
          this.removeBehavior(this[_behaviorRoleMap][$_get](role));
          this[_behaviorRoleMap][$_set](role, behavior);
        }
        if (!dart.test(this[_behaviorStack][$contains](behavior))) {
          this[_behaviorStack][$add](behavior);
          behavior.attachTo(this);
        }
      }
      removeBehavior(behavior) {
        let t3;
        ChartBehaviorOfD()._check(behavior);
        if (behavior == null) {
          return false;
        }
        let role = (t3 = behavior, t3 == null ? null : t3.role);
        if (role != null && dart.equals(this[_behaviorRoleMap][$_get](role), behavior)) {
          this[_behaviorRoleMap][$remove](role);
        }
        this.unregisterTappable(behavior);
        let wasAttached = this[_behaviorStack][$remove](behavior);
        behavior.removeFrom(this);
        return wasAttached;
      }
      registerTappable(behavior) {
        ChartBehaviorOfD()._check(behavior);
        let role = behavior.role;
        if (role != null && dart.equals(this[_behaviorRoleMap][$_get](role), behavior) && !dart.equals(this[_behaviorTappableMap][$_get](role), behavior)) {
          this[_behaviorTappableMap][$_set](role, behavior);
        }
      }
      unregisterTappable(behavior) {
        let t3;
        ChartBehaviorOfD()._check(behavior);
        let role = (t3 = behavior, t3 == null ? null : t3.role);
        if (role != null && dart.equals(this[_behaviorTappableMap][$_get](role), behavior)) {
          this[_behaviorTappableMap][$remove](role);
        }
      }
      get behaviors() {
        return ListOfChartBehaviorOfD().unmodifiable(this[_behaviorStack]);
      }
      measure(width, height) {
        if (this[_rendererToSeriesList] != null) {
          this[_layoutManager].measure(width, height);
        }
      }
      layout(width, height) {
        if (this[_rendererToSeriesList] != null) {
          this.layoutInternal(width, height);
          this.onPostLayout(this[_rendererToSeriesList]);
        }
      }
      layoutInternal(width, height) {
        this[_chartWidth] = width;
        this[_chartHeight] = height;
        this[_layoutManager].layout(width, height);
      }
      addView(view) {
        if (dart.equals(this[_layoutManager].isAttached(view), false)) {
          view.graphicsFactory = this.graphicsFactory;
          this[_layoutManager].addView(view);
        }
      }
      removeView(view) {
        this[_layoutManager].removeView(view);
      }
      withinDrawArea(point) {
        return this[_layoutManager].withinDrawArea(point);
      }
      get drawAreaBounds() {
        return this[_layoutManager].drawAreaBounds;
      }
      get marginBottom() {
        return this[_layoutManager].marginBottom;
      }
      get marginLeft() {
        return this[_layoutManager].marginLeft;
      }
      get marginRight() {
        return this[_layoutManager].marginRight;
      }
      get marginTop() {
        return this[_layoutManager].marginTop;
      }
      get drawableLayoutAreaBounds() {
        return this[_layoutManager].drawableLayoutAreaBounds;
      }
      draw(seriesList) {
        ListOfSeriesOfdynamic$D()._check(seriesList);
        for (let selectionModel of this[_selectionModels][$values]) {
          selectionModel.clearSelection({notifyListeners: false});
        }
        let processedSeriesList = ListOfMutableSeriesOfD().from(seriesList[$map](dart.dynamic, dart.bind(this, 'makeSeries')));
        this.fireOnDraw(processedSeriesList);
        let seriesIndex = 0;
        processedSeriesList[$forEach](dart.fn(series => {
          let t3;
          return series.seriesIndex = (t3 = seriesIndex, seriesIndex = t3 + 1, t3);
        }, MutableSeriesOfDToint()));
        this[_currentSeriesList] = processedSeriesList;
        this[_originalSeriesList] = processedSeriesList;
        this.drawInternal(processedSeriesList, {skipAnimation: false, skipLayout: false});
      }
      redraw(opts) {
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : false;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : false;
        this.drawInternal(this[_originalSeriesList], {skipAnimation: skipAnimation, skipLayout: skipLayout});
        if (!dart.test(skipLayout)) {
          this.measure(this[_chartWidth], this[_chartHeight]);
          this.layout(this[_chartWidth], this[_chartHeight]);
        } else {
          this.onSkipLayout();
        }
      }
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        seriesList = seriesList[$map](MutableSeriesOfD(), dart.fn(series => new (MutableSeriesOfD()).clone(series), MutableSeriesOfDToMutableSeriesOfD()))[$toList]();
        this[_animationsTemporarilyDisabled] = skipAnimation;
        this.configureSeries(seriesList);
        this.fireOnPreprocess(seriesList);
        this[_rendererToSeriesList] = this.preprocessSeries(seriesList);
        this.fireOnPostprocess(seriesList);
        this[_currentSeriesList] = seriesList;
      }
      get currentSeriesList() {
        return this[_currentSeriesList];
      }
      makeSeries(series) {
        let t3;
        SeriesOfdynamic$D()._check(series);
        let s = new (MutableSeriesOfD()).new(series);
        let rendererId = (t3 = series.getAttribute(core.String, series_renderer.rendererIdKey), t3 == null ? "default" : t3);
        s.setAttr(core.String, series_renderer.rendererIdKey, rendererId);
        s.setAttr(series_renderer.SeriesRenderer, series_renderer.rendererKey, this.getSeriesRenderer(rendererId));
        return s;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let rendererToSeriesList = new (IdentityMapOfString$ListOfMutableSeriesOfD()).new();
        seriesList[$forEach](dart.fn(series => {
          let rendererId = series.getAttr(core.String, series_renderer.rendererIdKey);
          rendererToSeriesList[$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesOfD().of([]), VoidToListOfMutableSeriesOfD()))[$add](series);
        }, MutableSeriesOfDToNull()));
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureSeries(seriesList);
        }, StringAndListOfMutableSeriesOfDToNull()));
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let rendererToSeriesList = new (IdentityMapOfString$ListOfMutableSeriesOfD()).new();
        let unusedRenderers = this[_usingRenderers];
        this[_usingRenderers] = new (_IdentityHashSetOfString()).new();
        seriesList[$forEach](dart.fn(series => {
          let rendererId = series.getAttr(core.String, series_renderer.rendererIdKey);
          rendererToSeriesList[$putIfAbsent](rendererId, dart.fn(() => JSArrayOfMutableSeriesOfD().of([]), VoidToListOfMutableSeriesOfD()))[$add](series);
          this[_usingRenderers].add(rendererId);
          unusedRenderers.remove(rendererId);
        }, MutableSeriesOfDToNull()));
        unusedRenderers[$forEach](dart.fn(rendererId => {
          let t5, t4, t3;
          t3 = rendererToSeriesList;
          t4 = rendererId;
          t5 = JSArrayOfMutableSeriesOfD().of([]);
          t3[$_set](t4, t5);
          return t5;
        }, StringToListOfMutableSeriesOfD()));
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).preprocessSeries(seriesList);
        }, StringAndListOfMutableSeriesOfDToNull()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        this.onPostLayout(this[_rendererToSeriesList]);
      }
      onPostLayout(rendererToSeriesList) {
        MapOfString$ListOfMutableSeriesOfD()._check(rendererToSeriesList);
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).update(seriesList, this.animatingThisDraw);
        }, StringAndListOfMutableSeriesOfDToNull()));
        if (dart.test(this.animatingThisDraw)) {
          this.animationPercent = 0.0;
          this.context.requestAnimation(this.transition);
        } else {
          this.animationPercent = 1.0;
          this.context.requestPaint();
        }
        this[_animationsTemporarilyDisabled] = false;
      }
      paint(canvas) {
        canvas.drawingView = "BaseView";
        this[_layoutManager].paintOrderedViews[$forEach](dart.fn(view => {
          canvas.drawingView = dart.toString(dart.runtimeType(view));
          view.paint(canvas, dart.test(this.animatingThisDraw) ? this.animationPercent : 1.0);
        }, LayoutViewToNull()));
        canvas.drawingView = "PostRender";
        this.fireOnPostrender(canvas);
        canvas.drawingView = null;
        if (this.animationPercent === 1.0) {
          this.fireOnAnimationComplete();
        }
      }
      get animatingThisDraw() {
        return this.transition != null && dart.notNull(this.transition.inMilliseconds) > 0 && !dart.test(this[_animationsTemporarilyDisabled]);
      }
      fireOnDraw(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onData != null) {
            listener.onData(seriesList);
          }
        }, LifecycleListenerOfDToNull()));
      }
      fireOnPreprocess(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onPreprocess != null) {
            listener.onPreprocess(seriesList);
          }
        }, LifecycleListenerOfDToNull()));
      }
      fireOnPostprocess(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onPostprocess != null) {
            listener.onPostprocess(seriesList);
          }
        }, LifecycleListenerOfDToNull()));
      }
      fireOnAxisConfigured() {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onAxisConfigured != null) {
            listener.onAxisConfigured();
          }
        }, LifecycleListenerOfDToNull()));
      }
      fireOnPostrender(canvas) {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onPostrender != null) {
            listener.onPostrender(canvas);
          }
        }, LifecycleListenerOfDToNull()));
      }
      fireOnAnimationComplete() {
        this[_lifecycleListeners][$forEach](dart.fn(listener => {
          if (listener.onAnimationComplete != null) {
            listener.onAnimationComplete();
          }
        }, LifecycleListenerOfDToNull()));
      }
      destroy() {
        for (let i = 0; i < dart.notNull(this[_behaviorStack][$length]); i = i + 1) {
          this[_behaviorStack][$_get](i).removeFrom(this);
        }
        this[_behaviorStack][$clear]();
        this[_behaviorRoleMap][$clear]();
        this[_selectionModels][$values][$forEach](dart.fn(selectionModel => selectionModel.clearAllListeners(), MutableSelectionModelTovoid()));
      }
    }
    (BaseChart.new = function(opts) {
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      this[context$] = null;
      this[graphicsFactory] = null;
      this[_layoutManager] = null;
      this[_chartWidth] = null;
      this[_chartHeight] = null;
      this[transition] = C132 || CT.C132;
      this[animationPercent] = null;
      this[_animationsTemporarilyDisabled] = false;
      this[_originalSeriesList] = null;
      this[_currentSeriesList] = null;
      this[_usingRenderers] = new (_IdentityHashSetOfString()).new();
      this[_rendererToSeriesList] = null;
      this[_seriesRenderers] = new (IdentityMapOfString$SeriesRendererOfD()).new();
      this[_behaviorRoleMap] = new (IdentityMapOfString$ChartBehaviorOfD()).new();
      this[_behaviorStack] = JSArrayOfChartBehaviorOfD().of([]);
      this[_behaviorTappableMap] = new (IdentityMapOfString$ChartBehaviorOfD()).new();
      this[_gestureProxy] = new proxy_gesture_listener.ProxyGestureListener.new();
      this[_selectionModels] = new (LinkedMapOfSelectionModelType$MutableSelectionModelOfD()).new();
      this[_lifecycleListeners] = JSArrayOfLifecycleListenerOfD().of([]);
      this[_layoutManager] = new layout_manager_impl.LayoutManagerImpl.new({config: layoutConfig});
    }).prototype = BaseChart.prototype;
    dart.addTypeTests(BaseChart);
    BaseChart.prototype[_is_BaseChart_default] = true;
    dart.setMethodSignature(BaseChart, () => ({
      __proto__: dart.getMethods(BaseChart.__proto__),
      init: dart.fnType(dart.void, [chart_context.ChartContext, graphics_factory.GraphicsFactory]),
      configurationChanged: dart.fnType(dart.void, []),
      addGestureListener: dart.fnType(gesture_listener.GestureListener, [gesture_listener.GestureListener]),
      removeGestureListener: dart.fnType(dart.void, [gesture_listener.GestureListener]),
      addLifecycleListener: dart.fnType(base_chart.LifecycleListener, [core.Object]),
      removeLifecycleListener: dart.fnType(core.bool, [core.Object]),
      getSelectionModel: dart.fnType(selection_model.MutableSelectionModel$(D), [selection_model.SelectionModelType]),
      addSeriesRenderer: dart.fnType(dart.void, [series_renderer.SeriesRenderer]),
      getSeriesRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), [core.String]),
      pointWithinRenderer: dart.fnType(core.bool, [math.Point$(core.double)]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool]),
      getSelectedDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType]),
      getAllDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [], {includeOverlaySeries: core.bool}, {}),
      createBehavior: dart.fnType(chart_behavior.ChartBehavior$(D), [dart.gFnType(D => [chart_behavior.ChartBehavior$(D), []])]),
      addBehavior: dart.fnType(dart.void, [core.Object]),
      removeBehavior: dart.fnType(core.bool, [core.Object]),
      registerTappable: dart.fnType(dart.void, [core.Object]),
      unregisterTappable: dart.fnType(dart.void, [core.Object]),
      measure: dart.fnType(dart.void, [core.int, core.int]),
      layout: dart.fnType(dart.void, [core.int, core.int]),
      layoutInternal: dart.fnType(dart.void, [core.int, core.int]),
      addView: dart.fnType(dart.void, [layout_view.LayoutView]),
      removeView: dart.fnType(dart.void, [layout_view.LayoutView]),
      withinDrawArea: dart.fnType(core.bool, [math.Point$(core.num)]),
      draw: dart.fnType(dart.void, [core.Object]),
      redraw: dart.fnType(dart.void, [], {skipAnimation: core.bool, skipLayout: core.bool}, {}),
      drawInternal: dart.fnType(dart.void, [core.Object], {skipAnimation: core.bool, skipLayout: core.bool}, {}),
      makeSeries: dart.fnType(processed_series.MutableSeries$(D), [core.Object]),
      configureSeries: dart.fnType(dart.void, [core.Object]),
      preprocessSeries: dart.fnType(core.Map$(core.String, core.List$(processed_series.MutableSeries$(D))), [core.Object]),
      onSkipLayout: dart.fnType(dart.void, []),
      onPostLayout: dart.fnType(dart.void, [core.Object]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas]),
      fireOnDraw: dart.fnType(dart.dynamic, [core.Object]),
      fireOnPreprocess: dart.fnType(dart.dynamic, [core.Object]),
      fireOnPostprocess: dart.fnType(dart.dynamic, [core.Object]),
      fireOnAxisConfigured: dart.fnType(dart.dynamic, []),
      fireOnPostrender: dart.fnType(dart.dynamic, [chart_canvas.ChartCanvas]),
      fireOnAnimationComplete: dart.fnType(dart.dynamic, []),
      destroy: dart.fnType(dart.dynamic, [])
    }));
    dart.setGetterSignature(BaseChart, () => ({
      __proto__: dart.getGetters(BaseChart.__proto__),
      isTappable: core.bool,
      selectNearestByDomain: core.bool,
      chartWidth: core.int,
      chartHeight: core.int,
      gestureProxy: proxy_gesture_listener.ProxyGestureListener,
      defaultRenderer: series_renderer.SeriesRenderer$(D),
      behaviors: core.List$(chart_behavior.ChartBehavior$(D)),
      drawAreaBounds: math.Rectangle$(core.int),
      marginBottom: core.int,
      marginLeft: core.int,
      marginRight: core.int,
      marginTop: core.int,
      drawableLayoutAreaBounds: math.Rectangle$(core.int),
      currentSeriesList: core.List$(processed_series.MutableSeries$(D)),
      animatingThisDraw: core.bool
    }));
    dart.setSetterSignature(BaseChart, () => ({
      __proto__: dart.getSetters(BaseChart.__proto__),
      defaultRenderer: core.Object
    }));
    dart.setLibraryUri(BaseChart, "package:charts_common/src/chart/common/base_chart.dart");
    dart.setFieldSignature(BaseChart, () => ({
      __proto__: dart.getFields(BaseChart.__proto__),
      context: dart.fieldType(chart_context.ChartContext),
      graphicsFactory: dart.fieldType(graphics_factory.GraphicsFactory),
      [_layoutManager]: dart.fieldType(layout_manager.LayoutManager),
      [_chartWidth]: dart.fieldType(core.int),
      [_chartHeight]: dart.fieldType(core.int),
      transition: dart.fieldType(core.Duration),
      animationPercent: dart.fieldType(core.double),
      [_animationsTemporarilyDisabled]: dart.fieldType(core.bool),
      [_originalSeriesList]: dart.fieldType(core.List$(processed_series.MutableSeries$(D))),
      [_currentSeriesList]: dart.fieldType(core.List$(processed_series.MutableSeries$(D))),
      [_usingRenderers]: dart.fieldType(core.Set$(core.String)),
      [_rendererToSeriesList]: dart.fieldType(core.Map$(core.String, core.List$(processed_series.MutableSeries$(D)))),
      [_seriesRenderers]: dart.finalFieldType(core.Map$(core.String, series_renderer.SeriesRenderer$(D))),
      [_behaviorRoleMap]: dart.finalFieldType(core.Map$(core.String, chart_behavior.ChartBehavior$(D))),
      [_behaviorStack]: dart.finalFieldType(core.List$(chart_behavior.ChartBehavior$(D))),
      [_behaviorTappableMap]: dart.finalFieldType(core.Map$(core.String, chart_behavior.ChartBehavior$(D))),
      [_gestureProxy]: dart.finalFieldType(proxy_gesture_listener.ProxyGestureListener),
      [_selectionModels]: dart.finalFieldType(core.Map$(selection_model.SelectionModelType, selection_model.MutableSelectionModel$(D))),
      [_lifecycleListeners]: dart.finalFieldType(core.List$(base_chart.LifecycleListener$(D)))
    }));
    return BaseChart;
  });
  base_chart.BaseChart = base_chart.BaseChart$();
  dart.addTypeTests(base_chart.BaseChart, _is_BaseChart_default);
  const _is_CartesianChart_default = Symbol('_is_CartesianChart_default');
  const vertical$ = dart.privateName(cartesian_chart, "CartesianChart.vertical");
  const flipVerticalAxisOutput = dart.privateName(cartesian_chart, "CartesianChart.flipVerticalAxisOutput");
  cartesian_chart.CartesianChart$ = dart.generic(D => {
    let AxisSpecOfD = () => (AxisSpecOfD = dart.constFn(axis_spec.AxisSpec$(D)))();
    let SeriesOfdynamic$D = () => (SeriesOfdynamic$D = dart.constFn(series$.Series$(dart.dynamic, D)))();
    let BarRendererOfD = () => (BarRendererOfD = dart.constFn(bar_renderer.BarRenderer$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let StringAndListOfMutableSeriesOfDToNull = () => (StringAndListOfMutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfMutableSeriesOfD()])))();
    let MapOfString$ListOfMutableSeriesOfD = () => (MapOfString$ListOfMutableSeriesOfD = dart.constFn(core.Map$(core.String, ListOfMutableSeriesOfD())))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let DToString = () => (DToString = dart.constFn(dart.fnType(core.String, [D])))();
    let intToFn = () => (intToFn = dart.constFn(dart.fnType(DToString(), [core.int])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let SeriesDatumOfDToNull = () => (SeriesDatumOfDToNull = dart.constFn(dart.fnType(core.Null, [SeriesDatumOfD()])))();
    class CartesianChart extends base_chart.BaseChart$(D) {
      get vertical() {
        return this[vertical$];
      }
      set vertical(value) {
        this[vertical$] = value;
      }
      get flipVerticalAxisOutput() {
        return this[flipVerticalAxisOutput];
      }
      set flipVerticalAxisOutput(value) {
        this[flipVerticalAxisOutput] = value;
      }
      init(context, graphicsFactory) {
        super.init(context, graphicsFactory);
        this[_primaryMeasureAxis].context = context;
        this[_primaryMeasureAxis].tickDrawStrategy = new (GridlineRendererSpecOfnum()).new().createDrawStrategy(context, graphicsFactory);
        this[_secondaryMeasureAxis].context = context;
        this[_secondaryMeasureAxis].tickDrawStrategy = new (GridlineRendererSpecOfnum()).new().createDrawStrategy(context, graphicsFactory);
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.context = context;
          axis.tickDrawStrategy = new (NoneDrawStrategyOfnum()).new(context, graphicsFactory);
        }, StringAndNumericAxisToNull()));
      }
      get domainAxis() {
        return this[_domainAxis];
      }
      set domainAxisSpec(axisSpec) {
        if (!dart.equals(this[_domainAxisSpec], axisSpec)) {
          this[_newDomainAxis] = this.createDomainAxisFromSpec(AxisSpecOfD()._check(axisSpec));
          this[_newDomainAxisSpec] = AxisSpecOfD()._check(axisSpec);
        }
      }
      createDomainAxisFromSpec(axisSpec) {
        AxisSpecOfD()._check(axisSpec);
        return axisSpec.createAxis();
      }
      configurationChanged() {
        let t3;
        if (this[_newDomainAxis] != null) {
          if (this[_domainAxis] != null) {
            this.removeView(this[_domainAxis]);
          }
          this[_domainAxis] = this[_newDomainAxis];
          t3 = this[_domainAxis];
          t3.context = this.context;
          t3.layoutPaintOrder = 5;
          t3;
          this.initDomainAxis();
          this.addView(this[_domainAxis]);
          this[_newDomainAxis] = null;
        }
        if (this[_newDomainAxisSpec] != null) {
          this[_domainAxisSpec] = this[_newDomainAxisSpec];
          this[_newDomainAxisSpec].configure(this[_domainAxis], this.context, this.graphicsFactory);
          this[_newDomainAxisSpec] = null;
        }
      }
      getMeasureAxis(opts) {
        let axisId = opts && 'axisId' in opts ? opts.axisId : null;
        let axis = null;
        if (axisId === "secondaryMeasureAxisId") {
          axis = this[_secondaryMeasureAxis];
        } else if (axisId === "primaryMeasureAxisId") {
          axis = this[_primaryMeasureAxis];
        } else if (this[_disjointMeasureAxes][$_get](axisId) != null) {
          axis = this[_disjointMeasureAxes][$_get](axisId);
        }
        axis == null ? axis = this[_primaryMeasureAxis] : null;
        return axis;
      }
      set primaryMeasureAxisSpec(axisSpec) {
        axisSpec.configure(this[_primaryMeasureAxis], this.context, this.graphicsFactory);
      }
      set secondaryMeasureAxisSpec(axisSpec) {
        axisSpec.configure(this[_secondaryMeasureAxis], this.context, this.graphicsFactory);
      }
      set disjointMeasureAxisSpecs(axisSpecs) {
        axisSpecs[$forEach](dart.fn((axisId, axisSpec) => {
          axisSpec.configure(this[_disjointMeasureAxes][$_get](axisId), this.context, this.graphicsFactory);
        }, StringAndAxisSpecToNull()));
      }
      makeSeries(series) {
        let t3;
        SeriesOfdynamic$D()._check(series);
        let s = super.makeSeries(series);
        t3 = s;
        t3.measureOffsetFn == null ? t3.measureOffsetFn = dart.fn(_ => 0, intToint()) : null;
        s.setAttr(axis$.Axis, axis$.domainAxisKey, this.domainAxis);
        s.setAttr(axis$.Axis, axis$.measureAxisKey, this.getMeasureAxis({axisId: series.getAttribute(core.String, axis$.measureAxisIdKey)}));
        return s;
      }
      makeDefaultRenderer() {
        let t3;
        t3 = BarRendererOfD().new();
        t3.rendererId = "default";
        return t3;
      }
      preprocessSeries(seriesList) {
        let t3, t3$, t3$0, t3$1, t3$2, t3$3;
        ListOfMutableSeriesOfD()._check(seriesList);
        let rendererToSeriesList = super.preprocessSeries(seriesList);
        for (let series of seriesList) {
          let measureAxisId = series.getAttr(core.String, axis$.measureAxisIdKey);
          this[_usePrimaryMeasureAxis] = dart.test(this[_usePrimaryMeasureAxis]) || measureAxisId == null || measureAxisId === "primaryMeasureAxisId";
          this[_useSecondaryMeasureAxis] = dart.test(this[_useSecondaryMeasureAxis]) || measureAxisId === "secondaryMeasureAxisId";
        }
        if (dart.test(this[_usePrimaryMeasureAxis])) {
          this.addView(this[_primaryMeasureAxis]);
        } else {
          this.removeView(this[_primaryMeasureAxis]);
        }
        if (dart.test(this[_useSecondaryMeasureAxis])) {
          this.addView(this[_secondaryMeasureAxis]);
        } else {
          this.removeView(this[_secondaryMeasureAxis]);
        }
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          this.addView(axis);
        }, StringAndNumericAxisToNull()));
        this.domainAxis.resetDomains();
        this[_primaryMeasureAxis].resetDomains();
        this[_secondaryMeasureAxis].resetDomains();
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.resetDomains();
        }, StringAndNumericAxisToNull()));
        let reverseAxisDirection = this.context != null && dart.test(this.context.isRtl);
        if (dart.test(this.vertical)) {
          t3 = this.domainAxis;
          t3.axisOrientation = axis$.AxisOrientation.bottom;
          t3.reverseOutputRange = reverseAxisDirection;
          t3;
          t3$ = this[_primaryMeasureAxis];
          t3$.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
          t3$.reverseOutputRange = this.flipVerticalAxisOutput;
          t3$;
          t3$0 = this[_secondaryMeasureAxis];
          t3$0.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
          t3$0.reverseOutputRange = this.flipVerticalAxisOutput;
          t3$0;
          this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
            let t3;
            t3 = axis;
            t3.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
            t3.reverseOutputRange = this.flipVerticalAxisOutput;
            t3;
          }, StringAndNumericAxisToNull()));
        } else {
          t3$1 = this.domainAxis;
          t3$1.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
          t3$1.reverseOutputRange = this.flipVerticalAxisOutput;
          t3$1;
          t3$2 = this[_primaryMeasureAxis];
          t3$2.axisOrientation = axis$.AxisOrientation.bottom;
          t3$2.reverseOutputRange = reverseAxisDirection;
          t3$2;
          t3$3 = this[_secondaryMeasureAxis];
          t3$3.axisOrientation = axis$.AxisOrientation.top;
          t3$3.reverseOutputRange = reverseAxisDirection;
          t3$3;
          this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
            let t3;
            t3 = axis;
            t3.axisOrientation = axis$.AxisOrientation.top;
            t3.reverseOutputRange = reverseAxisDirection;
            t3;
          }, StringAndNumericAxisToNull()));
        }
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureDomainAxes(seriesList);
          this.getSeriesRenderer(rendererId).configureMeasureAxes(seriesList);
        }, StringAndListOfMutableSeriesOfDToNull()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        this.domainAxis.updateTicks();
        if (dart.test(this[_usePrimaryMeasureAxis])) {
          this[_primaryMeasureAxis].updateTicks();
        }
        if (dart.test(this[_useSecondaryMeasureAxis])) {
          this[_secondaryMeasureAxis].updateTicks();
        }
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.updateTicks();
        }, StringAndNumericAxisToNull()));
        super.onSkipLayout();
      }
      onPostLayout(rendererToSeriesList) {
        MapOfString$ListOfMutableSeriesOfD()._check(rendererToSeriesList);
        this.fireOnAxisConfigured();
        super.onPostLayout(rendererToSeriesList);
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsOfD().of([]);
        this.getSelectionModel(type).selectedDatum[$forEach](dart.fn(seriesDatum => {
          let series = seriesDatum.series;
          let datum = seriesDatum.datum;
          let datumIndex = seriesDatum.index;
          let domain = series.domainFn(datumIndex);
          let domainFormatterFn = intToFn()._check(series.domainFormatterFn);
          let measure = series.measureFn(datumIndex);
          let measureFormatterFn = series.measureFormatterFn;
          let measureOffset = series.measureOffsetFn(datumIndex);
          let rawMeasure = series.rawMeasureFn(datumIndex);
          let color = series.colorFn(datumIndex);
          let renderer = this.getSeriesRenderer(series.getAttr(core.String, series_renderer.rendererIdKey));
          let datumDetails = renderer.addPositionToDetailsForSeriesDatum(new (DatumDetailsOfD()).new({datum: datum, domain: domain, domainFormatter: domainFormatterFn != null ? domainFormatterFn(datumIndex) : null, index: datumIndex, measure: measure, measureFormatter: measureFormatterFn != null ? measureFormatterFn(datumIndex) : null, measureOffset: measureOffset, rawMeasure: rawMeasure, series: series, color: color}), seriesDatum);
          entries[$add](datumDetails);
        }, SeriesDatumOfDToNull()));
        return entries;
      }
    }
    (CartesianChart.new = function(opts) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4;
      let vertical = opts && 'vertical' in opts ? opts.vertical : null;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
      let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
      let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
      let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
      this[_domainAxis] = null;
      this[_domainAxisSpec] = null;
      this[_newDomainAxisSpec] = null;
      this[flipVerticalAxisOutput] = false;
      this[_usePrimaryMeasureAxis] = false;
      this[_useSecondaryMeasureAxis] = false;
      this[vertical$] = (t3 = vertical, t3 == null ? true : t3);
      this[_newDomainAxis] = domainAxis;
      this[_primaryMeasureAxis] = (t3$ = primaryMeasureAxis, t3$ == null ? new axis$.NumericAxis.new() : t3$);
      this[_secondaryMeasureAxis] = (t3$0 = secondaryMeasureAxis, t3$0 == null ? new axis$.NumericAxis.new() : t3$0);
      this[_disjointMeasureAxes] = LinkedHashMapOfString$NumericAxis()._check((t3$1 = disjointMeasureAxes, t3$1 == null ? new (IdentityMapOfString$NumericAxis()).new() : t3$1));
      CartesianChart.__proto__.new.call(this, {layoutConfig: (t3$2 = layoutConfig, t3$2 == null ? cartesian_chart.CartesianChart._defaultLayoutConfig : t3$2)});
      t3$3 = this[_primaryMeasureAxis];
      t3$3.layoutPaintOrder == null ? t3$3.layoutPaintOrder = 0 : null;
      t3$4 = this[_secondaryMeasureAxis];
      t3$4.layoutPaintOrder == null ? t3$4.layoutPaintOrder = 0 : null;
      this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
        let t3;
        t3 = axis;
        t3.layoutPaintOrder == null ? t3.layoutPaintOrder = 0 : null;
      }, StringAndNumericAxisToNull()));
    }).prototype = CartesianChart.prototype;
    dart.addTypeTests(CartesianChart);
    CartesianChart.prototype[_is_CartesianChart_default] = true;
    dart.setMethodSignature(CartesianChart, () => ({
      __proto__: dart.getMethods(CartesianChart.__proto__),
      createDomainAxisFromSpec: dart.fnType(axis$.Axis$(D), [core.Object]),
      getMeasureAxis: dart.fnType(axis$.Axis, [], {axisId: core.String}, {}),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setGetterSignature(CartesianChart, () => ({
      __proto__: dart.getGetters(CartesianChart.__proto__),
      domainAxis: axis$.Axis
    }));
    dart.setSetterSignature(CartesianChart, () => ({
      __proto__: dart.getSetters(CartesianChart.__proto__),
      domainAxisSpec: axis_spec.AxisSpec,
      primaryMeasureAxisSpec: axis_spec.AxisSpec,
      secondaryMeasureAxisSpec: axis_spec.AxisSpec,
      disjointMeasureAxisSpecs: collection.LinkedHashMap$(core.String, axis_spec.AxisSpec)
    }));
    dart.setLibraryUri(CartesianChart, "package:charts_common/src/chart/cartesian/cartesian_chart.dart");
    dart.setFieldSignature(CartesianChart, () => ({
      __proto__: dart.getFields(CartesianChart.__proto__),
      vertical: dart.fieldType(core.bool),
      [_domainAxis]: dart.fieldType(axis$.Axis$(D)),
      [_newDomainAxis]: dart.fieldType(axis$.Axis$(D)),
      [_domainAxisSpec]: dart.fieldType(axis_spec.AxisSpec$(D)),
      [_newDomainAxisSpec]: dart.fieldType(axis_spec.AxisSpec$(D)),
      [_primaryMeasureAxis]: dart.finalFieldType(axis$.Axis$(core.num)),
      [_secondaryMeasureAxis]: dart.finalFieldType(axis$.Axis$(core.num)),
      [_disjointMeasureAxes]: dart.finalFieldType(collection.LinkedHashMap$(core.String, axis$.NumericAxis)),
      flipVerticalAxisOutput: dart.fieldType(core.bool),
      [_usePrimaryMeasureAxis]: dart.fieldType(core.bool),
      [_useSecondaryMeasureAxis]: dart.fieldType(core.bool)
    }));
    return CartesianChart;
  });
  cartesian_chart.CartesianChart = cartesian_chart.CartesianChart$();
  dart.defineLazy(cartesian_chart.CartesianChart, {
    /*cartesian_chart.CartesianChart._defaultLayoutConfig*/get _defaultLayoutConfig() {
      return new layout_config.LayoutConfig.new({topSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), bottomSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), leftSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), rightSpec: layout_config.MarginSpec.fromPixel({minPixel: 20})});
    }
  });
  dart.addTypeTests(cartesian_chart.CartesianChart, _is_CartesianChart_default);
  cartesian_chart.NumericCartesianChart = class NumericCartesianChart extends cartesian_chart.CartesianChart$(core.num) {
    initDomainAxis() {
      this[_domainAxis].tickDrawStrategy = new (SmallTickRendererSpecOfnum()).new().createDrawStrategy(this.context, this.graphicsFactory);
    }
  };
  (cartesian_chart.NumericCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.NumericCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.NumericAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.NumericCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.NumericCartesianChart);
  dart.setMethodSignature(cartesian_chart.NumericCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.NumericCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.NumericCartesianChart, "package:charts_common/src/chart/cartesian/cartesian_chart.dart");
  cartesian_chart.OrdinalCartesianChart = class OrdinalCartesianChart extends cartesian_chart.CartesianChart$(core.String) {
    initDomainAxis() {
      let t3;
      t3 = this[_domainAxis];
      t3.tickDrawStrategy = new (SmallTickRendererSpecOfString()).new().createDrawStrategy(this.context, this.graphicsFactory);
      t3;
    }
  };
  (cartesian_chart.OrdinalCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.OrdinalCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.OrdinalAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.OrdinalCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.OrdinalCartesianChart);
  dart.setMethodSignature(cartesian_chart.OrdinalCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.OrdinalCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.OrdinalCartesianChart, "package:charts_common/src/chart/cartesian/cartesian_chart.dart");
  const _is_NoneRenderSpec_default = Symbol('_is_NoneRenderSpec_default');
  const axisLineStyle$0 = dart.privateName(none_draw_strategy, "NoneRenderSpec.axisLineStyle");
  none_draw_strategy.NoneRenderSpec$ = dart.generic(D => {
    let NoneDrawStrategyOfD = () => (NoneDrawStrategyOfD = dart.constFn(none_draw_strategy.NoneDrawStrategy$(D)))();
    class NoneRenderSpec extends axis_spec.RenderSpec$(D) {
      get axisLineStyle() {
        return this[axisLineStyle$0];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      createDrawStrategy(context, graphicFactory) {
        return new (NoneDrawStrategyOfD()).new(context, graphicFactory, {axisLineStyleSpec: this.axisLineStyle});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || none_draw_strategy.NoneRenderSpec.is(other);
      }
      get hashCode() {
        return 0;
      }
    }
    (NoneRenderSpec.new = function(opts) {
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[axisLineStyle$0] = axisLineStyle;
      NoneRenderSpec.__proto__.new.call(this);
      ;
    }).prototype = NoneRenderSpec.prototype;
    dart.addTypeTests(NoneRenderSpec);
    NoneRenderSpec.prototype[_is_NoneRenderSpec_default] = true;
    dart.setMethodSignature(NoneRenderSpec, () => ({
      __proto__: dart.getMethods(NoneRenderSpec.__proto__),
      createDrawStrategy: dart.fnType(tick_draw_strategy.TickDrawStrategy$(D), [chart_context.ChartContext, graphics_factory.GraphicsFactory]),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(NoneRenderSpec, "package:charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart");
    dart.setFieldSignature(NoneRenderSpec, () => ({
      __proto__: dart.getFields(NoneRenderSpec.__proto__),
      axisLineStyle: dart.finalFieldType(axis_spec.LineStyleSpec)
    }));
    dart.defineExtensionMethods(NoneRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(NoneRenderSpec, ['hashCode']);
    return NoneRenderSpec;
  });
  none_draw_strategy.NoneRenderSpec = none_draw_strategy.NoneRenderSpec$();
  dart.addTypeTests(none_draw_strategy.NoneRenderSpec, _is_NoneRenderSpec_default);
  const _is_NoneDrawStrategy_default = Symbol('_is_NoneDrawStrategy_default');
  const axisLineStyle$1 = dart.privateName(none_draw_strategy, "NoneDrawStrategy.axisLineStyle");
  const noneTextStyle = dart.privateName(none_draw_strategy, "NoneDrawStrategy.noneTextStyle");
  none_draw_strategy.NoneDrawStrategy$ = dart.generic(D => {
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    class NoneDrawStrategy extends core.Object {
      get axisLineStyle() {
        return this[axisLineStyle$1];
      }
      set axisLineStyle(value) {
        this[axisLineStyle$1] = value;
      }
      get noneTextStyle() {
        return this[noneTextStyle];
      }
      set noneTextStyle(value) {
        this[noneTextStyle] = value;
      }
      collides(ticks, orientation) {
        ListOfTick()._check(ticks);
        return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks});
      }
      decorateTicks(ticks) {
        ListOfTick()._check(ticks);
        ticks[$forEach](dart.fn(tick => tick.textElement.textStyle = this.noneTextStyle, TickToTextStyle()));
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C95 || CT.C95:
          {
            start = axisBounds[$bottomLeft];
            end = axisBounds[$bottomRight];
            break;
          }
          case C97 || CT.C97:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$topRight];
            break;
          }
          case C96 || CT.C96:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$bottomLeft];
            break;
          }
          case C98 || CT.C98:
          {
            start = axisBounds[$topRight];
            end = axisBounds[$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: JSArrayOfPointOfnum().of([start, end]), dashPattern: this.axisLineStyle.dashPattern, fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[$toDouble]()});
      }
      draw(canvas, tick, opts) {
        TickOfD()._check(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListOfTick()._check(ticks);
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListOfTick()._check(ticks);
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
    }
    (NoneDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t3;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      this[axisLineStyle$1] = null;
      this[noneTextStyle] = null;
      this.axisLineStyle = style_factory.StyleFactory.style.createAxisLineStyle(graphicsFactory, axisLineStyleSpec);
      this.noneTextStyle = (t3 = graphicsFactory.createTextPaint(), t3.color = color$.Color.transparent, t3.fontSize = 0, t3);
    }).prototype = NoneDrawStrategy.prototype;
    dart.addTypeTests(NoneDrawStrategy);
    NoneDrawStrategy.prototype[_is_NoneDrawStrategy_default] = true;
    NoneDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(D)];
    dart.setMethodSignature(NoneDrawStrategy, () => ({
      __proto__: dart.getMethods(NoneDrawStrategy.__proto__),
      collides: dart.fnType(collision_report.CollisionReport, [core.Object, axis$.AxisOrientation]),
      decorateTicks: dart.fnType(dart.void, [core.Object]),
      drawAxisLine: dart.fnType(dart.void, [chart_canvas.ChartCanvas, axis$.AxisOrientation, math.Rectangle$(core.int)]),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.Object], {axisBounds: math.Rectangle$(core.int), drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {}),
      measureHorizontallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [core.Object, core.int, core.int]),
      measureVerticallyDrawnTicks: dart.fnType(layout_view.ViewMeasuredSizes, [core.Object, core.int, core.int])
    }));
    dart.setLibraryUri(NoneDrawStrategy, "package:charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart");
    dart.setFieldSignature(NoneDrawStrategy, () => ({
      __proto__: dart.getFields(NoneDrawStrategy.__proto__),
      axisLineStyle: dart.fieldType(line_style.LineStyle),
      noneTextStyle: dart.fieldType(text_style.TextStyle)
    }));
    return NoneDrawStrategy;
  });
  none_draw_strategy.NoneDrawStrategy = none_draw_strategy.NoneDrawStrategy$();
  dart.addTypeTests(none_draw_strategy.NoneDrawStrategy, _is_NoneDrawStrategy_default);
  const _is_GridlineRendererSpec_default = Symbol('_is_GridlineRendererSpec_default');
  gridline_draw_strategy.GridlineRendererSpec$ = dart.generic(D => {
    let GridlineTickDrawStrategyOfD = () => (GridlineTickDrawStrategyOfD = dart.constFn(gridline_draw_strategy.GridlineTickDrawStrategy$(D)))();
    class GridlineRendererSpec extends small_tick_draw_strategy.SmallTickRendererSpec$(D) {
      createDrawStrategy(context, graphicsFactory) {
        return new (GridlineTickDrawStrategyOfD()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || gridline_draw_strategy.GridlineRendererSpec.is(other) && super._equals(other);
      }
      get hashCode() {
        let hashcode = super.hashCode;
        return hashcode;
      }
    }
    (GridlineRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      GridlineRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, lineStyle: lineStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, tickLengthPx: tickLengthPx, axisLineStyle: axisLineStyle});
      ;
    }).prototype = GridlineRendererSpec.prototype;
    dart.addTypeTests(GridlineRendererSpec);
    GridlineRendererSpec.prototype[_is_GridlineRendererSpec_default] = true;
    dart.setLibraryUri(GridlineRendererSpec, "package:charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart");
    dart.defineExtensionMethods(GridlineRendererSpec, ['_equals']);
    dart.defineExtensionAccessors(GridlineRendererSpec, ['hashCode']);
    return GridlineRendererSpec;
  });
  gridline_draw_strategy.GridlineRendererSpec = gridline_draw_strategy.GridlineRendererSpec$();
  dart.addTypeTests(gridline_draw_strategy.GridlineRendererSpec, _is_GridlineRendererSpec_default);
  const _is_GridlineTickDrawStrategy_default = Symbol('_is_GridlineTickDrawStrategy_default');
  const tickLength$ = dart.privateName(gridline_draw_strategy, "GridlineTickDrawStrategy.tickLength");
  const lineStyle$0 = dart.privateName(gridline_draw_strategy, "GridlineTickDrawStrategy.lineStyle");
  gridline_draw_strategy.GridlineTickDrawStrategy$ = dart.generic(D => {
    let TickOfD = () => (TickOfD = dart.constFn(tick.Tick$(D)))();
    class GridlineTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(D) {
      get tickLength() {
        return this[tickLength$];
      }
      set tickLength(value) {
        this[tickLength$] = value;
      }
      get lineStyle() {
        return this[lineStyle$0];
      }
      set lineStyle(value) {
        this[lineStyle$0] = value;
      }
      draw(canvas, tick, opts) {
        TickOfD()._check(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let lineStart = null;
        let lineEnd = null;
        switch (orientation) {
          case C95 || CT.C95:
          {
            let x = tick.locationPx;
            lineStart = new (PointOfnum()).new(x, dart.notNull(axisBounds[$bottom]) - dart.notNull(this.tickLength));
            lineEnd = new (PointOfnum()).new(x, drawAreaBounds[$bottom]);
            break;
          }
          case C97 || CT.C97:
          {
            let x = tick.locationPx;
            lineStart = new (PointOfnum()).new(x, dart.notNull(drawAreaBounds[$top]) + dart.notNull(this.tickLength));
            lineEnd = new (PointOfnum()).new(x, axisBounds[$top]);
            break;
          }
          case C96 || CT.C96:
          {
            let y = tick.locationPx;
            if (dart.equals(this.tickLabelAnchor, axis_spec.TickLabelAnchor.after) || dart.equals(this.tickLabelAnchor, axis_spec.TickLabelAnchor.before)) {
              lineStart = new (PointOfnum()).new(axisBounds[$right], y);
            } else {
              lineStart = new (PointOfnum()).new(dart.notNull(axisBounds[$left]) + dart.notNull(this.tickLength), y);
            }
            lineEnd = new (PointOfnum()).new(drawAreaBounds[$left], y);
            break;
          }
          case C98 || CT.C98:
          {
            let y = tick.locationPx;
            if (dart.equals(this.tickLabelAnchor, axis_spec.TickLabelAnchor.after) || dart.equals(this.tickLabelAnchor, axis_spec.TickLabelAnchor.before)) {
              lineStart = new (PointOfnum()).new(axisBounds[$left], y);
            } else {
              lineStart = new (PointOfnum()).new(dart.notNull(axisBounds[$right]) - dart.notNull(this.tickLength), y);
            }
            lineEnd = new (PointOfnum()).new(drawAreaBounds[$right], y);
            break;
          }
        }
        canvas.drawLine({points: JSArrayOfPointOfnum().of([lineStart, lineEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast});
      }
    }
    (GridlineTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t3, t3$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[tickLength$] = null;
      this[lineStyle$0] = null;
      GridlineTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t3 = axisLineStyleSpec, t3 == null ? lineStyleSpec : t3), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation});
      this.lineStyle = style_factory.StyleFactory.style.createGridlineStyle(graphicsFactory, lineStyleSpec);
      this.tickLength = (t3$ = tickLengthPx, t3$ == null ? 0 : t3$);
    }).prototype = GridlineTickDrawStrategy.prototype;
    dart.addTypeTests(GridlineTickDrawStrategy);
    GridlineTickDrawStrategy.prototype[_is_GridlineTickDrawStrategy_default] = true;
    dart.setMethodSignature(GridlineTickDrawStrategy, () => ({
      __proto__: dart.getMethods(GridlineTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.Object], {axisBounds: math.Rectangle$(core.int), drawAreaBounds: math.Rectangle$(core.int), isFirst: core.bool, isLast: core.bool, orientation: axis$.AxisOrientation}, {})
    }));
    dart.setLibraryUri(GridlineTickDrawStrategy, "package:charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart");
    dart.setFieldSignature(GridlineTickDrawStrategy, () => ({
      __proto__: dart.getFields(GridlineTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(core.int),
      lineStyle: dart.fieldType(line_style.LineStyle)
    }));
    return GridlineTickDrawStrategy;
  });
  gridline_draw_strategy.GridlineTickDrawStrategy = gridline_draw_strategy.GridlineTickDrawStrategy$();
  dart.addTypeTests(gridline_draw_strategy.GridlineTickDrawStrategy, _is_GridlineTickDrawStrategy_default);
  const leftSpec$ = dart.privateName(layout_config, "LayoutConfig.leftSpec");
  const rightSpec$ = dart.privateName(layout_config, "LayoutConfig.rightSpec");
  const topSpec$ = dart.privateName(layout_config, "LayoutConfig.topSpec");
  const bottomSpec$ = dart.privateName(layout_config, "LayoutConfig.bottomSpec");
  layout_config.LayoutConfig = class LayoutConfig extends core.Object {
    get leftSpec() {
      return this[leftSpec$];
    }
    set leftSpec(value) {
      super.leftSpec = value;
    }
    get rightSpec() {
      return this[rightSpec$];
    }
    set rightSpec(value) {
      super.rightSpec = value;
    }
    get topSpec() {
      return this[topSpec$];
    }
    set topSpec(value) {
      super.topSpec = value;
    }
    get bottomSpec() {
      return this[bottomSpec$];
    }
    set bottomSpec(value) {
      super.bottomSpec = value;
    }
  };
  (layout_config.LayoutConfig.new = function(opts) {
    let t3, t3$, t3$0, t3$1;
    let leftSpec = opts && 'leftSpec' in opts ? opts.leftSpec : null;
    let rightSpec = opts && 'rightSpec' in opts ? opts.rightSpec : null;
    let topSpec = opts && 'topSpec' in opts ? opts.topSpec : null;
    let bottomSpec = opts && 'bottomSpec' in opts ? opts.bottomSpec : null;
    this[leftSpec$] = (t3 = leftSpec, t3 == null ? layout_config.MarginSpec.defaultSpec : t3);
    this[rightSpec$] = (t3$ = rightSpec, t3$ == null ? layout_config.MarginSpec.defaultSpec : t3$);
    this[topSpec$] = (t3$0 = topSpec, t3$0 == null ? layout_config.MarginSpec.defaultSpec : t3$0);
    this[bottomSpec$] = (t3$1 = bottomSpec, t3$1 == null ? layout_config.MarginSpec.defaultSpec : t3$1);
    ;
  }).prototype = layout_config.LayoutConfig.prototype;
  dart.addTypeTests(layout_config.LayoutConfig);
  dart.setLibraryUri(layout_config.LayoutConfig, "package:charts_common/src/chart/layout/layout_config.dart");
  dart.setFieldSignature(layout_config.LayoutConfig, () => ({
    __proto__: dart.getFields(layout_config.LayoutConfig.__proto__),
    leftSpec: dart.finalFieldType(layout_config.MarginSpec),
    rightSpec: dart.finalFieldType(layout_config.MarginSpec),
    topSpec: dart.finalFieldType(layout_config.MarginSpec),
    bottomSpec: dart.finalFieldType(layout_config.MarginSpec)
  }));
  const _minPixel = dart.privateName(layout_config, "_minPixel");
  const _maxPixel = dart.privateName(layout_config, "_maxPixel");
  const _minPercent = dart.privateName(layout_config, "_minPercent");
  const _maxPercent = dart.privateName(layout_config, "_maxPercent");
  const _minPixel$ = dart.privateName(layout_config, "MarginSpec._minPixel");
  const _maxPixel$ = dart.privateName(layout_config, "MarginSpec._maxPixel");
  const _minPercent$ = dart.privateName(layout_config, "MarginSpec._minPercent");
  const _maxPercent$ = dart.privateName(layout_config, "MarginSpec._maxPercent");
  let C133;
  layout_config.MarginSpec = class MarginSpec extends core.Object {
    get [_minPixel]() {
      return this[_minPixel$];
    }
    set [_minPixel](value) {
      super[_minPixel] = value;
    }
    get [_maxPixel]() {
      return this[_maxPixel$];
    }
    set [_maxPixel](value) {
      super[_maxPixel] = value;
    }
    get [_minPercent]() {
      return this[_minPercent$];
    }
    set [_minPercent](value) {
      super[_minPercent] = value;
    }
    get [_maxPercent]() {
      return this[_maxPercent$];
    }
    set [_maxPercent](value) {
      super[_maxPercent] = value;
    }
    static fromPixel(opts) {
      let minPixel = opts && 'minPixel' in opts ? opts.minPixel : null;
      let maxPixel = opts && 'maxPixel' in opts ? opts.maxPixel : null;
      if (!(minPixel == null || dart.notNull(minPixel) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 59, 12, "minPixel == null || minPixel >= 0");
      if (!(maxPixel == null || dart.notNull(maxPixel) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 60, 12, "maxPixel == null || maxPixel >= 0");
      if (minPixel != null && maxPixel != null) {
        if (!(dart.notNull(minPixel) <= dart.notNull(maxPixel))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 64, 14, "minPixel <= maxPixel");
      }
      return new layout_config.MarginSpec._internal(minPixel, maxPixel, null, null);
    }
    static fixedPixel(pixels) {
      if (!(pixels == null || dart.notNull(pixels) >= 0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 75, 12, "pixels == null || pixels >= 0");
      return new layout_config.MarginSpec._internal(pixels, pixels, null, null);
    }
    static fromPercent(opts) {
      let minPercent = opts && 'minPercent' in opts ? opts.minPercent : null;
      let maxPercent = opts && 'maxPercent' in opts ? opts.maxPercent : null;
      if (!(minPercent == null || dart.notNull(minPercent) >= 0 && dart.notNull(minPercent) <= 100)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 87, 12, "minPercent == null || (minPercent >= 0 && minPercent <= 100)");
      if (!(maxPercent == null || dart.notNull(maxPercent) >= 0 && dart.notNull(maxPercent) <= 100)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 88, 12, "maxPercent == null || (maxPercent >= 0 && maxPercent <= 100)");
      if (minPercent != null && maxPercent != null) {
        if (!(dart.notNull(minPercent) <= dart.notNull(maxPercent))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 92, 14, "minPercent <= maxPercent");
      }
      return new layout_config.MarginSpec._internal(null, null, minPercent, maxPercent);
    }
    getMinPixels(totalPixels) {
      if (this[_minPixel] != null) {
        if (!(dart.notNull(this[_minPixel]) < dart.notNull(totalPixels))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 101, 14, "_minPixel < totalPixels");
        return this[_minPixel];
      } else if (this[_minPercent] != null) {
        return (dart.notNull(totalPixels) * (dart.notNull(this[_minPercent]) / 100))[$round]();
      } else {
        return 0;
      }
    }
    getMaxPixels(totalPixels) {
      if (this[_maxPixel] != null) {
        if (!(dart.notNull(this[_maxPixel]) < dart.notNull(totalPixels))) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_config.dart", 113, 14, "_maxPixel < totalPixels");
        return this[_maxPixel];
      } else if (this[_maxPercent] != null) {
        return (dart.notNull(totalPixels) * (dart.notNull(this[_maxPercent]) / 100))[$round]();
      } else {
        return totalPixels;
      }
    }
  };
  (layout_config.MarginSpec._internal = function(minPixel, maxPixel, minPercent, maxPercent) {
    this[_minPixel$] = minPixel;
    this[_maxPixel$] = maxPixel;
    this[_minPercent$] = minPercent;
    this[_maxPercent$] = maxPercent;
    ;
  }).prototype = layout_config.MarginSpec.prototype;
  dart.addTypeTests(layout_config.MarginSpec);
  dart.setMethodSignature(layout_config.MarginSpec, () => ({
    __proto__: dart.getMethods(layout_config.MarginSpec.__proto__),
    getMinPixels: dart.fnType(core.int, [core.int]),
    getMaxPixels: dart.fnType(core.int, [core.int])
  }));
  dart.setLibraryUri(layout_config.MarginSpec, "package:charts_common/src/chart/layout/layout_config.dart");
  dart.setFieldSignature(layout_config.MarginSpec, () => ({
    __proto__: dart.getFields(layout_config.MarginSpec.__proto__),
    [_minPixel]: dart.finalFieldType(core.int),
    [_maxPixel]: dart.finalFieldType(core.int),
    [_minPercent]: dart.finalFieldType(core.int),
    [_maxPercent]: dart.finalFieldType(core.int)
  }));
  dart.defineLazy(layout_config.MarginSpec, {
    /*layout_config.MarginSpec.defaultSpec*/get defaultSpec() {
      return C133 || CT.C133;
    }
  });
  let C134;
  let C135;
  dart.defineLazy(series_renderer, {
    /*series_renderer.rendererIdKey*/get rendererIdKey() {
      return C134 || CT.C134;
    },
    /*series_renderer.rendererKey*/get rendererKey() {
      return C135 || CT.C135;
    }
  });
  const _index$ = dart.privateName(series_datum, "_index");
  const _is_SeriesDatum_default = Symbol('_is_SeriesDatum_default');
  const series$1 = dart.privateName(series_datum, "SeriesDatum.series");
  const datum$0 = dart.privateName(series_datum, "SeriesDatum.datum");
  series_datum.SeriesDatum$ = dart.generic(D => {
    class SeriesDatum extends core.Object {
      get series() {
        return this[series$1];
      }
      set series(value) {
        super.series = value;
      }
      get datum() {
        return this[datum$0];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        return this[_index$];
      }
      _equals(other) {
        if (other == null) return false;
        return series_datum.SeriesDatum.is(other) && dart.equals(other.series, this.series) && dart.equals(other.datum, this.datum);
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.series)) * 31 + dart.notNull(dart.hashCode(this.datum));
      }
    }
    (SeriesDatum.new = function(series, datum) {
      this[_index$] = null;
      this[series$1] = series;
      this[datum$0] = datum;
      this[_index$] = this.datum == null ? null : this.series.data[$indexOf](this.datum);
    }).prototype = SeriesDatum.prototype;
    dart.addTypeTests(SeriesDatum);
    SeriesDatum.prototype[_is_SeriesDatum_default] = true;
    dart.setMethodSignature(SeriesDatum, () => ({
      __proto__: dart.getMethods(SeriesDatum.__proto__),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setGetterSignature(SeriesDatum, () => ({
      __proto__: dart.getGetters(SeriesDatum.__proto__),
      index: core.int
    }));
    dart.setLibraryUri(SeriesDatum, "package:charts_common/src/chart/common/series_datum.dart");
    dart.setFieldSignature(SeriesDatum, () => ({
      __proto__: dart.getFields(SeriesDatum.__proto__),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      datum: dart.finalFieldType(dart.dynamic),
      [_index$]: dart.fieldType(core.int)
    }));
    dart.defineExtensionMethods(SeriesDatum, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatum, ['hashCode']);
    return SeriesDatum;
  });
  series_datum.SeriesDatum = series_datum.SeriesDatum$();
  dart.addTypeTests(series_datum.SeriesDatum, _is_SeriesDatum_default);
  const _is_SeriesDatumConfig_default = Symbol('_is_SeriesDatumConfig_default');
  const seriesId$ = dart.privateName(series_datum, "SeriesDatumConfig.seriesId");
  const domainValue$ = dart.privateName(series_datum, "SeriesDatumConfig.domainValue");
  series_datum.SeriesDatumConfig$ = dart.generic(D => {
    class SeriesDatumConfig extends core.Object {
      get seriesId() {
        return this[seriesId$];
      }
      set seriesId(value) {
        super.seriesId = value;
      }
      get domainValue() {
        return this[domainValue$];
      }
      set domainValue(value) {
        super.domainValue = value;
      }
      _equals(other) {
        if (other == null) return false;
        return series_datum.SeriesDatumConfig.is(other) && this.seriesId == other.seriesId && dart.equals(this.domainValue, other.domainValue);
      }
      get hashCode() {
        let hashcode = dart.hashCode(this.seriesId);
        hashcode = hashcode * 37 + dart.notNull(dart.hashCode(this.domainValue));
        return hashcode;
      }
    }
    (SeriesDatumConfig.new = function(seriesId, domainValue) {
      this[seriesId$] = seriesId;
      this[domainValue$] = domainValue;
      ;
    }).prototype = SeriesDatumConfig.prototype;
    dart.addTypeTests(SeriesDatumConfig);
    SeriesDatumConfig.prototype[_is_SeriesDatumConfig_default] = true;
    dart.setMethodSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getMethods(SeriesDatumConfig.__proto__),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(SeriesDatumConfig, "package:charts_common/src/chart/common/series_datum.dart");
    dart.setFieldSignature(SeriesDatumConfig, () => ({
      __proto__: dart.getFields(SeriesDatumConfig.__proto__),
      seriesId: dart.finalFieldType(core.String),
      domainValue: dart.finalFieldType(D)
    }));
    dart.defineExtensionMethods(SeriesDatumConfig, ['_equals']);
    dart.defineExtensionAccessors(SeriesDatumConfig, ['hashCode']);
    return SeriesDatumConfig;
  });
  series_datum.SeriesDatumConfig = series_datum.SeriesDatumConfig$();
  dart.addTypeTests(series_datum.SeriesDatumConfig, _is_SeriesDatumConfig_default);
  const _is_LifecycleListener_default = Symbol('_is_LifecycleListener_default');
  const onData$ = dart.privateName(base_chart, "LifecycleListener.onData");
  const onPreprocess$ = dart.privateName(base_chart, "LifecycleListener.onPreprocess");
  const onPostprocess$ = dart.privateName(base_chart, "LifecycleListener.onPostprocess");
  const onAxisConfigured$ = dart.privateName(base_chart, "LifecycleListener.onAxisConfigured");
  const onPostrender$ = dart.privateName(base_chart, "LifecycleListener.onPostrender");
  const onAnimationComplete$ = dart.privateName(base_chart, "LifecycleListener.onAnimationComplete");
  base_chart.LifecycleListener$ = dart.generic(D => {
    class LifecycleListener extends core.Object {
      get onData() {
        return this[onData$];
      }
      set onData(value) {
        super.onData = value;
      }
      get onPreprocess() {
        return this[onPreprocess$];
      }
      set onPreprocess(value) {
        super.onPreprocess = value;
      }
      get onPostprocess() {
        return this[onPostprocess$];
      }
      set onPostprocess(value) {
        super.onPostprocess = value;
      }
      get onAxisConfigured() {
        return this[onAxisConfigured$];
      }
      set onAxisConfigured(value) {
        super.onAxisConfigured = value;
      }
      get onPostrender() {
        return this[onPostrender$];
      }
      set onPostrender(value) {
        super.onPostrender = value;
      }
      get onAnimationComplete() {
        return this[onAnimationComplete$];
      }
      set onAnimationComplete(value) {
        super.onAnimationComplete = value;
      }
    }
    (LifecycleListener.new = function(opts) {
      let onData = opts && 'onData' in opts ? opts.onData : null;
      let onPreprocess = opts && 'onPreprocess' in opts ? opts.onPreprocess : null;
      let onPostprocess = opts && 'onPostprocess' in opts ? opts.onPostprocess : null;
      let onAxisConfigured = opts && 'onAxisConfigured' in opts ? opts.onAxisConfigured : null;
      let onPostrender = opts && 'onPostrender' in opts ? opts.onPostrender : null;
      let onAnimationComplete = opts && 'onAnimationComplete' in opts ? opts.onAnimationComplete : null;
      this[onData$] = onData;
      this[onPreprocess$] = onPreprocess;
      this[onPostprocess$] = onPostprocess;
      this[onAxisConfigured$] = onAxisConfigured;
      this[onPostrender$] = onPostrender;
      this[onAnimationComplete$] = onAnimationComplete;
      ;
    }).prototype = LifecycleListener.prototype;
    dart.addTypeTests(LifecycleListener);
    LifecycleListener.prototype[_is_LifecycleListener_default] = true;
    dart.setLibraryUri(LifecycleListener, "package:charts_common/src/chart/common/base_chart.dart");
    dart.setFieldSignature(LifecycleListener, () => ({
      __proto__: dart.getFields(LifecycleListener.__proto__),
      onData: dart.finalFieldType(dart.fnType(dart.dynamic, [core.List$(processed_series.MutableSeries)])),
      onPreprocess: dart.finalFieldType(dart.fnType(dart.dynamic, [core.List$(processed_series.MutableSeries)])),
      onPostprocess: dart.finalFieldType(dart.fnType(dart.dynamic, [core.List$(processed_series.MutableSeries)])),
      onAxisConfigured: dart.finalFieldType(dart.fnType(dart.dynamic, [])),
      onPostrender: dart.finalFieldType(dart.fnType(dart.dynamic, [chart_canvas.ChartCanvas])),
      onAnimationComplete: dart.finalFieldType(dart.fnType(dart.dynamic, []))
    }));
    return LifecycleListener;
  });
  base_chart.LifecycleListener = base_chart.LifecycleListener$();
  dart.addTypeTests(base_chart.LifecycleListener, _is_LifecycleListener_default);
  const _selectedDatum = dart.privateName(selection_model, "_selectedDatum");
  const _selectedSeries = dart.privateName(selection_model, "_selectedSeries");
  const _is_SelectionModel_default = Symbol('_is_SelectionModel_default');
  selection_model.SelectionModel$ = dart.generic(D => {
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    let ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let ListOfD = () => (ListOfD = dart.constFn(core.List$(D)))();
    let IdentityMapOfString$ListOfD = () => (IdentityMapOfString$ListOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfD())))();
    let JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    let ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    class SelectionModel extends core.Object {
      get hasDatumSelection() {
        return this[_selectedDatum][$isNotEmpty];
      }
      isDatumSelected(series, index) {
        ImmutableSeriesOfD()._check(series);
        let datum = index == null ? null : series.data[$_get](index);
        return this[_selectedDatum][$contains](new (SeriesDatumOfD()).new(series, datum));
      }
      get selectedDatum() {
        return ListOfSeriesDatumOfD().unmodifiable(this[_selectedDatum]);
      }
      get hasSeriesSelection() {
        return this[_selectedSeries][$isNotEmpty];
      }
      get selectedSeries() {
        return ListOfImmutableSeriesOfD().unmodifiable(this[_selectedSeries]);
      }
      get hasAnySelection() {
        return dart.test(this[_selectedDatum][$isNotEmpty]) || dart.test(this.selectedSeries[$isNotEmpty]);
      }
      _equals(other) {
        if (other == null) return false;
        return selection_model.SelectionModel.is(other) && dart.test(new equality.ListEquality.new().equals(this[_selectedDatum], other.selectedDatum)) && dart.test(new equality.ListEquality.new().equals(this[_selectedSeries], other.selectedSeries));
      }
      get hashCode() {
        let hashcode = new equality.ListEquality.new().hash(this[_selectedDatum]);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(new equality.ListEquality.new().hash(this[_selectedSeries]));
        return hashcode;
      }
    }
    (SelectionModel.new = function(opts) {
      let selectedData = opts && 'selectedData' in opts ? opts.selectedData : null;
      let selectedSeries = opts && 'selectedSeries' in opts ? opts.selectedSeries : null;
      this[_selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      if (selectedData != null) {
        this[_selectedDatum] = selectedData;
      }
      if (selectedSeries != null) {
        this[_selectedSeries] = selectedSeries;
      }
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromOther = function(other) {
      this[_selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      this[_selectedDatum] = ListOfSeriesDatumOfD().from(other[_selectedDatum]);
      this[_selectedSeries] = ListOfImmutableSeriesOfD().from(other[_selectedSeries]);
    }).prototype = SelectionModel.prototype;
    (SelectionModel.fromConfig = function(selectedDataConfig, selectedSeriesConfig, seriesList) {
      let t4, t3;
      this[_selectedDatum] = JSArrayOfSeriesDatumOfD().of([]);
      this[_selectedSeries] = JSArrayOfImmutableSeriesOfD().of([]);
      let selectedDataMap = new (IdentityMapOfString$ListOfD()).new();
      if (selectedDataConfig != null) {
        for (let config of selectedDataConfig) {
          t3 = selectedDataMap;
          t4 = config.seriesId;
          t3[$_get](t4) == null ? t3[$_set](t4, JSArrayOfD().of([])) : null;
          selectedDataMap[$_get](config.seriesId)[$add](D._check(config.domainValue));
        }
        this[_selectedSeries][$addAll](seriesList[$where](dart.fn(series => selectedDataMap[$keys][$contains](series.id), ImmutableSeriesOfDTobool())));
        for (let series of seriesList) {
          if (dart.test(selectedDataMap[$containsKey](series.id))) {
            let domainFn = series.domainFn;
            for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
              let datum = series.data[$_get](i);
              if (dart.test(selectedDataMap[$_get](series.id)[$contains](domainFn(i)))) {
                this[_selectedDatum][$add](new (SeriesDatumOfD()).new(series, datum));
              }
            }
          }
        }
      }
      if (selectedSeriesConfig != null) {
        let remainingSeriesToAdd = selectedSeriesConfig[$where](dart.fn(seriesId => !dart.test(this.selectedSeries[$contains](seriesId)), StringTobool()))[$toList]();
        this[_selectedSeries][$addAll](seriesList[$where](dart.fn(series => remainingSeriesToAdd[$contains](series.id), ImmutableSeriesOfDTobool())));
      }
    }).prototype = SelectionModel.prototype;
    dart.addTypeTests(SelectionModel);
    SelectionModel.prototype[_is_SelectionModel_default] = true;
    dart.setMethodSignature(SelectionModel, () => ({
      __proto__: dart.getMethods(SelectionModel.__proto__),
      isDatumSelected: dart.fnType(core.bool, [core.Object, core.int]),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setGetterSignature(SelectionModel, () => ({
      __proto__: dart.getGetters(SelectionModel.__proto__),
      hasDatumSelection: core.bool,
      selectedDatum: core.List$(series_datum.SeriesDatum$(D)),
      hasSeriesSelection: core.bool,
      selectedSeries: core.List$(processed_series.ImmutableSeries$(D)),
      hasAnySelection: core.bool
    }));
    dart.setLibraryUri(SelectionModel, "package:charts_common/src/chart/common/selection_model/selection_model.dart");
    dart.setFieldSignature(SelectionModel, () => ({
      __proto__: dart.getFields(SelectionModel.__proto__),
      [_selectedDatum]: dart.fieldType(core.List$(series_datum.SeriesDatum$(D))),
      [_selectedSeries]: dart.fieldType(core.List$(processed_series.ImmutableSeries$(D)))
    }));
    dart.defineExtensionMethods(SelectionModel, ['_equals']);
    dart.defineExtensionAccessors(SelectionModel, ['hashCode']);
    return SelectionModel;
  });
  selection_model.SelectionModel = selection_model.SelectionModel$();
  dart.addTypeTests(selection_model.SelectionModel, _is_SelectionModel_default);
  const _changedListeners = dart.privateName(selection_model, "_changedListeners");
  const _updatedListeners = dart.privateName(selection_model, "_updatedListeners");
  const _is_MutableSelectionModel_default = Symbol('_is_MutableSelectionModel_default');
  const locked = dart.privateName(selection_model, "MutableSelectionModel.locked");
  selection_model.MutableSelectionModel$ = dart.generic(D => {
    let SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    let SelectionModelOfDTodynamic = () => (SelectionModelOfDTodynamic = dart.constFn(dart.fnType(dart.dynamic, [SelectionModelOfD()])))();
    let JSArrayOfSelectionModelOfDTodynamic = () => (JSArrayOfSelectionModelOfDTodynamic = dart.constFn(_interceptors.JSArray$(SelectionModelOfDTodynamic())))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    let ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let FnTodynamic = () => (FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [SelectionModelOfDTodynamic()])))();
    class MutableSelectionModel extends selection_model.SelectionModel$(D) {
      get locked() {
        return this[locked];
      }
      set locked(value) {
        this[locked] = value;
      }
      clearSelection(opts) {
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        return this.updateSelection(JSArrayOfSeriesDatumOfD().of([]), JSArrayOfImmutableSeriesOfD().of([]), {notifyListeners: notifyListeners});
      }
      updateSelection(datumSelection, seriesList, opts) {
        ListOfSeriesDatumOfD()._check(datumSelection);
        ListOfImmutableSeriesOfD()._check(seriesList);
        let notifyListeners = opts && 'notifyListeners' in opts ? opts.notifyListeners : true;
        if (dart.test(this.locked)) {
          return false;
        }
        let origSelectedDatum = this[_selectedDatum];
        let origSelectedSeries = this[_selectedSeries];
        this[_selectedDatum] = datumSelection;
        this[_selectedSeries] = seriesList;
        let copyOfSelectionModel = new (SelectionModelOfD()).fromOther(this);
        this[_updatedListeners][$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTodynamic()));
        let changed = !dart.test(new equality.ListEquality.new().equals(origSelectedDatum, this[_selectedDatum])) || !dart.test(new equality.ListEquality.new().equals(origSelectedSeries, this[_selectedSeries]));
        if (dart.test(notifyListeners) && changed) {
          this[_changedListeners][$forEach](dart.fn(listener => listener(copyOfSelectionModel), FnTodynamic()));
        }
        return changed;
      }
      addSelectionChangedListener(listener) {
        this[_changedListeners][$add](listener);
      }
      removeSelectionChangedListener(listener) {
        this[_changedListeners][$remove](listener);
      }
      addSelectionUpdatedListener(listener) {
        this[_updatedListeners][$add](listener);
      }
      removeSelectionUpdatedListener(listener) {
        this[_updatedListeners][$remove](listener);
      }
      clearAllListeners() {
        this[_changedListeners][$clear]();
        this[_updatedListeners][$clear]();
      }
    }
    (MutableSelectionModel.new = function() {
      this[_changedListeners] = JSArrayOfSelectionModelOfDTodynamic().of([]);
      this[_updatedListeners] = JSArrayOfSelectionModelOfDTodynamic().of([]);
      this[locked] = false;
      MutableSelectionModel.__proto__.new.call(this);
      ;
    }).prototype = MutableSelectionModel.prototype;
    dart.addTypeTests(MutableSelectionModel);
    MutableSelectionModel.prototype[_is_MutableSelectionModel_default] = true;
    dart.setMethodSignature(MutableSelectionModel, () => ({
      __proto__: dart.getMethods(MutableSelectionModel.__proto__),
      clearSelection: dart.fnType(core.bool, [], {notifyListeners: core.bool}, {}),
      updateSelection: dart.fnType(core.bool, [core.Object, core.Object], {notifyListeners: core.bool}, {}),
      addSelectionChangedListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)])]),
      removeSelectionChangedListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)])]),
      addSelectionUpdatedListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)])]),
      removeSelectionUpdatedListener: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)])]),
      clearAllListeners: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(MutableSelectionModel, "package:charts_common/src/chart/common/selection_model/selection_model.dart");
    dart.setFieldSignature(MutableSelectionModel, () => ({
      __proto__: dart.getFields(MutableSelectionModel.__proto__),
      [_changedListeners]: dart.finalFieldType(core.List$(dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)]))),
      [_updatedListeners]: dart.finalFieldType(core.List$(dart.fnType(dart.dynamic, [selection_model.SelectionModel$(D)]))),
      locked: dart.fieldType(core.bool)
    }));
    return MutableSelectionModel;
  });
  selection_model.MutableSelectionModel = selection_model.MutableSelectionModel$();
  dart.addTypeTests(selection_model.MutableSelectionModel, _is_MutableSelectionModel_default);
  const _name$8 = dart.privateName(selection_model, "_name");
  let C136;
  let C137;
  let C138;
  selection_model.SelectionModelType = class SelectionModelType extends core.Object {
    toString() {
      return this[_name$8];
    }
  };
  (selection_model.SelectionModelType.new = function(index, _name) {
    this.index = index;
    this[_name$8] = _name;
    ;
  }).prototype = selection_model.SelectionModelType.prototype;
  dart.addTypeTests(selection_model.SelectionModelType);
  dart.setLibraryUri(selection_model.SelectionModelType, "package:charts_common/src/chart/common/selection_model/selection_model.dart");
  dart.setFieldSignature(selection_model.SelectionModelType, () => ({
    __proto__: dart.getFields(selection_model.SelectionModelType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$8]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(selection_model.SelectionModelType, ['toString']);
  selection_model.SelectionModelType.info = C136 || CT.C136;
  selection_model.SelectionModelType.action = C137 || CT.C137;
  selection_model.SelectionModelType.values = C138 || CT.C138;
  const _is_ChartBehavior_default = Symbol('_is_ChartBehavior_default');
  chart_behavior.ChartBehavior$ = dart.generic(D => {
    class ChartBehavior extends core.Object {}
    (ChartBehavior.new = function() {
      ;
    }).prototype = ChartBehavior.prototype;
    dart.addTypeTests(ChartBehavior);
    ChartBehavior.prototype[_is_ChartBehavior_default] = true;
    dart.setLibraryUri(ChartBehavior, "package:charts_common/src/chart/common/behavior/chart_behavior.dart");
    return ChartBehavior;
  });
  chart_behavior.ChartBehavior = chart_behavior.ChartBehavior$();
  dart.addTypeTests(chart_behavior.ChartBehavior, _is_ChartBehavior_default);
  const _name$9 = dart.privateName(chart_behavior, "_name");
  let C139;
  let C140;
  let C141;
  let C142;
  let C143;
  let C144;
  chart_behavior.BehaviorPosition = class BehaviorPosition extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (chart_behavior.BehaviorPosition.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = chart_behavior.BehaviorPosition.prototype;
  dart.addTypeTests(chart_behavior.BehaviorPosition);
  dart.setLibraryUri(chart_behavior.BehaviorPosition, "package:charts_common/src/chart/common/behavior/chart_behavior.dart");
  dart.setFieldSignature(chart_behavior.BehaviorPosition, () => ({
    __proto__: dart.getFields(chart_behavior.BehaviorPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.BehaviorPosition, ['toString']);
  chart_behavior.BehaviorPosition.top = C139 || CT.C139;
  chart_behavior.BehaviorPosition.bottom = C140 || CT.C140;
  chart_behavior.BehaviorPosition.start = C141 || CT.C141;
  chart_behavior.BehaviorPosition.end = C142 || CT.C142;
  chart_behavior.BehaviorPosition.inside = C143 || CT.C143;
  chart_behavior.BehaviorPosition.values = C144 || CT.C144;
  let C145;
  let C146;
  let C147;
  let C148;
  let C149;
  let C150;
  let C151;
  chart_behavior.OutsideJustification = class OutsideJustification extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (chart_behavior.OutsideJustification.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = chart_behavior.OutsideJustification.prototype;
  dart.addTypeTests(chart_behavior.OutsideJustification);
  dart.setLibraryUri(chart_behavior.OutsideJustification, "package:charts_common/src/chart/common/behavior/chart_behavior.dart");
  dart.setFieldSignature(chart_behavior.OutsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.OutsideJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.OutsideJustification, ['toString']);
  chart_behavior.OutsideJustification.startDrawArea = C145 || CT.C145;
  chart_behavior.OutsideJustification.start = C146 || CT.C146;
  chart_behavior.OutsideJustification.middleDrawArea = C147 || CT.C147;
  chart_behavior.OutsideJustification.middle = C148 || CT.C148;
  chart_behavior.OutsideJustification.endDrawArea = C149 || CT.C149;
  chart_behavior.OutsideJustification.end = C150 || CT.C150;
  chart_behavior.OutsideJustification.values = C151 || CT.C151;
  let C152;
  let C153;
  let C154;
  chart_behavior.InsideJustification = class InsideJustification extends core.Object {
    toString() {
      return this[_name$9];
    }
  };
  (chart_behavior.InsideJustification.new = function(index, _name) {
    this.index = index;
    this[_name$9] = _name;
    ;
  }).prototype = chart_behavior.InsideJustification.prototype;
  dart.addTypeTests(chart_behavior.InsideJustification);
  dart.setLibraryUri(chart_behavior.InsideJustification, "package:charts_common/src/chart/common/behavior/chart_behavior.dart");
  dart.setFieldSignature(chart_behavior.InsideJustification, () => ({
    __proto__: dart.getFields(chart_behavior.InsideJustification.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$9]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_behavior.InsideJustification, ['toString']);
  chart_behavior.InsideJustification.topStart = C152 || CT.C152;
  chart_behavior.InsideJustification.topEnd = C153 || CT.C153;
  chart_behavior.InsideJustification.values = C154 || CT.C154;
  const _views = dart.privateName(layout_manager_impl, "_views");
  const _paintOrderedViews = dart.privateName(layout_manager_impl, "_paintOrderedViews");
  const _positionOrderedViews = dart.privateName(layout_manager_impl, "_positionOrderedViews");
  const _measurements = dart.privateName(layout_manager_impl, "_measurements");
  const _drawAreaBounds$0 = dart.privateName(layout_manager_impl, "_drawAreaBounds");
  const _drawAreaBoundsOutdated = dart.privateName(layout_manager_impl, "_drawAreaBoundsOutdated");
  const _viewsNeedPaintSort = dart.privateName(layout_manager_impl, "_viewsNeedPaintSort");
  const _viewsNeedPositionSort = dart.privateName(layout_manager_impl, "_viewsNeedPositionSort");
  const _viewsForPositions = dart.privateName(layout_manager_impl, "_viewsForPositions");
  const _measure = dart.privateName(layout_manager_impl, "_measure");
  const config$ = dart.privateName(layout_manager_impl, "LayoutManagerImpl.config");
  layout_manager_impl.LayoutManagerImpl = class LayoutManagerImpl extends core.Object {
    get config() {
      return this[config$];
    }
    set config(value) {
      this[config$] = value;
    }
    addView(view) {
      this[_views][$add](view);
      this[_drawAreaBoundsOutdated] = true;
      this[_viewsNeedPositionSort] = true;
      this[_viewsNeedPaintSort] = true;
    }
    removeView(view) {
      if (dart.test(this[_views][$remove](view))) {
        this[_drawAreaBoundsOutdated] = true;
        this[_viewsNeedPositionSort] = true;
        this[_viewsNeedPaintSort] = true;
      }
    }
    isAttached(view) {
      return this[_views][$contains](view);
    }
    get paintOrderedViews() {
      if (dart.test(this[_viewsNeedPaintSort])) {
        this[_paintOrderedViews] = ListOfLayoutView().from(this[_views]);
        this[_paintOrderedViews][$sort](dart.fn((v1, v2) => v1.layoutConfig.paintOrder[$compareTo](v2.layoutConfig.paintOrder), LayoutViewAndLayoutViewToint()));
        this[_viewsNeedPaintSort] = false;
      }
      return this[_paintOrderedViews];
    }
    get positionOrderedViews() {
      if (dart.test(this[_viewsNeedPositionSort])) {
        this[_positionOrderedViews] = ListOfLayoutView().from(this[_views]);
        this[_positionOrderedViews][$sort](dart.fn((v1, v2) => v1.layoutConfig.positionOrder[$compareTo](v2.layoutConfig.positionOrder), LayoutViewAndLayoutViewToint()));
        this[_viewsNeedPositionSort] = false;
      }
      return this[_positionOrderedViews];
    }
    get drawAreaBounds() {
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 109, 12, "_drawAreaBoundsOutdated == false");
      return this[_drawAreaBounds$0];
    }
    get drawableLayoutAreaBounds() {
      let t3, t3$;
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 115, 12, "_drawAreaBoundsOutdated == false");
      let drawableViews = this[_views][$where](dart.fn(view => view.isSeriesRenderer, LayoutViewTobool()));
      let componentBounds = (t3$ = (t3 = drawableViews, t3 == null ? null : t3[$first]), t3$ == null ? null : t3$.componentBounds);
      if (componentBounds != null) {
        for (let view of drawableViews[$skip](1)) {
          if (view.componentBounds != null) {
            componentBounds = componentBounds[$boundingBox](view.componentBounds);
          }
        }
      } else {
        componentBounds = new (RectangleOfint()).new(0, 0, 0, 0);
      }
      return componentBounds;
    }
    get marginBottom() {
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 137, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].bottomHeight;
    }
    get marginLeft() {
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 143, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].leftWidth;
    }
    get marginRight() {
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 149, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].rightWidth;
    }
    get marginTop() {
      if (!dart.equals(this[_drawAreaBoundsOutdated], false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/layout/layout_manager_impl.dart", 155, 12, "_drawAreaBoundsOutdated == false");
      return this[_measurements].topHeight;
    }
    withinDrawArea(point) {
      return this[_drawAreaBounds$0][$containsPoint](point);
    }
    measure(width, height) {
      let topViews = this[_viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[_viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[_viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[_viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let measurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, useMax: true});
      let secondMeasurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: measurements, useMax: true});
      if (measurements.leftWidth != secondMeasurements.leftWidth || measurements.rightWidth != secondMeasurements.rightWidth || measurements.topHeight != secondMeasurements.topHeight || measurements.bottomHeight != secondMeasurements.bottomHeight) {
        let thirdMeasurements = this[_measure](width, height, {topViews: topViews, rightViews: rightViews, bottomViews: bottomViews, leftViews: leftViews, previousMeasurements: secondMeasurements, useMax: false});
        measurements = thirdMeasurements;
      } else {
        measurements = secondMeasurements;
      }
      this[_measurements] = measurements;
      let drawAreaWidth = math.max(core.int, 20, dart.notNull(width) - dart.notNull(measurements.leftWidth) - dart.notNull(measurements.rightWidth));
      let drawAreaHeight = math.max(core.int, 20, dart.notNull(height) - dart.notNull(measurements.bottomHeight) - dart.notNull(measurements.topHeight));
      this[_drawAreaBounds$0] = new (RectangleOfint()).new(measurements.leftWidth, measurements.topHeight, drawAreaWidth, drawAreaHeight);
      this[_drawAreaBoundsOutdated] = false;
    }
    layout(width, height) {
      let topViews = this[_viewsForPositions](layout_view.LayoutPosition.Top, layout_view.LayoutPosition.FullTop);
      let rightViews = this[_viewsForPositions](layout_view.LayoutPosition.Right, layout_view.LayoutPosition.FullRight);
      let bottomViews = this[_viewsForPositions](layout_view.LayoutPosition.Bottom, layout_view.LayoutPosition.FullBottom);
      let leftViews = this[_viewsForPositions](layout_view.LayoutPosition.Left, layout_view.LayoutPosition.FullLeft);
      let drawAreaViews = this[_viewsForPositions](layout_view.LayoutPosition.DrawArea);
      let fullBounds = new (RectangleOfint()).new(0, 0, width, height);
      new layout_margin_strategy.LeftMarginLayoutStrategy.new().layout(leftViews, this[_measurements].leftSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.RightMarginLayoutStrategy.new().layout(rightViews, this[_measurements].rightSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.BottomMarginLayoutStrategy.new().layout(bottomViews, this[_measurements].bottomSizes, fullBounds, this.drawAreaBounds);
      new layout_margin_strategy.TopMarginLayoutStrategy.new().layout(topViews, this[_measurements].topSizes, fullBounds, this.drawAreaBounds);
      drawAreaViews[$forEach](dart.fn(view => view.layout(this[_drawAreaBounds$0], this[_drawAreaBounds$0]), LayoutViewTovoid()));
    }
    [_viewsForPositions](p1, p2) {
      if (p2 === void 0) p2 = null;
      return this.positionOrderedViews[$where](dart.fn(view => dart.equals(view.layoutConfig.position, p1) || p2 != null && dart.equals(view.layoutConfig.position, p2), LayoutViewTobool()));
    }
    [_measure](width, height, opts) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4, t3$5;
      let topViews = opts && 'topViews' in opts ? opts.topViews : null;
      let rightViews = opts && 'rightViews' in opts ? opts.rightViews : null;
      let bottomViews = opts && 'bottomViews' in opts ? opts.bottomViews : null;
      let leftViews = opts && 'leftViews' in opts ? opts.leftViews : null;
      let previousMeasurements = opts && 'previousMeasurements' in opts ? opts.previousMeasurements : null;
      let useMax = opts && 'useMax' in opts ? opts.useMax : null;
      let maxLeftWidth = this.config.leftSpec.getMaxPixels(width);
      let maxRightWidth = this.config.rightSpec.getMaxPixels(width);
      let maxBottomHeight = this.config.bottomSpec.getMaxPixels(height);
      let maxTopHeight = this.config.topSpec.getMaxPixels(height);
      let leftWidth = (t3$ = (t3 = previousMeasurements, t3 == null ? null : t3.leftWidth), t3$ == null ? maxLeftWidth : t3$);
      let rightWidth = (t3$1 = (t3$0 = previousMeasurements, t3$0 == null ? null : t3$0.rightWidth), t3$1 == null ? maxRightWidth : t3$1);
      let bottomHeight = (t3$3 = (t3$2 = previousMeasurements, t3$2 == null ? null : t3$2.bottomHeight), t3$3 == null ? maxBottomHeight : t3$3);
      let topHeight = (t3$5 = (t3$4 = previousMeasurements, t3$4 == null ? null : t3$4.topHeight), t3$5 == null ? maxTopHeight : t3$5);
      let adjustedHeight = previousMeasurements != null ? dart.notNull(height) - dart.notNull(bottomHeight) - dart.notNull(topHeight) : height;
      let leftSizes = new layout_margin_strategy.LeftMarginLayoutStrategy.new().measure(leftViews, {maxWidth: dart.test(useMax) ? maxLeftWidth : leftWidth, height: adjustedHeight, fullHeight: height});
      leftWidth = math.max(core.int, leftSizes.total, this.config.leftSpec.getMinPixels(width));
      let rightSizes = new layout_margin_strategy.RightMarginLayoutStrategy.new().measure(rightViews, {maxWidth: dart.test(useMax) ? maxRightWidth : rightWidth, height: adjustedHeight, fullHeight: height});
      rightWidth = math.max(core.int, rightSizes.total, this.config.rightSpec.getMinPixels(width));
      let adjustedWidth = dart.notNull(width) - dart.notNull(leftWidth) - dart.notNull(rightWidth);
      let bottomSizes = new layout_margin_strategy.BottomMarginLayoutStrategy.new().measure(bottomViews, {maxHeight: dart.test(useMax) ? maxBottomHeight : bottomHeight, width: adjustedWidth, fullWidth: width});
      bottomHeight = math.max(core.int, bottomSizes.total, this.config.bottomSpec.getMinPixels(height));
      let topSizes = new layout_margin_strategy.TopMarginLayoutStrategy.new().measure(topViews, {maxHeight: dart.test(useMax) ? maxTopHeight : topHeight, width: adjustedWidth, fullWidth: width});
      topHeight = math.max(core.int, topSizes.total, this.config.topSpec.getMinPixels(height));
      return new layout_manager_impl._MeasuredSizes.new({leftWidth: leftWidth, leftSizes: leftSizes, rightWidth: rightWidth, rightSizes: rightSizes, topHeight: topHeight, topSizes: topSizes, bottomHeight: bottomHeight, bottomSizes: bottomSizes});
    }
    applyToViews(apply) {
      this[_views][$forEach](dart.fn(view => apply(view), LayoutViewTovoid()));
    }
  };
  (layout_manager_impl.LayoutManagerImpl.new = function(opts) {
    let t3;
    let config = opts && 'config' in opts ? opts.config : null;
    this[_views] = JSArrayOfLayoutView().of([]);
    this[_paintOrderedViews] = null;
    this[_positionOrderedViews] = null;
    this[_measurements] = null;
    this[_drawAreaBounds$0] = null;
    this[_drawAreaBoundsOutdated] = true;
    this[_viewsNeedPaintSort] = true;
    this[_viewsNeedPositionSort] = true;
    this[config$] = (t3 = config, t3 == null ? new layout_config.LayoutConfig.new() : t3);
    ;
  }).prototype = layout_manager_impl.LayoutManagerImpl.prototype;
  dart.addTypeTests(layout_manager_impl.LayoutManagerImpl);
  layout_manager_impl.LayoutManagerImpl[dart.implements] = () => [layout_manager.LayoutManager];
  dart.setMethodSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getMethods(layout_manager_impl.LayoutManagerImpl.__proto__),
    addView: dart.fnType(dart.void, [layout_view.LayoutView]),
    removeView: dart.fnType(dart.void, [layout_view.LayoutView]),
    isAttached: dart.fnType(core.bool, [layout_view.LayoutView]),
    withinDrawArea: dart.fnType(core.bool, [math.Point$(core.num)]),
    measure: dart.fnType(dart.void, [core.int, core.int]),
    layout: dart.fnType(dart.void, [core.int, core.int]),
    [_viewsForPositions]: dart.fnType(core.Iterable$(layout_view.LayoutView), [layout_view.LayoutPosition], [layout_view.LayoutPosition]),
    [_measure]: dart.fnType(layout_manager_impl._MeasuredSizes, [core.int, core.int], {bottomViews: core.Iterable$(layout_view.LayoutView), leftViews: core.Iterable$(layout_view.LayoutView), previousMeasurements: layout_manager_impl._MeasuredSizes, rightViews: core.Iterable$(layout_view.LayoutView), topViews: core.Iterable$(layout_view.LayoutView), useMax: core.bool}, {}),
    applyToViews: dart.fnType(dart.void, [dart.fnType(dart.void, [layout_view.LayoutView])])
  }));
  dart.setGetterSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getGetters(layout_manager_impl.LayoutManagerImpl.__proto__),
    paintOrderedViews: core.List$(layout_view.LayoutView),
    positionOrderedViews: core.List$(layout_view.LayoutView),
    drawAreaBounds: math.Rectangle$(core.int),
    drawableLayoutAreaBounds: math.Rectangle$(core.int),
    marginBottom: core.int,
    marginLeft: core.int,
    marginRight: core.int,
    marginTop: core.int
  }));
  dart.setLibraryUri(layout_manager_impl.LayoutManagerImpl, "package:charts_common/src/chart/layout/layout_manager_impl.dart");
  dart.setFieldSignature(layout_manager_impl.LayoutManagerImpl, () => ({
    __proto__: dart.getFields(layout_manager_impl.LayoutManagerImpl.__proto__),
    config: dart.fieldType(layout_config.LayoutConfig),
    [_views]: dart.finalFieldType(core.List$(layout_view.LayoutView)),
    [_paintOrderedViews]: dart.fieldType(core.List$(layout_view.LayoutView)),
    [_positionOrderedViews]: dart.fieldType(core.List$(layout_view.LayoutView)),
    [_measurements]: dart.fieldType(layout_manager_impl._MeasuredSizes),
    [_drawAreaBounds$0]: dart.fieldType(math.Rectangle$(core.int)),
    [_drawAreaBoundsOutdated]: dart.fieldType(core.bool),
    [_viewsNeedPaintSort]: dart.fieldType(core.bool),
    [_viewsNeedPositionSort]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(layout_manager_impl.LayoutManagerImpl, {
    /*layout_manager_impl.LayoutManagerImpl._minDrawWidth*/get _minDrawWidth() {
      return 20;
    },
    /*layout_manager_impl.LayoutManagerImpl._minDrawHeight*/get _minDrawHeight() {
      return 20;
    }
  });
  layout_manager_impl._MeasuredSizes = class _MeasuredSizes extends core.Object {};
  (layout_manager_impl._MeasuredSizes.new = function(opts) {
    let leftWidth = opts && 'leftWidth' in opts ? opts.leftWidth : null;
    let leftSizes = opts && 'leftSizes' in opts ? opts.leftSizes : null;
    let rightWidth = opts && 'rightWidth' in opts ? opts.rightWidth : null;
    let rightSizes = opts && 'rightSizes' in opts ? opts.rightSizes : null;
    let topHeight = opts && 'topHeight' in opts ? opts.topHeight : null;
    let topSizes = opts && 'topSizes' in opts ? opts.topSizes : null;
    let bottomHeight = opts && 'bottomHeight' in opts ? opts.bottomHeight : null;
    let bottomSizes = opts && 'bottomSizes' in opts ? opts.bottomSizes : null;
    this.leftWidth = leftWidth;
    this.leftSizes = leftSizes;
    this.rightWidth = rightWidth;
    this.rightSizes = rightSizes;
    this.topHeight = topHeight;
    this.topSizes = topSizes;
    this.bottomHeight = bottomHeight;
    this.bottomSizes = bottomSizes;
    ;
  }).prototype = layout_manager_impl._MeasuredSizes.prototype;
  dart.addTypeTests(layout_manager_impl._MeasuredSizes);
  dart.setLibraryUri(layout_manager_impl._MeasuredSizes, "package:charts_common/src/chart/layout/layout_manager_impl.dart");
  dart.setFieldSignature(layout_manager_impl._MeasuredSizes, () => ({
    __proto__: dart.getFields(layout_manager_impl._MeasuredSizes.__proto__),
    leftWidth: dart.finalFieldType(core.int),
    leftSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    rightWidth: dart.finalFieldType(core.int),
    rightSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    topHeight: dart.finalFieldType(core.int),
    topSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    bottomHeight: dart.finalFieldType(core.int),
    bottomSizes: dart.finalFieldType(layout_margin_strategy.SizeList)
  }));
  const _sizes = dart.privateName(layout_margin_strategy, "_sizes");
  const _total = dart.privateName(layout_margin_strategy, "_total");
  layout_margin_strategy.SizeList = class SizeList extends core.Object {
    _get(i) {
      return this[_sizes][$_get](core.int._check(i));
    }
    get total() {
      return this[_total];
    }
    get length() {
      return this[_sizes][$length];
    }
    add(size) {
      this[_sizes][$add](core.int._check(size));
      this[_total] = dart.asInt(dart.notNull(this[_total]) + dart.notNull(core.num._check(size)));
    }
    adjust(index, amount) {
      let t4, t3;
      t3 = this[_sizes];
      t4 = index;
      t3[$_set](t4, dart.notNull(t3[$_get](t4)) + dart.notNull(amount));
      this[_total] = dart.notNull(this[_total]) + dart.notNull(amount);
    }
  };
  (layout_margin_strategy.SizeList.new = function() {
    this[_sizes] = JSArrayOfint().of([]);
    this[_total] = 0;
    ;
  }).prototype = layout_margin_strategy.SizeList.prototype;
  dart.addTypeTests(layout_margin_strategy.SizeList);
  dart.setMethodSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.SizeList.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.dynamic]),
    add: dart.fnType(dart.void, [dart.dynamic]),
    adjust: dart.fnType(dart.void, [core.int, core.int])
  }));
  dart.setGetterSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getGetters(layout_margin_strategy.SizeList.__proto__),
    total: core.int,
    length: core.int
  }));
  dart.setLibraryUri(layout_margin_strategy.SizeList, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  dart.setFieldSignature(layout_margin_strategy.SizeList, () => ({
    __proto__: dart.getFields(layout_margin_strategy.SizeList.__proto__),
    [_sizes]: dart.finalFieldType(core.List$(core.int)),
    [_total]: dart.fieldType(core.int)
  }));
  layout_margin_strategy._DesiredViewSizes = class _DesiredViewSizes extends core.Object {
    add(preferred, minimum) {
      this.preferredSizes.add(preferred);
      this.minimumSizes.add(minimum);
    }
    adjustedTo(maxSize) {
      if (dart.dtest(dart.dsend(maxSize, '<', [this.preferredSizes.total]))) {
        let delta = dart.asInt(dart.notNull(this.preferredSizes.total) - dart.notNull(core.num._check(maxSize)));
        for (let i = dart.notNull(this.preferredSizes.length) - 1; i >= 0; i = i - 1) {
          let viewAvailablePx = core.int._check(dart.dsend(this.preferredSizes._get(i), '-', [this.minimumSizes._get(i)]));
          if (dart.notNull(viewAvailablePx) < delta) {
            this.preferredSizes.adjust(i, -dart.notNull(viewAvailablePx));
            delta = delta - dart.notNull(viewAvailablePx);
          } else {
            this.preferredSizes.adjust(i, -delta);
            return;
          }
        }
      }
    }
  };
  (layout_margin_strategy._DesiredViewSizes.new = function() {
    this.preferredSizes = new layout_margin_strategy.SizeList.new();
    this.minimumSizes = new layout_margin_strategy.SizeList.new();
    ;
  }).prototype = layout_margin_strategy._DesiredViewSizes.prototype;
  dart.addTypeTests(layout_margin_strategy._DesiredViewSizes);
  dart.setMethodSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getMethods(layout_margin_strategy._DesiredViewSizes.__proto__),
    add: dart.fnType(dart.void, [core.int, core.int]),
    adjustedTo: dart.fnType(dart.void, [dart.dynamic])
  }));
  dart.setLibraryUri(layout_margin_strategy._DesiredViewSizes, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  dart.setFieldSignature(layout_margin_strategy._DesiredViewSizes, () => ({
    __proto__: dart.getFields(layout_margin_strategy._DesiredViewSizes.__proto__),
    preferredSizes: dart.finalFieldType(layout_margin_strategy.SizeList),
    minimumSizes: dart.finalFieldType(layout_margin_strategy.SizeList)
  }));
  layout_margin_strategy.VerticalMarginStrategy = class VerticalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxWidth = opts && 'maxWidth' in opts ? opts.maxWidth : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let fullHeight = opts && 'fullHeight' in opts ? opts.fullHeight : null;
      let measuredWidths = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingWidth = maxWidth;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableHeight = dart.notNull(dart.test(params.isFullPosition) ? fullHeight : height) - dart.notNull(viewMargin.height);
        remainingWidth = dart.notNull(remainingWidth) - dart.notNull(viewMargin.width);
        maxWidth = dart.notNull(maxWidth) - dart.notNull(viewMargin.width);
        let size = layout_view.ViewMeasuredSizes.zero;
        if (dart.notNull(remainingWidth) > 0 || availableHeight > 0) {
          size = view.measure(remainingWidth, availableHeight);
          remainingWidth = dart.notNull(remainingWidth) - dart.notNull(size.preferredWidth);
        }
        measuredWidths.add(size.preferredWidth, size.minWidth);
      }, LayoutViewToNull()));
      measuredWidths.adjustedTo(maxWidth);
      return measuredWidths.preferredSizes;
    }
  };
  (layout_margin_strategy.VerticalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.VerticalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.VerticalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.VerticalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.VerticalMarginStrategy.__proto__),
    measure: dart.fnType(layout_margin_strategy.SizeList, [core.Iterable$(layout_view.LayoutView)], {fullHeight: core.int, height: core.int, maxWidth: core.int}, {})
  }));
  dart.setLibraryUri(layout_margin_strategy.VerticalMarginStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_margin_strategy.LeftMarginLayoutStrategy = class LeftMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsRight = drawAreaBounds[$left];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = dart.notNull(prevBoundsRight) - dart.notNull(params.viewMargin.rightPx) - dart.notNull(core.num._check(width));
        let height = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$height] : drawAreaBounds[$height]) - dart.notNull(params.viewMargin.height);
        let top = dart.notNull(params.viewMargin.topPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$top] : drawAreaBounds[$top]);
        prevBoundsRight = dart.asInt(left - dart.notNull(params.viewMargin.leftPx));
        view.layout(new (RectangleOfint()).new(dart.asInt(left), top, core.int._check(width), height), drawAreaBounds);
        i = i + 1;
      }, LayoutViewToNull()));
    }
  };
  (layout_margin_strategy.LeftMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.LeftMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.LeftMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.LeftMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.LeftMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.LeftMarginLayoutStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_margin_strategy.RightMarginLayoutStrategy = class RightMarginLayoutStrategy extends layout_margin_strategy.VerticalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsLeft = drawAreaBounds[$right];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let width = measuredSizes._get(i);
        let left = dart.notNull(prevBoundsLeft) + dart.notNull(params.viewMargin.leftPx);
        let height = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$height] : drawAreaBounds[$height]) - dart.notNull(params.viewMargin.height);
        let top = dart.notNull(params.viewMargin.topPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$top] : drawAreaBounds[$top]);
        prevBoundsLeft = dart.asInt(left + dart.notNull(core.num._check(width)) + dart.notNull(params.viewMargin.rightPx));
        view.layout(new (RectangleOfint()).new(left, top, core.int._check(width), height), drawAreaBounds);
        i = i + 1;
      }, LayoutViewToNull()));
    }
  };
  (layout_margin_strategy.RightMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.RightMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.RightMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.RightMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.RightMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.RightMarginLayoutStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_margin_strategy.HorizontalMarginStrategy = class HorizontalMarginStrategy extends core.Object {
    measure(views, opts) {
      let maxHeight = opts && 'maxHeight' in opts ? opts.maxHeight : null;
      let width = opts && 'width' in opts ? opts.width : null;
      let fullWidth = opts && 'fullWidth' in opts ? opts.fullWidth : null;
      let measuredHeights = new layout_margin_strategy._DesiredViewSizes.new();
      let remainingHeight = maxHeight;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let viewMargin = params.viewMargin;
        let availableWidth = dart.notNull(dart.test(params.isFullPosition) ? fullWidth : width) - dart.notNull(viewMargin.width);
        remainingHeight = dart.notNull(remainingHeight) - dart.notNull(viewMargin.height);
        maxHeight = dart.notNull(maxHeight) - dart.notNull(viewMargin.height);
        let size = layout_view.ViewMeasuredSizes.zero;
        if (dart.notNull(remainingHeight) > 0 || availableWidth > 0) {
          size = view.measure(availableWidth, remainingHeight);
          remainingHeight = dart.notNull(remainingHeight) - dart.notNull(size.preferredHeight);
        }
        measuredHeights.add(size.preferredHeight, size.minHeight);
      }, LayoutViewToNull()));
      measuredHeights.adjustedTo(maxHeight);
      return measuredHeights.preferredSizes;
    }
  };
  (layout_margin_strategy.HorizontalMarginStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.HorizontalMarginStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.HorizontalMarginStrategy);
  dart.setMethodSignature(layout_margin_strategy.HorizontalMarginStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.HorizontalMarginStrategy.__proto__),
    measure: dart.fnType(layout_margin_strategy.SizeList, [core.Iterable$(layout_view.LayoutView)], {fullWidth: core.int, maxHeight: core.int, width: core.int}, {})
  }));
  dart.setLibraryUri(layout_margin_strategy.HorizontalMarginStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_margin_strategy.TopMarginLayoutStrategy = class TopMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsBottom = drawAreaBounds[$top];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = dart.notNull(prevBoundsBottom) - dart.notNull(core.num._check(height)) - dart.notNull(params.viewMargin.bottomPx);
        let width = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$width] : drawAreaBounds[$width]) - dart.notNull(params.viewMargin.width);
        let left = dart.notNull(params.viewMargin.leftPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$left] : drawAreaBounds[$left]);
        prevBoundsBottom = dart.asInt(top - dart.notNull(params.viewMargin.topPx));
        view.layout(new (RectangleOfint()).new(left, dart.asInt(top), width, core.int._check(height)), drawAreaBounds);
        i = i + 1;
      }, LayoutViewToNull()));
    }
  };
  (layout_margin_strategy.TopMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.TopMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.TopMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.TopMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.TopMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.TopMarginLayoutStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_margin_strategy.BottomMarginLayoutStrategy = class BottomMarginLayoutStrategy extends layout_margin_strategy.HorizontalMarginStrategy {
    layout(views, measuredSizes, fullBounds, drawAreaBounds) {
      let prevBoundsTop = drawAreaBounds[$bottom];
      let i = 0;
      views[$forEach](dart.fn(view => {
        let params = view.layoutConfig;
        let height = measuredSizes._get(i);
        let top = dart.notNull(prevBoundsTop) + dart.notNull(params.viewMargin.topPx);
        let width = dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$width] : drawAreaBounds[$width]) - dart.notNull(params.viewMargin.width);
        let left = dart.notNull(params.viewMargin.leftPx) + dart.notNull(dart.test(params.isFullPosition) ? fullBounds[$left] : drawAreaBounds[$left]);
        prevBoundsTop = dart.asInt(top + dart.notNull(core.num._check(height)) + dart.notNull(params.viewMargin.bottomPx));
        view.layout(new (RectangleOfint()).new(left, top, width, core.int._check(height)), drawAreaBounds);
        i = i + 1;
      }, LayoutViewToNull()));
    }
  };
  (layout_margin_strategy.BottomMarginLayoutStrategy.new = function() {
    ;
  }).prototype = layout_margin_strategy.BottomMarginLayoutStrategy.prototype;
  dart.addTypeTests(layout_margin_strategy.BottomMarginLayoutStrategy);
  dart.setMethodSignature(layout_margin_strategy.BottomMarginLayoutStrategy, () => ({
    __proto__: dart.getMethods(layout_margin_strategy.BottomMarginLayoutStrategy.__proto__),
    layout: dart.fnType(dart.void, [core.Iterable$(layout_view.LayoutView), layout_margin_strategy.SizeList, math.Rectangle$(core.int), math.Rectangle$(core.int)])
  }));
  dart.setLibraryUri(layout_margin_strategy.BottomMarginLayoutStrategy, "package:charts_common/src/chart/layout/layout_margin_strategy.dart");
  layout_manager.LayoutManager = class LayoutManager extends core.Object {};
  (layout_manager.LayoutManager.new = function() {
    ;
  }).prototype = layout_manager.LayoutManager.prototype;
  dart.addTypeTests(layout_manager.LayoutManager);
  dart.setLibraryUri(layout_manager.LayoutManager, "package:charts_common/src/chart/layout/layout_manager.dart");
  const _listeners = dart.privateName(proxy_gesture_listener, "_listeners");
  const _activeListeners = dart.privateName(proxy_gesture_listener, "_activeListeners");
  const _populateActiveListeners = dart.privateName(proxy_gesture_listener, "_populateActiveListeners");
  const _cancel = dart.privateName(proxy_gesture_listener, "_cancel");
  proxy_gesture_listener.ProxyGestureListener = class ProxyGestureListener extends core.Object {
    add(listener) {
      this[_listeners][$add](listener);
      this[_activeListeners][$clear]();
    }
    remove(listener) {
      this[_listeners][$remove](listener);
      this[_activeListeners][$clear]();
    }
    onTapTest(localPosition) {
      this[_activeListeners][$clear]();
      return this[_populateActiveListeners](localPosition);
    }
    onLongPress(localPosition) {
      let claimingListener = this[_activeListeners][$firstWhere](dart.fn(listener => listener.onLongPress != null && dart.test(listener.onLongPress(localPosition)), GestureListenerTobool()), {orElse: dart.fn(() => null, VoidToNull())});
      if (claimingListener != null) {
        this[_activeListeners] = this[_cancel]({all: this[_activeListeners], keep: JSArrayOfGestureListener().of([claimingListener])});
        return true;
      }
      return false;
    }
    onTap(localPosition) {
      let claimingListener = this[_activeListeners][$firstWhere](dart.fn(listener => listener.onTap != null && dart.test(listener.onTap(localPosition)), GestureListenerTobool()), {orElse: dart.fn(() => null, VoidToNull())});
      if (claimingListener != null) {
        this[_activeListeners] = this[_cancel]({all: this[_activeListeners], keep: JSArrayOfGestureListener().of([claimingListener])});
        return true;
      }
      return false;
    }
    onHover(localPosition) {
      this[_activeListeners] = JSArrayOfGestureListener().of([]);
      return this[_listeners][$any](dart.fn(listener => listener.onHover != null && dart.test(listener.onHover(localPosition)), GestureListenerTobool()));
    }
    onDragStart(localPosition) {
      if (dart.test(this[_activeListeners][$isEmpty])) {
        this[_populateActiveListeners](localPosition);
      }
      let claimingListener = this[_activeListeners][$firstWhere](dart.fn(listener => listener.onDragStart != null && dart.test(listener.onDragStart(localPosition)), GestureListenerTobool()), {orElse: dart.fn(() => null, VoidToNull())});
      if (claimingListener != null) {
        this[_activeListeners] = this[_cancel]({all: this[_activeListeners], keep: JSArrayOfGestureListener().of([claimingListener])});
        return true;
      }
      return false;
    }
    onDragUpdate(localPosition, scale) {
      return this[_activeListeners][$any](dart.fn(listener => listener.onDragUpdate != null && dart.dtest(listener.onDragUpdate(localPosition, scale)), GestureListenerTobool()));
    }
    onDragEnd(localPosition, scale, pixelsPerSecond) {
      return this[_activeListeners][$any](dart.fn(listener => listener.onDragEnd != null && dart.dtest(listener.onDragEnd(localPosition, scale, pixelsPerSecond)), GestureListenerTobool()));
    }
    [_cancel](opts) {
      let all = opts && 'all' in opts ? opts.all : null;
      let keep = opts && 'keep' in opts ? opts.keep : null;
      all[$forEach](dart.fn(listener => {
        if (!dart.test(keep[$contains](listener))) {
          listener.onTapCancel();
        }
      }, GestureListenerToNull()));
      return keep;
    }
    [_populateActiveListeners](localPosition) {
      let localListeners = ListOfGestureListener().from(this[_listeners]);
      let previouslyClaimed = false;
      localListeners[$forEach](dart.fn(listener => {
        let claimed = listener.onTapTest(localPosition);
        if (dart.test(claimed) && !previouslyClaimed) {
          this[_activeListeners] = this[_cancel]({all: this[_activeListeners], keep: JSArrayOfGestureListener().of([listener])});
          previouslyClaimed = true;
        } else if (dart.test(claimed) || !previouslyClaimed) {
          this[_activeListeners][$add](listener);
        }
      }, GestureListenerToNull()));
      return previouslyClaimed;
    }
  };
  (proxy_gesture_listener.ProxyGestureListener.new = function() {
    this[_listeners] = JSArrayOfGestureListener().of([]);
    this[_activeListeners] = JSArrayOfGestureListener().of([]);
    ;
  }).prototype = proxy_gesture_listener.ProxyGestureListener.prototype;
  dart.addTypeTests(proxy_gesture_listener.ProxyGestureListener);
  dart.setMethodSignature(proxy_gesture_listener.ProxyGestureListener, () => ({
    __proto__: dart.getMethods(proxy_gesture_listener.ProxyGestureListener.__proto__),
    add: dart.fnType(dart.void, [gesture_listener.GestureListener]),
    remove: dart.fnType(dart.void, [gesture_listener.GestureListener]),
    onTapTest: dart.fnType(core.bool, [math.Point$(core.double)]),
    onLongPress: dart.fnType(core.bool, [math.Point$(core.double)]),
    onTap: dart.fnType(core.bool, [math.Point$(core.double)]),
    onHover: dart.fnType(core.bool, [math.Point$(core.double)]),
    onDragStart: dart.fnType(core.bool, [math.Point$(core.double)]),
    onDragUpdate: dart.fnType(core.bool, [math.Point$(core.double), core.double]),
    onDragEnd: dart.fnType(core.bool, [math.Point$(core.double), core.double, core.double]),
    [_cancel]: dart.fnType(core.List$(gesture_listener.GestureListener), [], {all: core.List$(gesture_listener.GestureListener), keep: core.List$(gesture_listener.GestureListener)}, {}),
    [_populateActiveListeners]: dart.fnType(core.bool, [math.Point$(core.double)])
  }));
  dart.setLibraryUri(proxy_gesture_listener.ProxyGestureListener, "package:charts_common/src/common/proxy_gesture_listener.dart");
  dart.setFieldSignature(proxy_gesture_listener.ProxyGestureListener, () => ({
    __proto__: dart.getFields(proxy_gesture_listener.ProxyGestureListener.__proto__),
    [_listeners]: dart.finalFieldType(core.List$(gesture_listener.GestureListener)),
    [_activeListeners]: dart.fieldType(core.List$(gesture_listener.GestureListener))
  }));
  const onTapTest$ = dart.privateName(gesture_listener, "GestureListener.onTapTest");
  const onTapCancel$ = dart.privateName(gesture_listener, "GestureListener.onTapCancel");
  const onLongPress$ = dart.privateName(gesture_listener, "GestureListener.onLongPress");
  const onTap$ = dart.privateName(gesture_listener, "GestureListener.onTap");
  const onHover$ = dart.privateName(gesture_listener, "GestureListener.onHover");
  const onDragStart$ = dart.privateName(gesture_listener, "GestureListener.onDragStart");
  const onDragUpdate$ = dart.privateName(gesture_listener, "GestureListener.onDragUpdate");
  const onDragEnd$ = dart.privateName(gesture_listener, "GestureListener.onDragEnd");
  gesture_listener.GestureListener = class GestureListener extends core.Object {
    get onTapTest() {
      return this[onTapTest$];
    }
    set onTapTest(value) {
      super.onTapTest = value;
    }
    get onTapCancel() {
      return this[onTapCancel$];
    }
    set onTapCancel(value) {
      super.onTapCancel = value;
    }
    get onLongPress() {
      return this[onLongPress$];
    }
    set onLongPress(value) {
      super.onLongPress = value;
    }
    get onTap() {
      return this[onTap$];
    }
    set onTap(value) {
      super.onTap = value;
    }
    get onHover() {
      return this[onHover$];
    }
    set onHover(value) {
      super.onHover = value;
    }
    get onDragStart() {
      return this[onDragStart$];
    }
    set onDragStart(value) {
      super.onDragStart = value;
    }
    get onDragUpdate() {
      return this[onDragUpdate$];
    }
    set onDragUpdate(value) {
      super.onDragUpdate = value;
    }
    get onDragEnd() {
      return this[onDragEnd$];
    }
    set onDragEnd(value) {
      super.onDragEnd = value;
    }
  };
  (gesture_listener.GestureListener.new = function(opts) {
    let t3, t3$;
    let onTapTest = opts && 'onTapTest' in opts ? opts.onTapTest : null;
    let onTapCancel = opts && 'onTapCancel' in opts ? opts.onTapCancel : null;
    let onLongPress = opts && 'onLongPress' in opts ? opts.onLongPress : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    let onHover = opts && 'onHover' in opts ? opts.onHover : null;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDragUpdate = opts && 'onDragUpdate' in opts ? opts.onDragUpdate : null;
    let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
    this[onLongPress$] = onLongPress;
    this[onTap$] = onTap;
    this[onHover$] = onHover;
    this[onDragStart$] = onDragStart;
    this[onDragUpdate$] = onDragUpdate;
    this[onDragEnd$] = onDragEnd;
    this[onTapTest$] = (t3 = onTapTest, t3 == null ? gesture_listener.GestureListener.defaultTapTest : t3);
    this[onTapCancel$] = (t3$ = onTapCancel, t3$ == null ? gesture_listener.GestureListener.defaultTapCancel : t3$);
    ;
  }).prototype = gesture_listener.GestureListener.prototype;
  dart.addTypeTests(gesture_listener.GestureListener);
  dart.setLibraryUri(gesture_listener.GestureListener, "package:charts_common/src/common/gesture_listener.dart");
  dart.setFieldSignature(gesture_listener.GestureListener, () => ({
    __proto__: dart.getFields(gesture_listener.GestureListener.__proto__),
    onTapTest: dart.finalFieldType(dart.fnType(core.bool, [math.Point$(core.double)])),
    onTapCancel: dart.finalFieldType(dart.fnType(dart.dynamic, [])),
    onLongPress: dart.finalFieldType(dart.fnType(core.bool, [math.Point$(core.double)])),
    onTap: dart.finalFieldType(dart.fnType(core.bool, [math.Point$(core.double)])),
    onHover: dart.finalFieldType(dart.fnType(core.bool, [math.Point$(core.double)])),
    onDragStart: dart.finalFieldType(dart.fnType(core.bool, [math.Point$(core.double)])),
    onDragUpdate: dart.finalFieldType(dart.fnType(dart.dynamic, [math.Point$(core.double), core.double])),
    onDragEnd: dart.finalFieldType(dart.fnType(dart.dynamic, [math.Point$(core.double), core.double, core.double]))
  }));
  dart.defineLazy(gesture_listener.GestureListener, {
    /*gesture_listener.GestureListener.defaultTapCancel*/get defaultTapCancel() {
      return dart.fn(() => {
      }, VoidToNull());
    },
    /*gesture_listener.GestureListener.defaultTapTest*/get defaultTapTest() {
      return dart.fn(_ => false, PointOfdoubleTobool());
    }
  });
  const _barGroupInnerPadding = dart.privateName(bar_renderer, "_barGroupInnerPadding");
  const _stackedBarPadding = dart.privateName(bar_renderer, "_stackedBarPadding");
  const _getBarBounds = dart.privateName(bar_renderer, "_getBarBounds");
  const _getBarStackBounds = dart.privateName(bar_renderer, "_getBarStackBounds");
  const _barStackMap = dart.privateName(base_bar_renderer, "_barStackMap");
  const _currentKeys = dart.privateName(base_bar_renderer, "_currentKeys");
  const _currentGroupsStackKeys = dart.privateName(base_bar_renderer, "_currentGroupsStackKeys");
  const _prevDomainAxis = dart.privateName(base_bar_renderer, "_prevDomainAxis");
  const _calculateBarWeights = dart.privateName(base_bar_renderer, "_calculateBarWeights");
  const _getVerticalDetailsForDomainValue = dart.privateName(base_bar_renderer, "_getVerticalDetailsForDomainValue");
  const _getHorizontalDetailsForDomainValue = dart.privateName(base_bar_renderer, "_getHorizontalDetailsForDomainValue");
  const _getSegmentsForDomainValue = dart.privateName(base_bar_renderer, "_getSegmentsForDomainValue");
  const _getDistance = dart.privateName(base_bar_renderer, "_getDistance");
  const _is_BaseBarRenderer_default = Symbol('_is_BaseBarRenderer_default');
  const config$0 = dart.privateName(base_bar_renderer, "BaseBarRenderer.config");
  const chart = dart.privateName(base_bar_renderer, "BaseBarRenderer.chart");
  base_bar_renderer.BaseBarRenderer$ = dart.generic((D, R, B) => {
    let LinkedMapOfD$SetOfString = () => (LinkedMapOfD$SetOfString = dart.constFn(_js_helper.LinkedMap$(D, SetOfString())))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let ImmutableSeriesOfDToNull = () => (ImmutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesOfD()])))();
    let DAndSetOfStringToNull = () => (DAndSetOfStringToNull = dart.constFn(dart.fnType(core.Null, [D, SetOfString()])))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let DatumDetailsOfDTobool = () => (DatumDetailsOfDTobool = dart.constFn(dart.fnType(core.bool, [DatumDetailsOfD()])))();
    let BaseAnimatedBarOfD$R = () => (BaseAnimatedBarOfD$R = dart.constFn(base_bar_renderer_element.BaseAnimatedBar$(D, R)))();
    let JSArrayOfBaseAnimatedBarOfD$R = () => (JSArrayOfBaseAnimatedBarOfD$R = dart.constFn(_interceptors.JSArray$(BaseAnimatedBarOfD$R())))();
    let ListOfDatumDetailsOfD = () => (ListOfDatumDetailsOfD = dart.constFn(core.List$(DatumDetailsOfD())))();
    let BaseAnimatedBarOfD$RTobool = () => (BaseAnimatedBarOfD$RTobool = dart.constFn(dart.fnType(core.bool, [BaseAnimatedBarOfD$R()])))();
    let BaseAnimatedBarOfD$RToDatumDetailsOfD = () => (BaseAnimatedBarOfD$RToDatumDetailsOfD = dart.constFn(dart.fnType(DatumDetailsOfD(), [BaseAnimatedBarOfD$R()])))();
    let BToR = () => (BToR = dart.constFn(dart.fnType(R, [B])))();
    let ListOfB = () => (ListOfB = dart.constFn(core.List$(B)))();
    let IdentityMapOfString$ListOfB = () => (IdentityMapOfString$ListOfB = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfB())))();
    let JSArrayOfB = () => (JSArrayOfB = dart.constFn(_interceptors.JSArray$(B)))();
    let VoidToListOfB = () => (VoidToListOfB = dart.constFn(dart.fnType(ListOfB(), [])))();
    let BTobool = () => (BTobool = dart.constFn(dart.fnType(core.bool, [B])))();
    let StringAndListOfBToNull = () => (StringAndListOfBToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfB()])))();
    class BaseBarRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[config$0];
      }
      set config(value) {
        super.config = value;
      }
      get chart() {
        return this[chart];
      }
      set chart(value) {
        this[chart] = BaseChartOfD()._check(value);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let barGroupIndex = 0;
        let posDomainToStackKeyToDetailsMap = new _js_helper.LinkedMap.new();
        let negDomainToStackKeyToDetailsMap = new _js_helper.LinkedMap.new();
        let categoryToIndexMap = new _js_helper.LinkedMap.new();
        let maxBarStackSize = 0;
        let orderedSeriesList = this.getOrderedSeriesList(MutableSeriesOfD(), seriesList);
        orderedSeriesList[$forEach](dart.fn(series => {
          let t3, t3$;
          let elements = JSArrayOfBaseBarRendererElement().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let measureOffsetFn = series.measureOffsetFn;
          let fillPatternFn = series.fillPatternFn;
          let strokeWidthPxFn = series.strokeWidthPxFn;
          t3 = series;
          t3.dashPatternFn == null ? t3.dashPatternFn = dart.fn(_ => this.config.dashPattern, intToListOfint()) : null;
          let stackKey = "__defaultKey__";
          if (dart.test(this.config.grouped) && dart.test(this.config.stacked)) {
            if (series.seriesCategory != null) {
              stackKey = series.seriesCategory;
            }
            barGroupIndex = core.int._check(categoryToIndexMap[$_get](stackKey));
            if (barGroupIndex == null) {
              barGroupIndex = categoryToIndexMap[$length];
              categoryToIndexMap[$_set](stackKey, barGroupIndex);
            }
          }
          let needsMeasureOffset = false;
          for (let barIndex = 0; barIndex < dart.notNull(series.data[$length]); barIndex = barIndex + 1) {
            let datum = series.data[$_get](barIndex);
            let details = this.getBaseDetails(datum, barIndex);
            details.barStackIndex = 0;
            details.measureOffset = measureOffsetFn(barIndex);
            if (fillPatternFn != null) {
              details.fillPattern = fillPatternFn(barIndex);
            } else {
              details.fillPattern = this.config.fillPattern;
            }
            if (strokeWidthPxFn != null) {
              details.strokeWidthPx = strokeWidthPxFn(barIndex)[$toDouble]();
            } else {
              details.strokeWidthPx = this.config.strokeWidthPx;
            }
            if (dart.test(this.config.stacked)) {
              needsMeasureOffset = true;
              let domain = domainFn(barIndex);
              let measure = measureFn(barIndex);
              let domainToCategoryToDetailsMap = measure == null || dart.notNull(measure) >= 0 ? posDomainToStackKeyToDetailsMap : negDomainToStackKeyToDetailsMap;
              let categoryToDetailsMap = domainToCategoryToDetailsMap[$putIfAbsent](domain, dart.fn(() => new _js_helper.LinkedMap.new(), VoidToMap()));
              let prevDetail = dart.dsend(categoryToDetailsMap, '_get', [stackKey]);
              if (prevDetail != null) {
                details.barStackIndex = core.int._check(dart.dsend(dart.dload(prevDetail, 'barStackIndex'), '+', [1]));
              }
              details.cumulativeTotal = measure != null ? measure : 0;
              let measureOffset = measureOffsetFn(barIndex);
              if (prevDetail != null) {
                measureOffset = dart.notNull(measureOffset) + dart.notNull(core.num._check(dart.dload(prevDetail, 'measureOffsetPlusMeasure')));
                t3$ = details;
                t3$.cumulativeTotal = dart.notNull(t3$.cumulativeTotal) + dart.notNull(core.num._check(dart.dload(prevDetail, 'cumulativeTotal')));
              }
              details.measureOffset = measureOffset;
              let measureValue = measure != null ? measure : 0;
              details.measureOffsetPlusMeasure = dart.notNull(measureOffset) + dart.notNull(measureValue);
              dart.dsend(categoryToDetailsMap, '_set', [stackKey, details]);
            }
            maxBarStackSize = math.max(core.int, maxBarStackSize, dart.notNull(details.barStackIndex) + 1);
            elements[$add](details);
          }
          if (needsMeasureOffset) {
            series.measureOffsetFn = dart.fn(index => elements[$_get](index).measureOffset, intTonum());
          }
          series.setAttr(core.int, base_bar_renderer.barGroupIndexKey, barGroupIndex);
          series.setAttr(core.String, base_bar_renderer.stackKeyKey, stackKey);
          series.setAttr(ListOfBaseBarRendererElement(), base_bar_renderer.barElementsKey, elements);
          if (dart.test(this.config.grouped)) {
            barGroupIndex = dart.notNull(barGroupIndex) + 1;
          }
        }, MutableSeriesOfDToNull()));
        let numBarGroups = 0;
        if (dart.test(this.config.grouped) && dart.test(this.config.stacked)) {
          numBarGroups = categoryToIndexMap[$length];
        } else if (dart.test(this.config.stacked)) {
          numBarGroups = 1;
        } else {
          numBarGroups = seriesList[$length];
        }
        let barWeights = this[_calculateBarWeights](numBarGroups);
        seriesList[$forEach](dart.fn(series => {
          series.setAttr(core.int, base_bar_renderer.barGroupCountKey, numBarGroups);
          if (dart.test(barWeights[$isNotEmpty])) {
            let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
            let barWeight = barWeights[$_get](barGroupIndex);
            let previousBarWeights = dart.test(this.isRtl) ? barWeights[$getRange](dart.notNull(barGroupIndex) + 1, numBarGroups) : barWeights[$getRange](0, barGroupIndex);
            let previousBarWeight = dart.test(previousBarWeights[$isNotEmpty]) ? previousBarWeights[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), doubleAnddoubleTodouble())) : 0.0;
            series.setAttr(core.double, base_bar_renderer.barGroupWeightKey, barWeight);
            series.setAttr(core.double, base_bar_renderer.previousBarGroupWeightKey, previousBarWeight);
          }
        }, MutableSeriesOfDToNull()));
      }
      [_calculateBarWeights](numBarGroups) {
        let weights = JSArrayOfdouble().of([]);
        if (this.config.weightPattern != null) {
          if (dart.notNull(numBarGroups) > dart.notNull(this.config.weightPattern[$length])) {
            dart.throw(new core.ArgumentError.new("Number of series exceeds length of weight " + "pattern " + dart.str(this.config.weightPattern)));
          }
          let totalBarWeight = 0;
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            totalBarWeight = totalBarWeight + dart.notNull(this.config.weightPattern[$_get](i));
          }
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            weights[$add](dart.notNull(this.config.weightPattern[$_get](i)) / totalBarWeight);
          }
        } else {
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            weights[$add](1 / dart.notNull(numBarGroups));
          }
        }
        return weights;
      }
      configureDomainAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        super.configureDomainAxes(seriesList);
        if (dart.test(seriesList[$isNotEmpty])) {
          let domainAxis = seriesList[$first].getAttr(axis$.Axis, axis$.domainAxisKey);
          if (!dart.test(domainAxis.hasValidBarChartRangeBandConfig)) {
            domainAxis.setRangeBandConfig(new scale$.RangeBandConfig.styleAssignedPercent());
          }
        }
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        this[_currentKeys][$clear]();
        this[_currentGroupsStackKeys][$clear]();
        let orderedSeriesList = this.getOrderedSeriesList(ImmutableSeriesOfD(), seriesList);
        orderedSeriesList[$forEach](dart.fn(series => {
          let t3;
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
          let domainFn = series.domainFn;
          let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
          let measureFn = series.measureFn;
          let colorFn = series.colorFn;
          let dashPatternFn = series.dashPatternFn;
          let fillColorFn = series.fillColorFn;
          let seriesStackKey = series.getAttr(core.String, base_bar_renderer.stackKeyKey);
          let barGroupCount = series.getAttr(core.int, base_bar_renderer.barGroupCountKey);
          let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
          let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
          let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let elementsList = series.getAttr(ListOfBaseBarRendererElement(), base_bar_renderer.barElementsKey);
          this[_prevDomainAxis] = domainAxis;
          for (let barIndex = 0; barIndex < dart.notNull(series.data[$length]); barIndex = barIndex + 1) {
            let datum = series.data[$_get](barIndex);
            let details = elementsList[$_get](barIndex);
            let domainValue = domainFn(barIndex);
            let measureValue = measureFn(barIndex);
            let measureIsNull = measureValue == null;
            let measureIsNegative = !measureIsNull && dart.notNull(measureValue) < 0;
            let barStackMapKey = dart.notNull(dart.toString(domainValue)) + "__" + dart.notNull(seriesStackKey) + "__" + (measureIsNegative ? "pos" : "neg") + "__" + dart.toString(barGroupIndex);
            let barKey = barStackMapKey + dart.toString(details.barStackIndex);
            let barStackList = this[_barStackMap][$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfB().of([]), VoidToListOfB()));
            let animatingBar = barStackList[$firstWhere](dart.fn(bar => bar.key === barKey, BTobool()), {orElse: dart.fn(() => null, VoidToNull())});
            if (animatingBar == null) {
              if (!measureIsNull) {
                animatingBar = this.makeAnimatedBar({key: barKey, series: series, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: colorFn(barIndex), dashPattern: dashPatternFn(barIndex), details: R._check(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: fillColorFn(barIndex), fillPattern: details.fillPattern, measureValue: 0.0, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
                barStackList[$add](animatingBar);
              }
            } else {
              t3 = animatingBar;
              t3.datum = datum;
              t3.series = series;
              t3.domainValue = domainValue;
              t3;
            }
            if (animatingBar == null) {
              continue;
            }
            this[_currentKeys][$add](barKey);
            this[_currentGroupsStackKeys][$putIfAbsent](domainValue, dart.fn(() => new (_IdentityHashSetOfString()).new(), VoidToSetOfString())).add(barStackMapKey);
            let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: colorFn(barIndex), dashPattern: dashPatternFn(barIndex), details: R._check(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: fillColorFn(barIndex), fillPattern: details.fillPattern, measureValue: measureValue, measureOffsetValue: details.measureOffset, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
            animatingBar.setNewTarget(R._check(barElement));
          }
        }, ImmutableSeriesOfDToNull()));
        this[_barStackMap][$forEach](dart.fn((key, barStackList) => {
          for (let barIndex = 0; barIndex < dart.notNull(barStackList[$length]); barIndex = barIndex + 1) {
            let bar = barStackList[$_get](barIndex);
            if (!dart.equals(this[_currentKeys][$contains](bar.key), true)) {
              bar.animateOut();
            }
          }
        }, StringAndListOfBToNull()));
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this.chart = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = new (_IdentityHashSetOfString()).new();
          this[_barStackMap][$forEach](dart.fn((key, barStackList) => {
            barStackList[$retainWhere](dart.fn(bar => !dart.test(bar.animatingOut) && !dart.test(bar.targetBar.measureIsNull), BTobool()));
            if (dart.test(barStackList[$isEmpty])) {
              keysToRemove.add(key);
            }
          }, StringAndListOfBToNull()));
          for (let key of keysToRemove) {
            this[_barStackMap][$remove](key);
            this[_currentKeys][$remove](key);
          }
          this[_currentGroupsStackKeys][$forEach](dart.fn((domain, keys) => {
            keys.removeWhere(dart.bind(keysToRemove, 'contains'));
          }, DAndSetOfStringToNull()));
        }
        this[_barStackMap][$forEach](dart.fn((stackKey, barStack) => {
          let barElements = barStack[$map](R, dart.fn(animatingBar => animatingBar.getCurrentBar(animationPercent), BToR()))[$toList]();
          if (dart.test(barElements[$isNotEmpty])) {
            this.paintBar(canvas, animationPercent, barElements);
          }
        }, StringAndListOfBToNull()));
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) {
          return nearest;
        }
        if (axis$.OrdinalAxis.is(this[_prevDomainAxis])) {
          let domainValue = this[_prevDomainAxis].getDomain(dart.test(this.renderingVertically) ? chartPoint.x : chartPoint.y);
          if (domainValue != null) {
            if (dart.test(this.renderingVertically)) {
              nearest = this[_getVerticalDetailsForDomainValue](domainValue, chartPoint);
            } else {
              nearest = this[_getHorizontalDetailsForDomainValue](domainValue, chartPoint);
            }
          }
        } else {
          if (dart.test(this.renderingVertically)) {
            nearest = this[_getVerticalDetailsForDomainValue](null, chartPoint);
          } else {
            nearest = this[_getHorizontalDetailsForDomainValue](null, chartPoint);
          }
          let minRelativeDistance = 1.7976931348623157e+308;
          let minDomainDistance = 1.7976931348623157e+308;
          let minMeasureDistance = 1.7976931348623157e+308;
          let nearestDomain = null;
          for (let detail of nearest) {
            if (dart.test(byDomain)) {
              if (dart.notNull(detail.domainDistance) < dart.notNull(minDomainDistance) || detail.domainDistance == minDomainDistance && dart.notNull(detail.measureDistance) < dart.notNull(minMeasureDistance)) {
                minDomainDistance = detail.domainDistance;
                minMeasureDistance = detail.measureDistance;
                nearestDomain = detail.domain;
              }
            } else {
              if (dart.notNull(detail.relativeDistance) < dart.notNull(minRelativeDistance)) {
                minRelativeDistance = detail.relativeDistance;
                nearestDomain = detail.domain;
              }
            }
          }
          nearest[$retainWhere](dart.fn(d => dart.equals(d.domain, nearestDomain), DatumDetailsOfDTobool()));
        }
        nearest == null ? nearest = JSArrayOfDatumDetailsOfD().of([]) : null;
        return nearest;
      }
      [_getSegmentsForDomainValue](domainValue, opts) {
        let t3;
        let where = opts && 'where' in opts ? opts.where : null;
        let matchingSegments = JSArrayOfBaseAnimatedBarOfD$R().of([]);
        let stackKeys = domainValue != null ? this[_currentGroupsStackKeys][$_get](domainValue) : this[_currentGroupsStackKeys][$values][$reduce](dart.fn((allKeys, keys) => {
          let t3;
          t3 = allKeys;
          t3.addAll(keys);
          return t3;
        }, SetOfStringAndSetOfStringToSetOfString()));
        t3 = stackKeys;
        t3 == null ? null : t3[$forEach](dart.fn(stackKey => {
          if (where != null) {
            matchingSegments[$addAll](this[_barStackMap][$_get](stackKey)[$where](where));
          } else {
            matchingSegments[$addAll](this[_barStackMap][$_get](stackKey));
          }
        }, StringToNull()));
        return matchingSegments;
      }
      [_getVerticalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsOfD().from(this[_getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !dart.test(bar.series.overlaySeries), BaseAnimatedBarOfD$RTobool())})[$map](DatumDetailsOfD(), dart.fn(bar => {
          let barBounds = this.getBoundsForBar(bar.currentBar);
          let segmentDomainDistance = this[_getDistance](chartPoint.x[$round](), barBounds[$left], barBounds[$right]);
          let segmentMeasureDistance = this[_getDistance](chartPoint.y[$round](), barBounds[$top], barBounds[$bottom]);
          let nearestPoint = new (PointOfdouble()).new(math$.clamp(chartPoint.x, barBounds[$left], barBounds[$right])[$toDouble](), math$.clamp(chartPoint.y, barBounds[$top], barBounds[$bottom])[$toDouble]());
          let relativeDistance = chartPoint.distanceTo(nearestPoint);
          return new (DatumDetailsOfD()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance, relativeDistance: relativeDistance});
        }, BaseAnimatedBarOfD$RToDatumDetailsOfD())));
      }
      [_getHorizontalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsOfD().from(this[_getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !dart.test(bar.series.overlaySeries), BaseAnimatedBarOfD$RTobool())})[$map](dart.dynamic, dart.fn(bar => {
          let barBounds = this.getBoundsForBar(bar.currentBar);
          let segmentDomainDistance = this[_getDistance](chartPoint.y[$round](), barBounds[$top], barBounds[$bottom]);
          let segmentMeasureDistance = this[_getDistance](chartPoint.x[$round](), barBounds[$left], barBounds[$right]);
          return new (DatumDetailsOfD()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance});
        }, BaseAnimatedBarOfD$RToDatumDetailsOfD())));
      }
      [_getDistance](point, min, max) {
        if (dart.notNull(max) >= dart.notNull(point) && dart.notNull(min) <= dart.notNull(point)) {
          return 0.0;
        }
        return (dart.notNull(point) > dart.notNull(max) ? dart.notNull(point) - dart.notNull(max) : dart.notNull(min) - dart.notNull(point))[$toDouble]();
      }
      getOrderedSeriesList(S, seriesList) {
        return dart.test(this.renderingVertically) && dart.test(this.config.stacked) ? dart.test(this.config.grouped) ? new (base_bar_renderer._ReversedSeriesIterable$(S)).new(seriesList) : seriesList[$reversed] : seriesList;
      }
      get isRtl() {
        return this.chart.context.isRtl;
      }
    }
    (BaseBarRenderer.new = function(opts) {
      let t3, t3$;
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      this[chart] = null;
      this[_barStackMap] = new (IdentityMapOfString$ListOfB()).new();
      this[_currentKeys] = JSArrayOfString().of([]);
      this[_currentGroupsStackKeys] = new (LinkedMapOfD$SetOfString()).new();
      this[_prevDomainAxis] = null;
      this[config$0] = config;
      BaseBarRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: (t3$ = (t3 = config, t3 == null ? null : t3.symbolRenderer), t3$ == null ? new symbol_renderer.RoundedRectSymbolRenderer.new() : t3$)});
      ;
    }).prototype = BaseBarRenderer.prototype;
    dart.addTypeTests(BaseBarRenderer);
    BaseBarRenderer.prototype[_is_BaseBarRenderer_default] = true;
    dart.setMethodSignature(BaseBarRenderer, () => ({
      __proto__: dart.getMethods(BaseBarRenderer.__proto__),
      [_calculateBarWeights]: dart.fnType(core.List$(core.double), [core.int]),
      update: dart.fnType(dart.void, [core.Object, core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, math.Rectangle$(core.int)]),
      [_getSegmentsForDomainValue]: dart.fnType(core.List$(base_bar_renderer_element.BaseAnimatedBar$(D, R)), [D], {where: dart.fnType(core.bool, [base_bar_renderer_element.BaseAnimatedBar$(D, R)])}, {}),
      [_getVerticalDetailsForDomainValue]: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [D, math.Point$(core.double)]),
      [_getHorizontalDetailsForDomainValue]: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [D, math.Point$(core.double)]),
      [_getDistance]: dart.fnType(core.double, [core.int, core.int, core.int]),
      getOrderedSeriesList: dart.gFnType(S => [core.Iterable$(S), [core.List$(S)]], S => [processed_series.ImmutableSeries])
    }));
    dart.setGetterSignature(BaseBarRenderer, () => ({
      __proto__: dart.getGetters(BaseBarRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(BaseBarRenderer, "package:charts_common/src/chart/bar/base_bar_renderer.dart");
    dart.setFieldSignature(BaseBarRenderer, () => ({
      __proto__: dart.getFields(BaseBarRenderer.__proto__),
      config: dart.finalFieldType(base_bar_renderer_config.BaseBarRendererConfig),
      chart: dart.fieldType(base_chart.BaseChart$(D)),
      [_barStackMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, core.List$(B))),
      [_currentKeys]: dart.finalFieldType(core.List$(core.String)),
      [_currentGroupsStackKeys]: dart.finalFieldType(collection.LinkedHashMap$(D, core.Set$(core.String))),
      [_prevDomainAxis]: dart.fieldType(axis$.ImmutableAxis$(D))
    }));
    return BaseBarRenderer;
  });
  base_bar_renderer.BaseBarRenderer = base_bar_renderer.BaseBarRenderer$();
  dart.addTypeTests(base_bar_renderer.BaseBarRenderer, _is_BaseBarRenderer_default);
  const _datum = dart.privateName(bar_renderer, "_datum");
  const barStackIndex = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.barStackIndex");
  const color = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.color");
  const cumulativeTotal = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.cumulativeTotal");
  const dashPattern = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.dashPattern");
  const fillColor = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.fillColor");
  const fillPattern = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.fillPattern");
  const measureAxisPosition = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureAxisPosition");
  const measureOffset = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureOffset");
  const measureOffsetPlusMeasure = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureOffsetPlusMeasure");
  const strokeWidthPx = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.strokeWidthPx");
  const measureIsNull = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureIsNull");
  const measureIsNegative = dart.privateName(base_bar_renderer_element, "BaseBarRendererElement.measureIsNegative");
  base_bar_renderer_element.BaseBarRendererElement = class BaseBarRendererElement extends core.Object {
    get barStackIndex() {
      return this[barStackIndex];
    }
    set barStackIndex(value) {
      this[barStackIndex] = value;
    }
    get color() {
      return this[color];
    }
    set color(value) {
      this[color] = value;
    }
    get cumulativeTotal() {
      return this[cumulativeTotal];
    }
    set cumulativeTotal(value) {
      this[cumulativeTotal] = value;
    }
    get dashPattern() {
      return this[dashPattern];
    }
    set dashPattern(value) {
      this[dashPattern] = value;
    }
    get fillColor() {
      return this[fillColor];
    }
    set fillColor(value) {
      this[fillColor] = value;
    }
    get fillPattern() {
      return this[fillPattern];
    }
    set fillPattern(value) {
      this[fillPattern] = value;
    }
    get measureAxisPosition() {
      return this[measureAxisPosition];
    }
    set measureAxisPosition(value) {
      this[measureAxisPosition] = value;
    }
    get measureOffset() {
      return this[measureOffset];
    }
    set measureOffset(value) {
      this[measureOffset] = value;
    }
    get measureOffsetPlusMeasure() {
      return this[measureOffsetPlusMeasure];
    }
    set measureOffsetPlusMeasure(value) {
      this[measureOffsetPlusMeasure] = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx];
    }
    set strokeWidthPx(value) {
      this[strokeWidthPx] = value;
    }
    get measureIsNull() {
      return this[measureIsNull];
    }
    set measureIsNull(value) {
      this[measureIsNull] = value;
    }
    get measureIsNegative() {
      return this[measureIsNegative];
    }
    set measureIsNegative(value) {
      this[measureIsNegative] = value;
    }
    updateAnimationPercent(previous, target, animationPercent) {
      this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
      this.fillColor = chart_canvas.getAnimatedColor(previous.fillColor, target.fillColor, animationPercent);
      this.measureIsNull = target.measureIsNull;
      this.measureIsNegative = target.measureIsNegative;
    }
  };
  (base_bar_renderer_element.BaseBarRendererElement.new = function() {
    this[barStackIndex] = null;
    this[color] = null;
    this[cumulativeTotal] = null;
    this[dashPattern] = null;
    this[fillColor] = null;
    this[fillPattern] = null;
    this[measureAxisPosition] = null;
    this[measureOffset] = null;
    this[measureOffsetPlusMeasure] = null;
    this[strokeWidthPx] = null;
    this[measureIsNull] = null;
    this[measureIsNegative] = null;
    ;
  }).prototype = base_bar_renderer_element.BaseBarRendererElement.prototype;
  (base_bar_renderer_element.BaseBarRendererElement.clone = function(other) {
    this[barStackIndex] = null;
    this[color] = null;
    this[cumulativeTotal] = null;
    this[dashPattern] = null;
    this[fillColor] = null;
    this[fillPattern] = null;
    this[measureAxisPosition] = null;
    this[measureOffset] = null;
    this[measureOffsetPlusMeasure] = null;
    this[strokeWidthPx] = null;
    this[measureIsNull] = null;
    this[measureIsNegative] = null;
    this.barStackIndex = other.barStackIndex;
    this.color = other.color != null ? new color$.Color.fromOther({color: other.color}) : null;
    this.cumulativeTotal = other.cumulativeTotal;
    this.dashPattern = other.dashPattern;
    this.fillColor = other.fillColor != null ? new color$.Color.fromOther({color: other.fillColor}) : null;
    this.fillPattern = other.fillPattern;
    this.measureAxisPosition = other.measureAxisPosition;
    this.measureOffset = other.measureOffset;
    this.measureOffsetPlusMeasure = other.measureOffsetPlusMeasure;
    this.strokeWidthPx = other.strokeWidthPx;
    this.measureIsNull = other.measureIsNull;
    this.measureIsNegative = other.measureIsNegative;
  }).prototype = base_bar_renderer_element.BaseBarRendererElement.prototype;
  dart.addTypeTests(base_bar_renderer_element.BaseBarRendererElement);
  dart.setMethodSignature(base_bar_renderer_element.BaseBarRendererElement, () => ({
    __proto__: dart.getMethods(base_bar_renderer_element.BaseBarRendererElement.__proto__),
    updateAnimationPercent: dart.fnType(dart.void, [base_bar_renderer_element.BaseBarRendererElement, base_bar_renderer_element.BaseBarRendererElement, core.double])
  }));
  dart.setLibraryUri(base_bar_renderer_element.BaseBarRendererElement, "package:charts_common/src/chart/bar/base_bar_renderer_element.dart");
  dart.setFieldSignature(base_bar_renderer_element.BaseBarRendererElement, () => ({
    __proto__: dart.getFields(base_bar_renderer_element.BaseBarRendererElement.__proto__),
    barStackIndex: dart.fieldType(core.int),
    color: dart.fieldType(color$.Color),
    cumulativeTotal: dart.fieldType(core.num),
    dashPattern: dart.fieldType(core.List$(core.int)),
    fillColor: dart.fieldType(color$.Color),
    fillPattern: dart.fieldType(chart_canvas.FillPatternType),
    measureAxisPosition: dart.fieldType(core.double),
    measureOffset: dart.fieldType(core.num),
    measureOffsetPlusMeasure: dart.fieldType(core.num),
    strokeWidthPx: dart.fieldType(core.double),
    measureIsNull: dart.fieldType(core.bool),
    measureIsNegative: dart.fieldType(core.bool)
  }));
  const _is_BarRendererElement_default = Symbol('_is_BarRendererElement_default');
  const series = dart.privateName(bar_renderer, "BarRendererElement.series");
  const bounds = dart.privateName(bar_renderer, "BarRendererElement.bounds");
  const roundPx = dart.privateName(bar_renderer, "BarRendererElement.roundPx");
  const index = dart.privateName(bar_renderer, "BarRendererElement.index");
  bar_renderer.BarRendererElement$ = dart.generic(D => {
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    class BarRendererElement extends base_bar_renderer_element.BaseBarRendererElement {
      get series() {
        return this[series];
      }
      set series(value) {
        this[series] = ImmutableSeriesOfD()._check(value);
      }
      get bounds() {
        return this[bounds];
      }
      set bounds(value) {
        this[bounds] = value;
      }
      get roundPx() {
        return this[roundPx];
      }
      set roundPx(value) {
        this[roundPx] = value;
      }
      get index() {
        return this[index];
      }
      set index(value) {
        this[index] = value;
      }
      get datum() {
        return this[_datum];
      }
      set datum(datum) {
        let t3, t3$;
        this[_datum] = datum;
        this.index = (t3$ = (t3 = this.series, t3 == null ? null : t3.data), t3$ == null ? null : t3$[$indexOf](datum));
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let localPrevious = bar_renderer.BarRendererElement._check(previous);
        let localTarget = bar_renderer.BarRendererElement._check(target);
        let previousBounds = localPrevious.bounds;
        let targetBounds = localTarget.bounds;
        let top = (dart.notNull(targetBounds[$top]) - dart.notNull(previousBounds[$top])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$top]);
        let right = (dart.notNull(targetBounds[$right]) - dart.notNull(previousBounds[$right])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$right]);
        let bottom = (dart.notNull(targetBounds[$bottom]) - dart.notNull(previousBounds[$bottom])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$bottom]);
        let left = (dart.notNull(targetBounds[$left]) - dart.notNull(previousBounds[$left])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$left]);
        this.bounds = new (RectangleOfint()).new(left[$round](), top[$round](), (right - left)[$round](), (bottom - top)[$round]());
        this.roundPx = localTarget.roundPx;
        super.updateAnimationPercent(previous, target, animationPercent);
      }
    }
    (BarRendererElement.new = function() {
      this[series] = null;
      this[bounds] = null;
      this[roundPx] = null;
      this[index] = null;
      this[_datum] = null;
      BarRendererElement.__proto__.new.call(this);
      ;
    }).prototype = BarRendererElement.prototype;
    (BarRendererElement.clone = function(other) {
      this[series] = null;
      this[bounds] = null;
      this[roundPx] = null;
      this[index] = null;
      this[_datum] = null;
      BarRendererElement.__proto__.clone.call(this, other);
      this.series = ImmutableSeriesOfD()._check(other.series);
      this.bounds = other.bounds;
      this.roundPx = other.roundPx;
      this.index = other.index;
      this[_datum] = other[_datum];
    }).prototype = BarRendererElement.prototype;
    dart.addTypeTests(BarRendererElement);
    BarRendererElement.prototype[_is_BarRendererElement_default] = true;
    BarRendererElement[dart.implements] = () => [bar_renderer.ImmutableBarRendererElement$(D)];
    dart.setGetterSignature(BarRendererElement, () => ({
      __proto__: dart.getGetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setSetterSignature(BarRendererElement, () => ({
      __proto__: dart.getSetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setLibraryUri(BarRendererElement, "package:charts_common/src/chart/bar/bar_renderer.dart");
    dart.setFieldSignature(BarRendererElement, () => ({
      __proto__: dart.getFields(BarRendererElement.__proto__),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      bounds: dart.fieldType(math.Rectangle$(core.int)),
      roundPx: dart.fieldType(core.int),
      index: dart.fieldType(core.int),
      [_datum]: dart.fieldType(dart.dynamic)
    }));
    return BarRendererElement;
  });
  bar_renderer.BarRendererElement = bar_renderer.BarRendererElement$();
  dart.addTypeTests(bar_renderer.BarRendererElement, _is_BarRendererElement_default);
  const _previousBar = dart.privateName(base_bar_renderer_element, "_previousBar");
  const _targetBar = dart.privateName(base_bar_renderer_element, "_targetBar");
  const _currentBar = dart.privateName(base_bar_renderer_element, "_currentBar");
  const _is_BaseAnimatedBar_default = Symbol('_is_BaseAnimatedBar_default');
  const key$ = dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.key");
  const datum$1 = dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.datum");
  const series$2 = dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.series");
  const domainValue$0 = dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.domainValue");
  const animatingOut = dart.privateName(base_bar_renderer_element, "BaseAnimatedBar.animatingOut");
  base_bar_renderer_element.BaseAnimatedBar$ = dart.generic((D, R) => {
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    class BaseAnimatedBar extends core.Object {
      get key() {
        return this[key$];
      }
      set key(value) {
        super.key = value;
      }
      get datum() {
        return this[datum$1];
      }
      set datum(value) {
        this[datum$1] = value;
      }
      get series() {
        return this[series$2];
      }
      set series(value) {
        this[series$2] = ImmutableSeriesOfD()._check(value);
      }
      get domainValue() {
        return this[domainValue$0];
      }
      set domainValue(value) {
        this[domainValue$0] = D._check(value);
      }
      get animatingOut() {
        return this[animatingOut];
      }
      set animatingOut(value) {
        this[animatingOut] = value;
      }
      animateOut() {
        let newTarget = this.clone(this[_currentBar]);
        this.animateElementToMeasureAxisPosition(newTarget);
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        R._check(newTarget);
        this.animatingOut = false;
        this[_currentBar] == null ? this[_currentBar] = this.clone(newTarget) : null;
        this[_previousBar] = this.clone(this[_currentBar]);
        this[_targetBar] = newTarget;
      }
      get currentBar() {
        return this[_currentBar];
      }
      get previousBar() {
        return this[_previousBar];
      }
      get targetBar() {
        return this[_targetBar];
      }
      getCurrentBar(animationPercent) {
        if (animationPercent === 1.0 || this[_previousBar] == null) {
          this[_currentBar] = this[_targetBar];
          this[_previousBar] = this[_targetBar];
          return this[_currentBar];
        }
        this[_currentBar].updateAnimationPercent(this[_previousBar], this[_targetBar], animationPercent);
        return this[_currentBar];
      }
    }
    (BaseAnimatedBar.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      this[_previousBar] = null;
      this[_targetBar] = null;
      this[_currentBar] = null;
      this[animatingOut] = false;
      this[key$] = key;
      this[datum$1] = datum;
      this[series$2] = series;
      this[domainValue$0] = domainValue;
      ;
    }).prototype = BaseAnimatedBar.prototype;
    dart.addTypeTests(BaseAnimatedBar);
    BaseAnimatedBar.prototype[_is_BaseAnimatedBar_default] = true;
    dart.setMethodSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getMethods(BaseAnimatedBar.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentBar: dart.fnType(R, [core.double])
    }));
    dart.setGetterSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getGetters(BaseAnimatedBar.__proto__),
      currentBar: R,
      previousBar: R,
      targetBar: R
    }));
    dart.setLibraryUri(BaseAnimatedBar, "package:charts_common/src/chart/bar/base_bar_renderer_element.dart");
    dart.setFieldSignature(BaseAnimatedBar, () => ({
      __proto__: dart.getFields(BaseAnimatedBar.__proto__),
      key: dart.finalFieldType(core.String),
      datum: dart.fieldType(dart.dynamic),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      domainValue: dart.fieldType(D),
      [_previousBar]: dart.fieldType(R),
      [_targetBar]: dart.fieldType(R),
      [_currentBar]: dart.fieldType(R),
      animatingOut: dart.fieldType(core.bool)
    }));
    return BaseAnimatedBar;
  });
  base_bar_renderer_element.BaseAnimatedBar = base_bar_renderer_element.BaseAnimatedBar$();
  dart.addTypeTests(base_bar_renderer_element.BaseAnimatedBar, _is_BaseAnimatedBar_default);
  const _is_AnimatedBar_default = Symbol('_is_AnimatedBar_default');
  bar_renderer.AnimatedBar$ = dart.generic(D => {
    let BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    class AnimatedBar extends base_bar_renderer_element.BaseAnimatedBar$(D, bar_renderer.BarRendererElement$(D)) {
      animateElementToMeasureAxisPosition(target) {
        base_bar_renderer_element.BaseBarRendererElement._check(target);
        let localTarget = bar_renderer.BarRendererElement._check(target);
        localTarget.bounds = new (RectangleOfint()).new(dart.notNull(localTarget.bounds[$left]) + (dart.notNull(localTarget.bounds[$width]) / 2)[$round](), localTarget.measureAxisPosition[$round](), 0, 0);
      }
      getCurrentBar(animationPercent) {
        let bar = super.getCurrentBar(animationPercent);
        bar.series = this.series;
        bar.datum = this.datum;
        return bar;
      }
      clone(bar) {
        bar_renderer.BarRendererElement._check(bar);
        return new (BarRendererElementOfD()).clone(bar);
      }
    }
    (AnimatedBar.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      AnimatedBar.__proto__.new.call(this, {key: key, datum: datum, series: series, domainValue: domainValue});
      ;
    }).prototype = AnimatedBar.prototype;
    dart.addTypeTests(AnimatedBar);
    AnimatedBar.prototype[_is_AnimatedBar_default] = true;
    dart.setMethodSignature(AnimatedBar, () => ({
      __proto__: dart.getMethods(AnimatedBar.__proto__),
      animateElementToMeasureAxisPosition: dart.fnType(dart.void, [core.Object]),
      clone: dart.fnType(bar_renderer.BarRendererElement$(D), [core.Object])
    }));
    dart.setLibraryUri(AnimatedBar, "package:charts_common/src/chart/bar/bar_renderer.dart");
    return AnimatedBar;
  });
  bar_renderer.AnimatedBar = bar_renderer.AnimatedBar$();
  dart.addTypeTests(bar_renderer.AnimatedBar, _is_AnimatedBar_default);
  const _is_BarRenderer_default = Symbol('_is_BarRenderer_default');
  const barRendererDecorator = dart.privateName(bar_renderer, "BarRenderer.barRendererDecorator");
  bar_renderer.BarRenderer$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let AnimatedBarOfD = () => (AnimatedBarOfD = dart.constFn(bar_renderer.AnimatedBar$(D)))();
    let IterableOfBarRendererElementOfD = () => (IterableOfBarRendererElementOfD = dart.constFn(core.Iterable$(BarRendererElementOfD())))();
    class BarRenderer extends base_bar_renderer.BaseBarRenderer$(D, bar_renderer.BarRendererElement$(D), bar_renderer.AnimatedBar$(D)) {
      get barRendererDecorator() {
        return this[barRendererDecorator];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        rendererId == null ? rendererId = "bar" : null;
        config == null ? config = new bar_renderer_config.BarRendererConfig.new() : null;
        return new (bar_renderer.BarRenderer$(D)).internal({config: config, rendererId: rendererId});
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this.assignMissingColors(this.getOrderedSeriesList(MutableSeriesOfD(), seriesList), {emptyCategoryUsesSinglePalette: true});
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let series = details.series;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
        let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
        let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
        let numBarGroups = series.getAttr(core.int, base_bar_renderer.barGroupCountKey);
        let bounds = this[_getBarBounds](details.domain, domainAxis, domainAxis.rangeBand[$round](), details.measure, details.measureOffset, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
        let chartPosition = null;
        if (dart.test(this.renderingVertically)) {
          chartPosition = new (PointOfdouble()).new((dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2)[$toDouble](), bounds[$top][$toDouble]());
        } else {
          chartPosition = new (PointOfdouble()).new(dart.test(this.isRtl) ? bounds[$left][$toDouble]() : bounds[$right][$toDouble](), (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2)[$toDouble]());
        }
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
      getBaseDetails(datum, index) {
        return new (BarRendererElementOfD()).new();
      }
      get cornerStrategy() {
        return bar_renderer_config.BarRendererConfig.as(this.config).cornerStrategy;
      }
      makeAnimatedBar(opts) {
        let t3;
        let key = opts && 'key' in opts ? opts.key : null;
        let series = opts && 'series' in opts ? opts.series : null;
        ImmutableSeriesOfD()._check(series);
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementOfD()._check(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        D._check(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD()._check(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t3 = new (AnimatedBarOfD()).new({key: key, datum: datum, series: series, domainValue: domainValue});
        t3.setNewTarget(this.makeBarRendererElement({color: color, dashPattern: dashPattern, details: details, domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainWidth, measureValue: measureValue, measureOffsetValue: measureOffsetValue, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, fillColor: fillColor, fillPattern: fillPattern, strokeWidthPx: strokeWidthPx, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, numBarGroups: numBarGroups, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative}));
        return t3;
      }
      makeBarRendererElement(opts) {
        let t3;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementOfD()._check(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        D._check(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD()._check(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t3 = new (BarRendererElementOfD()).new();
        t3.color = color;
        t3.dashPattern = dashPattern;
        t3.fillColor = fillColor;
        t3.fillPattern = fillPattern;
        t3.measureAxisPosition = measureAxisPosition;
        t3.roundPx = details.roundPx;
        t3.strokeWidthPx = strokeWidthPx;
        t3.measureIsNull = measureIsNull;
        t3.measureIsNegative = measureIsNegative;
        t3.bounds = this[_getBarBounds](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
        return t3;
      }
      paintBar(canvas, animationPercent, barElements) {
        let t3;
        IterableOfBarRendererElementOfD()._check(barElements);
        let bars = JSArrayOfCanvasRect().of([]);
        let unmodifiedBar = dart.test(this.renderingVertically) ? barElements[$first] : barElements[$last];
        let maxBarWidth = 0;
        let measureIsNegative = false;
        for (let bar of barElements) {
          let bounds = bar.bounds;
          measureIsNegative = measureIsNegative || dart.test(bar.measureIsNegative);
          if (!dart.equals(bar, unmodifiedBar)) {
            bounds = dart.test(this.renderingVertically) ? new (RectangleOfint()).new(bar.bounds[$left], math.max(core.int, 0, dart.notNull(bar.bounds[$top]) + dart.notNull(measureIsNegative ? this[_stackedBarPadding] : 0)), bar.bounds[$width], math.max(core.int, 0, dart.notNull(bar.bounds[$height]) - dart.notNull(this[_stackedBarPadding]))) : new (RectangleOfint()).new(math.max(core.int, 0, dart.notNull(bar.bounds[$left]) + dart.notNull(measureIsNegative ? this[_stackedBarPadding] : 0)), bar.bounds[$top], math.max(core.int, 0, dart.notNull(bar.bounds[$width]) - dart.notNull(this[_stackedBarPadding])), bar.bounds[$height]);
          }
          bars[$add](new canvas_shapes.CanvasRect.new(bounds, {dashPattern: bar.dashPattern, fill: bar.fillColor, pattern: bar.fillPattern, stroke: bar.color, strokeWidthPx: bar.strokeWidthPx}));
          maxBarWidth = math.max(core.int, maxBarWidth, dart.test(this.renderingVertically) ? bounds[$width] : bounds[$height]);
        }
        let roundTopLeft = null;
        let roundTopRight = null;
        let roundBottomLeft = null;
        let roundBottomRight = null;
        if (measureIsNegative) {
          roundTopLeft = !dart.test(this.renderingVertically) && !dart.test(this.isRtl) ? true : false;
          roundTopRight = !dart.test(this.renderingVertically) && dart.test(this.isRtl) ? true : false;
          roundBottomLeft = dart.test(this.renderingVertically) || !dart.test(this.isRtl) ? true : false;
          roundBottomRight = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? true : false;
        } else {
          roundTopLeft = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? true : false;
          roundTopRight = dart.test(this.isRtl) ? false : true;
          roundBottomLeft = dart.test(this.isRtl) ? true : false;
          roundBottomRight = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? false : true;
        }
        let barStack = canvas_shapes.CanvasBarStack.new(bars, {radius: this.cornerStrategy.getRadius(maxBarWidth), stackedBarPadding: this[_stackedBarPadding], roundTopLeft: roundTopLeft, roundTopRight: roundTopRight, roundBottomLeft: roundBottomLeft, roundBottomRight: roundBottomRight});
        let barOutsideBounds = dart.test(this.renderingVertically) ? dart.notNull(barStack.fullStackRect[$left]) < dart.notNull(this.componentBounds[$left]) || dart.notNull(barStack.fullStackRect[$right]) > dart.notNull(this.componentBounds[$right]) : dart.notNull(barStack.fullStackRect[$top]) < dart.notNull(this.componentBounds[$top]) || dart.notNull(barStack.fullStackRect[$bottom]) > dart.notNull(this.componentBounds[$bottom]);
        if (barOutsideBounds) {
          let clipBounds = this[_getBarStackBounds](barStack.fullStackRect);
          if (dart.notNull(clipBounds[$width]) <= 0 || dart.notNull(clipBounds[$height]) <= 0) {
            return;
          }
          canvas.setClipBounds(clipBounds);
        }
        canvas.drawBarStack(barStack, {drawAreaBounds: this.componentBounds});
        if (barOutsideBounds) {
          canvas.resetClipBounds();
        }
        t3 = this.barRendererDecorator;
        t3 == null ? null : t3.decorate(barElements, canvas, this.graphicsFactory, {drawBounds: this.drawBounds, animationPercent: animationPercent, renderingVertically: this.renderingVertically, rtl: this.isRtl});
      }
      [_getBarStackBounds](barStackRect) {
        let left = null;
        let right = null;
        let top = null;
        let bottom = null;
        if (dart.test(this.renderingVertically)) {
          left = math.max(core.int, this.componentBounds[$left], barStackRect[$left]);
          right = math.min(core.int, this.componentBounds[$right], barStackRect[$right]);
          top = barStackRect[$top];
          bottom = barStackRect[$bottom];
        } else {
          left = barStackRect[$left];
          right = barStackRect[$right];
          top = math.max(core.int, this.componentBounds[$top], barStackRect[$top]);
          bottom = math.min(core.int, this.componentBounds[$bottom], barStackRect[$bottom]);
        }
        let width = dart.notNull(right) - dart.notNull(left);
        let height = dart.notNull(bottom) - dart.notNull(top);
        return new (RectangleOfint()).new(left, top, width, height);
      }
      [_getBarBounds](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups) {
        domainWidth = domainWidth[$abs]();
        if (barGroupWeight == null) {
          barGroupWeight = 1 / dart.notNull(numBarGroups);
          previousBarGroupWeight = dart.notNull(barGroupIndex) * dart.notNull(barGroupWeight);
        }
        let spacingLoss = dart.notNull(this[_barGroupInnerPadding]) * (dart.notNull(numBarGroups) - 1);
        let barWidth = ((dart.notNull(domainWidth) - spacingLoss) * dart.notNull(barGroupWeight))[$round]();
        barWidth = math.max(core.int, 1, barWidth);
        let adjustedBarGroupIndex = dart.test(this.isRtl) ? dart.notNull(numBarGroups) - dart.notNull(barGroupIndex) - 1 : barGroupIndex;
        let previousAverageWidth = dart.notNull(adjustedBarGroupIndex) > 0 ? ((dart.notNull(domainWidth) - spacingLoss) * (dart.notNull(previousBarGroupWeight) / dart.notNull(adjustedBarGroupIndex)))[$round]() : 0;
        let domainStart = (dart.notNull(domainAxis.getLocation(domainValue)) - dart.notNull(domainWidth) / 2 + (previousAverageWidth + dart.notNull(this[_barGroupInnerPadding])) * dart.notNull(adjustedBarGroupIndex))[$round]();
        let domainEnd = domainStart + barWidth;
        measureValue = measureValue != null ? measureValue : 0;
        let measureStart = null;
        let measureEnd = null;
        if (dart.notNull(measureValue) < 0) {
          measureEnd = measureAxis.getLocation(measureOffsetValue)[$round]();
          measureStart = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue))[$round]();
        } else {
          measureStart = measureAxis.getLocation(measureOffsetValue)[$round]();
          measureEnd = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue))[$round]();
        }
        let bounds = null;
        if (dart.test(this.renderingVertically)) {
          bounds = new (RectangleOfint()).new(domainStart, measureEnd, domainEnd - domainStart, dart.notNull(measureStart) - dart.notNull(measureEnd));
        } else {
          bounds = new (RectangleOfint()).new(math.min(core.int, measureStart, measureEnd), domainStart, (dart.notNull(measureEnd) - dart.notNull(measureStart))[$abs](), domainEnd - domainStart);
        }
        return bounds;
      }
      getBoundsForBar(bar) {
        bar_renderer.BarRendererElement._check(bar);
        return bar.bounds;
      }
    }
    (BarRenderer.internal = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[_barGroupInnerPadding] = 2;
      this[_stackedBarPadding] = 1;
      this[barRendererDecorator] = config.barRendererDecorator;
      BarRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder});
      ;
    }).prototype = BarRenderer.prototype;
    dart.addTypeTests(BarRenderer);
    BarRenderer.prototype[_is_BarRenderer_default] = true;
    dart.setMethodSignature(BarRenderer, () => ({
      __proto__: dart.getMethods(BarRenderer.__proto__),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object]),
      getBaseDetails: dart.fnType(bar_renderer.BarRendererElement$(D), [dart.dynamic, core.int]),
      makeAnimatedBar: dart.fnType(bar_renderer.AnimatedBar$(D), [], {barGroupIndex: core.int, barGroupWeight: core.double, color: color$.Color, dashPattern: core.List$(core.int), datum: dart.dynamic, details: core.Object, domainAxis: core.Object, domainValue: core.Object, domainWidth: core.int, fillColor: color$.Color, fillPattern: chart_canvas.FillPatternType, key: core.String, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: core.double, measureIsNegative: core.bool, measureIsNull: core.bool, measureOffsetValue: core.num, measureValue: core.num, numBarGroups: core.int, previousBarGroupWeight: core.double, series: core.Object, strokeWidthPx: core.double}, {}),
      makeBarRendererElement: dart.fnType(bar_renderer.BarRendererElement$(D), [], {barGroupIndex: core.int, barGroupWeight: core.double, color: color$.Color, dashPattern: core.List$(core.int), details: core.Object, domainAxis: core.Object, domainValue: core.Object, domainWidth: core.int, fillColor: color$.Color, fillPattern: chart_canvas.FillPatternType, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: core.double, measureIsNegative: core.bool, measureIsNull: core.bool, measureOffsetValue: core.num, measureValue: core.num, numBarGroups: core.int, previousBarGroupWeight: core.double, strokeWidthPx: core.double}, {}),
      paintBar: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double, core.Object]),
      [_getBarStackBounds]: dart.fnType(math.Rectangle$(core.int), [math.Rectangle$(core.int)]),
      [_getBarBounds]: dart.fnType(math.Rectangle$(core.int), [D, axis$.ImmutableAxis$(D), core.int, core.num, core.num, axis$.ImmutableAxis$(core.num), core.int, core.double, core.double, core.int]),
      getBoundsForBar: dart.fnType(math.Rectangle$(core.int), [core.Object])
    }));
    dart.setGetterSignature(BarRenderer, () => ({
      __proto__: dart.getGetters(BarRenderer.__proto__),
      cornerStrategy: bar_renderer_config.CornerStrategy
    }));
    dart.setLibraryUri(BarRenderer, "package:charts_common/src/chart/bar/bar_renderer.dart");
    dart.setFieldSignature(BarRenderer, () => ({
      __proto__: dart.getFields(BarRenderer.__proto__),
      [_barGroupInnerPadding]: dart.finalFieldType(core.int),
      [_stackedBarPadding]: dart.finalFieldType(core.int),
      barRendererDecorator: dart.finalFieldType(bar_renderer_decorator.BarRendererDecorator)
    }));
    return BarRenderer;
  });
  bar_renderer.BarRenderer = bar_renderer.BarRenderer$();
  dart.addTypeTests(bar_renderer.BarRenderer, _is_BarRenderer_default);
  const _is_ImmutableBarRendererElement_default = Symbol('_is_ImmutableBarRendererElement_default');
  bar_renderer.ImmutableBarRendererElement$ = dart.generic(D => {
    class ImmutableBarRendererElement extends core.Object {}
    (ImmutableBarRendererElement.new = function() {
      ;
    }).prototype = ImmutableBarRendererElement.prototype;
    dart.addTypeTests(ImmutableBarRendererElement);
    ImmutableBarRendererElement.prototype[_is_ImmutableBarRendererElement_default] = true;
    dart.setLibraryUri(ImmutableBarRendererElement, "package:charts_common/src/chart/bar/bar_renderer.dart");
    return ImmutableBarRendererElement;
  });
  bar_renderer.ImmutableBarRendererElement = bar_renderer.ImmutableBarRendererElement$();
  dart.addTypeTests(bar_renderer.ImmutableBarRendererElement, _is_ImmutableBarRendererElement_default);
  const _is__ReversedSeriesIterable_default = Symbol('_is__ReversedSeriesIterable_default');
  base_bar_renderer._ReversedSeriesIterable$ = dart.generic(S => {
    let _ReversedSeriesIteratorOfS = () => (_ReversedSeriesIteratorOfS = dart.constFn(base_bar_renderer._ReversedSeriesIterator$(S)))();
    class _ReversedSeriesIterable extends core.Iterable$(S) {
      get iterator() {
        return new (_ReversedSeriesIteratorOfS()).new(this.seriesList);
      }
    }
    (_ReversedSeriesIterable.new = function(seriesList) {
      this.seriesList = seriesList;
      _ReversedSeriesIterable.__proto__.new.call(this);
      ;
    }).prototype = _ReversedSeriesIterable.prototype;
    dart.addTypeTests(_ReversedSeriesIterable);
    _ReversedSeriesIterable.prototype[_is__ReversedSeriesIterable_default] = true;
    dart.setGetterSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterable.__proto__),
      iterator: core.Iterator$(S),
      [$iterator]: core.Iterator$(S)
    }));
    dart.setLibraryUri(_ReversedSeriesIterable, "package:charts_common/src/chart/bar/base_bar_renderer.dart");
    dart.setFieldSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterable.__proto__),
      seriesList: dart.finalFieldType(core.List$(S))
    }));
    dart.defineExtensionAccessors(_ReversedSeriesIterable, ['iterator']);
    return _ReversedSeriesIterable;
  });
  base_bar_renderer._ReversedSeriesIterable = base_bar_renderer._ReversedSeriesIterable$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterable, _is__ReversedSeriesIterable_default);
  const _visitIndex = dart.privateName(base_bar_renderer, "_visitIndex");
  const _current = dart.privateName(base_bar_renderer, "_current");
  const _list = dart.privateName(base_bar_renderer, "_list");
  const _is__ReversedSeriesIterator_default = Symbol('_is__ReversedSeriesIterator_default');
  base_bar_renderer._ReversedSeriesIterator$ = dart.generic(S => {
    class _ReversedSeriesIterator extends core.Iterator$(S) {
      moveNext() {
        this[_current] = this[_current] == null ? 0 : dart.notNull(this[_current]) + 1;
        return dart.notNull(this[_current]) < dart.notNull(this[_list][$length]);
      }
      get current() {
        return this[_list][$_get](this[_visitIndex][$_get](this[_current]));
      }
    }
    (_ReversedSeriesIterator.new = function(list) {
      this[_visitIndex] = JSArrayOfint().of([]);
      this[_current] = null;
      this[_list] = list;
      let categoryAndSeriesIndexMap = new (IdentityMapOfString$ListOfint()).new();
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        categoryAndSeriesIndexMap[$putIfAbsent](list[$_get](i).seriesCategory, dart.fn(() => JSArrayOfint().of([]), VoidToListOfint()))[$add](i);
      }
      categoryAndSeriesIndexMap[$forEach](dart.fn((_, indices) => this[_visitIndex][$addAll](indices[$reversed]), StringAndListOfintTovoid()));
    }).prototype = _ReversedSeriesIterator.prototype;
    dart.addTypeTests(_ReversedSeriesIterator);
    _ReversedSeriesIterator.prototype[_is__ReversedSeriesIterator_default] = true;
    dart.setMethodSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getMethods(_ReversedSeriesIterator.__proto__),
      moveNext: dart.fnType(core.bool, [])
    }));
    dart.setGetterSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterator.__proto__),
      current: S
    }));
    dart.setLibraryUri(_ReversedSeriesIterator, "package:charts_common/src/chart/bar/base_bar_renderer.dart");
    dart.setFieldSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterator.__proto__),
      [_list]: dart.finalFieldType(core.List$(S)),
      [_visitIndex]: dart.finalFieldType(core.List$(core.int)),
      [_current]: dart.fieldType(core.int)
    }));
    return _ReversedSeriesIterator;
  });
  base_bar_renderer._ReversedSeriesIterator = base_bar_renderer._ReversedSeriesIterator$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterator, _is__ReversedSeriesIterator_default);
  let C155;
  let C156;
  let C157;
  let C158;
  let C159;
  let C160;
  dart.defineLazy(base_bar_renderer, {
    /*base_bar_renderer.barGroupIndexKey*/get barGroupIndexKey() {
      return C155 || CT.C155;
    },
    /*base_bar_renderer.barGroupCountKey*/get barGroupCountKey() {
      return C156 || CT.C156;
    },
    /*base_bar_renderer.barGroupWeightKey*/get barGroupWeightKey() {
      return C157 || CT.C157;
    },
    /*base_bar_renderer.previousBarGroupWeightKey*/get previousBarGroupWeightKey() {
      return C158 || CT.C158;
    },
    /*base_bar_renderer.stackKeyKey*/get stackKeyKey() {
      return C159 || CT.C159;
    },
    /*base_bar_renderer.barElementsKey*/get barElementsKey() {
      return C160 || CT.C160;
    }
  });
  const _name$10 = dart.privateName(base_bar_renderer_config, "_name");
  let C161;
  const _is_BaseBarRendererConfig_default = Symbol('_is_BaseBarRendererConfig_default');
  const customRendererId$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.customRendererId");
  const symbolRenderer$1 = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.symbolRenderer");
  const dashPattern$2 = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.dashPattern");
  const groupingType$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.groupingType");
  const layoutPaintOrder$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.layoutPaintOrder");
  const minBarLengthPx$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.minBarLengthPx");
  const fillPattern$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.fillPattern");
  const stackHorizontalSeparator$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.stackHorizontalSeparator");
  const strokeWidthPx$2 = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.strokeWidthPx");
  const weightPattern$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.weightPattern");
  const rendererAttributes = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.rendererAttributes");
  base_bar_renderer_config.BaseBarRendererConfig$ = dart.generic(D => {
    class BaseBarRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$1];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get dashPattern() {
        return this[dashPattern$2];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get groupingType() {
        return this[groupingType$];
      }
      set groupingType(value) {
        super.groupingType = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get minBarLengthPx() {
        return this[minBarLengthPx$];
      }
      set minBarLengthPx(value) {
        super.minBarLengthPx = value;
      }
      get fillPattern() {
        return this[fillPattern$];
      }
      set fillPattern(value) {
        super.fillPattern = value;
      }
      get stackHorizontalSeparator() {
        return this[stackHorizontalSeparator$];
      }
      set stackHorizontalSeparator(value) {
        super.stackHorizontalSeparator = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$2];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get weightPattern() {
        return this[weightPattern$];
      }
      set weightPattern(value) {
        super.weightPattern = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get grouped() {
        return dart.equals(this.groupingType, base_bar_renderer_config.BarGroupingType.grouped) || dart.equals(this.groupingType, base_bar_renderer_config.BarGroupingType.groupedStacked);
      }
      get stacked() {
        return dart.equals(this.groupingType, base_bar_renderer_config.BarGroupingType.stacked) || dart.equals(this.groupingType, base_bar_renderer_config.BarGroupingType.groupedStacked);
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!base_bar_renderer_config.BaseBarRendererConfig.is(other)) {
          return false;
        }
        return dart.equals(dart.dload(other, 'customRendererId'), this.customRendererId) && dart.equals(dart.dload(other, 'dashPattern'), this.dashPattern) && dart.equals(dart.dload(other, 'fillPattern'), this.fillPattern) && dart.equals(dart.dload(other, 'groupingType'), this.groupingType) && dart.equals(dart.dload(other, 'minBarLengthPx'), this.minBarLengthPx) && dart.equals(dart.dload(other, 'stackHorizontalSeparator'), this.stackHorizontalSeparator) && dart.equals(dart.dload(other, 'strokeWidthPx'), this.strokeWidthPx) && dart.equals(dart.dload(other, 'symbolRenderer'), this.symbolRenderer) && dart.test(new equality.ListEquality.new().equals(core.List._check(dart.dload(other, 'weightPattern')), this.weightPattern));
      }
      get hashcode() {
        let t3, t3$, t3$0, t3$1, t3$2, t3$3, t3$4, t3$5, t3$6, t3$7, t3$8, t3$9, t3$10, t3$11, t3$12, t3$13, t3$14, t3$15;
        let hash = 1;
        hash = hash * 31 + dart.notNull((t3$ = (t3 = this.customRendererId, t3 == null ? null : dart.hashCode(t3)), t3$ == null ? 0 : t3$));
        hash = hash * 31 + dart.notNull((t3$1 = (t3$0 = this.dashPattern, t3$0 == null ? null : dart.hashCode(t3$0)), t3$1 == null ? 0 : t3$1));
        hash = hash * 31 + dart.notNull((t3$3 = (t3$2 = this.fillPattern, t3$2 == null ? null : dart.hashCode(t3$2)), t3$3 == null ? 0 : t3$3));
        hash = hash * 31 + dart.notNull((t3$5 = (t3$4 = this.groupingType, t3$4 == null ? null : dart.hashCode(t3$4)), t3$5 == null ? 0 : t3$5));
        hash = hash * 31 + dart.notNull((t3$7 = (t3$6 = this.minBarLengthPx, t3$6 == null ? null : dart.hashCode(t3$6)), t3$7 == null ? 0 : t3$7));
        hash = hash * 31 + dart.notNull((t3$9 = (t3$8 = this.stackHorizontalSeparator, t3$8 == null ? null : dart.hashCode(t3$8)), t3$9 == null ? 0 : t3$9));
        hash = hash * 31 + dart.notNull((t3$11 = (t3$10 = this.strokeWidthPx, t3$10 == null ? null : dart.hashCode(t3$10)), t3$11 == null ? 0 : t3$11));
        hash = hash * 31 + dart.notNull((t3$13 = (t3$12 = this.symbolRenderer, t3$12 == null ? null : dart.hashCode(t3$12)), t3$13 == null ? 0 : t3$13));
        hash = hash * 31 + dart.notNull((t3$15 = (t3$14 = this.weightPattern, t3$14 == null ? null : dart.hashCode(t3$14)), t3$15 == null ? 0 : t3$15));
        return hash;
      }
    }
    (BaseBarRendererConfig.new = function(opts) {
      let t3;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : C161 || CT.C161;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let stackHorizontalSeparator = opts && 'stackHorizontalSeparator' in opts ? opts.stackHorizontalSeparator : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[rendererAttributes] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$] = customRendererId;
      this[dashPattern$2] = dashPattern;
      this[groupingType$] = groupingType;
      this[layoutPaintOrder$] = layoutPaintOrder;
      this[minBarLengthPx$] = minBarLengthPx;
      this[fillPattern$] = fillPattern;
      this[stackHorizontalSeparator$] = stackHorizontalSeparator;
      this[strokeWidthPx$2] = strokeWidthPx;
      this[weightPattern$] = weightPattern;
      this[symbolRenderer$1] = (t3 = symbolRenderer, t3 == null ? new symbol_renderer.RoundedRectSymbolRenderer.new() : t3);
      BaseBarRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = BaseBarRendererConfig.prototype;
    dart.addTypeTests(BaseBarRendererConfig);
    BaseBarRendererConfig.prototype[_is_BaseBarRendererConfig_default] = true;
    BaseBarRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setGetterSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getGetters(BaseBarRendererConfig.__proto__),
      grouped: core.bool,
      stacked: core.bool,
      hashcode: core.int
    }));
    dart.setLibraryUri(BaseBarRendererConfig, "package:charts_common/src/chart/bar/base_bar_renderer_config.dart");
    dart.setFieldSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getFields(BaseBarRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(core.String),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      groupingType: dart.finalFieldType(base_bar_renderer_config.BarGroupingType),
      layoutPaintOrder: dart.finalFieldType(core.int),
      minBarLengthPx: dart.finalFieldType(core.int),
      fillPattern: dart.finalFieldType(chart_canvas.FillPatternType),
      stackHorizontalSeparator: dart.finalFieldType(core.double),
      strokeWidthPx: dart.finalFieldType(core.double),
      weightPattern: dart.finalFieldType(core.List$(core.int)),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes)
    }));
    dart.defineExtensionMethods(BaseBarRendererConfig, ['_equals']);
    return BaseBarRendererConfig;
  });
  base_bar_renderer_config.BaseBarRendererConfig = base_bar_renderer_config.BaseBarRendererConfig$();
  dart.addTypeTests(base_bar_renderer_config.BaseBarRendererConfig, _is_BaseBarRendererConfig_default);
  let C162;
  let C163;
  let C164;
  base_bar_renderer_config.BarGroupingType = class BarGroupingType extends core.Object {
    toString() {
      return this[_name$10];
    }
  };
  (base_bar_renderer_config.BarGroupingType.new = function(index, _name) {
    this.index = index;
    this[_name$10] = _name;
    ;
  }).prototype = base_bar_renderer_config.BarGroupingType.prototype;
  dart.addTypeTests(base_bar_renderer_config.BarGroupingType);
  dart.setLibraryUri(base_bar_renderer_config.BarGroupingType, "package:charts_common/src/chart/bar/base_bar_renderer_config.dart");
  dart.setFieldSignature(base_bar_renderer_config.BarGroupingType, () => ({
    __proto__: dart.getFields(base_bar_renderer_config.BarGroupingType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$10]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(base_bar_renderer_config.BarGroupingType, ['toString']);
  base_bar_renderer_config.BarGroupingType.grouped = C161 || CT.C161;
  base_bar_renderer_config.BarGroupingType.groupedStacked = C162 || CT.C162;
  base_bar_renderer_config.BarGroupingType.stacked = C163 || CT.C163;
  base_bar_renderer_config.BarGroupingType.values = C164 || CT.C164;
  const _is_SeriesRendererConfig_default = Symbol('_is_SeriesRendererConfig_default');
  series_renderer_config.SeriesRendererConfig$ = dart.generic(D => {
    class SeriesRendererConfig extends core.Object {}
    (SeriesRendererConfig.new = function() {
      ;
    }).prototype = SeriesRendererConfig.prototype;
    dart.addTypeTests(SeriesRendererConfig);
    SeriesRendererConfig.prototype[_is_SeriesRendererConfig_default] = true;
    dart.setLibraryUri(SeriesRendererConfig, "package:charts_common/src/chart/common/series_renderer_config.dart");
    return SeriesRendererConfig;
  });
  series_renderer_config.SeriesRendererConfig = series_renderer_config.SeriesRendererConfig$();
  dart.addTypeTests(series_renderer_config.SeriesRendererConfig, _is_SeriesRendererConfig_default);
  const _is_RendererAttributeKey_default = Symbol('_is_RendererAttributeKey_default');
  series_renderer_config.RendererAttributeKey$ = dart.generic(R => {
    class RendererAttributeKey extends typed_registry.TypedKey$(R) {}
    (RendererAttributeKey.new = function(uniqueKey) {
      RendererAttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = RendererAttributeKey.prototype;
    dart.addTypeTests(RendererAttributeKey);
    RendererAttributeKey.prototype[_is_RendererAttributeKey_default] = true;
    dart.setLibraryUri(RendererAttributeKey, "package:charts_common/src/chart/common/series_renderer_config.dart");
    return RendererAttributeKey;
  });
  series_renderer_config.RendererAttributeKey = series_renderer_config.RendererAttributeKey$();
  dart.addTypeTests(series_renderer_config.RendererAttributeKey, _is_RendererAttributeKey_default);
  series_renderer_config.RendererAttributes = class RendererAttributes extends typed_registry.TypedRegistry {};
  (series_renderer_config.RendererAttributes.new = function() {
    series_renderer_config.RendererAttributes.__proto__.new.call(this);
    ;
  }).prototype = series_renderer_config.RendererAttributes.prototype;
  dart.addTypeTests(series_renderer_config.RendererAttributes);
  dart.setLibraryUri(series_renderer_config.RendererAttributes, "package:charts_common/src/chart/common/series_renderer_config.dart");
  math$.clamp = function clamp(value, minValue, maxValue) {
    return math.min(core.num, math.max(core.num, value, minValue), maxValue);
  };
  math$.distanceBetweenPointAndLineSegment = function distanceBetweenPointAndLineSegment(p, v, w) {
    return math.sqrt(math$.distanceBetweenPointAndLineSegmentSquared(p, v, w));
  };
  math$.distanceBetweenPointAndLineSegmentSquared = function distanceBetweenPointAndLineSegmentSquared(p, v, w) {
    let lineLength = v.distanceToSquared(w);
    if (lineLength === 0) {
      return p.distanceToSquared(v);
    }
    let t0 = dart.notNull(p['-'](v).dot(w['-'](v))) / dart.notNull(lineLength);
    t0 = math.max(core.double, 0.0, math.min(core.double, 1.0, t0));
    let projection = v['+'](w['-'](v)['*'](t0));
    return p.distanceToSquared(projection);
  };
  const _is_BarRendererDecorator_default = Symbol('_is_BarRendererDecorator_default');
  bar_renderer_decorator.BarRendererDecorator$ = dart.generic(D => {
    class BarRendererDecorator extends core.Object {}
    (BarRendererDecorator.new = function() {
      ;
    }).prototype = BarRendererDecorator.prototype;
    dart.addTypeTests(BarRendererDecorator);
    BarRendererDecorator.prototype[_is_BarRendererDecorator_default] = true;
    dart.setLibraryUri(BarRendererDecorator, "package:charts_common/src/chart/bar/bar_renderer_decorator.dart");
    return BarRendererDecorator;
  });
  bar_renderer_decorator.BarRendererDecorator = bar_renderer_decorator.BarRendererDecorator$();
  dart.addTypeTests(bar_renderer_decorator.BarRendererDecorator, _is_BarRendererDecorator_default);
  const ConstCornerStrategy_radius = dart.privateName(bar_renderer_config, "ConstCornerStrategy.radius");
  let C165;
  const _is_BarRendererConfig_default = Symbol('_is_BarRendererConfig_default');
  const cornerStrategy$ = dart.privateName(bar_renderer_config, "BarRendererConfig.cornerStrategy");
  const barRendererDecorator$ = dart.privateName(bar_renderer_config, "BarRendererConfig.barRendererDecorator");
  bar_renderer_config.BarRendererConfig$ = dart.generic(D => {
    let BarRendererOfD = () => (BarRendererOfD = dart.constFn(bar_renderer.BarRenderer$(D)))();
    class BarRendererConfig extends base_bar_renderer_config.BaseBarRendererConfig$(D) {
      get cornerStrategy() {
        return this[cornerStrategy$];
      }
      set cornerStrategy(value) {
        super.cornerStrategy = value;
      }
      get barRendererDecorator() {
        return this[barRendererDecorator$];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      build() {
        return BarRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!bar_renderer_config.BarRendererConfig.is(other)) {
          return false;
        }
        return dart.equals(dart.dload(other, 'cornerStrategy'), this.cornerStrategy) && super._equals(other);
      }
      get hashCode() {
        let t3, t3$;
        let hash = super[$hashCode];
        hash = dart.notNull(hash) * 31 + dart.notNull((t3$ = (t3 = this.cornerStrategy, t3 == null ? null : dart.hashCode(t3)), t3$ == null ? 0 : t3$));
        return hash;
      }
    }
    (BarRendererConfig.new = function(opts) {
      let t3, t3$;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let cornerStrategy = opts && 'cornerStrategy' in opts ? opts.cornerStrategy : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let stackHorizontalSeparator = opts && 'stackHorizontalSeparator' in opts ? opts.stackHorizontalSeparator : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let barRendererDecorator = opts && 'barRendererDecorator' in opts ? opts.barRendererDecorator : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[barRendererDecorator$] = barRendererDecorator;
      this[cornerStrategy$] = (t3 = cornerStrategy, t3 == null ? C165 || CT.C165 : t3);
      BarRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, groupingType: (t3$ = groupingType, t3$ == null ? base_bar_renderer_config.BarGroupingType.grouped : t3$), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, fillPattern: fillPattern, stackHorizontalSeparator: stackHorizontalSeparator, strokeWidthPx: strokeWidthPx, symbolRenderer: symbolRenderer, weightPattern: weightPattern});
      ;
    }).prototype = BarRendererConfig.prototype;
    dart.addTypeTests(BarRendererConfig);
    BarRendererConfig.prototype[_is_BarRendererConfig_default] = true;
    dart.setMethodSignature(BarRendererConfig, () => ({
      __proto__: dart.getMethods(BarRendererConfig.__proto__),
      build: dart.fnType(bar_renderer.BarRenderer$(D), [])
    }));
    dart.setLibraryUri(BarRendererConfig, "package:charts_common/src/chart/bar/bar_renderer_config.dart");
    dart.setFieldSignature(BarRendererConfig, () => ({
      __proto__: dart.getFields(BarRendererConfig.__proto__),
      cornerStrategy: dart.finalFieldType(bar_renderer_config.CornerStrategy),
      barRendererDecorator: dart.finalFieldType(bar_renderer_decorator.BarRendererDecorator)
    }));
    dart.defineExtensionMethods(BarRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BarRendererConfig, ['hashCode']);
    return BarRendererConfig;
  });
  bar_renderer_config.BarRendererConfig = bar_renderer_config.BarRendererConfig$();
  dart.addTypeTests(bar_renderer_config.BarRendererConfig, _is_BarRendererConfig_default);
  bar_renderer_config.CornerStrategy = class CornerStrategy extends core.Object {};
  (bar_renderer_config.CornerStrategy.new = function() {
    ;
  }).prototype = bar_renderer_config.CornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.CornerStrategy);
  dart.setLibraryUri(bar_renderer_config.CornerStrategy, "package:charts_common/src/chart/bar/bar_renderer_config.dart");
  bar_renderer_config.ConstCornerStrategy = class ConstCornerStrategy extends core.Object {
    get radius() {
      return this[radius$2];
    }
    set radius(value) {
      super.radius = value;
    }
    getRadius(_) {
      return this.radius;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!bar_renderer_config.ConstCornerStrategy.is(other)) {
        return false;
      }
      return dart.equals(dart.dload(other, 'radius'), this.radius);
    }
    get hashCode() {
      return dart.hashCode(this.radius);
    }
  };
  (bar_renderer_config.ConstCornerStrategy.new = function(radius) {
    this[radius$2] = radius;
    ;
  }).prototype = bar_renderer_config.ConstCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.ConstCornerStrategy);
  const radius$2 = ConstCornerStrategy_radius;
  bar_renderer_config.ConstCornerStrategy[dart.implements] = () => [bar_renderer_config.CornerStrategy];
  dart.setMethodSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getMethods(bar_renderer_config.ConstCornerStrategy.__proto__),
    getRadius: dart.fnType(core.int, [core.int])
  }));
  dart.setLibraryUri(bar_renderer_config.ConstCornerStrategy, "package:charts_common/src/chart/bar/bar_renderer_config.dart");
  dart.setFieldSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getFields(bar_renderer_config.ConstCornerStrategy.__proto__),
    radius: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(bar_renderer_config.ConstCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.ConstCornerStrategy, ['hashCode']);
  bar_renderer_config.NoCornerStrategy = class NoCornerStrategy extends bar_renderer_config.ConstCornerStrategy {
    _equals(other) {
      if (other == null) return false;
      return bar_renderer_config.NoCornerStrategy.is(other) ? true : false;
    }
    get hashCode() {
      return 31;
    }
  };
  (bar_renderer_config.NoCornerStrategy.new = function() {
    bar_renderer_config.NoCornerStrategy.__proto__.new.call(this, 0);
    ;
  }).prototype = bar_renderer_config.NoCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.NoCornerStrategy);
  dart.setLibraryUri(bar_renderer_config.NoCornerStrategy, "package:charts_common/src/chart/bar/bar_renderer_config.dart");
  dart.defineExtensionMethods(bar_renderer_config.NoCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.NoCornerStrategy, ['hashCode']);
  const _listener = dart.privateName(lock_selection, "_listener");
  const _chart = dart.privateName(lock_selection, "_chart");
  const _onTapTest = dart.privateName(lock_selection, "_onTapTest");
  const _onSelect = dart.privateName(lock_selection, "_onSelect");
  const _name$11 = dart.privateName(selection_trigger, "_name");
  let C166;
  let C167;
  let C168;
  let C169;
  let C170;
  const _is_LockSelection_default = Symbol('_is_LockSelection_default');
  const selectionModelType$ = dart.privateName(lock_selection, "LockSelection.selectionModelType");
  const eventTrigger = dart.privateName(lock_selection, "LockSelection.eventTrigger");
  lock_selection.LockSelection$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class LockSelection extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get eventTrigger() {
        return this[eventTrigger];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      [_onTapTest](chartPoint) {
        return this[_chart].pointWithinRenderer(chartPoint);
      }
      [_onSelect](chartPoint, ignored) {
        if (ignored === void 0) ignored = null;
        if (!dart.test(this[_chart].pointWithinRenderer(chartPoint))) {
          return false;
        }
        let selectionModel = this[_chart].getSelectionModel(this.selectionModelType);
        if (selectionModel == null) {
          return false;
        }
        if (!dart.test(selectionModel.locked) && !dart.test(selectionModel.hasAnySelection)) {
          return false;
        }
        selectionModel.locked = !dart.test(selectionModel.locked);
        if (!dart.test(selectionModel.locked)) {
          selectionModel.clearSelection();
        }
        return false;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart] = chart;
        chart.addGestureListener(this[_listener]);
        switch (this.eventTrigger) {
          case C166 || CT.C166:
          case C167 || CT.C167:
          case C168 || CT.C168:
          case C169 || CT.C169:
          {
            chart.registerTappable(this);
            break;
          }
          case C170 || CT.C170:
          default:
          {
            chart.unregisterTappable(this);
            break;
          }
        }
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeGestureListener(this[_listener]);
        chart.unregisterTappable(this);
        this[_chart] = null;
      }
      get role() {
        return "LockSelection-" + dart.str(dart.toString(this.selectionModelType)) + "}";
      }
    }
    (LockSelection.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C136 || CT.C136;
      this[_listener] = null;
      this[eventTrigger] = selection_trigger.SelectionTrigger.tap;
      this[_chart] = null;
      this[selectionModelType$] = selectionModelType;
      switch (this.eventTrigger) {
        case C166 || CT.C166:
        {
          this[_listener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest), onTap: dart.bind(this, _onSelect)});
          break;
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("LockSelection does not support the event " + "trigger \"" + dart.str(this.eventTrigger) + "\""));
          break;
        }
      }
    }).prototype = LockSelection.prototype;
    dart.addTypeTests(LockSelection);
    LockSelection.prototype[_is_LockSelection_default] = true;
    LockSelection[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(LockSelection, () => ({
      __proto__: dart.getMethods(LockSelection.__proto__),
      [_onTapTest]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onSelect]: dart.fnType(core.bool, [math.Point$(core.double)], [core.double]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(LockSelection, () => ({
      __proto__: dart.getGetters(LockSelection.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(LockSelection, "package:charts_common/src/chart/common/behavior/selection/lock_selection.dart");
    dart.setFieldSignature(LockSelection, () => ({
      __proto__: dart.getFields(LockSelection.__proto__),
      [_listener]: dart.fieldType(gesture_listener.GestureListener),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      [_chart]: dart.fieldType(base_chart.BaseChart$(D))
    }));
    return LockSelection;
  });
  lock_selection.LockSelection = lock_selection.LockSelection$();
  dart.addTypeTests(lock_selection.LockSelection, _is_LockSelection_default);
  let C171;
  selection_trigger.SelectionTrigger = class SelectionTrigger extends core.Object {
    toString() {
      return this[_name$11];
    }
  };
  (selection_trigger.SelectionTrigger.new = function(index, _name) {
    this.index = index;
    this[_name$11] = _name;
    ;
  }).prototype = selection_trigger.SelectionTrigger.prototype;
  dart.addTypeTests(selection_trigger.SelectionTrigger);
  dart.setLibraryUri(selection_trigger.SelectionTrigger, "package:charts_common/src/chart/common/behavior/selection/selection_trigger.dart");
  dart.setFieldSignature(selection_trigger.SelectionTrigger, () => ({
    __proto__: dart.getFields(selection_trigger.SelectionTrigger.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$11]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(selection_trigger.SelectionTrigger, ['toString']);
  selection_trigger.SelectionTrigger.hover = C170 || CT.C170;
  selection_trigger.SelectionTrigger.tap = C166 || CT.C166;
  selection_trigger.SelectionTrigger.tapAndDrag = C167 || CT.C167;
  selection_trigger.SelectionTrigger.pressHold = C168 || CT.C168;
  selection_trigger.SelectionTrigger.longPressHold = C169 || CT.C169;
  selection_trigger.SelectionTrigger.values = C171 || CT.C171;
  let C172;
  const dateTimeFactory$0 = dart.privateName(time_series_chart, "TimeSeriesChart.dateTimeFactory");
  time_series_chart.TimeSeriesChart = class TimeSeriesChart extends cartesian_chart.CartesianChart$(core.DateTime) {
    get dateTimeFactory() {
      return this[dateTimeFactory$0];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    initDomainAxis() {
      this.domainAxis.tickDrawStrategy = new (SmallTickRendererSpecOfDateTime()).new().createDrawStrategy(this.context, this.graphicsFactory);
    }
    makeDefaultRenderer() {
      let t3;
      t3 = LineRendererOfDateTime().new();
      t3.rendererId = "default";
      return t3;
    }
    createDomainAxisFromSpec(axisSpec) {
      AxisSpecOfDateTime()._check(axisSpec);
      return date_time_axis_spec.DateTimeAxisSpec.as(axisSpec).createDateTimeAxis(this.dateTimeFactory);
    }
  };
  (time_series_chart.TimeSeriesChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    let dateTimeFactory = opts && 'dateTimeFactory' in opts ? opts.dateTimeFactory : C172 || CT.C172;
    this[dateTimeFactory$0] = dateTimeFactory;
    time_series_chart.TimeSeriesChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new date_time_axis.DateTimeAxis.new(dateTimeFactory), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = time_series_chart.TimeSeriesChart.prototype;
  dart.addTypeTests(time_series_chart.TimeSeriesChart);
  dart.setMethodSignature(time_series_chart.TimeSeriesChart, () => ({
    __proto__: dart.getMethods(time_series_chart.TimeSeriesChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(time_series_chart.TimeSeriesChart, "package:charts_common/src/chart/time_series/time_series_chart.dart");
  dart.setFieldSignature(time_series_chart.TimeSeriesChart, () => ({
    __proto__: dart.getFields(time_series_chart.TimeSeriesChart.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory)
  }));
  const _pointRenderer = dart.privateName(line_renderer, "_pointRenderer");
  const _chart$ = dart.privateName(line_renderer, "_chart");
  const _hasMeasureBounds = dart.privateName(line_renderer, "_hasMeasureBounds");
  const _seriesLineMap = dart.privateName(line_renderer, "_seriesLineMap");
  const _currentKeys$ = dart.privateName(line_renderer, "_currentKeys");
  const _createInitialOffsetMap = dart.privateName(line_renderer, "_createInitialOffsetMap");
  const _createStackedMeasureOffsetFunction = dart.privateName(line_renderer, "_createStackedMeasureOffsetFunction");
  const _mergeIntoSeriesMap = dart.privateName(line_renderer, "_mergeIntoSeriesMap");
  const _createLineAndAreaElements = dart.privateName(line_renderer, "_createLineAndAreaElements");
  const _createPointListForSeries = dart.privateName(line_renderer, "_createPointListForSeries");
  const _createLineAndAreaSegmentsForSeries = dart.privateName(line_renderer, "_createLineAndAreaSegmentsForSeries");
  const _createPositionExtent = dart.privateName(line_renderer, "_createPositionExtent");
  const _getPoint = dart.privateName(line_renderer, "_getPoint");
  const _createLineSegment = dart.privateName(line_renderer, "_createLineSegment");
  const _createAreaSegment = dart.privateName(line_renderer, "_createAreaSegment");
  const _createBoundsSegment = dart.privateName(line_renderer, "_createBoundsSegment");
  const _getClipBoundsForExtent = dart.privateName(line_renderer, "_getClipBoundsForExtent");
  const _is_LineRenderer_default = Symbol('_is_LineRenderer_default');
  const config$1 = dart.privateName(line_renderer, "LineRenderer.config");
  line_renderer.LineRenderer$ = dart.generic(D => {
    let _AnimatedElementsOfD = () => (_AnimatedElementsOfD = dart.constFn(line_renderer._AnimatedElements$(D)))();
    let ListOf_AnimatedElementsOfD = () => (ListOf_AnimatedElementsOfD = dart.constFn(core.List$(_AnimatedElementsOfD())))();
    let IdentityMapOfString$ListOf_AnimatedElementsOfD = () => (IdentityMapOfString$ListOf_AnimatedElementsOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOf_AnimatedElementsOfD())))();
    let PointRendererOfD = () => (PointRendererOfD = dart.constFn(point_renderer.PointRenderer$(D)))();
    let PointRendererConfigOfD = () => (PointRendererConfigOfD = dart.constFn(point_renderer_config.PointRendererConfig$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    let _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    let JSArrayOf_LineRendererElementOfD = () => (JSArrayOf_LineRendererElementOfD = dart.constFn(_interceptors.JSArray$(_LineRendererElementOfD())))();
    let _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let LinkedMapOfD$num = () => (LinkedMapOfD$num = dart.constFn(_js_helper.LinkedMap$(D, core.num)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let MapEntryOfString$ListOf_AnimatedElementsOfD = () => (MapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(core.MapEntry$(core.String, ListOf_AnimatedElementsOfD())))();
    let JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD = () => (JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(MapEntryOfString$ListOf_AnimatedElementsOfD())))();
    let ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    let JSArrayOf_AnimatedElementsOfD = () => (JSArrayOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(_AnimatedElementsOfD())))();
    let ImmutableSeriesOfDToNull = () => (ImmutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesOfD()])))();
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    let JSArrayOfListOf_DatumPointOfD = () => (JSArrayOfListOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(ListOf_DatumPointOfD())))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    let _AnimatedLineOfD = () => (_AnimatedLineOfD = dart.constFn(line_renderer._AnimatedLine$(D)))();
    let JSArrayOf_AnimatedLineOfD = () => (JSArrayOf_AnimatedLineOfD = dart.constFn(_interceptors.JSArray$(_AnimatedLineOfD())))();
    let _AnimatedAreaOfD = () => (_AnimatedAreaOfD = dart.constFn(line_renderer._AnimatedArea$(D)))();
    let JSArrayOf_AnimatedAreaOfD = () => (JSArrayOf_AnimatedAreaOfD = dart.constFn(_interceptors.JSArray$(_AnimatedAreaOfD())))();
    let _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    let StringAndListOf_AnimatedElementsOfDToNull = () => (StringAndListOf_AnimatedElementsOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOf_AnimatedElementsOfD()])))();
    let JSArrayOf_AreaRendererElementOfD = () => (JSArrayOf_AreaRendererElementOfD = dart.constFn(_interceptors.JSArray$(_AreaRendererElementOfD())))();
    let _DatumPointOfDTo_DatumPointOfD = () => (_DatumPointOfDTo_DatumPointOfD = dart.constFn(dart.fnType(_DatumPointOfD(), [_DatumPointOfD()])))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let _AnimatedElementsOfDTobool = () => (_AnimatedElementsOfDTobool = dart.constFn(dart.fnType(core.bool, [_AnimatedElementsOfD()])))();
    let ListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfD = dart.constFn(core.List$(_AnimatedAreaOfD())))();
    let _AnimatedElementsOfDToListOf_AnimatedAreaOfD = () => (_AnimatedElementsOfDToListOf_AnimatedAreaOfD = dart.constFn(dart.fnType(ListOf_AnimatedAreaOfD(), [_AnimatedElementsOfD()])))();
    let ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD = dart.constFn(dart.fnType(ListOf_AnimatedAreaOfD(), [ListOf_AnimatedAreaOfD()])))();
    let _AnimatedAreaOfDTo_AreaRendererElementOfD = () => (_AnimatedAreaOfDTo_AreaRendererElementOfD = dart.constFn(dart.fnType(_AreaRendererElementOfD(), [_AnimatedAreaOfD()])))();
    let ListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfD = dart.constFn(core.List$(_AnimatedLineOfD())))();
    let _AnimatedElementsOfDToListOf_AnimatedLineOfD = () => (_AnimatedElementsOfDToListOf_AnimatedLineOfD = dart.constFn(dart.fnType(ListOf_AnimatedLineOfD(), [_AnimatedElementsOfD()])))();
    let ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD = dart.constFn(dart.fnType(ListOf_AnimatedLineOfD(), [ListOf_AnimatedLineOfD()])))();
    let _AnimatedLineOfDTo_LineRendererElementOfD = () => (_AnimatedLineOfDTo_LineRendererElementOfD = dart.constFn(dart.fnType(_LineRendererElementOfD(), [_AnimatedLineOfD()])))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let _AnimatedElementsOfDToNull = () => (_AnimatedElementsOfDToNull = dart.constFn(dart.fnType(core.Null, [_AnimatedElementsOfD()])))();
    let ListOf_AnimatedElementsOfDToNull = () => (ListOf_AnimatedElementsOfDToNull = dart.constFn(dart.fnType(core.Null, [ListOf_AnimatedElementsOfD()])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    class LineRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[config$1];
      }
      set config(value) {
        super.config = value;
      }
      static new(opts) {
        let t3, t3$;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        let config = opts && 'config' in opts ? opts.config : null;
        return new (line_renderer.LineRenderer$(D))._internal({rendererId: (t3 = rendererId, t3 == null ? "line" : t3), config: (t3$ = config, t3$ == null ? new line_renderer_config.LineRendererConfig.new() : t3$)});
      }
      layout(componentBounds, drawAreaBounds) {
        super.layout(componentBounds, drawAreaBounds);
        if (dart.test(this.config.includePoints)) {
          this[_pointRenderer].layout(componentBounds, drawAreaBounds);
        }
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
        seriesList[$forEach](dart.fn(series => {
          let t3;
          t3 = series;
          t3.areaColorFn == null ? t3.areaColorFn = dart.fn(index => {
            let color = series.colorFn(index);
            return new color$.Color.new({r: color.r, g: color.g, b: color.b, a: (dart.notNull(color.a) * dart.notNull(this.config.areaOpacity))[$round]()});
          }, intToColor()) : null;
        }, MutableSeriesToNull()));
        if (dart.test(this.config.includePoints)) {
          this[_pointRenderer].configureSeries(seriesList);
        }
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let stackIndex = 0;
        this[_hasMeasureBounds] = seriesList[$any](dart.fn(series => series.measureUpperBoundFn != null && series.measureLowerBoundFn != null, MutableSeriesOfDTobool()));
        seriesList[$forEach](dart.fn(series => {
          let t3, t3$;
          let colorFn = series.colorFn;
          let areaColorFn = series.areaColorFn;
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let strokeWidthPxFn = series.strokeWidthPxFn;
          t3 = series;
          t3.dashPatternFn == null ? t3.dashPatternFn = dart.fn(_ => this.config.dashPattern, intToListOfint()) : null;
          let dashPatternFn = series.dashPatternFn;
          let styleSegments = JSArrayOf_LineRendererElementOfD().of([]);
          let styleSegmentsIndex = 0;
          let usedKeys = new (_IdentityHashSetOfString()).new();
          let previousSegmentKey = null;
          let currentDetails = null;
          for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
            let domain = domainFn(index);
            let measure = measureFn(index);
            if (domain == null || measure == null) {
              continue;
            }
            let color = colorFn(index);
            let areaColor = areaColorFn(index);
            let dashPattern = dashPatternFn(index);
            let strokeWidthPx = strokeWidthPxFn != null ? strokeWidthPxFn(index)[$toDouble]() : this.config.strokeWidthPx;
            let strokeWidthPxRounded = (dart.notNull(strokeWidthPx) * 100)[$round]() / 100;
            let styleKey = dart.str(series.id) + "__" + dart.str(styleSegmentsIndex) + "__" + dart.str(color) + "__" + dart.str(dashPattern) + "__" + dart.str(strokeWidthPxRounded);
            if (styleKey !== previousSegmentKey) {
              if (dart.test(usedKeys[$isNotEmpty]) && dart.test(usedKeys.contains(styleKey))) {
                styleSegmentsIndex = styleSegmentsIndex + 1;
                styleKey = dart.str(series.id) + "__" + dart.str(styleSegmentsIndex) + "__" + dart.str(color) + "__" + dart.str(dashPattern) + "__" + dart.str(strokeWidthPxRounded);
              }
              if (currentDetails != null) {
                currentDetails.domainExtent.includePoint(domain);
              }
              currentDetails = (t3$ = new (_LineRendererElementOfD()).new(), t3$.color = color, t3$.areaColor = areaColor, t3$.dashPattern = dashPattern, t3$.domainExtent = new (_RangeOfD()).new(domain, domain), t3$.strokeWidthPx = strokeWidthPx, t3$.styleKey = styleKey, t3$.roundEndCaps = this.config.roundEndCaps, t3$);
              styleSegments[$add](currentDetails);
              usedKeys.add(styleKey);
              previousSegmentKey = styleKey;
            } else {
              currentDetails.domainExtent.includePoint(domain);
            }
          }
          series.setAttr(ListOf_LineRendererElement(), line_renderer.styleSegmentsKey, styleSegments);
          series.setAttr(core.int, line_renderer.lineStackIndexKey, stackIndex);
          if (dart.test(this.config.stacked)) {
            stackIndex = stackIndex + 1;
          }
        }, MutableSeriesOfDToNull()));
        if (dart.test(this.config.includePoints)) {
          this[_pointRenderer].preprocessSeries(seriesList);
        }
        if (dart.test(this.config.stacked) && dart.test(seriesList[$isNotEmpty])) {
          let curOffsets = this[_createInitialOffsetMap](seriesList[$_get](0));
          let nextOffsets = new (LinkedMapOfD$num()).new();
          for (let i = 0; i < dart.notNull(seriesList[$length]); i = i + 1) {
            let series = seriesList[$_get](i);
            let measureOffsetFn = this[_createStackedMeasureOffsetFunction](series, curOffsets, nextOffsets);
            if (i > 0) {
              series.measureOffsetFn = intTonum()._check(measureOffsetFn);
            }
            curOffsets = nextOffsets;
            nextOffsets = new (LinkedMapOfD$num()).new();
          }
        }
      }
      [_createInitialOffsetMap](series) {
        let domainFn = series.domainFn;
        let measureOffsetFn = series.measureOffsetFn;
        let initialOffsets = new (LinkedMapOfD$num()).new();
        for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
          initialOffsets[$_set](domainFn(index), measureOffsetFn(index));
        }
        return initialOffsets;
      }
      [_createStackedMeasureOffsetFunction](series, curOffsets, nextOffsets) {
        let domainFn = series.domainFn;
        let measureFn = series.measureFn;
        for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
          let domainValue = domainFn(index);
          let measure = measureFn(index);
          let prevOffset = curOffsets[$_get](domainValue);
          if (measure != null && prevOffset != null) {
            nextOffsets[$_set](domainValue, dart.notNull(measure) + dart.notNull(prevOffset));
          }
        }
        return dart.fn(i => curOffsets[$_get](domainFn(i)), intTonum());
      }
      [_mergeIntoSeriesMap](seriesList) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        let newLineMap = JSArrayOfMapEntryOfString$ListOf_AnimatedElementsOfD().of([]);
        seriesList[$forEach](dart.fn(series => {
          let key = series.id;
          let checkNext = true;
          while (checkNext && dart.test(this[_seriesLineMap][$isNotEmpty])) {
            let firstKey = this[_seriesLineMap][$keys][$first];
            if (!dart.test(seriesList[$any](dart.fn(s => s.id == firstKey, ImmutableSeriesOfDTobool())))) {
              newLineMap[$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(firstKey, this[_seriesLineMap][$remove](firstKey)));
              checkNext = true;
            } else {
              checkNext = false;
            }
          }
          if (!dart.test(this[_seriesLineMap][$containsKey](key))) {
            newLineMap[$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, JSArrayOf_AnimatedElementsOfD().of([])));
          } else {
            newLineMap[$add](new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, this[_seriesLineMap][$remove](key)));
          }
        }, ImmutableSeriesOfDToNull()));
        newLineMap[$addAll](this[_seriesLineMap][$entries]);
        this[_seriesLineMap][$clear]();
        this[_seriesLineMap][$addEntries](newLineMap);
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        this[_currentKeys$][$clear]();
        let previousPointList = JSArrayOfListOf_DatumPointOfD().of([]);
        let previousInitialPointList = JSArrayOfListOf_DatumPointOfD().of([]);
        this[_mergeIntoSeriesMap](seriesList);
        seriesList[$forEach](dart.fn(series => {
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
          let lineKey = series.id;
          let stackIndex = series.getAttr(core.int, line_renderer.lineStackIndexKey);
          previousPointList[$add](JSArrayOf_DatumPointOfD().of([]));
          previousInitialPointList[$add](JSArrayOf_DatumPointOfD().of([]));
          let elementsList = this[_seriesLineMap][$_get](lineKey);
          let styleSegments = series.getAttr(ListOf_LineRendererElement(), line_renderer.styleSegmentsKey);
          if (dart.test(styleSegments[$isNotEmpty]) && !axis$.OrdinalAxis.is(domainAxis)) {
            let startPx = (dart.test(this.isRtl) ? this.drawBounds[$right] : this.drawBounds[$left])[$toDouble]();
            let endPx = (dart.test(this.isRtl) ? this.drawBounds[$left] : this.drawBounds[$right])[$toDouble]();
            let startDomain = domainAxis.getDomain(startPx);
            let endDomain = domainAxis.getDomain(endPx);
            styleSegments[$first].domainExtent.includePoint(startDomain);
            styleSegments[$last].domainExtent.includePoint(endDomain);
          }
          styleSegments[$forEach](dart.fn(styleSegment => {
            let t3, t3$, t3$0, t3$1;
            let styleKey = styleSegment.styleKey;
            let animatingElements = elementsList[$firstWhere](dart.fn(elements => elements.styleKey == styleKey, _AnimatedElementsTobool()), {orElse: dart.fn(() => null, VoidToNull())});
            if (animatingElements != null) {
              previousInitialPointList[$_set](stackIndex, animatingElements.allPoints);
            } else {
              let lineAndArea = this[_createLineAndAreaElements](series, styleSegment, dart.notNull(stackIndex) > 0 ? previousInitialPointList[$_get](dart.notNull(stackIndex) - 1) : null, true);
              let lineElementList = lineAndArea[$_get](0);
              let areaElementList = lineAndArea[$_get](1);
              let allPointList = lineAndArea[$_get](2);
              let boundsElementList = lineAndArea[$_get](3);
              let animatingLines = JSArrayOf_AnimatedLineOfD().of([]);
              for (let index = 0; index < dart.notNull(core.num._check(dart.dload(lineElementList, 'length'))); index = index + 1) {
                animatingLines[$add]((t3 = new (_AnimatedLineOfD()).new({key: core.String._check(dart.dload(dart.dsend(lineElementList, '_get', [index]), 'styleKey')), overlaySeries: series.overlaySeries}), t3.setNewTarget(_LineRendererElementOfD()._check(dart.dsend(lineElementList, '_get', [index]))), t3));
              }
              let animatingAreas = null;
              if (dart.test(this.config.includeArea)) {
                animatingAreas = JSArrayOf_AnimatedAreaOfD().of([]);
                for (let index = 0; index < dart.notNull(core.num._check(dart.dload(areaElementList, 'length'))); index = index + 1) {
                  animatingAreas[$add]((t3$ = new (_AnimatedAreaOfD()).new({key: core.String._check(dart.dload(dart.dsend(areaElementList, '_get', [index]), 'styleKey')), overlaySeries: series.overlaySeries}), t3$.setNewTarget(_AreaRendererElementOfD()._check(dart.dsend(areaElementList, '_get', [index]))), t3$));
                }
              }
              let animatingBounds = null;
              if (dart.test(this[_hasMeasureBounds])) {
                animatingBounds == null ? animatingBounds = JSArrayOf_AnimatedAreaOfD().of([]) : null;
                for (let index = 0; index < dart.notNull(core.num._check(dart.dload(boundsElementList, 'length'))); index = index + 1) {
                  animatingBounds[$add]((t3$0 = new (_AnimatedAreaOfD()).new({key: core.String._check(dart.dload(dart.dsend(boundsElementList, '_get', [index]), 'styleKey')), overlaySeries: series.overlaySeries}), t3$0.setNewTarget(_AreaRendererElementOfD()._check(dart.dsend(boundsElementList, '_get', [index]))), t3$0));
                }
              }
              animatingElements = (t3$1 = new (_AnimatedElementsOfD()).new(), t3$1.styleKey = styleSegment.styleKey, t3$1.allPoints = ListOf_DatumPointOfD()._check(allPointList), t3$1.lines = animatingLines, t3$1.areas = animatingAreas, t3$1.bounds = animatingBounds, t3$1);
              elementsList[$add](animatingElements);
              previousInitialPointList[$_set](stackIndex, ListOf_DatumPointOfD()._check(allPointList));
            }
            let lineAndArea = this[_createLineAndAreaElements](series, styleSegment, dart.notNull(stackIndex) > 0 ? previousPointList[$_get](dart.notNull(stackIndex) - 1) : null, false);
            let lineElementList = lineAndArea[$_get](0);
            let areaElementList = lineAndArea[$_get](1);
            let allPointList = lineAndArea[$_get](2);
            let boundsElementList = lineAndArea[$_get](3);
            for (let index = 0; index < dart.notNull(core.num._check(dart.dload(lineElementList, 'length'))); index = index + 1) {
              let lineElement = dart.dsend(lineElementList, '_get', [index]);
              if (index >= dart.notNull(animatingElements.lines[$length])) {
                animatingElements.lines[$add](new (_AnimatedLineOfD()).new({key: core.String._check(dart.dload(lineElement, 'styleKey')), overlaySeries: series.overlaySeries}));
              }
              animatingElements.lines[$_get](index).setNewTarget(_LineRendererElementOfD()._check(lineElement));
            }
            if (dart.test(this.config.includeArea)) {
              for (let index = 0; index < dart.notNull(core.num._check(dart.dload(areaElementList, 'length'))); index = index + 1) {
                let areaElement = dart.dsend(areaElementList, '_get', [index]);
                if (index >= dart.notNull(animatingElements.areas[$length])) {
                  animatingElements.areas[$add](new (_AnimatedAreaOfD()).new({key: core.String._check(dart.dload(areaElement, 'styleKey')), overlaySeries: series.overlaySeries}));
                }
                animatingElements.areas[$_get](index).setNewTarget(_AreaRendererElementOfD()._check(areaElement));
              }
            }
            if (dart.test(this[_hasMeasureBounds])) {
              for (let index = 0; index < dart.notNull(core.num._check(dart.dload(boundsElementList, 'length'))); index = index + 1) {
                let boundElement = dart.dsend(boundsElementList, '_get', [index]);
                if (index >= dart.notNull(animatingElements.bounds[$length])) {
                  animatingElements.bounds[$add](new (_AnimatedAreaOfD()).new({key: core.String._check(dart.dload(boundElement, 'styleKey')), overlaySeries: series.overlaySeries}));
                }
                animatingElements.bounds[$_get](index).setNewTarget(_AreaRendererElementOfD()._check(boundElement));
              }
            }
            animatingElements.allPoints = ListOf_DatumPointOfD()._check(allPointList);
            previousPointList[$_set](stackIndex, ListOf_DatumPointOfD()._check(allPointList));
          }, _LineRendererElementToNull()));
        }, ImmutableSeriesOfDToNull()));
        this[_seriesLineMap][$forEach](dart.fn((key, elements) => {
          for (let element of elements) {
            if (element.lines != null) {
              for (let line of element.lines) {
                if (!dart.equals(this[_currentKeys$][$contains](line.key), true)) {
                  line.animateOut();
                }
              }
            }
            if (element.areas != null) {
              for (let area of element.areas) {
                if (!dart.equals(this[_currentKeys$][$contains](area.key), true)) {
                  area.animateOut();
                }
              }
            }
            if (element.bounds != null) {
              for (let bound of element.bounds) {
                if (!dart.equals(this[_currentKeys$][$contains](bound.key), true)) {
                  bound.animateOut();
                }
              }
            }
          }
        }, StringAndListOf_AnimatedElementsOfDToNull()));
        if (dart.test(this.config.includePoints)) {
          this[_pointRenderer].update(seriesList, isAnimatingThisDraw);
        }
      }
      [_createLineAndAreaElements](series, styleSegment, previousPointList, initializeFromZero) {
        let t3, t3$, t3$0;
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let color = styleSegment.color;
        let areaColor = styleSegment.areaColor;
        let dashPattern = styleSegment.dashPattern;
        let domainExtent = styleSegment.domainExtent;
        let strokeWidthPx = styleSegment.strokeWidthPx;
        let styleKey = styleSegment.styleKey;
        let roundEndCaps = styleSegment.roundEndCaps;
        let pointList = this[_createPointListForSeries](series, initializeFromZero);
        let segmentsList = this[_createLineAndAreaSegmentsForSeries](pointList, previousPointList, series, initializeFromZero);
        let lineSegments = segmentsList[$_get](0);
        let areaSegments = segmentsList[$_get](1);
        let boundsSegment = segmentsList[$_get](2);
        this[_currentKeys$][$add](styleKey);
        let positionExtent = this[_createPositionExtent](series, styleSegment);
        let lineElements = JSArrayOf_LineRendererElementOfD().of([]);
        for (let index = 0; index < dart.notNull(core.num._check(dart.dload(lineSegments, 'length'))); index = index + 1) {
          let linePointList = dart.dsend(lineSegments, '_get', [index]);
          let lineStyleKey = dart.str(styleKey) + "__line__" + dart.str(index);
          this[_currentKeys$][$add](lineStyleKey);
          lineElements[$add]((t3 = new (_LineRendererElementOfD()).new(), t3.points = ListOf_DatumPointOfD()._check(linePointList), t3.color = color, t3.areaColor = areaColor, t3.dashPattern = dashPattern, t3.domainExtent = _RangeOfD()._check(domainExtent), t3.measureAxisPosition = measureAxis.getLocation(0.0), t3.positionExtent = positionExtent, t3.strokeWidthPx = strokeWidthPx, t3.styleKey = lineStyleKey, t3.roundEndCaps = roundEndCaps, t3));
        }
        let areaElements = JSArrayOf_AreaRendererElementOfD().of([]);
        if (dart.test(this.config.includeArea)) {
          for (let index = 0; index < dart.notNull(core.num._check(dart.dload(areaSegments, 'length'))); index = index + 1) {
            let areaPointList = dart.dsend(areaSegments, '_get', [index]);
            let areaStyleKey = dart.str(styleKey) + "__area_" + dart.str(index);
            this[_currentKeys$][$add](areaStyleKey);
            areaElements[$add]((t3$ = new (_AreaRendererElementOfD()).new(), t3$.points = ListOf_DatumPointOfD()._check(areaPointList), t3$.color = color, t3$.areaColor = areaColor, t3$.domainExtent = _RangeOfD()._check(domainExtent), t3$.measureAxisPosition = measureAxis.getLocation(0.0), t3$.positionExtent = positionExtent, t3$.styleKey = areaStyleKey, t3$));
          }
        }
        let boundsElements = JSArrayOf_AreaRendererElementOfD().of([]);
        if (dart.test(this[_hasMeasureBounds])) {
          for (let index = 0; index < dart.notNull(core.num._check(dart.dload(boundsSegment, 'length'))); index = index + 1) {
            let boundsPointList = dart.dsend(boundsSegment, '_get', [index]);
            let boundsStyleKey = dart.str(styleKey) + "__bounds_" + dart.str(index);
            this[_currentKeys$][$add](boundsStyleKey);
            boundsElements[$add]((t3$0 = new (_AreaRendererElementOfD()).new(), t3$0.points = ListOf_DatumPointOfD()._check(boundsPointList), t3$0.color = color, t3$0.areaColor = areaColor, t3$0.domainExtent = _RangeOfD()._check(domainExtent), t3$0.measureAxisPosition = measureAxis.getLocation(0.0), t3$0.positionExtent = positionExtent, t3$0.styleKey = boundsStyleKey, t3$0));
          }
        }
        return [lineElements, areaElements, pointList, boundsElements];
      }
      [_createPointListForSeries](series, initializeFromZero) {
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let domainFn = series.domainFn;
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let measureFn = series.measureFn;
        let measureOffsetFn = series.measureOffsetFn;
        let pointList = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
          let datum = series.data[$_get](index);
          let measure = measureFn(index);
          if (measure != null && dart.test(initializeFromZero)) {
            measure = 0.0;
          }
          let measureOffset = measureOffsetFn(index);
          if (measureOffset != null && dart.test(initializeFromZero)) {
            measureOffset = 0.0;
          }
          pointList[$add](this[_getPoint](datum, domainFn(index), series, domainAxis, measure, measureOffset, measureAxis, {index: index}));
        }
        return pointList;
      }
      [_createLineAndAreaSegmentsForSeries](pointList, previousPointList, series, initializeFromZero) {
        let lineSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let areaSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let boundsSegments = JSArrayOfListOf_DatumPointOfD().of([]);
        let startPointIndex = null;
        let endPointIndex = null;
        let seriesHasMeasureBounds = series.measureUpperBoundFn != null && series.measureLowerBoundFn != null;
        for (let index = 0; index < dart.notNull(pointList[$length]); index = index + 1) {
          let point = pointList[$_get](index);
          if (point.y == null) {
            if (startPointIndex == null) {
              continue;
            }
            lineSegments[$add](this[_createLineSegment](startPointIndex, endPointIndex, pointList));
            if (startPointIndex != endPointIndex) {
              if (dart.test(this.config.includeArea)) {
                areaSegments[$add](this[_createAreaSegment](startPointIndex, endPointIndex, pointList, previousPointList, series, initializeFromZero));
              }
              if (seriesHasMeasureBounds) {
                boundsSegments[$add](this[_createBoundsSegment](pointList[$sublist](startPointIndex, dart.notNull(endPointIndex) + 1), series, initializeFromZero));
              }
            }
            startPointIndex = null;
            endPointIndex = null;
            continue;
          }
          startPointIndex == null ? startPointIndex = index : null;
          endPointIndex = index;
        }
        if (startPointIndex != null && endPointIndex != null) {
          lineSegments[$add](this[_createLineSegment](startPointIndex, endPointIndex, pointList));
          if (startPointIndex != endPointIndex) {
            if (dart.test(this.config.includeArea)) {
              areaSegments[$add](this[_createAreaSegment](startPointIndex, endPointIndex, pointList, previousPointList, series, initializeFromZero));
            }
            if (seriesHasMeasureBounds) {
              boundsSegments[$add](this[_createBoundsSegment](pointList[$sublist](startPointIndex, dart.notNull(endPointIndex) + 1), series, initializeFromZero));
            }
          }
        }
        return [lineSegments, areaSegments, boundsSegments];
      }
      [_createLineSegment](start, end, pointList) {
        return pointList[$sublist](start, dart.notNull(end) + 1);
      }
      [_createAreaSegment](start, end, pointList, previousPointList, series, initializeFromZero) {
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let domainFn = series.domainFn;
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let areaPointList = JSArrayOf_DatumPointOfD().of([]);
        if (!dart.test(this.config.stacked) || previousPointList == null) {
          areaPointList[$add](this[_getPoint](null, domainFn(end), series, domainAxis, 0.0, 0.0, measureAxis));
          areaPointList[$add](this[_getPoint](null, domainFn(start), series, domainAxis, 0.0, 0.0, measureAxis));
        } else {
          areaPointList[$addAll](previousPointList[$sublist](start, dart.notNull(end) + 1)[$reversed]);
        }
        areaPointList[$addAll](pointList[$sublist](start, dart.notNull(end) + 1));
        return areaPointList;
      }
      [_createBoundsSegment](pointList, series, initializeFromZero) {
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let areaPointList = JSArrayOf_DatumPointOfD().of([]);
        areaPointList[$addAll](pointList[$map](_DatumPointOfD(), dart.fn(datumPoint => _DatumPointOfD().from(datumPoint, datumPoint.x, dart.test(initializeFromZero) ? datumPoint.y : measureAxis.getLocation(dart.notNull(series.measureUpperBoundFn(datumPoint.index)) + dart.notNull(series.measureOffsetFn(datumPoint.index)))), _DatumPointOfDTo_DatumPointOfD())));
        areaPointList[$addAll](pointList[$reversed][$map](_DatumPointOfD(), dart.fn(datumPoint => _DatumPointOfD().from(datumPoint, datumPoint.x, dart.test(initializeFromZero) ? datumPoint.y : measureAxis.getLocation(dart.notNull(series.measureLowerBoundFn(datumPoint.index)) + dart.notNull(series.measureOffsetFn(datumPoint.index)))), _DatumPointOfDTo_DatumPointOfD())));
        return areaPointList;
      }
      [_createPositionExtent](series, details) {
        let t3, t3$;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let startPosition = (t3 = domainAxis.getLocation(D._check(details.domainExtent.start)), t3 == null ? this.drawBounds[$left][$toDouble]() : t3);
        let endPosition = (t3$ = domainAxis.getLocation(D._check(details.domainExtent.end)), t3$ == null ? this.drawBounds[$right][$toDouble]() : t3$);
        return new (_RangeOfnum()).new(startPosition, endPosition);
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this[_chart$] = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = JSArrayOfString().of([]);
          this[_seriesLineMap][$forEach](dart.fn((key, elements) => {
            elements[$removeWhere](dart.fn(element => element.animatingOut, _AnimatedElementsOfDTobool()));
            if (dart.test(elements[$isEmpty])) {
              keysToRemove[$add](key);
            }
          }, StringAndListOf_AnimatedElementsOfDToNull()));
          keysToRemove[$forEach](dart.bind(this[_seriesLineMap], $remove));
        }
        this[_seriesLineMap][$forEach](dart.fn((key, elements) => {
          if (dart.test(this.config.includeArea)) {
            elements[$map](ListOf_AnimatedAreaOfD(), dart.fn(animatingElement => animatingElement.areas, _AnimatedElementsOfDToListOf_AnimatedAreaOfD()))[$expand](_AnimatedAreaOfD(), dart.fn(areas => areas, ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD()))[$map](_AreaRendererElementOfD(), dart.fn(animatingArea => {
              let t3;
              t3 = animatingArea;
              return t3 == null ? null : t3.getCurrentArea(animationPercent);
            }, _AnimatedAreaOfDTo_AreaRendererElementOfD()))[$forEach](dart.fn(area => {
              if (area != null) {
                canvas.drawPolygon({clipBounds: this[_getClipBoundsForExtent](area.positionExtent), fill: area.areaColor != null ? area.areaColor : area.color, points: area.points});
              }
            }, _AreaRendererElementToNull()));
          }
          if (dart.test(this[_hasMeasureBounds])) {
            elements[$map](ListOf_AnimatedAreaOfD(), dart.fn(animatingElement => animatingElement.bounds, _AnimatedElementsOfDToListOf_AnimatedAreaOfD()))[$expand](_AnimatedAreaOfD(), dart.fn(bounds => bounds, ListOf_AnimatedAreaOfDToListOf_AnimatedAreaOfD()))[$map](_AreaRendererElementOfD(), dart.fn(animatingBounds => {
              let t3;
              t3 = animatingBounds;
              return t3 == null ? null : t3.getCurrentArea(animationPercent);
            }, _AnimatedAreaOfDTo_AreaRendererElementOfD()))[$forEach](dart.fn(bound => {
              if (bound != null) {
                canvas.drawPolygon({clipBounds: this[_getClipBoundsForExtent](bound.positionExtent), fill: bound.areaColor != null ? bound.areaColor : bound.color, points: bound.points});
              }
            }, _AreaRendererElementToNull()));
          }
          if (dart.test(this.config.includeLine)) {
            elements[$map](ListOf_AnimatedLineOfD(), dart.fn(animatingElement => animatingElement.lines, _AnimatedElementsOfDToListOf_AnimatedLineOfD()))[$expand](_AnimatedLineOfD(), dart.fn(lines => lines, ListOf_AnimatedLineOfDToListOf_AnimatedLineOfD()))[$map](_LineRendererElementOfD(), dart.fn(animatingLine => {
              let t3;
              t3 = animatingLine;
              return t3 == null ? null : t3.getCurrentLine(animationPercent);
            }, _AnimatedLineOfDTo_LineRendererElementOfD()))[$forEach](dart.fn(line => {
              if (line != null) {
                canvas.drawLine({clipBounds: this[_getClipBoundsForExtent](line.positionExtent), dashPattern: line.dashPattern, points: line.points, stroke: line.color, strokeWidthPx: line.strokeWidthPx, roundEndCaps: line.roundEndCaps});
              }
            }, _LineRendererElementToNull()));
          }
        }, StringAndListOf_AnimatedElementsOfDToNull()));
        if (dart.test(this.config.includePoints)) {
          this[_pointRenderer].paint(canvas, animationPercent);
        }
      }
      [_getClipBoundsForExtent](extent) {
        let left = dart.test(this.isRtl) ? math$.clamp(extent.end, this.drawBounds[$left], this.drawBounds[$right]) : math$.clamp(extent.start, this.drawBounds[$left], this.drawBounds[$right]);
        let right = dart.test(this.isRtl) ? math$.clamp(extent.start, this.drawBounds[$left], this.drawBounds[$right]) : math$.clamp(extent.end, this.drawBounds[$left], this.drawBounds[$right]);
        return new (RectangleOfnum()).new(left, dart.notNull(this.drawBounds[$top]) - 5, dart.notNull(right) - dart.notNull(left), dart.notNull(this.drawBounds[$height]) + 5 + 5);
      }
      get isRtl() {
        let t3, t3$, t3$0;
        t3$0 = (t3$ = (t3 = this[_chart$], t3 == null ? null : t3.context), t3$ == null ? null : t3$.isRtl);
        return t3$0 == null ? false : t3$0;
      }
      [_getPoint](datum, domainValue, series, domainAxis, measureValue, measureOffsetValue, measureAxis, opts) {
        let index = opts && 'index' in opts ? opts.index : null;
        let domainPosition = domainAxis.getLocation(domainValue);
        let measurePosition = measureValue != null && measureOffsetValue != null ? measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue)) : null;
        return new (_DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, y: measurePosition, index: index});
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) {
          return nearest;
        }
        this[_seriesLineMap][$values][$forEach](dart.fn(seriesSegments => {
          let nearestPoint = null;
          let nearestDomainDistance = 10000.0;
          let nearestMeasureDistance = 10000.0;
          let nearestRelativeDistance = 10000.0;
          seriesSegments[$forEach](dart.fn(segment => {
            if (dart.test(segment.overlaySeries)) {
              return;
            }
            segment.allPoints[$forEach](dart.fn(p => {
              if (dart.notNull(p.x) < dart.notNull(this.componentBounds[$left]) || dart.notNull(p.x) > dart.notNull(this.componentBounds[$right])) {
                return;
              }
              let domainDistance = (dart.notNull(p.x) - dart.notNull(chartPoint.x))[$abs]();
              let measureDistance = null;
              let relativeDistance = null;
              if (p.y != null) {
                measureDistance = (dart.notNull(p.y) - dart.notNull(chartPoint.y))[$abs]();
                relativeDistance = chartPoint.distanceTo(PointOfdouble()._check(p));
              } else {
                measureDistance = 1 / 0;
                relativeDistance = dart.test(byDomain) ? domainDistance : 1 / 0;
              }
              if (dart.test(byDomain)) {
                if (domainDistance < nearestDomainDistance || domainDistance === nearestDomainDistance && dart.notNull(measureDistance) < dart.notNull(nearestMeasureDistance)) {
                  nearestPoint = _DatumPointOfD()._check(p);
                  nearestDomainDistance = domainDistance;
                  nearestMeasureDistance = measureDistance;
                  nearestRelativeDistance = relativeDistance;
                }
              } else {
                if (dart.notNull(relativeDistance) < dart.notNull(nearestRelativeDistance)) {
                  nearestPoint = _DatumPointOfD()._check(p);
                  nearestDomainDistance = domainDistance;
                  nearestMeasureDistance = measureDistance;
                  nearestRelativeDistance = relativeDistance;
                }
              }
            }, PointOfnumToNull()));
          }, _AnimatedElementsOfDToNull()));
          if (nearestPoint != null) {
            nearest[$add](new (DatumDetailsOfD()).new({chartPosition: new (PointOfdouble()).new(nearestPoint.x, nearestPoint.y), datum: nearestPoint.datum, domain: nearestPoint.domain, series: nearestPoint.series, domainDistance: nearestDomainDistance, measureDistance: nearestMeasureDistance, relativeDistance: nearestRelativeDistance}));
          }
        }, ListOf_AnimatedElementsOfDToNull()));
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let series = details.series;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let point = this[_getPoint](seriesDatum.datum, details.domain, series, domainAxis, details.measure, details.measureOffset, measureAxis);
        let chartPosition = new (PointOfdouble()).new(point.x, point.y);
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
    }
    (LineRenderer._internal = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[_pointRenderer] = null;
      this[_chart$] = null;
      this[_hasMeasureBounds] = null;
      this[_seriesLineMap] = new (IdentityMapOfString$ListOf_AnimatedElementsOfD()).new();
      this[_currentKeys$] = JSArrayOfString().of([]);
      this[config$1] = config;
      LineRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      this[_pointRenderer] = new (PointRendererOfD()).new({config: new (PointRendererConfigOfD()).new({radiusPx: this.config.radiusPx})});
    }).prototype = LineRenderer.prototype;
    dart.addTypeTests(LineRenderer);
    LineRenderer.prototype[_is_LineRenderer_default] = true;
    dart.setMethodSignature(LineRenderer, () => ({
      __proto__: dart.getMethods(LineRenderer.__proto__),
      [_createInitialOffsetMap]: dart.fnType(core.Map$(D, core.num), [processed_series.MutableSeries$(D)]),
      [_createStackedMeasureOffsetFunction]: dart.fnType(core.Function, [processed_series.MutableSeries$(D), core.Map$(D, core.num), core.Map$(D, core.num)]),
      [_mergeIntoSeriesMap]: dart.fnType(dart.void, [core.Object]),
      update: dart.fnType(dart.void, [core.Object, core.bool]),
      [_createLineAndAreaElements]: dart.fnType(core.List, [processed_series.ImmutableSeries$(D), line_renderer._LineRendererElement, core.List$(line_renderer._DatumPoint$(D)), core.bool]),
      [_createPointListForSeries]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [processed_series.ImmutableSeries$(D), core.bool]),
      [_createLineAndAreaSegmentsForSeries]: dart.fnType(core.List, [core.List$(line_renderer._DatumPoint$(D)), core.List$(line_renderer._DatumPoint$(D)), processed_series.ImmutableSeries$(D), core.bool]),
      [_createLineSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.int, core.int, core.List$(line_renderer._DatumPoint$(D))]),
      [_createAreaSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.int, core.int, core.List$(line_renderer._DatumPoint$(D)), core.List$(line_renderer._DatumPoint$(D)), processed_series.ImmutableSeries$(D), core.bool]),
      [_createBoundsSegment]: dart.fnType(core.List$(line_renderer._DatumPoint$(D)), [core.List$(line_renderer._DatumPoint$(D)), processed_series.ImmutableSeries$(D), core.bool]),
      [_createPositionExtent]: dart.fnType(line_renderer._Range$(core.num), [processed_series.ImmutableSeries$(D), line_renderer._LineRendererElement]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [_getClipBoundsForExtent]: dart.fnType(math.Rectangle$(core.num), [line_renderer._Range$(core.num)]),
      [_getPoint]: dart.fnType(line_renderer._DatumPoint$(D), [dart.dynamic, D, processed_series.ImmutableSeries$(D), axis$.ImmutableAxis$(D), core.num, core.num, axis$.ImmutableAxis$(core.num)], {index: core.int}, {}),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, math.Rectangle$(core.int)]),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object])
    }));
    dart.setGetterSignature(LineRenderer, () => ({
      __proto__: dart.getGetters(LineRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(LineRenderer, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(LineRenderer, () => ({
      __proto__: dart.getFields(LineRenderer.__proto__),
      config: dart.finalFieldType(line_renderer_config.LineRendererConfig),
      [_pointRenderer]: dart.fieldType(point_renderer.PointRenderer),
      [_chart$]: dart.fieldType(base_chart.BaseChart$(D)),
      [_hasMeasureBounds]: dart.fieldType(core.bool),
      [_seriesLineMap]: dart.finalFieldType(core.Map$(core.String, core.List$(line_renderer._AnimatedElements$(D)))),
      [_currentKeys$]: dart.finalFieldType(core.List$(core.String))
    }));
    return LineRenderer;
  });
  line_renderer.LineRenderer = line_renderer.LineRenderer$();
  dart.defineLazy(line_renderer.LineRenderer, {
    /*line_renderer.LineRenderer.drawBoundTopExtensionPx*/get drawBoundTopExtensionPx() {
      return 5;
    },
    /*line_renderer.LineRenderer.drawBoundBottomExtensionPx*/get drawBoundBottomExtensionPx() {
      return 5;
    }
  });
  dart.addTypeTests(line_renderer.LineRenderer, _is_LineRenderer_default);
  const _is__DatumPoint_default = Symbol('_is__DatumPoint_default');
  line_renderer._DatumPoint$ = dart.generic(D => {
    class _DatumPoint extends math.Point$(core.double) {
      static from(other, x, y) {
        let t3, t3$;
        if (x === void 0) x = null;
        if (y === void 0) y = null;
        return new (line_renderer._DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, index: other.index, x: (t3 = x, t3 == null ? other.x : t3), y: (t3$ = y, t3$ == null ? other.y : t3$)});
      }
    }
    (_DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      this.datum = datum;
      this.domain = domain;
      this.series = series;
      this.index = index;
      _DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = _DatumPoint.prototype;
    dart.addTypeTests(_DatumPoint);
    _DatumPoint.prototype[_is__DatumPoint_default] = true;
    dart.setLibraryUri(_DatumPoint, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_DatumPoint, () => ({
      __proto__: dart.getFields(_DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      domain: dart.finalFieldType(D),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      index: dart.finalFieldType(core.int)
    }));
    return _DatumPoint;
  });
  line_renderer._DatumPoint = line_renderer._DatumPoint$();
  dart.addTypeTests(line_renderer._DatumPoint, _is__DatumPoint_default);
  const _is__LineRendererElement_default = Symbol('_is__LineRendererElement_default');
  const points = dart.privateName(line_renderer, "_LineRendererElement.points");
  const domainExtent = dart.privateName(line_renderer, "_LineRendererElement.domainExtent");
  line_renderer._LineRendererElement$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    let _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    let _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    class _LineRendererElement extends core.Object {
      get points() {
        return this[points];
      }
      set points(value) {
        this[points] = ListOf_DatumPointOfD()._check(value);
      }
      get domainExtent() {
        return this[domainExtent];
      }
      set domainExtent(value) {
        this[domainExtent] = _RangeOfD()._check(value);
      }
      clone() {
        let t3;
        t3 = new (_LineRendererElementOfD()).new();
        t3.points = ListOf_DatumPointOfD().from(this.points);
        t3.color = this.color != null ? new color$.Color.fromOther({color: this.color}) : null;
        t3.areaColor = this.areaColor != null ? new color$.Color.fromOther({color: this.areaColor}) : null;
        t3.dashPattern = this.dashPattern != null ? ListOfint().from(this.dashPattern) : null;
        t3.domainExtent = this.domainExtent;
        t3.measureAxisPosition = this.measureAxisPosition;
        t3.positionExtent = this.positionExtent;
        t3.strokeWidthPx = this.strokeWidthPx;
        t3.styleKey = this.styleKey;
        t3.roundEndCaps = this.roundEndCaps;
        return t3;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let lastPoint = null;
        let pointIndex = null;
        for (let t3 = pointIndex = 0; dart.notNull(pointIndex) < dart.notNull(target.points[$length]); pointIndex = dart.notNull(pointIndex) + 1) {
          let targetPoint = target.points[$_get](pointIndex);
          let previousPoint = null;
          if (dart.notNull(previous.points[$length]) - 1 >= dart.notNull(pointIndex)) {
            previousPoint = _DatumPointOfD()._check(previous.points[$_get](pointIndex));
            lastPoint = previousPoint;
          } else {
            previousPoint = _DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), targetPoint.x, lastPoint.y);
          }
          let x = (dart.notNull(targetPoint.x) - dart.notNull(previousPoint.x)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.x);
          let y = null;
          if (targetPoint.y != null && previousPoint.y != null) {
            y = (dart.notNull(targetPoint.y) - dart.notNull(previousPoint.y)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.y);
          } else if (targetPoint.y != null) {
            y = targetPoint.y;
          } else {
            y = null;
          }
          if (dart.notNull(this.points[$length]) - 1 >= dart.notNull(pointIndex)) {
            this.points[$_set](pointIndex, _DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), x, y));
          } else {
            this.points[$add](_DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), x, y));
          }
        }
        if (dart.notNull(pointIndex) < dart.notNull(this.points[$length])) {
          this.points[$removeRange](pointIndex, this.points[$length]);
        }
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        if (this.areaColor != null) {
          this.areaColor = chart_canvas.getAnimatedColor(previous.areaColor, target.areaColor, animationPercent);
        }
        this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
      }
    }
    (_LineRendererElement.new = function() {
      this[points] = null;
      this.color = null;
      this.areaColor = null;
      this.dashPattern = null;
      this[domainExtent] = null;
      this.measureAxisPosition = null;
      this.positionExtent = null;
      this.strokeWidthPx = null;
      this.styleKey = null;
      this.roundEndCaps = null;
      ;
    }).prototype = _LineRendererElement.prototype;
    dart.addTypeTests(_LineRendererElement);
    _LineRendererElement.prototype[_is__LineRendererElement_default] = true;
    dart.setMethodSignature(_LineRendererElement, () => ({
      __proto__: dart.getMethods(_LineRendererElement.__proto__),
      clone: dart.fnType(line_renderer._LineRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [line_renderer._LineRendererElement, line_renderer._LineRendererElement, core.double])
    }));
    dart.setLibraryUri(_LineRendererElement, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_LineRendererElement, () => ({
      __proto__: dart.getFields(_LineRendererElement.__proto__),
      points: dart.fieldType(core.List$(line_renderer._DatumPoint$(D))),
      color: dart.fieldType(color$.Color),
      areaColor: dart.fieldType(color$.Color),
      dashPattern: dart.fieldType(core.List$(core.int)),
      domainExtent: dart.fieldType(line_renderer._Range$(D)),
      measureAxisPosition: dart.fieldType(core.double),
      positionExtent: dart.fieldType(line_renderer._Range$(core.num)),
      strokeWidthPx: dart.fieldType(core.double),
      styleKey: dart.fieldType(core.String),
      roundEndCaps: dart.fieldType(core.bool)
    }));
    return _LineRendererElement;
  });
  line_renderer._LineRendererElement = line_renderer._LineRendererElement$();
  dart.addTypeTests(line_renderer._LineRendererElement, _is__LineRendererElement_default);
  const _previousLine = dart.privateName(line_renderer, "_previousLine");
  const _targetLine = dart.privateName(line_renderer, "_targetLine");
  const _currentLine = dart.privateName(line_renderer, "_currentLine");
  const _is__AnimatedLine_default = Symbol('_is__AnimatedLine_default');
  line_renderer._AnimatedLine$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    let _LineRendererElementOfD = () => (_LineRendererElementOfD = dart.constFn(line_renderer._LineRendererElement$(D)))();
    class _AnimatedLine extends core.Object {
      animateOut() {
        let newTarget = this[_currentLine].clone();
        let newPoints = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < dart.notNull(newTarget.points[$length]); index = index + 1) {
          let targetPoint = newTarget.points[$_get](index);
          newPoints[$add](_DatumPointOfD().from(targetPoint, targetPoint.x, newTarget.measureAxisPosition[$roundToDouble]()));
        }
        newTarget.points = newPoints;
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _LineRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentLine] == null ? this[_currentLine] = newTarget.clone() : null;
        this[_previousLine] = this[_currentLine].clone();
        this[_targetLine] = newTarget;
      }
      getCurrentLine(animationPercent) {
        if (animationPercent === 1.0 || this[_previousLine] == null) {
          this[_currentLine] = this[_targetLine];
          this[_previousLine] = this[_targetLine];
          return this[_currentLine];
        }
        this[_currentLine].updateAnimationPercent(this[_previousLine], this[_targetLine], animationPercent);
        return this[_currentLine];
      }
      get currentPoints() {
        let t4;
        t4 = this[_currentLine];
        return t4 == null ? null : t4.points;
      }
    }
    (_AnimatedLine.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[_previousLine] = null;
      this[_targetLine] = null;
      this[_currentLine] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedLine.prototype;
    dart.addTypeTests(_AnimatedLine);
    _AnimatedLine.prototype[_is__AnimatedLine_default] = true;
    dart.setMethodSignature(_AnimatedLine, () => ({
      __proto__: dart.getMethods(_AnimatedLine.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentLine: dart.fnType(line_renderer._LineRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedLine, () => ({
      __proto__: dart.getGetters(_AnimatedLine.__proto__),
      currentPoints: core.List$(line_renderer._DatumPoint$(D))
    }));
    dart.setLibraryUri(_AnimatedLine, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_AnimatedLine, () => ({
      __proto__: dart.getFields(_AnimatedLine.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [_previousLine]: dart.fieldType(line_renderer._LineRendererElement$(D)),
      [_targetLine]: dart.fieldType(line_renderer._LineRendererElement$(D)),
      [_currentLine]: dart.fieldType(line_renderer._LineRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedLine;
  });
  line_renderer._AnimatedLine = line_renderer._AnimatedLine$();
  dart.addTypeTests(line_renderer._AnimatedLine, _is__AnimatedLine_default);
  const _is__AreaRendererElement_default = Symbol('_is__AreaRendererElement_default');
  const points$ = dart.privateName(line_renderer, "_AreaRendererElement.points");
  const domainExtent$ = dart.privateName(line_renderer, "_AreaRendererElement.domainExtent");
  line_renderer._AreaRendererElement$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    let _RangeOfD = () => (_RangeOfD = dart.constFn(line_renderer._Range$(D)))();
    let _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    class _AreaRendererElement extends core.Object {
      get points() {
        return this[points$];
      }
      set points(value) {
        this[points$] = ListOf_DatumPointOfD()._check(value);
      }
      get domainExtent() {
        return this[domainExtent$];
      }
      set domainExtent(value) {
        this[domainExtent$] = _RangeOfD()._check(value);
      }
      clone() {
        let t4;
        t4 = new (_AreaRendererElementOfD()).new();
        t4.points = ListOf_DatumPointOfD().from(this.points);
        t4.color = this.color != null ? new color$.Color.fromOther({color: this.color}) : null;
        t4.areaColor = this.areaColor != null ? new color$.Color.fromOther({color: this.areaColor}) : null;
        t4.domainExtent = this.domainExtent;
        t4.measureAxisPosition = this.measureAxisPosition;
        t4.positionExtent = this.positionExtent;
        t4.styleKey = this.styleKey;
        return t4;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let lastPoint = null;
        let pointIndex = null;
        for (let t4 = pointIndex = 0; dart.notNull(pointIndex) < dart.notNull(target.points[$length]); pointIndex = dart.notNull(pointIndex) + 1) {
          let targetPoint = target.points[$_get](pointIndex);
          let previousPoint = null;
          if (dart.notNull(previous.points[$length]) - 1 >= dart.notNull(pointIndex)) {
            previousPoint = _DatumPointOfD()._check(previous.points[$_get](pointIndex));
            lastPoint = previousPoint;
          } else {
            previousPoint = _DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), targetPoint.x, lastPoint.y);
          }
          let x = (dart.notNull(targetPoint.x) - dart.notNull(previousPoint.x)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.x);
          let y = null;
          if (targetPoint.y != null && previousPoint.y != null) {
            y = (dart.notNull(targetPoint.y) - dart.notNull(previousPoint.y)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.y);
          } else if (targetPoint.y != null) {
            y = targetPoint.y;
          } else {
            y = null;
          }
          if (dart.notNull(this.points[$length]) - 1 >= dart.notNull(pointIndex)) {
            this.points[$_set](pointIndex, _DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), x, y));
          } else {
            this.points[$add](_DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), x, y));
          }
        }
        if (dart.notNull(pointIndex) < dart.notNull(this.points[$length])) {
          this.points[$removeRange](pointIndex, this.points[$length]);
        }
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        if (this.areaColor != null) {
          this.areaColor = chart_canvas.getAnimatedColor(previous.areaColor, target.areaColor, animationPercent);
        }
      }
    }
    (_AreaRendererElement.new = function() {
      this[points$] = null;
      this.color = null;
      this.areaColor = null;
      this[domainExtent$] = null;
      this.measureAxisPosition = null;
      this.positionExtent = null;
      this.styleKey = null;
      ;
    }).prototype = _AreaRendererElement.prototype;
    dart.addTypeTests(_AreaRendererElement);
    _AreaRendererElement.prototype[_is__AreaRendererElement_default] = true;
    dart.setMethodSignature(_AreaRendererElement, () => ({
      __proto__: dart.getMethods(_AreaRendererElement.__proto__),
      clone: dart.fnType(line_renderer._AreaRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [line_renderer._AreaRendererElement, line_renderer._AreaRendererElement, core.double])
    }));
    dart.setLibraryUri(_AreaRendererElement, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_AreaRendererElement, () => ({
      __proto__: dart.getFields(_AreaRendererElement.__proto__),
      points: dart.fieldType(core.List$(line_renderer._DatumPoint$(D))),
      color: dart.fieldType(color$.Color),
      areaColor: dart.fieldType(color$.Color),
      domainExtent: dart.fieldType(line_renderer._Range$(D)),
      measureAxisPosition: dart.fieldType(core.double),
      positionExtent: dart.fieldType(line_renderer._Range$(core.num)),
      styleKey: dart.fieldType(core.String)
    }));
    return _AreaRendererElement;
  });
  line_renderer._AreaRendererElement = line_renderer._AreaRendererElement$();
  dart.addTypeTests(line_renderer._AreaRendererElement, _is__AreaRendererElement_default);
  const _previousArea = dart.privateName(line_renderer, "_previousArea");
  const _targetArea = dart.privateName(line_renderer, "_targetArea");
  const _currentArea = dart.privateName(line_renderer, "_currentArea");
  const _is__AnimatedArea_default = Symbol('_is__AnimatedArea_default');
  line_renderer._AnimatedArea$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let JSArrayOf_DatumPointOfD = () => (JSArrayOf_DatumPointOfD = dart.constFn(_interceptors.JSArray$(_DatumPointOfD())))();
    let _AreaRendererElementOfD = () => (_AreaRendererElementOfD = dart.constFn(line_renderer._AreaRendererElement$(D)))();
    class _AnimatedArea extends core.Object {
      animateOut() {
        let newTarget = this[_currentArea].clone();
        let newPoints = JSArrayOf_DatumPointOfD().of([]);
        for (let index = 0; index < dart.notNull(newTarget.points[$length]); index = index + 1) {
          let targetPoint = newTarget.points[$_get](index);
          newPoints[$add](_DatumPointOfD().from(targetPoint, targetPoint.x, newTarget.measureAxisPosition[$roundToDouble]()));
        }
        newTarget.points = newPoints;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _AreaRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentArea] == null ? this[_currentArea] = newTarget.clone() : null;
        this[_previousArea] = this[_currentArea].clone();
        this[_targetArea] = newTarget;
      }
      getCurrentArea(animationPercent) {
        if (animationPercent === 1.0 || this[_previousArea] == null) {
          this[_currentArea] = this[_targetArea];
          this[_previousArea] = this[_targetArea];
          return this[_currentArea];
        }
        this[_currentArea].updateAnimationPercent(this[_previousArea], this[_targetArea], animationPercent);
        return this[_currentArea];
      }
    }
    (_AnimatedArea.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[_previousArea] = null;
      this[_targetArea] = null;
      this[_currentArea] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedArea.prototype;
    dart.addTypeTests(_AnimatedArea);
    _AnimatedArea.prototype[_is__AnimatedArea_default] = true;
    dart.setMethodSignature(_AnimatedArea, () => ({
      __proto__: dart.getMethods(_AnimatedArea.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentArea: dart.fnType(line_renderer._AreaRendererElement$(D), [core.double])
    }));
    dart.setLibraryUri(_AnimatedArea, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_AnimatedArea, () => ({
      __proto__: dart.getFields(_AnimatedArea.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [_previousArea]: dart.fieldType(line_renderer._AreaRendererElement$(D)),
      [_targetArea]: dart.fieldType(line_renderer._AreaRendererElement$(D)),
      [_currentArea]: dart.fieldType(line_renderer._AreaRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedArea;
  });
  line_renderer._AnimatedArea = line_renderer._AnimatedArea$();
  dart.addTypeTests(line_renderer._AnimatedArea, _is__AnimatedArea_default);
  const _is__AnimatedElements_default = Symbol('_is__AnimatedElements_default');
  const allPoints = dart.privateName(line_renderer, "_AnimatedElements.allPoints");
  const areas = dart.privateName(line_renderer, "_AnimatedElements.areas");
  const lines = dart.privateName(line_renderer, "_AnimatedElements.lines");
  const bounds$0 = dart.privateName(line_renderer, "_AnimatedElements.bounds");
  line_renderer._AnimatedElements$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_renderer._DatumPoint$(D)))();
    let ListOf_DatumPointOfD = () => (ListOf_DatumPointOfD = dart.constFn(core.List$(_DatumPointOfD())))();
    let _AnimatedAreaOfD = () => (_AnimatedAreaOfD = dart.constFn(line_renderer._AnimatedArea$(D)))();
    let ListOf_AnimatedAreaOfD = () => (ListOf_AnimatedAreaOfD = dart.constFn(core.List$(_AnimatedAreaOfD())))();
    let _AnimatedLineOfD = () => (_AnimatedLineOfD = dart.constFn(line_renderer._AnimatedLine$(D)))();
    let ListOf_AnimatedLineOfD = () => (ListOf_AnimatedLineOfD = dart.constFn(core.List$(_AnimatedLineOfD())))();
    class _AnimatedElements extends core.Object {
      get allPoints() {
        return this[allPoints];
      }
      set allPoints(value) {
        this[allPoints] = ListOf_DatumPointOfD()._check(value);
      }
      get areas() {
        return this[areas];
      }
      set areas(value) {
        this[areas] = ListOf_AnimatedAreaOfD()._check(value);
      }
      get lines() {
        return this[lines];
      }
      set lines(value) {
        this[lines] = ListOf_AnimatedLineOfD()._check(value);
      }
      get bounds() {
        return this[bounds$0];
      }
      set bounds(value) {
        this[bounds$0] = ListOf_AnimatedAreaOfD()._check(value);
      }
      get animatingOut() {
        let areasAnimatingOut = true;
        if (this.areas != null) {
          for (let area of this.areas) {
            areasAnimatingOut = areasAnimatingOut && dart.test(area.animatingOut);
          }
        }
        let linesAnimatingOut = true;
        if (this.lines != null) {
          for (let line of this.lines) {
            linesAnimatingOut = linesAnimatingOut && dart.test(line.animatingOut);
          }
        }
        let boundsAnimatingOut = true;
        if (this.bounds != null) {
          for (let bound of this.bounds) {
            boundsAnimatingOut = boundsAnimatingOut && dart.test(bound.animatingOut);
          }
        }
        return areasAnimatingOut && linesAnimatingOut && boundsAnimatingOut;
      }
      get overlaySeries() {
        let areasOverlaySeries = true;
        if (this.areas != null) {
          for (let area of this.areas) {
            areasOverlaySeries = areasOverlaySeries && dart.test(area.overlaySeries);
          }
        }
        let linesOverlaySeries = true;
        if (this.lines != null) {
          for (let line of this.lines) {
            linesOverlaySeries = linesOverlaySeries && dart.test(line.overlaySeries);
          }
        }
        let boundsOverlaySeries = true;
        if (this.bounds != null) {
          for (let bound of this.bounds) {
            boundsOverlaySeries = boundsOverlaySeries && dart.test(bound.overlaySeries);
          }
        }
        return areasOverlaySeries && linesOverlaySeries && boundsOverlaySeries;
      }
    }
    (_AnimatedElements.new = function() {
      this[allPoints] = null;
      this[areas] = null;
      this[lines] = null;
      this[bounds$0] = null;
      this.styleKey = null;
      ;
    }).prototype = _AnimatedElements.prototype;
    dart.addTypeTests(_AnimatedElements);
    _AnimatedElements.prototype[_is__AnimatedElements_default] = true;
    dart.setGetterSignature(_AnimatedElements, () => ({
      __proto__: dart.getGetters(_AnimatedElements.__proto__),
      animatingOut: core.bool,
      overlaySeries: core.bool
    }));
    dart.setLibraryUri(_AnimatedElements, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_AnimatedElements, () => ({
      __proto__: dart.getFields(_AnimatedElements.__proto__),
      allPoints: dart.fieldType(core.List$(line_renderer._DatumPoint$(D))),
      areas: dart.fieldType(core.List$(line_renderer._AnimatedArea$(D))),
      lines: dart.fieldType(core.List$(line_renderer._AnimatedLine$(D))),
      bounds: dart.fieldType(core.List$(line_renderer._AnimatedArea$(D))),
      styleKey: dart.fieldType(core.String)
    }));
    return _AnimatedElements;
  });
  line_renderer._AnimatedElements = line_renderer._AnimatedElements$();
  dart.addTypeTests(line_renderer._AnimatedElements, _is__AnimatedElements_default);
  const _start = dart.privateName(line_renderer, "_start");
  const _end = dart.privateName(line_renderer, "_end");
  const _includePointAsNum = dart.privateName(line_renderer, "_includePointAsNum");
  const _includePointAsDateTime = dart.privateName(line_renderer, "_includePointAsDateTime");
  const _includePointAsString = dart.privateName(line_renderer, "_includePointAsString");
  const _is__Range_default = Symbol('_is__Range_default');
  line_renderer._Range$ = dart.generic(D => {
    class _Range extends core.Object {
      get start() {
        return this[_start];
      }
      get end() {
        return this[_end];
      }
      includePoint(value) {
        D._check(value);
        if (value == null) {
          return;
        } else if (typeof value == 'number' || typeof value == 'number' || core.int.is(value)) {
          this[_includePointAsNum](value);
        } else if (core.DateTime.is(value)) {
          this[_includePointAsDateTime](value);
        } else if (typeof value == 'string') {
          this[_includePointAsString](value);
        } else {
          dart.throw("Unsupported object type for LineRenderer domain value: " + dart.str(dart.runtimeType(value)));
        }
      }
      [_includePointAsNum](value) {
        if (dart.notNull(core.num.as(value)) < dart.notNull(core.num.as(this[_start]))) {
          this[_start] = value;
        } else if (dart.notNull(core.num.as(value)) > dart.notNull(core.num.as(this[_end]))) {
          this[_end] = value;
        }
      }
      [_includePointAsDateTime](value) {
        if (dart.test(core.DateTime.as(value).isBefore(core.DateTime.as(this[_start])))) {
          this[_start] = value;
        } else if (dart.test(core.DateTime.as(value).isAfter(core.DateTime.as(this[_end])))) {
          this[_end] = value;
        }
      }
      [_includePointAsString](value) {
        this[_end] = value;
      }
    }
    (_Range.new = function(start, end) {
      this[_start] = null;
      this[_end] = null;
      this[_start] = start;
      this[_end] = end;
    }).prototype = _Range.prototype;
    dart.addTypeTests(_Range);
    _Range.prototype[_is__Range_default] = true;
    dart.setMethodSignature(_Range, () => ({
      __proto__: dart.getMethods(_Range.__proto__),
      includePoint: dart.fnType(dart.void, [core.Object]),
      [_includePointAsNum]: dart.fnType(dart.void, [D]),
      [_includePointAsDateTime]: dart.fnType(dart.void, [D]),
      [_includePointAsString]: dart.fnType(dart.void, [D])
    }));
    dart.setGetterSignature(_Range, () => ({
      __proto__: dart.getGetters(_Range.__proto__),
      start: D,
      end: D
    }));
    dart.setLibraryUri(_Range, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(_Range, () => ({
      __proto__: dart.getFields(_Range.__proto__),
      [_start]: dart.fieldType(D),
      [_end]: dart.fieldType(D)
    }));
    return _Range;
  });
  line_renderer._Range = line_renderer._Range$();
  dart.addTypeTests(line_renderer._Range, _is__Range_default);
  const _is_LineRendererTester_default = Symbol('_is_LineRendererTester_default');
  const renderer$ = dart.privateName(line_renderer, "LineRendererTester.renderer");
  line_renderer.LineRendererTester$ = dart.generic(D => {
    let _AnimatedElementsOfD = () => (_AnimatedElementsOfD = dart.constFn(line_renderer._AnimatedElements$(D)))();
    let ListOf_AnimatedElementsOfD = () => (ListOf_AnimatedElementsOfD = dart.constFn(core.List$(_AnimatedElementsOfD())))();
    let MapEntryOfString$ListOf_AnimatedElementsOfD = () => (MapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(core.MapEntry$(core.String, ListOf_AnimatedElementsOfD())))();
    let JSArrayOf_AnimatedElementsOfD = () => (JSArrayOf_AnimatedElementsOfD = dart.constFn(_interceptors.JSArray$(_AnimatedElementsOfD())))();
    let StringToMapEntryOfString$ListOf_AnimatedElementsOfD = () => (StringToMapEntryOfString$ListOf_AnimatedElementsOfD = dart.constFn(dart.fnType(MapEntryOfString$ListOf_AnimatedElementsOfD(), [core.String])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    class LineRendererTester extends core.Object {
      get renderer() {
        return this[renderer$];
      }
      set renderer(value) {
        super.renderer = value;
      }
      get seriesKeys() {
        return this.renderer[_seriesLineMap][$keys];
      }
      setSeriesKeys(keys) {
        this.renderer[_seriesLineMap][$addEntries](keys[$map](MapEntryOfString$ListOf_AnimatedElementsOfD(), dart.fn(key => new (MapEntryOfString$ListOf_AnimatedElementsOfD()).__(key, JSArrayOf_AnimatedElementsOfD().of([])), StringToMapEntryOfString$ListOf_AnimatedElementsOfD())));
      }
      merge(series) {
        ListOfImmutableSeriesOfD()._check(series);
        this.renderer[_mergeIntoSeriesMap](series);
      }
    }
    (LineRendererTester.new = function(renderer) {
      this[renderer$] = renderer;
      ;
    }).prototype = LineRendererTester.prototype;
    dart.addTypeTests(LineRendererTester);
    LineRendererTester.prototype[_is_LineRendererTester_default] = true;
    dart.setMethodSignature(LineRendererTester, () => ({
      __proto__: dart.getMethods(LineRendererTester.__proto__),
      setSeriesKeys: dart.fnType(dart.void, [core.List$(core.String)]),
      merge: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(LineRendererTester, () => ({
      __proto__: dart.getGetters(LineRendererTester.__proto__),
      seriesKeys: core.Iterable$(core.String)
    }));
    dart.setLibraryUri(LineRendererTester, "package:charts_common/src/chart/line/line_renderer.dart");
    dart.setFieldSignature(LineRendererTester, () => ({
      __proto__: dart.getFields(LineRendererTester.__proto__),
      renderer: dart.finalFieldType(line_renderer.LineRenderer$(D))
    }));
    return LineRendererTester;
  });
  line_renderer.LineRendererTester = line_renderer.LineRendererTester$();
  dart.addTypeTests(line_renderer.LineRendererTester, _is_LineRendererTester_default);
  let C173;
  let C174;
  dart.defineLazy(line_renderer, {
    /*line_renderer.styleSegmentsKey*/get styleSegmentsKey() {
      return C173 || CT.C173;
    },
    /*line_renderer.lineStackIndexKey*/get lineStackIndexKey() {
      return C174 || CT.C174;
    }
  });
  const _is_LineRendererConfig_default = Symbol('_is_LineRendererConfig_default');
  const customRendererId$0 = dart.privateName(line_renderer_config, "LineRendererConfig.customRendererId");
  const symbolRenderer$2 = dart.privateName(line_renderer_config, "LineRendererConfig.symbolRenderer");
  const rendererAttributes$ = dart.privateName(line_renderer_config, "LineRendererConfig.rendererAttributes");
  const radiusPx$0 = dart.privateName(line_renderer_config, "LineRendererConfig.radiusPx");
  const stacked$ = dart.privateName(line_renderer_config, "LineRendererConfig.stacked");
  const strokeWidthPx$3 = dart.privateName(line_renderer_config, "LineRendererConfig.strokeWidthPx");
  const dashPattern$3 = dart.privateName(line_renderer_config, "LineRendererConfig.dashPattern");
  const includeLine$ = dart.privateName(line_renderer_config, "LineRendererConfig.includeLine");
  const includePoints$ = dart.privateName(line_renderer_config, "LineRendererConfig.includePoints");
  const includeArea$ = dart.privateName(line_renderer_config, "LineRendererConfig.includeArea");
  const layoutPaintOrder$0 = dart.privateName(line_renderer_config, "LineRendererConfig.layoutPaintOrder");
  const areaOpacity$ = dart.privateName(line_renderer_config, "LineRendererConfig.areaOpacity");
  const roundEndCaps$ = dart.privateName(line_renderer_config, "LineRendererConfig.roundEndCaps");
  line_renderer_config.LineRendererConfig$ = dart.generic(D => {
    let LineRendererOfD = () => (LineRendererOfD = dart.constFn(line_renderer.LineRenderer$(D)))();
    class LineRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$0];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$2];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes$];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get radiusPx() {
        return this[radiusPx$0];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get stacked() {
        return this[stacked$];
      }
      set stacked(value) {
        super.stacked = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$3];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get dashPattern() {
        return this[dashPattern$3];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get includeLine() {
        return this[includeLine$];
      }
      set includeLine(value) {
        super.includeLine = value;
      }
      get includePoints() {
        return this[includePoints$];
      }
      set includePoints(value) {
        super.includePoints = value;
      }
      get includeArea() {
        return this[includeArea$];
      }
      set includeArea(value) {
        super.includeArea = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$0];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get areaOpacity() {
        return this[areaOpacity$];
      }
      set areaOpacity(value) {
        super.areaOpacity = value;
      }
      get roundEndCaps() {
        return this[roundEndCaps$];
      }
      set roundEndCaps(value) {
        super.roundEndCaps = value;
      }
      build() {
        return LineRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
    }
    (LineRendererConfig.new = function(opts) {
      let t5;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 3.5;
      let stacked = opts && 'stacked' in opts ? opts.stacked : false;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let includeLine = opts && 'includeLine' in opts ? opts.includeLine : true;
      let includePoints = opts && 'includePoints' in opts ? opts.includePoints : false;
      let includeArea = opts && 'includeArea' in opts ? opts.includeArea : false;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 20;
      let areaOpacity = opts && 'areaOpacity' in opts ? opts.areaOpacity : 0.1;
      let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : false;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[rendererAttributes$] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$0] = customRendererId;
      this[radiusPx$0] = radiusPx;
      this[stacked$] = stacked;
      this[strokeWidthPx$3] = strokeWidthPx;
      this[dashPattern$3] = dashPattern;
      this[includeLine$] = includeLine;
      this[includePoints$] = includePoints;
      this[includeArea$] = includeArea;
      this[layoutPaintOrder$0] = layoutPaintOrder;
      this[areaOpacity$] = areaOpacity;
      this[roundEndCaps$] = roundEndCaps;
      this[symbolRenderer$2] = (t5 = symbolRenderer, t5 == null ? new symbol_renderer.LineSymbolRenderer.new() : t5);
      LineRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = LineRendererConfig.prototype;
    dart.addTypeTests(LineRendererConfig);
    LineRendererConfig.prototype[_is_LineRendererConfig_default] = true;
    LineRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(LineRendererConfig, () => ({
      __proto__: dart.getMethods(LineRendererConfig.__proto__),
      build: dart.fnType(line_renderer.LineRenderer$(D), [])
    }));
    dart.setLibraryUri(LineRendererConfig, "package:charts_common/src/chart/line/line_renderer_config.dart");
    dart.setFieldSignature(LineRendererConfig, () => ({
      __proto__: dart.getFields(LineRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(core.String),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      radiusPx: dart.finalFieldType(core.double),
      stacked: dart.finalFieldType(core.bool),
      strokeWidthPx: dart.finalFieldType(core.double),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      includeLine: dart.finalFieldType(core.bool),
      includePoints: dart.finalFieldType(core.bool),
      includeArea: dart.finalFieldType(core.bool),
      layoutPaintOrder: dart.finalFieldType(core.int),
      areaOpacity: dart.finalFieldType(core.double),
      roundEndCaps: dart.finalFieldType(core.bool)
    }));
    return LineRendererConfig;
  });
  line_renderer_config.LineRendererConfig = line_renderer_config.LineRendererConfig$();
  dart.addTypeTests(line_renderer_config.LineRendererConfig, _is_LineRendererConfig_default);
  let C175;
  const _is_PointRendererConfig_default = Symbol('_is_PointRendererConfig_default');
  const customRendererId$1 = dart.privateName(point_renderer_config, "PointRendererConfig.customRendererId");
  const layoutPaintOrder$1 = dart.privateName(point_renderer_config, "PointRendererConfig.layoutPaintOrder");
  const pointRendererDecorators$ = dart.privateName(point_renderer_config, "PointRendererConfig.pointRendererDecorators");
  const symbolRenderer$3 = dart.privateName(point_renderer_config, "PointRendererConfig.symbolRenderer");
  const customSymbolRenderers$ = dart.privateName(point_renderer_config, "PointRendererConfig.customSymbolRenderers");
  const rendererAttributes$0 = dart.privateName(point_renderer_config, "PointRendererConfig.rendererAttributes");
  const radiusPx$1 = dart.privateName(point_renderer_config, "PointRendererConfig.radiusPx");
  const strokeWidthPx$4 = dart.privateName(point_renderer_config, "PointRendererConfig.strokeWidthPx");
  const boundsLineRadiusPx$ = dart.privateName(point_renderer_config, "PointRendererConfig.boundsLineRadiusPx");
  point_renderer_config.PointRendererConfig$ = dart.generic(D => {
    let PointRendererOfD = () => (PointRendererOfD = dart.constFn(point_renderer.PointRenderer$(D)))();
    class PointRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$1];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$1];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get pointRendererDecorators() {
        return this[pointRendererDecorators$];
      }
      set pointRendererDecorators(value) {
        super.pointRendererDecorators = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$3];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get customSymbolRenderers() {
        return this[customSymbolRenderers$];
      }
      set customSymbolRenderers(value) {
        super.customSymbolRenderers = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes$0];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get radiusPx() {
        return this[radiusPx$1];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$4];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get boundsLineRadiusPx() {
        return this[boundsLineRadiusPx$];
      }
      set boundsLineRadiusPx(value) {
        super.boundsLineRadiusPx = value;
      }
      build() {
        return new (PointRendererOfD()).new({config: this, rendererId: this.customRendererId});
      }
    }
    (PointRendererConfig.new = function(opts) {
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 25;
      let pointRendererDecorators = opts && 'pointRendererDecorators' in opts ? opts.pointRendererDecorators : C175 || CT.C175;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 3.5;
      let boundsLineRadiusPx = opts && 'boundsLineRadiusPx' in opts ? opts.boundsLineRadiusPx : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let customSymbolRenderers = opts && 'customSymbolRenderers' in opts ? opts.customSymbolRenderers : null;
      this[rendererAttributes$0] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$1] = customRendererId;
      this[layoutPaintOrder$1] = layoutPaintOrder;
      this[pointRendererDecorators$] = pointRendererDecorators;
      this[radiusPx$1] = radiusPx;
      this[boundsLineRadiusPx$] = boundsLineRadiusPx;
      this[strokeWidthPx$4] = strokeWidthPx;
      this[symbolRenderer$3] = symbolRenderer;
      this[customSymbolRenderers$] = customSymbolRenderers;
      PointRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = PointRendererConfig.prototype;
    dart.addTypeTests(PointRendererConfig);
    PointRendererConfig.prototype[_is_PointRendererConfig_default] = true;
    PointRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(PointRendererConfig, () => ({
      __proto__: dart.getMethods(PointRendererConfig.__proto__),
      build: dart.fnType(point_renderer.PointRenderer$(D), [])
    }));
    dart.setLibraryUri(PointRendererConfig, "package:charts_common/src/chart/scatter_plot/point_renderer_config.dart");
    dart.setFieldSignature(PointRendererConfig, () => ({
      __proto__: dart.getFields(PointRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(core.String),
      layoutPaintOrder: dart.finalFieldType(core.int),
      pointRendererDecorators: dart.finalFieldType(core.List$(point_renderer_decorator.PointRendererDecorator)),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      customSymbolRenderers: dart.finalFieldType(core.Map$(core.String, symbol_renderer.SymbolRenderer)),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      radiusPx: dart.finalFieldType(core.double),
      strokeWidthPx: dart.finalFieldType(core.double),
      boundsLineRadiusPx: dart.finalFieldType(core.double)
    }));
    return PointRendererConfig;
  });
  point_renderer_config.PointRendererConfig = point_renderer_config.PointRendererConfig$();
  dart.addTypeTests(point_renderer_config.PointRendererConfig, _is_PointRendererConfig_default);
  const _is_PointRendererDecorator_default = Symbol('_is_PointRendererDecorator_default');
  point_renderer_decorator.PointRendererDecorator$ = dart.generic(D => {
    class PointRendererDecorator extends core.Object {}
    (PointRendererDecorator.new = function() {
      ;
    }).prototype = PointRendererDecorator.prototype;
    dart.addTypeTests(PointRendererDecorator);
    PointRendererDecorator.prototype[_is_PointRendererDecorator_default] = true;
    dart.setLibraryUri(PointRendererDecorator, "package:charts_common/src/chart/scatter_plot/point_renderer_decorator.dart");
    return PointRendererDecorator;
  });
  point_renderer_decorator.PointRendererDecorator = point_renderer_decorator.PointRendererDecorator$();
  dart.addTypeTests(point_renderer_decorator.PointRendererDecorator, _is_PointRendererDecorator_default);
  const _chart$0 = dart.privateName(point_renderer, "_chart");
  const _currentKeys$0 = dart.privateName(point_renderer, "_currentKeys");
  const _currentPoint = dart.privateName(point_renderer, "_currentPoint");
  const _getDatumDistance = dart.privateName(point_renderer, "_getDatumDistance");
  const _is_PointRenderer_default = Symbol('_is_PointRenderer_default');
  const config$2 = dart.privateName(point_renderer, "PointRenderer.config");
  const pointRendererDecorators = dart.privateName(point_renderer, "PointRenderer.pointRendererDecorators");
  const seriesPointMap = dart.privateName(point_renderer, "PointRenderer.seriesPointMap");
  point_renderer.PointRenderer$ = dart.generic(D => {
    let AnimatedPointOfD = () => (AnimatedPointOfD = dart.constFn(point_renderer.AnimatedPoint$(D)))();
    let ListOfAnimatedPointOfD = () => (ListOfAnimatedPointOfD = dart.constFn(core.List$(AnimatedPointOfD())))();
    let IdentityMapOfString$ListOfAnimatedPointOfD = () => (IdentityMapOfString$ListOfAnimatedPointOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfAnimatedPointOfD())))();
    let LinkedHashMapOfString$ListOfAnimatedPointOfD = () => (LinkedHashMapOfString$ListOfAnimatedPointOfD = dart.constFn(collection.LinkedHashMap$(core.String, ListOfAnimatedPointOfD())))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    let JSArrayOfPointRendererElementOfD = () => (JSArrayOfPointRendererElementOfD = dart.constFn(_interceptors.JSArray$(PointRendererElementOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let JSArrayOfAnimatedPointOfD = () => (JSArrayOfAnimatedPointOfD = dart.constFn(_interceptors.JSArray$(AnimatedPointOfD())))();
    let VoidToListOfAnimatedPointOfD = () => (VoidToListOfAnimatedPointOfD = dart.constFn(dart.fnType(ListOfAnimatedPointOfD(), [])))();
    let ImmutableSeriesOfDToNull = () => (ImmutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesOfD()])))();
    let dynamicToListOfAnimatedPointOfD = () => (dynamicToListOfAnimatedPointOfD = dart.constFn(dart.fnType(ListOfAnimatedPointOfD(), [dart.dynamic])))();
    let StringAndListOfAnimatedPointOfDToNull = () => (StringAndListOfAnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfAnimatedPointOfD()])))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let AnimatedPointOfDTobool = () => (AnimatedPointOfDTobool = dart.constFn(dart.fnType(core.bool, [AnimatedPointOfD()])))();
    let StringToListOfAnimatedPointOfD = () => (StringToListOfAnimatedPointOfD = dart.constFn(dart.fnType(ListOfAnimatedPointOfD(), [core.String])))();
    let AnimatedPointOfDToPointRendererElementOfD = () => (AnimatedPointOfDToPointRendererElementOfD = dart.constFn(dart.fnType(PointRendererElementOfD(), [AnimatedPointOfD()])))();
    let DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let AnimatedPointOfDToNull = () => (AnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [AnimatedPointOfD()])))();
    let ListOfAnimatedPointOfDToNull = () => (ListOfAnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [ListOfAnimatedPointOfD()])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    class PointRenderer extends cartesian_renderer.BaseCartesianRenderer$(D) {
      get config() {
        return this[config$2];
      }
      set config(value) {
        super.config = value;
      }
      get pointRendererDecorators() {
        return this[pointRendererDecorators];
      }
      set pointRendererDecorators(value) {
        super.pointRendererDecorators = value;
      }
      get seriesPointMap() {
        return this[seriesPointMap];
      }
      set seriesPointMap(value) {
        this[seriesPointMap] = LinkedHashMapOfString$ListOfAnimatedPointOfD()._check(value);
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          let t5, t5$, t5$0, t5$1;
          let elements = JSArrayOfPointRendererElementOfD().of([]);
          t5 = series;
          t5.radiusPxFn == null ? t5.radiusPxFn = dart.fn(_ => this.config.radiusPx, intTodouble()) : null;
          let boundsLineRadiusPxFn = series.getAttr(intTodouble(), point_renderer.boundsLineRadiusPxFnKey);
          if (boundsLineRadiusPxFn == null) {
            let boundsLineRadiusPx = series.getAttr(core.double, point_renderer.boundsLineRadiusPxKey);
            boundsLineRadiusPx == null ? boundsLineRadiusPx = this.config.boundsLineRadiusPx : null;
            if (boundsLineRadiusPx != null) {
              boundsLineRadiusPxFn = dart.fn(_ => boundsLineRadiusPx[$toDouble](), intTodouble());
              series.setAttr(intTodouble(), point_renderer.boundsLineRadiusPxFnKey, boundsLineRadiusPxFn);
            }
          }
          let symbolRendererFn = series.getAttr(intToString(), point_renderer.pointSymbolRendererFnKey);
          t5$ = series;
          t5$.keyFn == null ? t5$.keyFn = dart.fn(index => dart.str(series.id) + "__" + dart.str(series.domainFn(index)) + "__" + dart.str(series.measureFn(index)), intToString()) : null;
          for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
            let radiusPx = series.radiusPxFn(index);
            radiusPx == null ? radiusPx = this.config.radiusPx : null;
            let boundsLineRadiusPx = null;
            if (boundsLineRadiusPxFn != null) {
              boundsLineRadiusPx = core.num._check(dynamicAndintTodynamic().is(boundsLineRadiusPxFn) ? dynamicAndintTodynamic().as(boundsLineRadiusPxFn)(series.data[$_get](index), index) : boundsLineRadiusPxFn(index));
            }
            boundsLineRadiusPx == null ? boundsLineRadiusPx = this.config.boundsLineRadiusPx : null;
            boundsLineRadiusPx == null ? boundsLineRadiusPx = radiusPx : null;
            let strokeWidthPx = series.strokeWidthPxFn != null ? series.strokeWidthPxFn(index) : null;
            strokeWidthPx == null ? strokeWidthPx = this.config.strokeWidthPx : null;
            let symbolRendererId = null;
            if (symbolRendererFn != null) {
              symbolRendererId = symbolRendererFn(index);
            }
            symbolRendererId == null ? symbolRendererId = series.getAttr(core.String, point_renderer.pointSymbolRendererIdKey) : null;
            symbolRendererId == null ? symbolRendererId = "__default__" : null;
            let colorFn = series.colorFn;
            let fillColorFn = (t5$0 = series.fillColorFn, t5$0 == null ? colorFn : t5$0);
            let color = colorFn(index);
            let fillColor = fillColorFn(index);
            fillColor == null ? fillColor = color : null;
            let details = (t5$1 = new (PointRendererElementOfD()).new(), t5$1.color = color, t5$1.fillColor = fillColor, t5$1.radiusPx = radiusPx[$toDouble](), t5$1.boundsLineRadiusPx = boundsLineRadiusPx[$toDouble](), t5$1.strokeWidthPx = strokeWidthPx[$toDouble](), t5$1.symbolRendererId = symbolRendererId, t5$1);
            elements[$add](details);
          }
          series.setAttr(ListOfPointRendererElement(), point_renderer.pointElementsKey, elements);
        }, MutableSeriesOfDToNull()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        this[_currentKeys$0][$clear]();
        let sortedSeriesIds = [];
        seriesList[$forEach](dart.fn(series => {
          let t6, t5, t5$;
          sortedSeriesIds[$add](series.id);
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
          let measureFn = series.measureFn;
          let measureLowerBoundFn = series.measureLowerBoundFn;
          let measureUpperBoundFn = series.measureUpperBoundFn;
          let measureOffsetFn = series.measureOffsetFn;
          let seriesKey = series.id;
          let keyFn = series.keyFn;
          let pointList = this.seriesPointMap[$putIfAbsent](seriesKey, dart.fn(() => JSArrayOfAnimatedPointOfD().of([]), VoidToListOfAnimatedPointOfD()));
          let elementsList = series.getAttr(ListOfPointRendererElement(), point_renderer.pointElementsKey);
          for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
            let datum = series.data[$_get](index);
            let details = elementsList[$_get](index);
            let domainValue = domainFn(index);
            let domainLowerBoundValue = domainLowerBoundFn != null ? domainLowerBoundFn(index) : null;
            let domainUpperBoundValue = domainUpperBoundFn != null ? domainUpperBoundFn(index) : null;
            let measureValue = measureFn(index);
            let measureLowerBoundValue = measureLowerBoundFn != null ? measureLowerBoundFn(index) : null;
            let measureUpperBoundValue = measureUpperBoundFn != null ? measureUpperBoundFn(index) : null;
            let measureOffsetValue = measureOffsetFn(index);
            let point = this.getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis);
            let pointKey = keyFn(index);
            let animatingPoint = pointList[$firstWhere](dart.fn(point => point.key == pointKey, AnimatedPointTobool()), {orElse: dart.fn(() => null, VoidToNull())});
            if (animatingPoint == null) {
              let point = this.getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, 0.0, 0.0, 0.0, 0.0, measureAxis);
              animatingPoint = (t5 = new (AnimatedPointOfD()).new({key: pointKey, overlaySeries: series.overlaySeries}), t5.setNewTarget((t6 = new (PointRendererElementOfD()).new(), t6.color = details.color, t6.fillColor = details.fillColor, t6.measureAxisPosition = measureAxis.getLocation(0.0), t6.point = point, t6.radiusPx = details.radiusPx, t6.boundsLineRadiusPx = details.boundsLineRadiusPx, t6.strokeWidthPx = details.strokeWidthPx, t6.symbolRendererId = details.symbolRendererId, t6)), t5);
              pointList[$add](animatingPoint);
            }
            this[_currentKeys$0][$add](pointKey);
            let pointElement = (t5$ = new (PointRendererElementOfD()).new(), t5$.color = details.color, t5$.fillColor = details.fillColor, t5$.measureAxisPosition = measureAxis.getLocation(0.0), t5$.point = point, t5$.radiusPx = details.radiusPx, t5$.boundsLineRadiusPx = details.boundsLineRadiusPx, t5$.strokeWidthPx = details.strokeWidthPx, t5$.symbolRendererId = details.symbolRendererId, t5$);
            animatingPoint.setNewTarget(pointElement);
          }
        }, ImmutableSeriesOfDToNull()));
        this.seriesPointMap = LinkedHashMapOfString$ListOfAnimatedPointOfD().fromIterable(sortedSeriesIds, {key: dart.fn(k => core.String._check(k), dynamicToString()), value: dart.fn(k => this.seriesPointMap[$_get](k), dynamicToListOfAnimatedPointOfD())});
        this.seriesPointMap[$forEach](dart.fn((key, points) => {
          for (let point of points) {
            if (!dart.equals(this[_currentKeys$0][$contains](point.key), true)) {
              point.animateOut();
            }
          }
        }, StringAndListOfAnimatedPointOfDToNull()));
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this[_chart$0] = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = JSArrayOfString().of([]);
          this.seriesPointMap[$forEach](dart.fn((key, points) => {
            points[$removeWhere](dart.fn(point => point.animatingOut, AnimatedPointOfDTobool()));
            if (dart.test(points[$isEmpty])) {
              keysToRemove[$add](key);
            }
          }, StringAndListOfAnimatedPointOfDToNull()));
          keysToRemove[$forEach](dart.fn(key => this.seriesPointMap[$remove](key), StringToListOfAnimatedPointOfD()));
        }
        this.seriesPointMap[$forEach](dart.fn((key, points) => {
          points[$map](PointRendererElementOfD(), dart.fn(animatingPoint => animatingPoint.getCurrentPoint(animationPercent), AnimatedPointOfDToPointRendererElementOfD()))[$forEach](dart.fn(point => {
            this.pointRendererDecorators[$where](dart.fn(decorator => !dart.test(decorator.renderAbove), PointRendererDecoratorTobool()))[$forEach](dart.fn(decorator => {
              decorator.decorate(point, canvas, this.graphicsFactory, {drawBounds: this.componentBounds, animationPercent: animationPercent, rtl: this.isRtl});
            }, PointRendererDecoratorToNull()));
            if (point.point.y != null && dart.test(this.componentBounds[$containsPoint](point.point))) {
              let bounds = new (RectangleOfdouble()).new(dart.notNull(point.point.x) - dart.notNull(point.radiusPx), dart.notNull(point.point.y) - dart.notNull(point.radiusPx), dart.notNull(point.radiusPx) * 2, dart.notNull(point.radiusPx) * 2);
              if (point.symbolRendererId === "__default__") {
                this.symbolRenderer.paint(canvas, bounds, {fillColor: point.fillColor, strokeColor: point.color, strokeWidthPx: point.strokeWidthPx});
              } else {
                let id = point.symbolRendererId;
                if (!dart.test(this.config.customSymbolRenderers[$containsKey](id))) {
                  dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + dart.str(id) + "\""));
                }
                let customRenderer = this.config.customSymbolRenderers[$_get](id);
                customRenderer.paint(canvas, bounds, {fillColor: point.fillColor, strokeColor: point.color, strokeWidthPx: point.strokeWidthPx});
              }
            }
            this.pointRendererDecorators[$where](dart.fn(decorator => decorator.renderAbove, PointRendererDecoratorTobool()))[$forEach](dart.fn(decorator => {
              decorator.decorate(point, canvas, this.graphicsFactory, {drawBounds: this.componentBounds, animationPercent: animationPercent, rtl: this.isRtl});
            }, PointRendererDecoratorToNull()));
          }, PointRendererElementToNull()));
        }, StringAndListOfAnimatedPointOfDToNull()));
      }
      get isRtl() {
        let t5, t5$, t5$0;
        t5$0 = (t5$ = (t5 = this[_chart$0], t5 == null ? null : t5.context), t5$ == null ? null : t5$.isRtl);
        return t5$0 == null ? false : t5$0;
      }
      getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis) {
        D._check(domainValue);
        D._check(domainLowerBoundValue);
        D._check(domainUpperBoundValue);
        ImmutableSeriesOfD()._check(series);
        ImmutableAxisOfD()._check(domainAxis);
        let domainPosition = domainAxis.getLocation(domainValue);
        let domainLowerBoundPosition = domainLowerBoundValue != null ? domainAxis.getLocation(domainLowerBoundValue) : null;
        let domainUpperBoundPosition = domainUpperBoundValue != null ? domainAxis.getLocation(domainUpperBoundValue) : null;
        let measurePosition = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue));
        let measureLowerBoundPosition = measureLowerBoundValue != null ? measureAxis.getLocation(dart.notNull(measureLowerBoundValue) + dart.notNull(measureOffsetValue)) : null;
        let measureUpperBoundPosition = measureUpperBoundValue != null ? measureAxis.getLocation(dart.notNull(measureUpperBoundValue) + dart.notNull(measureOffsetValue)) : null;
        return new (DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, xLower: domainLowerBoundPosition, xUpper: domainUpperBoundPosition, y: measurePosition, yLower: measureLowerBoundPosition, yUpper: measureUpperBoundPosition});
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) {
          return nearest;
        }
        this.seriesPointMap[$values][$forEach](dart.fn(points => {
          let nearestPoint = null;
          let nearestDomainDistance = 10000;
          let nearestMeasureDistance = 10000;
          let nearestRelativeDistance = 10000;
          points[$forEach](dart.fn(point => {
            if (dart.test(point.overlaySeries)) {
              return;
            }
            let p = point[_currentPoint].point;
            if (dart.notNull(p.x) < dart.notNull(this.componentBounds[$left]) || dart.notNull(p.x) > dart.notNull(this.componentBounds[$right])) {
              return;
            }
            let distances = this[_getDatumDistance](point, chartPoint);
            if (dart.test(byDomain)) {
              if (dart.notNull(distances.domainDistance) < dart.notNull(nearestDomainDistance) || distances.domainDistance == nearestDomainDistance && dart.notNull(distances.measureDistance) < dart.notNull(nearestMeasureDistance)) {
                nearestPoint = point[_currentPoint];
                nearestDomainDistance = distances.domainDistance;
                nearestMeasureDistance = distances.measureDistance;
                nearestRelativeDistance = distances.relativeDistance;
              }
            } else {
              if (dart.notNull(distances.relativeDistance) < dart.notNull(nearestRelativeDistance)) {
                nearestPoint = point[_currentPoint];
                nearestDomainDistance = distances.domainDistance;
                nearestMeasureDistance = distances.measureDistance;
                nearestRelativeDistance = distances.relativeDistance;
              }
            }
          }, AnimatedPointOfDToNull()));
          if (nearestPoint != null) {
            let nearestSymbolRenderer = null;
            if (nearestPoint.symbolRendererId === "__default__") {
              nearestSymbolRenderer = this.symbolRenderer;
            } else {
              let id = nearestPoint.symbolRendererId;
              if (!dart.test(this.config.customSymbolRenderers[$containsKey](id))) {
                dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + dart.str(id) + "\""));
              }
              nearestSymbolRenderer = this.config.customSymbolRenderers[$_get](id);
            }
            nearest[$add](new (DatumDetailsOfD()).new({datum: nearestPoint.point.datum, domain: nearestPoint.point.domain, series: nearestPoint.point.series, domainDistance: nearestDomainDistance, measureDistance: nearestMeasureDistance, relativeDistance: nearestRelativeDistance, symbolRenderer: nearestSymbolRenderer}));
          }
        }, ListOfAnimatedPointOfDToNull()));
        return nearest;
      }
      [_getDatumDistance](point, chartPoint) {
        let datumPoint = point[_currentPoint].point;
        let radiusPx = point[_currentPoint].radiusPx;
        let boundsLineRadiusPx = point[_currentPoint].boundsLineRadiusPx;
        let domainDistance = (dart.notNull(chartPoint.x) - dart.notNull(datumPoint.x))[$abs]();
        let measureDistance = datumPoint.y != null ? (dart.notNull(chartPoint.y) - dart.notNull(datumPoint.y))[$abs]() : 10000;
        let relativeDistance = datumPoint.y != null ? chartPoint.distanceTo(datumPoint) : 10000;
        let insidePoint = false;
        if (datumPoint.xLower != null && datumPoint.xUpper != null && datumPoint.yLower != null && datumPoint.yUpper != null) {
          let relativeDistanceBounds = math$.distanceBetweenPointAndLineSegment(vector_math.Vector2.new(chartPoint.x, chartPoint.y), vector_math.Vector2.new(datumPoint.xLower, datumPoint.yLower), vector_math.Vector2.new(datumPoint.xUpper, datumPoint.yUpper));
          insidePoint = dart.notNull(relativeDistance) < dart.notNull(radiusPx) || boundsLineRadiusPx != null && dart.notNull(relativeDistanceBounds) < dart.notNull(boundsLineRadiusPx);
          relativeDistance = math.min(core.double, relativeDistance, relativeDistanceBounds);
        } else {
          insidePoint = dart.notNull(relativeDistance) < dart.notNull(radiusPx);
        }
        return new point_renderer._Distances.new({domainDistance: domainDistance, measureDistance: measureDistance, relativeDistance: relativeDistance, insidePoint: insidePoint});
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let series = details.series;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let point = this.getPoint(seriesDatum.datum, details.domain, details.domainLowerBound, details.domainUpperBound, series, domainAxis, details.measure, details.measureLowerBound, details.measureUpperBound, details.measureOffset, measureAxis);
        let symbolRendererFn = series.getAttr(intToString(), point_renderer.pointSymbolRendererFnKey);
        let symbolRendererId = null;
        if (symbolRendererFn != null) {
          symbolRendererId = symbolRendererFn(details.index);
        }
        symbolRendererId == null ? symbolRendererId = series.getAttr(core.String, point_renderer.pointSymbolRendererIdKey) : null;
        symbolRendererId == null ? symbolRendererId = "__default__" : null;
        let nearestSymbolRenderer = null;
        if (symbolRendererId === "__default__") {
          nearestSymbolRenderer = this.symbolRenderer;
        } else {
          let id = symbolRendererId;
          if (!dart.test(this.config.customSymbolRenderers[$containsKey](id))) {
            dart.throw(new core.ArgumentError.new("Invalid custom symbol renderer id \"" + dart.str(id) + "\""));
          }
          nearestSymbolRenderer = this.config.customSymbolRenderers[$_get](id);
        }
        return DatumDetailsOfD().from(details, {chartPosition: new (PointOfdouble()).new(point.x, point.y), chartPositionLower: new (PointOfdouble()).new(point.xLower, point.yLower), chartPositionUpper: new (PointOfdouble()).new(point.xUpper, point.yUpper), symbolRenderer: nearestSymbolRenderer});
      }
    }
    (PointRenderer.new = function(opts) {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[_chart$0] = null;
      this[seriesPointMap] = new (IdentityMapOfString$ListOfAnimatedPointOfD()).new();
      this[_currentKeys$0] = JSArrayOfString().of([]);
      this[config$2] = (t5 = config, t5 == null ? new point_renderer_config.PointRendererConfig.new() : t5);
      this[pointRendererDecorators] = (t5$0 = (t5$ = config, t5$ == null ? null : t5$.pointRendererDecorators), t5$0 == null ? JSArrayOfPointRendererDecorator().of([]) : t5$0);
      PointRenderer.__proto__.new.call(this, {rendererId: (t5$1 = rendererId, t5$1 == null ? "point" : t5$1), layoutPaintOrder: (t5$3 = (t5$2 = config, t5$2 == null ? null : t5$2.layoutPaintOrder), t5$3 == null ? 25 : t5$3), symbolRenderer: (t5$5 = (t5$4 = config, t5$4 == null ? null : t5$4.symbolRenderer), t5$5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t5$5)});
      ;
    }).prototype = PointRenderer.prototype;
    dart.addTypeTests(PointRenderer);
    PointRenderer.prototype[_is_PointRenderer_default] = true;
    dart.setMethodSignature(PointRenderer, () => ({
      __proto__: dart.getMethods(PointRenderer.__proto__),
      update: dart.fnType(dart.void, [core.Object, core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getPoint: dart.fnType(point_renderer.DatumPoint$(D), [dart.dynamic, core.Object, core.Object, core.Object, core.Object, core.Object, core.num, core.num, core.num, core.num, axis$.ImmutableAxis$(core.num)]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, math.Rectangle$(core.int)]),
      [_getDatumDistance]: dart.fnType(point_renderer._Distances, [point_renderer.AnimatedPoint$(D), math.Point$(core.double)]),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object])
    }));
    dart.setGetterSignature(PointRenderer, () => ({
      __proto__: dart.getGetters(PointRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(PointRenderer, "package:charts_common/src/chart/scatter_plot/point_renderer.dart");
    dart.setFieldSignature(PointRenderer, () => ({
      __proto__: dart.getFields(PointRenderer.__proto__),
      config: dart.finalFieldType(point_renderer_config.PointRendererConfig),
      pointRendererDecorators: dart.finalFieldType(core.List$(point_renderer_decorator.PointRendererDecorator)),
      [_chart$0]: dart.fieldType(base_chart.BaseChart$(D)),
      seriesPointMap: dart.fieldType(collection.LinkedHashMap$(core.String, core.List$(point_renderer.AnimatedPoint$(D)))),
      [_currentKeys$0]: dart.finalFieldType(core.List$(core.String))
    }));
    return PointRenderer;
  });
  point_renderer.PointRenderer = point_renderer.PointRenderer$();
  dart.addTypeTests(point_renderer.PointRenderer, _is_PointRenderer_default);
  const _is_DatumPoint_default = Symbol('_is_DatumPoint_default');
  const datum$2 = dart.privateName(point_renderer, "DatumPoint.datum");
  const domain$0 = dart.privateName(point_renderer, "DatumPoint.domain");
  const series$3 = dart.privateName(point_renderer, "DatumPoint.series");
  const xLower$ = dart.privateName(point_renderer, "DatumPoint.xLower");
  const xUpper$ = dart.privateName(point_renderer, "DatumPoint.xUpper");
  const yLower$ = dart.privateName(point_renderer, "DatumPoint.yLower");
  const yUpper$ = dart.privateName(point_renderer, "DatumPoint.yUpper");
  point_renderer.DatumPoint$ = dart.generic(D => {
    class DatumPoint extends math.Point$(core.double) {
      get datum() {
        return this[datum$2];
      }
      set datum(value) {
        super.datum = value;
      }
      get domain() {
        return this[domain$0];
      }
      set domain(value) {
        super.domain = value;
      }
      get series() {
        return this[series$3];
      }
      set series(value) {
        super.series = value;
      }
      get xLower() {
        return this[xLower$];
      }
      set xLower(value) {
        super.xLower = value;
      }
      get xUpper() {
        return this[xUpper$];
      }
      set xUpper(value) {
        super.xUpper = value;
      }
      get yLower() {
        return this[yLower$];
      }
      set yLower(value) {
        super.yLower = value;
      }
      get yUpper() {
        return this[yUpper$];
      }
      set yUpper(value) {
        super.yUpper = value;
      }
      static from(other, opts) {
        let t5, t5$, t5$0, t5$1, t5$2, t5$3;
        let x = opts && 'x' in opts ? opts.x : null;
        let xLower = opts && 'xLower' in opts ? opts.xLower : null;
        let xUpper = opts && 'xUpper' in opts ? opts.xUpper : null;
        let y = opts && 'y' in opts ? opts.y : null;
        let yLower = opts && 'yLower' in opts ? opts.yLower : null;
        let yUpper = opts && 'yUpper' in opts ? opts.yUpper : null;
        return new (point_renderer.DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, x: (t5 = x, t5 == null ? other.x : t5), xLower: (t5$ = xLower, t5$ == null ? other.xLower : t5$), xUpper: (t5$0 = xUpper, t5$0 == null ? other.xUpper : t5$0), y: (t5$1 = y, t5$1 == null ? other.y : t5$1), yLower: (t5$2 = yLower, t5$2 == null ? other.yLower : t5$2), yUpper: (t5$3 = yUpper, t5$3 == null ? other.yUpper : t5$3)});
      }
    }
    (DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let xLower = opts && 'xLower' in opts ? opts.xLower : null;
      let xUpper = opts && 'xUpper' in opts ? opts.xUpper : null;
      let y = opts && 'y' in opts ? opts.y : null;
      let yLower = opts && 'yLower' in opts ? opts.yLower : null;
      let yUpper = opts && 'yUpper' in opts ? opts.yUpper : null;
      this[datum$2] = datum;
      this[domain$0] = domain;
      this[series$3] = series;
      this[xLower$] = xLower;
      this[xUpper$] = xUpper;
      this[yLower$] = yLower;
      this[yUpper$] = yUpper;
      DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = DatumPoint.prototype;
    dart.addTypeTests(DatumPoint);
    DatumPoint.prototype[_is_DatumPoint_default] = true;
    dart.setLibraryUri(DatumPoint, "package:charts_common/src/chart/scatter_plot/point_renderer.dart");
    dart.setFieldSignature(DatumPoint, () => ({
      __proto__: dart.getFields(DatumPoint.__proto__),
      datum: dart.finalFieldType(core.Object),
      domain: dart.finalFieldType(D),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      xLower: dart.finalFieldType(core.double),
      xUpper: dart.finalFieldType(core.double),
      yLower: dart.finalFieldType(core.double),
      yUpper: dart.finalFieldType(core.double)
    }));
    return DatumPoint;
  });
  point_renderer.DatumPoint = point_renderer.DatumPoint$();
  dart.addTypeTests(point_renderer.DatumPoint, _is_DatumPoint_default);
  const _is_PointRendererElement_default = Symbol('_is_PointRendererElement_default');
  const point = dart.privateName(point_renderer, "PointRendererElement.point");
  const color$3 = dart.privateName(point_renderer, "PointRendererElement.color");
  const fillColor$0 = dart.privateName(point_renderer, "PointRendererElement.fillColor");
  const measureAxisPosition$ = dart.privateName(point_renderer, "PointRendererElement.measureAxisPosition");
  const radiusPx = dart.privateName(point_renderer, "PointRendererElement.radiusPx");
  const boundsLineRadiusPx = dart.privateName(point_renderer, "PointRendererElement.boundsLineRadiusPx");
  const strokeWidthPx$5 = dart.privateName(point_renderer, "PointRendererElement.strokeWidthPx");
  const symbolRendererId = dart.privateName(point_renderer, "PointRendererElement.symbolRendererId");
  point_renderer.PointRendererElement$ = dart.generic(D => {
    let DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    let PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class PointRendererElement extends core.Object {
      get point() {
        return this[point];
      }
      set point(value) {
        this[point] = DatumPointOfD()._check(value);
      }
      get color() {
        return this[color$3];
      }
      set color(value) {
        this[color$3] = value;
      }
      get fillColor() {
        return this[fillColor$0];
      }
      set fillColor(value) {
        this[fillColor$0] = value;
      }
      get measureAxisPosition() {
        return this[measureAxisPosition$];
      }
      set measureAxisPosition(value) {
        this[measureAxisPosition$] = value;
      }
      get radiusPx() {
        return this[radiusPx];
      }
      set radiusPx(value) {
        this[radiusPx] = value;
      }
      get boundsLineRadiusPx() {
        return this[boundsLineRadiusPx];
      }
      set boundsLineRadiusPx(value) {
        this[boundsLineRadiusPx] = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$5];
      }
      set strokeWidthPx(value) {
        this[strokeWidthPx$5] = value;
      }
      get symbolRendererId() {
        return this[symbolRendererId];
      }
      set symbolRendererId(value) {
        this[symbolRendererId] = value;
      }
      clone() {
        let t5;
        t5 = new (PointRendererElementOfD()).new();
        t5.point = DatumPointOfD().from(this.point);
        t5.color = this.color != null ? new color$.Color.fromOther({color: this.color}) : null;
        t5.fillColor = this.fillColor != null ? new color$.Color.fromOther({color: this.fillColor}) : null;
        t5.measureAxisPosition = this.measureAxisPosition;
        t5.radiusPx = this.radiusPx;
        t5.boundsLineRadiusPx = this.boundsLineRadiusPx;
        t5.strokeWidthPx = this.strokeWidthPx;
        t5.symbolRendererId = this.symbolRendererId;
        return t5;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let targetPoint = target.point;
        let previousPoint = previous.point;
        let x = (dart.notNull(targetPoint.x) - dart.notNull(previousPoint.x)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.x);
        let xLower = targetPoint.xLower != null && previousPoint.xLower != null ? (dart.notNull(targetPoint.xLower) - dart.notNull(previousPoint.xLower)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.xLower) : null;
        let xUpper = targetPoint.xUpper != null && previousPoint.xUpper != null ? (dart.notNull(targetPoint.xUpper) - dart.notNull(previousPoint.xUpper)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.xUpper) : null;
        let y = null;
        if (targetPoint.y != null && previousPoint.y != null) {
          y = (dart.notNull(targetPoint.y) - dart.notNull(previousPoint.y)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.y);
        } else if (targetPoint.y != null) {
          y = targetPoint.y;
        } else {
          y = null;
        }
        let yLower = targetPoint.yLower != null && previousPoint.yLower != null ? (dart.notNull(targetPoint.yLower) - dart.notNull(previousPoint.yLower)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.yLower) : null;
        let yUpper = targetPoint.yUpper != null && previousPoint.yUpper != null ? (dart.notNull(targetPoint.yUpper) - dart.notNull(previousPoint.yUpper)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.yUpper) : null;
        this.point = DatumPointOfD().from(DatumPointOfD()._check(targetPoint), {x: x, xLower: xLower, xUpper: xUpper, y: y, yLower: yLower, yUpper: yUpper});
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        this.fillColor = chart_canvas.getAnimatedColor(previous.fillColor, target.fillColor, animationPercent);
        this.radiusPx = (dart.notNull(target.radiusPx) - dart.notNull(previous.radiusPx)) * dart.notNull(animationPercent) + dart.notNull(previous.radiusPx);
        this.boundsLineRadiusPx = (dart.notNull(target.boundsLineRadiusPx) - dart.notNull(previous.boundsLineRadiusPx)) * dart.notNull(animationPercent) + dart.notNull(previous.boundsLineRadiusPx);
        this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
      }
    }
    (PointRendererElement.new = function() {
      this[point] = null;
      this[color$3] = null;
      this[fillColor$0] = null;
      this[measureAxisPosition$] = null;
      this[radiusPx] = null;
      this[boundsLineRadiusPx] = null;
      this[strokeWidthPx$5] = null;
      this[symbolRendererId] = null;
      ;
    }).prototype = PointRendererElement.prototype;
    dart.addTypeTests(PointRendererElement);
    PointRendererElement.prototype[_is_PointRendererElement_default] = true;
    dart.setMethodSignature(PointRendererElement, () => ({
      __proto__: dart.getMethods(PointRendererElement.__proto__),
      clone: dart.fnType(point_renderer.PointRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [point_renderer.PointRendererElement, point_renderer.PointRendererElement, core.double])
    }));
    dart.setLibraryUri(PointRendererElement, "package:charts_common/src/chart/scatter_plot/point_renderer.dart");
    dart.setFieldSignature(PointRendererElement, () => ({
      __proto__: dart.getFields(PointRendererElement.__proto__),
      point: dart.fieldType(point_renderer.DatumPoint$(D)),
      color: dart.fieldType(color$.Color),
      fillColor: dart.fieldType(color$.Color),
      measureAxisPosition: dart.fieldType(core.double),
      radiusPx: dart.fieldType(core.double),
      boundsLineRadiusPx: dart.fieldType(core.double),
      strokeWidthPx: dart.fieldType(core.double),
      symbolRendererId: dart.fieldType(core.String)
    }));
    return PointRendererElement;
  });
  point_renderer.PointRendererElement = point_renderer.PointRendererElement$();
  dart.addTypeTests(point_renderer.PointRendererElement, _is_PointRendererElement_default);
  const _previousPoint = dart.privateName(point_renderer, "_previousPoint");
  const _targetPoint = dart.privateName(point_renderer, "_targetPoint");
  const _is_AnimatedPoint_default = Symbol('_is_AnimatedPoint_default');
  const key$0 = dart.privateName(point_renderer, "AnimatedPoint.key");
  const overlaySeries$0 = dart.privateName(point_renderer, "AnimatedPoint.overlaySeries");
  const animatingOut$ = dart.privateName(point_renderer, "AnimatedPoint.animatingOut");
  point_renderer.AnimatedPoint$ = dart.generic(D => {
    let DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    let PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class AnimatedPoint extends core.Object {
      get key() {
        return this[key$0];
      }
      set key(value) {
        super.key = value;
      }
      get overlaySeries() {
        return this[overlaySeries$0];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get animatingOut() {
        return this[animatingOut$];
      }
      set animatingOut(value) {
        this[animatingOut$] = value;
      }
      animateOut() {
        let newTarget = this[_currentPoint].clone();
        let targetPoint = newTarget.point;
        newTarget.point = DatumPointOfD().from(targetPoint, {x: targetPoint.x, y: newTarget.measureAxisPosition[$roundToDouble](), yLower: newTarget.measureAxisPosition[$roundToDouble](), yUpper: newTarget.measureAxisPosition[$roundToDouble]()});
        newTarget.radiusPx = 0.0;
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        PointRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentPoint] == null ? this[_currentPoint] = newTarget.clone() : null;
        this[_previousPoint] = this[_currentPoint].clone();
        this[_targetPoint] = newTarget;
      }
      getCurrentPoint(animationPercent) {
        if (animationPercent === 1.0 || this[_previousPoint] == null) {
          this[_currentPoint] = this[_targetPoint];
          this[_previousPoint] = this[_targetPoint];
          return this[_currentPoint];
        }
        this[_currentPoint].updateAnimationPercent(this[_previousPoint], this[_targetPoint], animationPercent);
        return this[_currentPoint];
      }
    }
    (AnimatedPoint.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[_previousPoint] = null;
      this[_targetPoint] = null;
      this[_currentPoint] = null;
      this[animatingOut$] = false;
      this[key$0] = key;
      this[overlaySeries$0] = overlaySeries;
      ;
    }).prototype = AnimatedPoint.prototype;
    dart.addTypeTests(AnimatedPoint);
    AnimatedPoint.prototype[_is_AnimatedPoint_default] = true;
    dart.setMethodSignature(AnimatedPoint, () => ({
      __proto__: dart.getMethods(AnimatedPoint.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentPoint: dart.fnType(point_renderer.PointRendererElement$(D), [core.double])
    }));
    dart.setLibraryUri(AnimatedPoint, "package:charts_common/src/chart/scatter_plot/point_renderer.dart");
    dart.setFieldSignature(AnimatedPoint, () => ({
      __proto__: dart.getFields(AnimatedPoint.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [_previousPoint]: dart.fieldType(point_renderer.PointRendererElement$(D)),
      [_targetPoint]: dart.fieldType(point_renderer.PointRendererElement$(D)),
      [_currentPoint]: dart.fieldType(point_renderer.PointRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return AnimatedPoint;
  });
  point_renderer.AnimatedPoint = point_renderer.AnimatedPoint$();
  dart.addTypeTests(point_renderer.AnimatedPoint, _is_AnimatedPoint_default);
  point_renderer._Distances = class _Distances extends core.Object {};
  (point_renderer._Distances.new = function(opts) {
    let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
    let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
    let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
    let insidePoint = opts && 'insidePoint' in opts ? opts.insidePoint : null;
    this.domainDistance = domainDistance;
    this.measureDistance = measureDistance;
    this.relativeDistance = relativeDistance;
    this.insidePoint = insidePoint;
    ;
  }).prototype = point_renderer._Distances.prototype;
  dart.addTypeTests(point_renderer._Distances);
  dart.setLibraryUri(point_renderer._Distances, "package:charts_common/src/chart/scatter_plot/point_renderer.dart");
  dart.setFieldSignature(point_renderer._Distances, () => ({
    __proto__: dart.getFields(point_renderer._Distances.__proto__),
    domainDistance: dart.finalFieldType(core.double),
    measureDistance: dart.finalFieldType(core.double),
    relativeDistance: dart.finalFieldType(core.double),
    insidePoint: dart.finalFieldType(core.bool)
  }));
  let C176;
  let C177;
  let C178;
  let C179;
  let C180;
  dart.defineLazy(point_renderer, {
    /*point_renderer.pointElementsKey*/get pointElementsKey() {
      return C176 || CT.C176;
    },
    /*point_renderer.pointSymbolRendererFnKey*/get pointSymbolRendererFnKey() {
      return C177 || CT.C177;
    },
    /*point_renderer.pointSymbolRendererIdKey*/get pointSymbolRendererIdKey() {
      return C178 || CT.C178;
    },
    /*point_renderer.boundsLineRadiusPxKey*/get boundsLineRadiusPxKey() {
      return C179 || CT.C179;
    },
    /*point_renderer.boundsLineRadiusPxFnKey*/get boundsLineRadiusPxFnKey() {
      return C180 || CT.C180;
    },
    /*point_renderer.defaultSymbolRendererId*/get defaultSymbolRendererId() {
      return "__default__";
    },
    /*point_renderer._maxInitialDistance*/get _maxInitialDistance() {
      return 10000;
    }
  });
  const _clampPointAlongLineToBoundingBox = dart.privateName(comparison_points_decorator, "_clampPointAlongLineToBoundingBox");
  const _is_ComparisonPointsDecorator_default = Symbol('_is_ComparisonPointsDecorator_default');
  const symbolRenderer$4 = dart.privateName(comparison_points_decorator, "ComparisonPointsDecorator.symbolRenderer");
  const renderAbove = dart.privateName(comparison_points_decorator, "ComparisonPointsDecorator.renderAbove");
  comparison_points_decorator.ComparisonPointsDecorator$ = dart.generic(D => {
    let PointRendererElementOfD = () => (PointRendererElementOfD = dart.constFn(point_renderer.PointRendererElement$(D)))();
    class ComparisonPointsDecorator extends point_renderer_decorator.PointRendererDecorator$(D) {
      get symbolRenderer() {
        return this[symbolRenderer$4];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get renderAbove() {
        return this[renderAbove];
      }
      set renderAbove(value) {
        super.renderAbove = value;
      }
      decorate(pointElement, canvas, graphicsFactory, opts) {
        PointRendererElementOfD()._check(pointElement);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let points = this.computeBoundedPointsForElement(pointElement, drawBounds);
        if (points == null) {
          return;
        }
        let color = pointElement.color.lighter;
        this.symbolRenderer.paint(canvas, points[$_get](0), pointElement.boundsLineRadiusPx, {fillColor: color, strokeColor: color, p2: points[$_get](1)});
      }
      computeBoundedPointsForElement(pointElement, drawBounds) {
        PointRendererElementOfD()._check(pointElement);
        if (pointElement.point.xLower == null || pointElement.point.xUpper == null || pointElement.point.yLower == null || pointElement.point.yUpper == null) {
          return null;
        }
        let p1 = new (PointOfdouble()).new(pointElement.point.xLower, pointElement.point.yLower);
        let p2 = new (PointOfdouble()).new(pointElement.point.xUpper, pointElement.point.yUpper);
        let dataBoundsRect = RectangleOfnum().fromPoints(p1, p2);
        if (!dart.test(drawBounds[$intersects](dataBoundsRect))) {
          return null;
        }
        let p1p2 = comparison_points_decorator._Line.fromPoints(p1, p2);
        if (!dart.test(drawBounds[$containsPoint](p1))) {
          let p = this[_clampPointAlongLineToBoundingBox](p1, p1p2, drawBounds);
          if (p != null) {
            p1 = p;
          }
        }
        if (!dart.test(drawBounds[$containsPoint](p2))) {
          let p = this[_clampPointAlongLineToBoundingBox](p2, p1p2, drawBounds);
          if (p != null) {
            p2 = p;
          }
        }
        return JSArrayOfPointOfdouble().of([p1, p2]);
      }
      [_clampPointAlongLineToBoundingBox](p1, line, bounds) {
        if (dart.notNull(p1.y) < dart.notNull(bounds[$top])) {
          let p = line.intersection(new comparison_points_decorator._Line.new(0.0, bounds[$top][$toDouble]()));
          if (p != null && dart.test(bounds[$containsPoint](p))) {
            return p;
          }
        }
        if (dart.notNull(p1.y) > dart.notNull(bounds[$bottom])) {
          let p = line.intersection(new comparison_points_decorator._Line.new(0.0, bounds[$bottom][$toDouble]()));
          if (p != null && dart.test(bounds[$containsPoint](p))) {
            return p;
          }
        }
        if (dart.notNull(p1.x) < dart.notNull(bounds[$left])) {
          let p = line.intersection(comparison_points_decorator._Line.fromVertical(bounds[$left][$toDouble]()));
          if (p != null && dart.test(bounds[$containsPoint](p))) {
            return p;
          }
        }
        if (dart.notNull(p1.x) > dart.notNull(bounds[$right])) {
          let p = line.intersection(comparison_points_decorator._Line.fromVertical(bounds[$right][$toDouble]()));
          if (p != null && dart.test(bounds[$containsPoint](p))) {
            return p;
          }
        }
        return null;
      }
    }
    (ComparisonPointsDecorator.new = function(opts) {
      let t5;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[renderAbove] = false;
      this[symbolRenderer$4] = (t5 = symbolRenderer, t5 == null ? new symbol_renderer.CylinderSymbolRenderer.new() : t5);
      ComparisonPointsDecorator.__proto__.new.call(this);
      ;
    }).prototype = ComparisonPointsDecorator.prototype;
    dart.addTypeTests(ComparisonPointsDecorator);
    ComparisonPointsDecorator.prototype[_is_ComparisonPointsDecorator_default] = true;
    dart.setMethodSignature(ComparisonPointsDecorator, () => ({
      __proto__: dart.getMethods(ComparisonPointsDecorator.__proto__),
      decorate: dart.fnType(dart.void, [core.Object, chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), rtl: core.bool}, {}),
      computeBoundedPointsForElement: dart.fnType(core.List$(math.Point$(core.double)), [core.Object, math.Rectangle$(core.num)]),
      [_clampPointAlongLineToBoundingBox]: dart.fnType(math.Point$(core.double), [math.Point$(core.double), comparison_points_decorator._Line, math.Rectangle$(core.num)])
    }));
    dart.setLibraryUri(ComparisonPointsDecorator, "package:charts_common/src/chart/scatter_plot/comparison_points_decorator.dart");
    dart.setFieldSignature(ComparisonPointsDecorator, () => ({
      __proto__: dart.getFields(ComparisonPointsDecorator.__proto__),
      symbolRenderer: dart.finalFieldType(symbol_renderer.PointSymbolRenderer),
      renderAbove: dart.finalFieldType(core.bool)
    }));
    return ComparisonPointsDecorator;
  });
  comparison_points_decorator.ComparisonPointsDecorator = comparison_points_decorator.ComparisonPointsDecorator$();
  dart.addTypeTests(comparison_points_decorator.ComparisonPointsDecorator, _is_ComparisonPointsDecorator_default);
  comparison_points_decorator._Line = class _Line extends core.Object {
    get vertical() {
      return this.slope == null && this.xIntercept != null;
    }
    static fromPoints(p1, p2) {
      if (p1.x == p2.x) {
        return comparison_points_decorator._Line.fromVertical(p1.x);
      }
      let m = ((dart.notNull(p2.y) - dart.notNull(p1.y)) / (dart.notNull(p2.x) - dart.notNull(p1.x)))[$toDouble]();
      let b = (dart.notNull(p1.y) - m * dart.notNull(p1.x))[$toDouble]();
      return new comparison_points_decorator._Line.new(m, b);
    }
    static fromVertical(xIntercept) {
      return new comparison_points_decorator._Line.new(null, null, xIntercept[$toDouble]());
    }
    intersection(other) {
      if (this.slope == other.slope || dart.test(this.vertical) && dart.test(other.vertical)) {
        return null;
      }
      if (dart.test(other.vertical)) {
        return new (PointOfdouble()).new(other.xIntercept, dart.notNull(this.slope) * dart.notNull(other.xIntercept) + dart.notNull(this.yIntercept));
      }
      if (dart.test(this.vertical)) {
        return new (PointOfdouble()).new(this.xIntercept, dart.notNull(other.slope) * dart.notNull(this.xIntercept) + dart.notNull(other.yIntercept));
      }
      let x = (dart.notNull(other.yIntercept) - dart.notNull(this.yIntercept)) / (dart.notNull(this.slope) - dart.notNull(other.slope));
      let y = dart.notNull(this.slope) * (dart.notNull(other.yIntercept) - dart.notNull(this.yIntercept)) / (dart.notNull(this.slope) - dart.notNull(other.slope)) + dart.notNull(this.yIntercept);
      return new (PointOfdouble()).new(x, y);
    }
  };
  (comparison_points_decorator._Line.new = function(slope, yIntercept, xIntercept) {
    if (xIntercept === void 0) xIntercept = null;
    this.slope = slope;
    this.yIntercept = yIntercept;
    this.xIntercept = xIntercept;
    ;
  }).prototype = comparison_points_decorator._Line.prototype;
  dart.addTypeTests(comparison_points_decorator._Line);
  dart.setMethodSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getMethods(comparison_points_decorator._Line.__proto__),
    intersection: dart.fnType(math.Point$(core.double), [comparison_points_decorator._Line])
  }));
  dart.setGetterSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getGetters(comparison_points_decorator._Line.__proto__),
    vertical: core.bool
  }));
  dart.setLibraryUri(comparison_points_decorator._Line, "package:charts_common/src/chart/scatter_plot/comparison_points_decorator.dart");
  dart.setFieldSignature(comparison_points_decorator._Line, () => ({
    __proto__: dart.getFields(comparison_points_decorator._Line.__proto__),
    slope: dart.fieldType(core.double),
    yIntercept: dart.fieldType(core.double),
    xIntercept: dart.fieldType(core.double)
  }));
  date_time_axis.DateTimeAxis = class DateTimeAxis extends axis$.Axis$(core.DateTime) {
    setScaleViewport(viewport) {
      date_time_scale.DateTimeScale.as(this.mutableScale).viewportDomain = viewport;
    }
  };
  (date_time_axis.DateTimeAxis.new = function(dateTimeFactory, opts) {
    let t5, t5$;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    date_time_axis.DateTimeAxis.__proto__.new.call(this, {tickProvider: TickProviderOfDateTime()._check((t5 = tickProvider, t5 == null ? auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDefault(dateTimeFactory) : t5)), tickFormatter: TickFormatterOfDateTime()._check((t5$ = tickFormatter, t5$ == null ? date_time_tick_formatter.DateTimeTickFormatter.new(dateTimeFactory) : t5$)), scale: new date_time_scale.DateTimeScale.new(dateTimeFactory)});
    ;
  }).prototype = date_time_axis.DateTimeAxis.prototype;
  dart.addTypeTests(date_time_axis.DateTimeAxis);
  dart.setMethodSignature(date_time_axis.DateTimeAxis, () => ({
    __proto__: dart.getMethods(date_time_axis.DateTimeAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [date_time_extents.DateTimeExtents])
  }));
  dart.setLibraryUri(date_time_axis.DateTimeAxis, "package:charts_common/src/chart/cartesian/axis/time/date_time_axis.dart");
  const _timeFormatters$ = dart.privateName(date_time_tick_formatter, "_timeFormatters");
  date_time_tick_formatter.DateTimeTickFormatter = class DateTimeTickFormatter extends core.Object {
    static new(dateTimeFactory, opts) {
      let overrides = opts && 'overrides' in opts ? opts.overrides : null;
      let map = new (IdentityMapOfint$TimeTickFormatter()).from([60000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "mm", transitionFormat: "h mm", transitionField: time_tick_formatter_impl.CalendarField.hourOfDay}), 3600000, new hour_tick_formatter.HourTickFormatter.new({dateTimeFactory: dateTimeFactory, simpleFormat: "h", transitionFormat: "MMM d ha", noonFormat: "ha"}), 23 * 3600000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "d", transitionFormat: "MMM d", transitionField: time_tick_formatter_impl.CalendarField.month}), 28 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "MMM", transitionFormat: "MMM yyyy", transitionField: time_tick_formatter_impl.CalendarField.year}), 364 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "yyyy", transitionFormat: "yyyy", transitionField: time_tick_formatter_impl.CalendarField.year})]);
      if (overrides != null) {
        map[$addAll](overrides);
      }
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(map);
    }
    static withoutTime(dateTimeFactory) {
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(new (IdentityMapOfint$TimeTickFormatter()).from([23 * 3600000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "d", transitionFormat: "MMM d", transitionField: time_tick_formatter_impl.CalendarField.month}), 28 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "MMM", transitionFormat: "MMM yyyy", transitionField: time_tick_formatter_impl.CalendarField.year}), 365 * 86400000, new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: dateTimeFactory, simpleFormat: "yyyy", transitionFormat: "yyyy", transitionField: time_tick_formatter_impl.CalendarField.year})]));
    }
    static uniform(formatter) {
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(new (IdentityMapOfint$TimeTickFormatter()).from([-1, formatter]));
    }
    static withFormatters(formatters) {
      if (formatters == null || dart.test(formatters[$isEmpty])) {
        dart.throw(new core.ArgumentError.new("At least one TimeTickFormatter is required."));
      }
      return new date_time_tick_formatter.DateTimeTickFormatter._internal(formatters);
    }
    format(tickValues, cache, opts) {
      let t5;
      ListOfDateTime()._check(tickValues);
      MapOfDateTime$String()._check(cache);
      let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
      let tickLabels = JSArrayOfString().of([]);
      if (dart.test(tickValues[$isEmpty])) {
        return tickLabels;
      }
      let formatter = this[_timeFormatters$][$_get](this[_timeFormatters$][$keys][$first]);
      let formatterFound = false;
      if (this[_timeFormatters$][$keys][$first] === -1) {
        formatterFound = true;
      } else {
        let minTimeBetweenTicks = stepSize[$toInt]();
        let keys = this[_timeFormatters$][$keys][$iterator];
        while (dart.test(keys.moveNext()) && !formatterFound) {
          if (dart.notNull(keys.current) > minTimeBetweenTicks) {
            formatterFound = true;
          } else {
            formatter = this[_timeFormatters$][$_get](keys.current);
          }
        }
      }
      let tickValuesIt = tickValues[$iterator];
      let tickValue = (t5 = tickValuesIt, t5.moveNext(), t5).current;
      let prevTickValue = tickValue;
      tickLabels[$add](formatter.formatFirstTick(tickValue));
      while (dart.test(tickValuesIt.moveNext())) {
        tickValue = tickValuesIt.current;
        if (dart.test(formatter.isTransition(tickValue, prevTickValue))) {
          tickLabels[$add](formatter.formatTransitionTick(tickValue));
        } else {
          tickLabels[$add](formatter.formatSimpleTick(tickValue));
        }
        prevTickValue = tickValue;
      }
      return tickLabels;
    }
    static _checkPositiveAndSorted(values) {
      let t5;
      let valuesIterator = values[$iterator];
      let prev = (t5 = valuesIterator, t5.moveNext(), t5).current;
      let isSorted = true;
      if (dart.notNull(prev) <= 0) {
        dart.throw(new core.ArgumentError.new("Formatter keys must be positive"));
      }
      while (dart.test(valuesIterator.moveNext()) && isSorted) {
        isSorted = dart.notNull(prev) < dart.notNull(valuesIterator.current);
        prev = valuesIterator.current;
      }
      if (!isSorted) {
        dart.throw(new core.ArgumentError.new("Formatters must be sorted with keys in increasing order"));
      }
    }
  };
  (date_time_tick_formatter.DateTimeTickFormatter._internal = function(_timeFormatters) {
    this[_timeFormatters$] = _timeFormatters;
    if (this[_timeFormatters$][$length] === 1) {
      return;
    }
    date_time_tick_formatter.DateTimeTickFormatter._checkPositiveAndSorted(this[_timeFormatters$][$keys]);
  }).prototype = date_time_tick_formatter.DateTimeTickFormatter.prototype;
  dart.addTypeTests(date_time_tick_formatter.DateTimeTickFormatter);
  date_time_tick_formatter.DateTimeTickFormatter[dart.implements] = () => [tick_formatter.TickFormatter$(core.DateTime)];
  dart.setMethodSignature(date_time_tick_formatter.DateTimeTickFormatter, () => ({
    __proto__: dart.getMethods(date_time_tick_formatter.DateTimeTickFormatter.__proto__),
    format: dart.fnType(core.List$(core.String), [core.Object, core.Object], {stepSize: core.num}, {})
  }));
  dart.setLibraryUri(date_time_tick_formatter.DateTimeTickFormatter, "package:charts_common/src/chart/cartesian/axis/time/date_time_tick_formatter.dart");
  dart.setFieldSignature(date_time_tick_formatter.DateTimeTickFormatter, () => ({
    __proto__: dart.getFields(date_time_tick_formatter.DateTimeTickFormatter.__proto__),
    [_timeFormatters$]: dart.finalFieldType(core.Map$(core.int, time_tick_formatter.TimeTickFormatter))
  }));
  dart.defineLazy(date_time_tick_formatter.DateTimeTickFormatter, {
    /*date_time_tick_formatter.DateTimeTickFormatter.SECOND*/get SECOND() {
      return 1000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.MINUTE*/get MINUTE() {
      return 60000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.HOUR*/get HOUR() {
      return 3600000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.DAY*/get DAY() {
      return 86400000;
    },
    /*date_time_tick_formatter.DateTimeTickFormatter.ANY*/get ANY() {
      return -1;
    }
  });
  const _potentialTickProviders = dart.privateName(auto_adjusting_date_time_tick_provider, "_potentialTickProviders");
  const _getClosestTickProvider = dart.privateName(auto_adjusting_date_time_tick_provider, "_getClosestTickProvider");
  auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider = class AutoAdjustingDateTimeTickProvider extends core.Object {
    static createDefault(dateTimeFactory) {
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(JSArrayOfTimeRangeTickProvider().of([auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createYearTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMonthTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDayTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createHourTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMinuteTickProvider(dateTimeFactory)]));
    }
    static createWithoutTime(dateTimeFactory) {
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(JSArrayOfTimeRangeTickProvider().of([auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createYearTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createMonthTickProvider(dateTimeFactory), auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDayTickProvider(dateTimeFactory)]));
    }
    static createWith(potentialTickProviders) {
      if (potentialTickProviders == null || dart.test(potentialTickProviders[$isEmpty])) {
        dart.throw(new core.ArgumentError.new("At least one TimeRangeTickProvider is required"));
      }
      return new auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal(potentialTickProviders);
    }
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      date_time_scale.DateTimeScale._check(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      TickFormatterOfDateTime()._check(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      MapOfDateTime$String()._check(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      TickHintOfDateTime()._check(tickHint);
      let tickProviders = null;
      if (tickHint != null) {
        tickProviders = JSArrayOfTimeRangeTickProvider().of([this[_getClosestTickProvider](tickHint)]);
      } else {
        tickProviders = this[_potentialTickProviders];
      }
      let lastTickProvider = tickProviders[$last];
      let viewport = scale.viewportDomain;
      for (let tickProvider of tickProviders) {
        let isLastProvider = dart.equals(tickProvider, lastTickProvider);
        if (isLastProvider || dart.test(tickProvider.providesSufficientTicksForRange(viewport))) {
          return tickProvider.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation});
        }
      }
      return JSArrayOfTickOfDateTime().of([]);
    }
    [_getClosestTickProvider](tickHint) {
      let stepSize = (dart.notNull(tickHint.end.difference(tickHint.start).inMilliseconds) / (dart.notNull(tickHint.tickCount) - 1))[$round]();
      let minDifference = null;
      let closestTickProvider = null;
      for (let tickProvider of this[_potentialTickProviders]) {
        let difference = (stepSize - dart.notNull(tickProvider.getClosestStepSize(stepSize)))[$abs]();
        if (minDifference == null || dart.notNull(minDifference) > difference) {
          minDifference = difference;
          closestTickProvider = tickProvider;
        }
      }
      return closestTickProvider;
    }
    static createYearTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(year_time_stepper.YearTimeStepper.new(dateTimeFactory));
    }
    static createMonthTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(month_time_stepper.MonthTimeStepper.new(dateTimeFactory));
    }
    static createDayTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(day_time_stepper.DayTimeStepper.new(dateTimeFactory));
    }
    static createHourTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(hour_time_stepper.HourTimeStepper.new(dateTimeFactory));
    }
    static createMinuteTickProvider(dateTimeFactory) {
      return new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(minute_time_stepper.MinuteTimeStepper.new(dateTimeFactory));
    }
  };
  (auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider._internal = function(tickProviders) {
    this[_potentialTickProviders] = tickProviders;
    ;
  }).prototype = auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.prototype;
  dart.addTypeTests(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider);
  auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider[dart.implements] = () => [tick_provider.TickProvider$(core.DateTime)];
  dart.setMethodSignature(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, () => ({
    __proto__: dart.getMethods(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.__proto__),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.DateTime)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {}),
    [_getClosestTickProvider]: dart.fnType(time_range_tick_provider.TimeRangeTickProvider, [tick_provider.TickHint$(core.DateTime)])
  }));
  dart.setLibraryUri(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, "package:charts_common/src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart");
  dart.setFieldSignature(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, () => ({
    __proto__: dart.getFields(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.__proto__),
    [_potentialTickProviders]: dart.finalFieldType(core.List$(time_range_tick_provider.TimeRangeTickProvider))
  }));
  const _allowedTickIncrements = dart.privateName(year_time_stepper, "_allowedTickIncrements");
  const _stepsIterable = dart.privateName(base_time_stepper, "_stepsIterable");
  const dateTimeFactory$1 = dart.privateName(base_time_stepper, "BaseTimeStepper.dateTimeFactory");
  base_time_stepper.BaseTimeStepper = class BaseTimeStepper extends core.Object {
    get dateTimeFactory() {
      return this[dateTimeFactory$1];
    }
    set dateTimeFactory(value) {
      super.dateTimeFactory = value;
    }
    getStepCountBetween(timeExtent, tickIncrement) {
      base_time_stepper.checkTickIncrement(tickIncrement);
      let min = timeExtent.start;
      let max = timeExtent.end;
      let time = this.getStepTimeAfterInclusive(min, tickIncrement);
      let cnt = 0;
      while (dart.notNull(time.compareTo(max)) <= 0) {
        cnt = cnt + 1;
        time = this.getNextStepTime(time, tickIncrement);
      }
      return cnt;
    }
    getSteps(timeExtent) {
      if (this[_stepsIterable] == null || !dart.equals(this[_stepsIterable].timeExtent, timeExtent)) {
        this[_stepsIterable] = base_time_stepper._TimeStepIteratorFactoryImpl.new(timeExtent, this);
      }
      return this[_stepsIterable];
    }
    updateBoundingSteps(timeExtent) {
      let stepBefore = this.getStepTimeBeforeInclusive(timeExtent.start, 1);
      let stepAfter = this.getStepTimeAfterInclusive(timeExtent.end, 1);
      return new date_time_extents.DateTimeExtents.new({start: stepBefore, end: stepAfter});
    }
    getStepTimeAfterInclusive(time, tickIncrement) {
      let boundedStart = this.getStepTimeBeforeInclusive(time, tickIncrement);
      if (dart.test(boundedStart.isAtSameMomentAs(time))) {
        return boundedStart;
      }
      return this.getNextStepTime(boundedStart, tickIncrement);
    }
  };
  (base_time_stepper.BaseTimeStepper.new = function(dateTimeFactory) {
    this[_stepsIterable] = null;
    this[dateTimeFactory$1] = dateTimeFactory;
    ;
  }).prototype = base_time_stepper.BaseTimeStepper.prototype;
  dart.addTypeTests(base_time_stepper.BaseTimeStepper);
  base_time_stepper.BaseTimeStepper[dart.implements] = () => [time_stepper.TimeStepper];
  dart.setMethodSignature(base_time_stepper.BaseTimeStepper, () => ({
    __proto__: dart.getMethods(base_time_stepper.BaseTimeStepper.__proto__),
    getStepCountBetween: dart.fnType(core.int, [date_time_extents.DateTimeExtents, core.int]),
    getSteps: dart.fnType(time_stepper.TimeStepIteratorFactory, [date_time_extents.DateTimeExtents]),
    updateBoundingSteps: dart.fnType(date_time_extents.DateTimeExtents, [date_time_extents.DateTimeExtents]),
    getStepTimeAfterInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setLibraryUri(base_time_stepper.BaseTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart");
  dart.setFieldSignature(base_time_stepper.BaseTimeStepper, () => ({
    __proto__: dart.getFields(base_time_stepper.BaseTimeStepper.__proto__),
    dateTimeFactory: dart.finalFieldType(date_time_factory.DateTimeFactory),
    [_stepsIterable]: dart.fieldType(base_time_stepper._TimeStepIteratorFactoryImpl)
  }));
  let C181;
  year_time_stepper.YearTimeStepper = class YearTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = year_time_stepper.YearTimeStepper._defaultIncrements : null;
      if (!dart.test(allowedTickIncrements[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart", 36, 12, "allowedTickIncrements.isNotEmpty");
      if (!dart.equals(allowedTickIncrements[$any](dart.fn(increment => dart.notNull(increment) <= 0, intTobool())), false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart", 38, 12, "allowedTickIncrements.any((increment) => increment <= 0) == false");
      return new year_time_stepper.YearTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 365 * 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[_allowedTickIncrements];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let yearRemainder = time.year[$modulo](tickIncrement);
      return this.dateTimeFactory.createDateTime(dart.notNull(time.year) - yearRemainder);
    }
    getNextStepTime(time, tickIncrement) {
      return this.dateTimeFactory.createDateTime(dart.notNull(time.year) + dart.notNull(tickIncrement));
    }
  };
  (year_time_stepper.YearTimeStepper._internal = function(dateTimeFactory, increments) {
    this[_allowedTickIncrements] = increments;
    year_time_stepper.YearTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = year_time_stepper.YearTimeStepper.prototype;
  dart.addTypeTests(year_time_stepper.YearTimeStepper);
  dart.setMethodSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getMethods(year_time_stepper.YearTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getGetters(year_time_stepper.YearTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(year_time_stepper.YearTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart");
  dart.setFieldSignature(year_time_stepper.YearTimeStepper, () => ({
    __proto__: dart.getFields(year_time_stepper.YearTimeStepper.__proto__),
    [_allowedTickIncrements]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(year_time_stepper.YearTimeStepper, {
    /*year_time_stepper.YearTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C181 || CT.C181;
    }
  });
  const _current$ = dart.privateName(base_time_stepper, "_current");
  const _tickIncrement = dart.privateName(base_time_stepper, "_tickIncrement");
  base_time_stepper._TimeStepIteratorImpl = class _TimeStepIteratorImpl extends core.Object {
    moveNext() {
      if (this[_current$] == null) {
        this[_current$] = this.stepper.getStepTimeAfterInclusive(this.extentStartTime, this[_tickIncrement]);
      } else {
        this[_current$] = this.stepper.getNextStepTime(this[_current$], this[_tickIncrement]);
      }
      return dart.notNull(this[_current$].compareTo(this.extentEndTime)) <= 0;
    }
    get current() {
      return this[_current$];
    }
    reset(tickIncrement) {
      base_time_stepper.checkTickIncrement(tickIncrement);
      this[_tickIncrement] = tickIncrement;
      this[_current$] = null;
      return this;
    }
  };
  (base_time_stepper._TimeStepIteratorImpl.new = function(extentStartTime, extentEndTime, stepper) {
    this[_current$] = null;
    this[_tickIncrement] = 1;
    this.extentStartTime = extentStartTime;
    this.extentEndTime = extentEndTime;
    this.stepper = stepper;
    this.reset(this[_tickIncrement]);
  }).prototype = base_time_stepper._TimeStepIteratorImpl.prototype;
  dart.addTypeTests(base_time_stepper._TimeStepIteratorImpl);
  base_time_stepper._TimeStepIteratorImpl[dart.implements] = () => [time_stepper.TimeStepIterator];
  dart.setMethodSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getMethods(base_time_stepper._TimeStepIteratorImpl.__proto__),
    moveNext: dart.fnType(core.bool, []),
    reset: dart.fnType(time_stepper.TimeStepIterator, [core.int])
  }));
  dart.setGetterSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getGetters(base_time_stepper._TimeStepIteratorImpl.__proto__),
    current: core.DateTime
  }));
  dart.setLibraryUri(base_time_stepper._TimeStepIteratorImpl, "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart");
  dart.setFieldSignature(base_time_stepper._TimeStepIteratorImpl, () => ({
    __proto__: dart.getFields(base_time_stepper._TimeStepIteratorImpl.__proto__),
    extentStartTime: dart.finalFieldType(core.DateTime),
    extentEndTime: dart.finalFieldType(core.DateTime),
    stepper: dart.finalFieldType(base_time_stepper.BaseTimeStepper),
    [_current$]: dart.fieldType(core.DateTime),
    [_tickIncrement]: dart.fieldType(core.int)
  }));
  const _timeStepIterator = dart.privateName(base_time_stepper, "_timeStepIterator");
  time_stepper.TimeStepIteratorFactory = class TimeStepIteratorFactory extends core.Iterable {};
  (time_stepper.TimeStepIteratorFactory.new = function() {
    time_stepper.TimeStepIteratorFactory.__proto__.new.call(this);
    ;
  }).prototype = time_stepper.TimeStepIteratorFactory.prototype;
  dart.addTypeTests(time_stepper.TimeStepIteratorFactory);
  dart.setLibraryUri(time_stepper.TimeStepIteratorFactory, "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart");
  base_time_stepper._TimeStepIteratorFactoryImpl = class _TimeStepIteratorFactoryImpl extends time_stepper.TimeStepIteratorFactory {
    static new(timeExtent, stepper) {
      let startTime = timeExtent.start;
      let endTime = timeExtent.end;
      return new base_time_stepper._TimeStepIteratorFactoryImpl._internal(new base_time_stepper._TimeStepIteratorImpl.new(startTime, endTime, stepper), timeExtent);
    }
    get iterator() {
      return this[_timeStepIterator];
    }
  };
  (base_time_stepper._TimeStepIteratorFactoryImpl._internal = function(timeStepIterator, timeExtent) {
    this.timeExtent = timeExtent;
    this[_timeStepIterator] = timeStepIterator;
    base_time_stepper._TimeStepIteratorFactoryImpl.__proto__.new.call(this);
    ;
  }).prototype = base_time_stepper._TimeStepIteratorFactoryImpl.prototype;
  dart.addTypeTests(base_time_stepper._TimeStepIteratorFactoryImpl);
  dart.setGetterSignature(base_time_stepper._TimeStepIteratorFactoryImpl, () => ({
    __proto__: dart.getGetters(base_time_stepper._TimeStepIteratorFactoryImpl.__proto__),
    iterator: time_stepper.TimeStepIterator,
    [$iterator]: time_stepper.TimeStepIterator
  }));
  dart.setLibraryUri(base_time_stepper._TimeStepIteratorFactoryImpl, "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart");
  dart.setFieldSignature(base_time_stepper._TimeStepIteratorFactoryImpl, () => ({
    __proto__: dart.getFields(base_time_stepper._TimeStepIteratorFactoryImpl.__proto__),
    timeExtent: dart.finalFieldType(date_time_extents.DateTimeExtents),
    [_timeStepIterator]: dart.finalFieldType(base_time_stepper._TimeStepIteratorImpl)
  }));
  dart.defineExtensionAccessors(base_time_stepper._TimeStepIteratorFactoryImpl, ['iterator']);
  base_time_stepper.checkTickIncrement = function checkTickIncrement(tickIncrement) {
    if (!(dart.notNull(tickIncrement) > 0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart", 140, 10, "tickIncrement > 0");
  };
  time_stepper.TimeStepper = class TimeStepper extends core.Object {};
  (time_stepper.TimeStepper.new = function() {
    ;
  }).prototype = time_stepper.TimeStepper.prototype;
  dart.addTypeTests(time_stepper.TimeStepper);
  dart.setLibraryUri(time_stepper.TimeStepper, "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart");
  time_stepper.TimeStepIterator = class TimeStepIterator extends core.Iterator$(core.DateTime) {};
  (time_stepper.TimeStepIterator.new = function() {
    ;
  }).prototype = time_stepper.TimeStepIterator.prototype;
  dart.addTypeTests(time_stepper.TimeStepIterator);
  dart.setLibraryUri(time_stepper.TimeStepIterator, "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart");
  const _getClosestIncrementFromStepSize = dart.privateName(time_range_tick_provider_impl, "_getClosestIncrementFromStepSize");
  time_range_tick_provider.TimeRangeTickProvider = class TimeRangeTickProvider extends tick_provider.BaseTickProvider$(core.DateTime) {};
  (time_range_tick_provider.TimeRangeTickProvider.new = function() {
    time_range_tick_provider.TimeRangeTickProvider.__proto__.new.call(this);
    ;
  }).prototype = time_range_tick_provider.TimeRangeTickProvider.prototype;
  dart.addTypeTests(time_range_tick_provider.TimeRangeTickProvider);
  dart.setLibraryUri(time_range_tick_provider.TimeRangeTickProvider, "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider.dart");
  const requiredMinimumTicks$ = dart.privateName(time_range_tick_provider_impl, "TimeRangeTickProviderImpl.requiredMinimumTicks");
  const timeStepper$ = dart.privateName(time_range_tick_provider_impl, "TimeRangeTickProviderImpl.timeStepper");
  time_range_tick_provider_impl.TimeRangeTickProviderImpl = class TimeRangeTickProviderImpl extends time_range_tick_provider.TimeRangeTickProvider {
    get requiredMinimumTicks() {
      return this[requiredMinimumTicks$];
    }
    set requiredMinimumTicks(value) {
      super.requiredMinimumTicks = value;
    }
    get timeStepper() {
      return this[timeStepper$];
    }
    set timeStepper(value) {
      super.timeStepper = value;
    }
    providesSufficientTicksForRange(domainExtents) {
      let cnt = this.timeStepper.getStepCountBetween(domainExtents, 1);
      return dart.notNull(cnt) >= dart.notNull(this.requiredMinimumTicks);
    }
    getClosestStepSize(stepSize) {
      return dart.notNull(this.timeStepper.typicalStepSizeMs) * dart.notNull(this[_getClosestIncrementFromStepSize](stepSize));
    }
    [_getClosestIncrementFromStepSize](stepSize) {
      let minDifference = null;
      let closestIncrement = null;
      for (let increment of this.timeStepper.allowedTickIncrements) {
        let difference = (dart.notNull(stepSize) - dart.notNull(this.timeStepper.typicalStepSizeMs) * dart.notNull(increment))[$abs]();
        if (minDifference == null || dart.notNull(minDifference) > difference) {
          minDifference = difference;
          closestIncrement = increment;
        }
      }
      return closestIncrement;
    }
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      date_time_scale.DateTimeScale._check(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      TickFormatterOfDateTime()._check(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      MapOfDateTime$String()._check(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      TickHintOfDateTime()._check(tickHint);
      let currentTicks = null;
      let tickValues = JSArrayOfDateTime().of([]);
      let timeStepIt = this.timeStepper.getSteps(scale.viewportDomain).iterator;
      let allowedTickIncrements = null;
      if (tickHint != null) {
        let stepSize = tickHint.end.difference(tickHint.start).inMilliseconds;
        allowedTickIncrements = JSArrayOfint().of([this[_getClosestIncrementFromStepSize](stepSize)]);
      } else {
        allowedTickIncrements = this.timeStepper.allowedTickIncrements;
      }
      for (let i = 0; i < dart.notNull(allowedTickIncrements[$length]); i = i + 1) {
        let tickIncrement = allowedTickIncrements[$_get](i);
        tickValues[$clear]();
        timeStepIt.reset(tickIncrement);
        while (dart.test(timeStepIt.moveNext())) {
          tickValues[$add](timeStepIt.current);
        }
        currentTicks = this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: dart.notNull(this.timeStepper.typicalStepSizeMs) * dart.notNull(tickIncrement)});
        let collisionReport = tickDrawStrategy.collides(currentTicks, orientation);
        if (!dart.test(collisionReport.ticksCollide)) {
          return currentTicks;
        }
      }
      return currentTicks;
    }
  };
  (time_range_tick_provider_impl.TimeRangeTickProviderImpl.new = function(timeStepper, opts) {
    let requiredMinimumTicks = opts && 'requiredMinimumTicks' in opts ? opts.requiredMinimumTicks : 3;
    this[timeStepper$] = timeStepper;
    this[requiredMinimumTicks$] = requiredMinimumTicks;
    time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__.new.call(this);
    ;
  }).prototype = time_range_tick_provider_impl.TimeRangeTickProviderImpl.prototype;
  dart.addTypeTests(time_range_tick_provider_impl.TimeRangeTickProviderImpl);
  dart.setMethodSignature(time_range_tick_provider_impl.TimeRangeTickProviderImpl, () => ({
    __proto__: dart.getMethods(time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__),
    providesSufficientTicksForRange: dart.fnType(core.bool, [date_time_extents.DateTimeExtents]),
    getClosestStepSize: dart.fnType(core.int, [core.int]),
    [_getClosestIncrementFromStepSize]: dart.fnType(core.int, [core.int]),
    getTicks: dart.fnType(core.List$(tick.Tick$(core.DateTime)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {})
  }));
  dart.setLibraryUri(time_range_tick_provider_impl.TimeRangeTickProviderImpl, "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart");
  dart.setFieldSignature(time_range_tick_provider_impl.TimeRangeTickProviderImpl, () => ({
    __proto__: dart.getFields(time_range_tick_provider_impl.TimeRangeTickProviderImpl.__proto__),
    requiredMinimumTicks: dart.finalFieldType(core.int),
    timeStepper: dart.finalFieldType(time_stepper.TimeStepper)
  }));
  const _allowedTickIncrements$ = dart.privateName(month_time_stepper, "_allowedTickIncrements");
  let C182;
  month_time_stepper.MonthTimeStepper = class MonthTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = month_time_stepper.MonthTimeStepper._defaultIncrements : null;
      if (!dart.test(allowedTickIncrements[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart", 36, 12, "allowedTickIncrements.isNotEmpty");
      if (!dart.equals(allowedTickIncrements[$any](dart.fn(increment => dart.notNull(increment) <= 0, intTobool())), false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart", 38, 12, "allowedTickIncrements.any((increment) => increment <= 0) == false");
      return new month_time_stepper.MonthTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 30 * 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[_allowedTickIncrements$];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let monthRemainder = time.month[$modulo](tickIncrement);
      let newMonth = (dart.notNull(time.month) - monthRemainder)[$modulo](12);
      if (time.month === 12 && newMonth === 0) {
        newMonth = 12;
      }
      let newYear = dart.notNull(time.year) - (monthRemainder / 12)[$floor]();
      return this.dateTimeFactory.createDateTime(newYear, newMonth);
    }
    getNextStepTime(time, tickIncrement) {
      let incrementedMonth = dart.notNull(time.month) + dart.notNull(tickIncrement);
      let newMonth = incrementedMonth[$modulo](12);
      let newYear = dart.notNull(time.year) + (incrementedMonth / 12)[$floor]();
      return this.dateTimeFactory.createDateTime(newYear, newMonth);
    }
  };
  (month_time_stepper.MonthTimeStepper._internal = function(dateTimeFactory, increments) {
    this[_allowedTickIncrements$] = increments;
    month_time_stepper.MonthTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = month_time_stepper.MonthTimeStepper.prototype;
  dart.addTypeTests(month_time_stepper.MonthTimeStepper);
  dart.setMethodSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getMethods(month_time_stepper.MonthTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getGetters(month_time_stepper.MonthTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(month_time_stepper.MonthTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart");
  dart.setFieldSignature(month_time_stepper.MonthTimeStepper, () => ({
    __proto__: dart.getFields(month_time_stepper.MonthTimeStepper.__proto__),
    [_allowedTickIncrements$]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(month_time_stepper.MonthTimeStepper, {
    /*month_time_stepper.MonthTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C182 || CT.C182;
    }
  });
  const _allowedTickIncrements$0 = dart.privateName(minute_time_stepper, "_allowedTickIncrements");
  let C183;
  minute_time_stepper.MinuteTimeStepper = class MinuteTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = minute_time_stepper.MinuteTimeStepper._defaultIncrements : null;
      if (!dart.test(allowedTickIncrements[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart", 37, 12, "allowedTickIncrements.isNotEmpty");
      if (!dart.equals(allowedTickIncrements[$any](dart.fn(increment => dart.notNull(increment) <= 0 || dart.notNull(increment) > 60, intTobool())), false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart", 39, 12, "allowedTickIncrements\n            .any((increment) => increment <= 0 || increment > 60) ==\n        false");
      return new minute_time_stepper.MinuteTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 60000;
    }
    get allowedTickIncrements() {
      return this[_allowedTickIncrements$0];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let nextHourStart = dart.notNull(time.millisecondsSinceEpoch) + (60 - dart.notNull(time.minute)) * 60000;
      let minutesToNextHour = ((nextHourStart - dart.notNull(time.millisecondsSinceEpoch)) / 60000)[$ceil]();
      let minRemainder = minutesToNextHour[$modulo](tickIncrement);
      let rewindMinutes = minRemainder === 0 ? 0 : dart.notNull(tickIncrement) - minRemainder;
      let stepBefore = this.dateTimeFactory.createDateTimeFromMilliSecondsSinceEpoch(dart.notNull(time.millisecondsSinceEpoch) - rewindMinutes * 60000);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      return time.add(new core.Duration.new({minutes: tickIncrement}));
    }
  };
  (minute_time_stepper.MinuteTimeStepper._internal = function(dateTimeFactory, increments) {
    this[_allowedTickIncrements$0] = increments;
    minute_time_stepper.MinuteTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = minute_time_stepper.MinuteTimeStepper.prototype;
  dart.addTypeTests(minute_time_stepper.MinuteTimeStepper);
  dart.setMethodSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getMethods(minute_time_stepper.MinuteTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getGetters(minute_time_stepper.MinuteTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(minute_time_stepper.MinuteTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart");
  dart.setFieldSignature(minute_time_stepper.MinuteTimeStepper, () => ({
    __proto__: dart.getFields(minute_time_stepper.MinuteTimeStepper.__proto__),
    [_allowedTickIncrements$0]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(minute_time_stepper.MinuteTimeStepper, {
    /*minute_time_stepper.MinuteTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C183 || CT.C183;
    },
    /*minute_time_stepper.MinuteTimeStepper._millisecondsInMinute*/get _millisecondsInMinute() {
      return 60000;
    }
  });
  const _allowedTickIncrements$1 = dart.privateName(hour_time_stepper, "_allowedTickIncrements");
  let C184;
  hour_time_stepper.HourTimeStepper = class HourTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = hour_time_stepper.HourTimeStepper._defaultIncrements : null;
      if (!dart.test(allowedTickIncrements[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart", 38, 12, "allowedTickIncrements.isNotEmpty");
      if (!dart.equals(allowedTickIncrements[$any](dart.fn(increment => dart.notNull(increment) <= 0 || dart.notNull(increment) > 24, intTobool())), false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart", 40, 12, "allowedTickIncrements\n            .any((increment) => increment <= 0 || increment > 24) ==\n        false");
      return new hour_time_stepper.HourTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 3600000;
    }
    get allowedTickIncrements() {
      return this[_allowedTickIncrements$1];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let nextDay = this.dateTimeFactory.createDateTime(time.year, time.month, time.day).add(new core.Duration.new({hours: 24 + 1}));
      let nextDayStart = this.dateTimeFactory.createDateTime(nextDay.year, nextDay.month, nextDay.day);
      let hoursToNextDay = ((dart.notNull(nextDayStart.millisecondsSinceEpoch) - dart.notNull(time.millisecondsSinceEpoch)) / 3600000)[$ceil]();
      let hoursRemainder = hoursToNextDay[$modulo](tickIncrement);
      let rewindHours = hoursRemainder === 0 ? 0 : dart.notNull(tickIncrement) - hoursRemainder;
      let stepBefore = this.dateTimeFactory.createDateTime(time.year, time.month, time.day, dart.notNull(time.hour) - rewindHours);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      return time.add(new core.Duration.new({hours: tickIncrement}));
    }
  };
  (hour_time_stepper.HourTimeStepper._internal = function(dateTimeFactory, increments) {
    this[_allowedTickIncrements$1] = increments;
    hour_time_stepper.HourTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = hour_time_stepper.HourTimeStepper.prototype;
  dart.addTypeTests(hour_time_stepper.HourTimeStepper);
  dart.setMethodSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getMethods(hour_time_stepper.HourTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getGetters(hour_time_stepper.HourTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(hour_time_stepper.HourTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart");
  dart.setFieldSignature(hour_time_stepper.HourTimeStepper, () => ({
    __proto__: dart.getFields(hour_time_stepper.HourTimeStepper.__proto__),
    [_allowedTickIncrements$1]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(hour_time_stepper.HourTimeStepper, {
    /*hour_time_stepper.HourTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C184 || CT.C184;
    },
    /*hour_time_stepper.HourTimeStepper._hoursInDay*/get _hoursInDay() {
      return 24;
    },
    /*hour_time_stepper.HourTimeStepper._millisecondsInHour*/get _millisecondsInHour() {
      return 3600000;
    }
  });
  const _allowedTickIncrements$2 = dart.privateName(day_time_stepper, "_allowedTickIncrements");
  let C185;
  day_time_stepper.DayTimeStepper = class DayTimeStepper extends base_time_stepper.BaseTimeStepper {
    static new(dateTimeFactory, opts) {
      let allowedTickIncrements = opts && 'allowedTickIncrements' in opts ? opts.allowedTickIncrements : null;
      allowedTickIncrements == null ? allowedTickIncrements = day_time_stepper.DayTimeStepper._defaultIncrements : null;
      if (!dart.test(allowedTickIncrements[$isNotEmpty])) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart", 38, 12, "allowedTickIncrements.isNotEmpty");
      if (!dart.equals(allowedTickIncrements[$any](dart.fn(increment => dart.notNull(increment) <= 0, intTobool())), false)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart", 40, 12, "allowedTickIncrements.any((increment) => increment <= 0) == false");
      return new day_time_stepper.DayTimeStepper._internal(dateTimeFactory, allowedTickIncrements);
    }
    get typicalStepSizeMs() {
      return 24 * 3600 * 1000;
    }
    get allowedTickIncrements() {
      return this[_allowedTickIncrements$2];
    }
    getStepTimeBeforeInclusive(time, tickIncrement) {
      let dayRemainder = (dart.notNull(time.day) - 1)[$modulo](tickIncrement);
      let dayBefore = dayRemainder > 0 ? time.subtract(new core.Duration.new({hours: 24 * dayRemainder - 1})) : time;
      let stepBefore = this.dateTimeFactory.createDateTime(dayBefore.year, dayBefore.month, dayBefore.day);
      return stepBefore;
    }
    getNextStepTime(time, tickIncrement) {
      let stepAfter = time.add(new core.Duration.new({hours: 24 * dart.notNull(tickIncrement) + 1}));
      return this.dateTimeFactory.createDateTime(stepAfter.year, stepAfter.month, stepAfter.day);
    }
  };
  (day_time_stepper.DayTimeStepper._internal = function(dateTimeFactory, increments) {
    this[_allowedTickIncrements$2] = increments;
    day_time_stepper.DayTimeStepper.__proto__.new.call(this, dateTimeFactory);
    ;
  }).prototype = day_time_stepper.DayTimeStepper.prototype;
  dart.addTypeTests(day_time_stepper.DayTimeStepper);
  dart.setMethodSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getMethods(day_time_stepper.DayTimeStepper.__proto__),
    getStepTimeBeforeInclusive: dart.fnType(core.DateTime, [core.DateTime, core.int]),
    getNextStepTime: dart.fnType(core.DateTime, [core.DateTime, core.int])
  }));
  dart.setGetterSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getGetters(day_time_stepper.DayTimeStepper.__proto__),
    typicalStepSizeMs: core.int,
    allowedTickIncrements: core.List$(core.int)
  }));
  dart.setLibraryUri(day_time_stepper.DayTimeStepper, "package:charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart");
  dart.setFieldSignature(day_time_stepper.DayTimeStepper, () => ({
    __proto__: dart.getFields(day_time_stepper.DayTimeStepper.__proto__),
    [_allowedTickIncrements$2]: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineLazy(day_time_stepper.DayTimeStepper, {
    /*day_time_stepper.DayTimeStepper._defaultIncrements*/get _defaultIncrements() {
      return C185 || CT.C185;
    },
    /*day_time_stepper.DayTimeStepper._hoursInDay*/get _hoursInDay() {
      return 24;
    }
  });
  const viewport$0 = dart.privateName(date_time_axis_spec, "DateTimeAxisSpec.viewport");
  date_time_axis_spec.DateTimeAxisSpec = class DateTimeAxisSpec extends axis_spec.AxisSpec$(core.DateTime) {
    get viewport() {
      return this[viewport$0];
    }
    set viewport(value) {
      super.viewport = value;
    }
    configure(axis, context, graphicsFactory) {
      AxisOfDateTime()._check(axis);
      super.configure(axis, context, graphicsFactory);
      if (date_time_axis.DateTimeAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(this.viewport);
      }
    }
    createAxis() {
      if (!false) dart.assertFailed("Call createDateTimeAxis() to create a DateTimeAxis.", "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart", 85, 12, "false");
      return null;
    }
    createDateTimeAxis(dateTimeFactory) {
      return new date_time_axis.DateTimeAxis.new(dateTimeFactory);
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DateTimeAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.viewport));
      return hashcode;
    }
  };
  (date_time_axis_spec.DateTimeAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[viewport$0] = viewport;
    date_time_axis_spec.DateTimeAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine});
    ;
  }).prototype = date_time_axis_spec.DateTimeAxisSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeAxisSpec);
  dart.setMethodSignature(date_time_axis_spec.DateTimeAxisSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DateTimeAxisSpec.__proto__),
    createDateTimeAxis: dart.fnType(date_time_axis.DateTimeAxis, [date_time_factory.DateTimeFactory])
  }));
  dart.setLibraryUri(date_time_axis_spec.DateTimeAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.DateTimeAxisSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.DateTimeAxisSpec.__proto__),
    viewport: dart.finalFieldType(date_time_extents.DateTimeExtents)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.DateTimeAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.DateTimeAxisSpec, ['hashCode']);
  date_time_axis_spec.DateTimeTickProviderSpec = class DateTimeTickProviderSpec extends axis_spec.TickProviderSpec$(core.DateTime) {};
  (date_time_axis_spec.DateTimeTickProviderSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeTickProviderSpec);
  dart.setLibraryUri(date_time_axis_spec.DateTimeTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  date_time_axis_spec.DateTimeTickFormatterSpec = class DateTimeTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.DateTime) {};
  (date_time_axis_spec.DateTimeTickFormatterSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeTickFormatterSpec);
  dart.setLibraryUri(date_time_axis_spec.DateTimeTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  const includeTime$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickProviderSpec.includeTime");
  date_time_axis_spec.AutoDateTimeTickProviderSpec = class AutoDateTimeTickProviderSpec extends core.Object {
    get includeTime() {
      return this[includeTime$];
    }
    set includeTime(value) {
      super.includeTime = value;
    }
    createTickProvider(context) {
      if (dart.test(this.includeTime)) {
        return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createDefault(context.dateTimeFactory);
      } else {
        return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createWithoutTime(context.dateTimeFactory);
      }
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.AutoDateTimeTickProviderSpec.is(other) && dart.equals(this.includeTime, other.includeTime);
    }
    get hashCode() {
      let t5, t5$;
      t5$ = (t5 = this.includeTime, t5 == null ? null : dart.hashCode(t5));
      return t5$ == null ? 0 : t5$;
    }
  };
  (date_time_axis_spec.AutoDateTimeTickProviderSpec.new = function(opts) {
    let includeTime = opts && 'includeTime' in opts ? opts.includeTime : true;
    this[includeTime$] = includeTime;
    ;
  }).prototype = date_time_axis_spec.AutoDateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.AutoDateTimeTickProviderSpec);
  date_time_axis_spec.AutoDateTimeTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.AutoDateTimeTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.AutoDateTimeTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.AutoDateTimeTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.AutoDateTimeTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.AutoDateTimeTickProviderSpec.__proto__),
    includeTime: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.AutoDateTimeTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.AutoDateTimeTickProviderSpec, ['hashCode']);
  const increments$ = dart.privateName(date_time_axis_spec, "DayTickProviderSpec.increments");
  date_time_axis_spec.DayTickProviderSpec = class DayTickProviderSpec extends core.Object {
    get increments() {
      return this[increments$];
    }
    set increments(value) {
      super.increments = value;
    }
    createTickProvider(context) {
      return auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider.createWith(JSArrayOfTimeRangeTickProvider().of([new time_range_tick_provider_impl.TimeRangeTickProviderImpl.new(day_time_stepper.DayTimeStepper.new(context.dateTimeFactory, {allowedTickIncrements: this.increments}))]));
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DayTickProviderSpec.is(other) && dart.equals(this.increments, other.increments);
    }
    get hashCode() {
      let t5, t5$;
      t5$ = (t5 = this.increments, t5 == null ? null : dart.hashCode(t5));
      return t5$ == null ? 0 : t5$;
    }
  };
  (date_time_axis_spec.DayTickProviderSpec.new = function(opts) {
    let increments = opts && 'increments' in opts ? opts.increments : null;
    this[increments$] = increments;
    ;
  }).prototype = date_time_axis_spec.DayTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DayTickProviderSpec);
  date_time_axis_spec.DayTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.DayTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DayTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(auto_adjusting_date_time_tick_provider.AutoAdjustingDateTimeTickProvider, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.DayTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.DayTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.DayTickProviderSpec.__proto__),
    increments: dart.finalFieldType(core.List$(core.int))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.DayTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.DayTickProviderSpec, ['hashCode']);
  date_time_axis_spec.DateTimeEndPointsTickProviderSpec = class DateTimeEndPointsTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new (EndPointsTickProviderOfDateTime()).new();
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.DateTimeEndPointsTickProviderSpec.is(other);
    }
  };
  (date_time_axis_spec.DateTimeEndPointsTickProviderSpec.new = function() {
    ;
  }).prototype = date_time_axis_spec.DateTimeEndPointsTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.DateTimeEndPointsTickProviderSpec);
  date_time_axis_spec.DateTimeEndPointsTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.DateTimeEndPointsTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(end_points_tick_provider.EndPointsTickProvider$(core.DateTime), [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.defineExtensionMethods(date_time_axis_spec.DateTimeEndPointsTickProviderSpec, ['_equals']);
  const tickSpecs$0 = dart.privateName(date_time_axis_spec, "StaticDateTimeTickProviderSpec.tickSpecs");
  date_time_axis_spec.StaticDateTimeTickProviderSpec = class StaticDateTimeTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[tickSpecs$0];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (StaticTickProviderOfDateTime()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.StaticDateTimeTickProviderSpec.is(other) && dart.equals(this.tickSpecs, other.tickSpecs);
    }
    get hashCode() {
      return dart.hashCode(this.tickSpecs);
    }
  };
  (date_time_axis_spec.StaticDateTimeTickProviderSpec.new = function(tickSpecs) {
    this[tickSpecs$0] = tickSpecs;
    ;
  }).prototype = date_time_axis_spec.StaticDateTimeTickProviderSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.StaticDateTimeTickProviderSpec);
  date_time_axis_spec.StaticDateTimeTickProviderSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickProviderSpec];
  dart.setMethodSignature(date_time_axis_spec.StaticDateTimeTickProviderSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.StaticDateTimeTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.DateTime), [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.StaticDateTimeTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.StaticDateTimeTickProviderSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.StaticDateTimeTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.DateTime)))
  }));
  dart.defineExtensionMethods(date_time_axis_spec.StaticDateTimeTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.StaticDateTimeTickProviderSpec, ['hashCode']);
  const format$ = dart.privateName(date_time_axis_spec, "TimeFormatterSpec.format");
  const transitionFormat$ = dart.privateName(date_time_axis_spec, "TimeFormatterSpec.transitionFormat");
  const noonFormat$ = dart.privateName(date_time_axis_spec, "TimeFormatterSpec.noonFormat");
  date_time_axis_spec.TimeFormatterSpec = class TimeFormatterSpec extends core.Object {
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get transitionFormat() {
      return this[transitionFormat$];
    }
    set transitionFormat(value) {
      super.transitionFormat = value;
    }
    get noonFormat() {
      return this[noonFormat$];
    }
    set noonFormat(value) {
      super.noonFormat = value;
    }
    _equals(other) {
      if (other == null) return false;
      return date_time_axis_spec.TimeFormatterSpec.is(other) && this.format == other.format && this.transitionFormat == other.transitionFormat && this.noonFormat == other.noonFormat;
    }
    get hashCode() {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3;
      let hashcode = (t5$ = (t5 = this.format, t5 == null ? null : dart.hashCode(t5)), t5$ == null ? 0 : t5$);
      hashcode = (t5$1 = dart.notNull(hashcode) * 37 + dart.notNull((t5$0 = this.transitionFormat, t5$0 == null ? null : dart.hashCode(t5$0))), t5$1 === null ? 0 : t5$1);
      hashcode = (t5$3 = dart.notNull(hashcode) * 37 + dart.notNull((t5$2 = this.noonFormat, t5$2 == null ? null : dart.hashCode(t5$2))), t5$3 === null ? 0 : t5$3);
      return hashcode;
    }
  };
  (date_time_axis_spec.TimeFormatterSpec.new = function(opts) {
    let format = opts && 'format' in opts ? opts.format : null;
    let transitionFormat = opts && 'transitionFormat' in opts ? opts.transitionFormat : null;
    let noonFormat = opts && 'noonFormat' in opts ? opts.noonFormat : null;
    this[format$] = format;
    this[transitionFormat$] = transitionFormat;
    this[noonFormat$] = noonFormat;
    ;
  }).prototype = date_time_axis_spec.TimeFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.TimeFormatterSpec);
  dart.setMethodSignature(date_time_axis_spec.TimeFormatterSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.TimeFormatterSpec.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.TimeFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.TimeFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.TimeFormatterSpec.__proto__),
    format: dart.finalFieldType(core.String),
    transitionFormat: dart.finalFieldType(core.String),
    noonFormat: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.TimeFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.TimeFormatterSpec, ['hashCode']);
  const formatter$2 = dart.privateName(date_time_axis_spec, "BasicDateTimeTickFormatterSpec.formatter");
  const dateFormat$ = dart.privateName(date_time_axis_spec, "BasicDateTimeTickFormatterSpec.dateFormat");
  date_time_axis_spec.BasicDateTimeTickFormatterSpec = class BasicDateTimeTickFormatterSpec extends core.Object {
    get formatter() {
      return this[formatter$2];
    }
    set formatter(value) {
      super.formatter = value;
    }
    get dateFormat() {
      return this[dateFormat$];
    }
    set dateFormat(value) {
      super.dateFormat = value;
    }
    createTickFormatter(context) {
      return date_time_tick_formatter.DateTimeTickFormatter.uniform(new simple_time_tick_formatter.SimpleTimeTickFormatter.new({formatter: this.dateFormat != null ? dart.bind(this.dateFormat, 'format') : this.formatter}));
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || date_time_axis_spec.BasicDateTimeTickFormatterSpec.is(other) && dart.equals(this.formatter, other.formatter) && dart.equals(this.dateFormat, other.dateFormat);
    }
    get hashCode() {
      let hash = dart.hashCode(this.formatter);
      hash = dart.notNull(hash) * 37 * dart.notNull(dart.hashCode(this.dateFormat));
      return hash;
    }
  };
  (date_time_axis_spec.BasicDateTimeTickFormatterSpec.new = function(formatter) {
    this[formatter$2] = formatter;
    this[dateFormat$] = null;
    ;
  }).prototype = date_time_axis_spec.BasicDateTimeTickFormatterSpec.prototype;
  (date_time_axis_spec.BasicDateTimeTickFormatterSpec.fromDateFormat = function(dateFormat) {
    this[dateFormat$] = dateFormat;
    this[formatter$2] = null;
    ;
  }).prototype = date_time_axis_spec.BasicDateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.BasicDateTimeTickFormatterSpec);
  date_time_axis_spec.BasicDateTimeTickFormatterSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickFormatterSpec];
  dart.setMethodSignature(date_time_axis_spec.BasicDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.BasicDateTimeTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(date_time_tick_formatter.DateTimeTickFormatter, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.BasicDateTimeTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.BasicDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.BasicDateTimeTickFormatterSpec.__proto__),
    formatter: dart.finalFieldType(dart.fnType(core.String, [core.DateTime])),
    dateFormat: dart.finalFieldType(intl.DateFormat)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.BasicDateTimeTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.BasicDateTimeTickFormatterSpec, ['hashCode']);
  const _makeFormatter = dart.privateName(date_time_axis_spec, "_makeFormatter");
  const minute$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.minute");
  const hour$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.hour");
  const day$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.day");
  const month$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.month");
  const year$ = dart.privateName(date_time_axis_spec, "AutoDateTimeTickFormatterSpec.year");
  date_time_axis_spec.AutoDateTimeTickFormatterSpec = class AutoDateTimeTickFormatterSpec extends core.Object {
    get minute() {
      return this[minute$];
    }
    set minute(value) {
      super.minute = value;
    }
    get hour() {
      return this[hour$];
    }
    set hour(value) {
      super.hour = value;
    }
    get day() {
      return this[day$];
    }
    set day(value) {
      super.day = value;
    }
    get month() {
      return this[month$];
    }
    set month(value) {
      super.month = value;
    }
    get year() {
      return this[year$];
    }
    set year(value) {
      super.year = value;
    }
    createTickFormatter(context) {
      let map = new (IdentityMapOfint$TimeTickFormatter()).new();
      if (this.minute != null) {
        map[$_set](60000, this[_makeFormatter](this.minute, time_tick_formatter_impl.CalendarField.hourOfDay, context));
      }
      if (this.hour != null) {
        map[$_set](3600000, this[_makeFormatter](this.hour, time_tick_formatter_impl.CalendarField.date, context));
      }
      if (this.day != null) {
        map[$_set](23 * 3600000, this[_makeFormatter](this.day, time_tick_formatter_impl.CalendarField.month, context));
      }
      if (this.month != null) {
        map[$_set](28 * 86400000, this[_makeFormatter](this.month, time_tick_formatter_impl.CalendarField.year, context));
      }
      if (this.year != null) {
        map[$_set](364 * 86400000, this[_makeFormatter](this.year, time_tick_formatter_impl.CalendarField.year, context));
      }
      return date_time_tick_formatter.DateTimeTickFormatter.new(context.dateTimeFactory, {overrides: map});
    }
    [_makeFormatter](spec, transitionField, context) {
      if (spec.noonFormat != null) {
        return new hour_tick_formatter.HourTickFormatter.new({dateTimeFactory: context.dateTimeFactory, simpleFormat: spec.format, transitionFormat: spec.transitionFormat, noonFormat: spec.noonFormat});
      } else {
        return new time_tick_formatter_impl.TimeTickFormatterImpl.new({dateTimeFactory: context.dateTimeFactory, simpleFormat: spec.format, transitionFormat: spec.transitionFormat, transitionField: transitionField});
      }
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || date_time_axis_spec.AutoDateTimeTickFormatterSpec.is(other) && dart.equals(this.minute, other.minute) && dart.equals(this.hour, other.hour) && dart.equals(this.day, other.day) && dart.equals(this.month, other.month) && dart.equals(this.year, other.year);
    }
    get hashCode() {
      let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5, t5$6, t5$7;
      let hashcode = (t5$ = (t5 = this.minute, t5 == null ? null : dart.hashCode(t5)), t5$ == null ? 0 : t5$);
      hashcode = (t5$1 = dart.notNull(hashcode) * 37 + dart.notNull((t5$0 = this.hour, t5$0 == null ? null : dart.hashCode(t5$0))), t5$1 === null ? 0 : t5$1);
      hashcode = (t5$3 = dart.notNull(hashcode) * 37 + dart.notNull((t5$2 = this.day, t5$2 == null ? null : dart.hashCode(t5$2))), t5$3 === null ? 0 : t5$3);
      hashcode = (t5$5 = dart.notNull(hashcode) * 37 + dart.notNull((t5$4 = this.month, t5$4 == null ? null : dart.hashCode(t5$4))), t5$5 === null ? 0 : t5$5);
      hashcode = (t5$7 = dart.notNull(hashcode) * 37 + dart.notNull((t5$6 = this.year, t5$6 == null ? null : dart.hashCode(t5$6))), t5$7 === null ? 0 : t5$7);
      return hashcode;
    }
  };
  (date_time_axis_spec.AutoDateTimeTickFormatterSpec.new = function(opts) {
    let minute = opts && 'minute' in opts ? opts.minute : null;
    let hour = opts && 'hour' in opts ? opts.hour : null;
    let day = opts && 'day' in opts ? opts.day : null;
    let month = opts && 'month' in opts ? opts.month : null;
    let year = opts && 'year' in opts ? opts.year : null;
    this[minute$] = minute;
    this[hour$] = hour;
    this[day$] = day;
    this[month$] = month;
    this[year$] = year;
    ;
  }).prototype = date_time_axis_spec.AutoDateTimeTickFormatterSpec.prototype;
  dart.addTypeTests(date_time_axis_spec.AutoDateTimeTickFormatterSpec);
  date_time_axis_spec.AutoDateTimeTickFormatterSpec[dart.implements] = () => [date_time_axis_spec.DateTimeTickFormatterSpec];
  dart.setMethodSignature(date_time_axis_spec.AutoDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getMethods(date_time_axis_spec.AutoDateTimeTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(date_time_tick_formatter.DateTimeTickFormatter, [chart_context.ChartContext]),
    [_makeFormatter]: dart.fnType(time_tick_formatter_impl.TimeTickFormatterImpl, [date_time_axis_spec.TimeFormatterSpec, time_tick_formatter_impl.CalendarField, chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(date_time_axis_spec.AutoDateTimeTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart");
  dart.setFieldSignature(date_time_axis_spec.AutoDateTimeTickFormatterSpec, () => ({
    __proto__: dart.getFields(date_time_axis_spec.AutoDateTimeTickFormatterSpec.__proto__),
    minute: dart.finalFieldType(date_time_axis_spec.TimeFormatterSpec),
    hour: dart.finalFieldType(date_time_axis_spec.TimeFormatterSpec),
    day: dart.finalFieldType(date_time_axis_spec.TimeFormatterSpec),
    month: dart.finalFieldType(date_time_axis_spec.TimeFormatterSpec),
    year: dart.finalFieldType(date_time_axis_spec.TimeFormatterSpec)
  }));
  dart.defineExtensionMethods(date_time_axis_spec.AutoDateTimeTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(date_time_axis_spec.AutoDateTimeTickFormatterSpec, ['hashCode']);
  const _chart$1 = dart.privateName(arc_renderer, "_chart");
  const _seriesArcMap = dart.privateName(arc_renderer, "_seriesArcMap");
  const _currentKeys$1 = dart.privateName(arc_renderer, "_currentKeys");
  const _calculateInnerRadius = dart.privateName(arc_renderer, "_calculateInnerRadius");
  const _getChartPosition = dart.privateName(arc_renderer, "_getChartPosition");
  const _is_ArcRenderer_default = Symbol('_is_ArcRenderer_default');
  const config$3 = dart.privateName(arc_renderer, "ArcRenderer.config");
  const arcRendererDecorators = dart.privateName(arc_renderer, "ArcRenderer.arcRendererDecorators");
  arc_renderer.ArcRenderer$ = dart.generic(D => {
    let _AnimatedArcListOfD = () => (_AnimatedArcListOfD = dart.constFn(arc_renderer._AnimatedArcList$(D)))();
    let IdentityMapOfString$_AnimatedArcListOfD = () => (IdentityMapOfString$_AnimatedArcListOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _AnimatedArcListOfD())))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer.ArcRendererElement$(D)))();
    let JSArrayOfArcRendererElementOfD = () => (JSArrayOfArcRendererElementOfD = dart.constFn(_interceptors.JSArray$(ArcRendererElementOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let VoidTo_AnimatedArcListOfD = () => (VoidTo_AnimatedArcListOfD = dart.constFn(dart.fnType(_AnimatedArcListOfD(), [])))();
    let _AnimatedArcOfD = () => (_AnimatedArcOfD = dart.constFn(arc_renderer._AnimatedArc$(D)))();
    let ImmutableSeriesOfDToNull = () => (ImmutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesOfD()])))();
    let _AnimatedArcOfDTobool = () => (_AnimatedArcOfDTobool = dart.constFn(dart.fnType(core.bool, [_AnimatedArcOfD()])))();
    let StringAnd_AnimatedArcListOfDToNull = () => (StringAnd_AnimatedArcListOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedArcListOfD()])))();
    let ArcRendererElementListOfD = () => (ArcRendererElementListOfD = dart.constFn(arc_renderer.ArcRendererElementList$(D)))();
    let _AnimatedArcOfDToArcRendererElementOfD = () => (_AnimatedArcOfDToArcRendererElementOfD = dart.constFn(dart.fnType(ArcRendererElementOfD(), [_AnimatedArcOfD()])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let _AnimatedArcOfDToNull = () => (_AnimatedArcOfDToNull = dart.constFn(dart.fnType(core.Null, [_AnimatedArcOfD()])))();
    class ArcRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      get config() {
        return this[config$3];
      }
      set config(value) {
        super.config = value;
      }
      get arcRendererDecorators() {
        return this[arcRendererDecorators];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      static new(opts) {
        let t5, t5$;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        let config = opts && 'config' in opts ? opts.config : null;
        return new (arc_renderer.ArcRenderer$(D))._internal({rendererId: (t5 = rendererId, t5 == null ? "line" : t5), config: arc_renderer_config.ArcRendererConfig$(D)._check((t5$ = config, t5$ == null ? new (arc_renderer_config.ArcRendererConfig$(D)).new() : t5$))});
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this[_chart$1] = chart;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: false});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          let elements = JSArrayOfArcRendererElementOfD().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let seriesMeasureTotal = series.seriesMeasureTotal;
          let startAngle = this.config.startAngle;
          let arcLength = this.config.arcLength;
          let totalAngle = 0.0;
          let measures = [];
          if (dart.test(series.data[$isEmpty])) {
            let angle = arcLength === 2 * 3.141592653589793 ? dart.notNull(arcLength) * 0.999999 : arcLength;
            let endAngle = dart.notNull(startAngle) + dart.notNull(angle);
            let details = new (ArcRendererElementOfD()).new();
            details.startAngle = startAngle;
            details.endAngle = endAngle;
            details.index = 0;
            details.key = 0;
            details.series = series;
            elements[$add](details);
          } else {
            for (let arcIndex = 0; arcIndex < dart.notNull(series.data[$length]); arcIndex = arcIndex + 1) {
              let domain = domainFn(arcIndex);
              let measure = measureFn(arcIndex);
              measures[$add](measure);
              if (measure == null) {
                continue;
              }
              let percentOfSeries = dart.notNull(measure) / dart.notNull(seriesMeasureTotal);
              let angle = dart.notNull(arcLength) * percentOfSeries;
              let endAngle = dart.notNull(startAngle) + angle;
              let details = new (ArcRendererElementOfD()).new();
              details.startAngle = startAngle;
              details.endAngle = endAngle;
              details.index = arcIndex;
              details.key = arcIndex;
              details.domain = domain;
              details.series = series;
              elements[$add](details);
              startAngle = endAngle;
              totalAngle = totalAngle + angle;
            }
          }
          series.setAttr(ListOfArcRendererElement(), arc_renderer.arcElementsKey, elements);
        }, MutableSeriesOfDToNull()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        this[_currentKeys$1][$clear]();
        let bounds = this[_chart$1].drawAreaBounds;
        let center = new (PointOfdouble()).new((dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2)[$toDouble](), (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2)[$toDouble]());
        let radius = dart.notNull(bounds[$height]) < dart.notNull(bounds[$width]) ? (dart.notNull(bounds[$height]) / 2)[$toDouble]() : (dart.notNull(bounds[$width]) / 2)[$toDouble]();
        if (this.config.arcRatio != null) {
          if (dart.notNull(this.config.arcRatio) < 0 || dart.notNull(this.config.arcRatio) > 1) {
            dart.throw(new core.ArgumentError.new("arcRatio must be between 0 and 1"));
          }
        }
        let innerRadius = this[_calculateInnerRadius](radius);
        seriesList[$forEach](dart.fn(series => {
          let t5, t6, t5$, t5$0, t5$1;
          let colorFn = series.colorFn;
          let arcListKey = series.id;
          let arcList = this[_seriesArcMap][$putIfAbsent](arcListKey, dart.fn(() => new (_AnimatedArcListOfD()).new(), VoidTo_AnimatedArcListOfD()));
          let elementsList = series.getAttr(ListOfArcRendererElement(), arc_renderer.arcElementsKey);
          if (dart.test(series.data[$isEmpty])) {
            let details = elementsList[$_get](0);
            let arcKey = "__no_data__";
            let animatingArc = arcList.arcs[$firstWhere](dart.fn(arc => arc.key === arcKey, _AnimatedArcTobool()), {orElse: dart.fn(() => null, VoidToNull())});
            arcList.center = center;
            arcList.radius = radius;
            arcList.innerRadius = innerRadius;
            arcList.series = series;
            arcList.stroke = this.config.noDataColor;
            arcList.strokeWidthPx = 0.0;
            if (animatingArc == null) {
              animatingArc = new (_AnimatedArcOfD()).new(arcKey, null, null);
              arcList.arcs[$add](animatingArc);
            } else {
              animatingArc.datum = null;
              animatingArc.domain = null;
            }
            this[_currentKeys$1][$add](arcKey);
            let arcElement = (t5 = new (ArcRendererElementOfD()).new(), t5.color = this.config.noDataColor, t5.startAngle = details.startAngle, t5.endAngle = details.endAngle, t5.series = series, t5);
            animatingArc.setNewTarget(arcElement);
          } else {
            let previousEndAngle = this.config.startAngle;
            for (let arcIndex = 0; arcIndex < dart.notNull(series.data[$length]); arcIndex = arcIndex + 1) {
              let datum = series.data[$_get](arcIndex);
              let details = elementsList[$_get](arcIndex);
              let domainValue = D._check(details.domain);
              let arcKey = dart.toString(domainValue);
              let animatingArc = arcList.arcs[$firstWhere](dart.fn(arc => arc.key == arcKey, _AnimatedArcTobool()), {orElse: dart.fn(() => null, VoidToNull())});
              arcList.center = center;
              arcList.radius = radius;
              arcList.innerRadius = innerRadius;
              arcList.series = series;
              arcList.stroke = this.config.stroke;
              arcList.strokeWidthPx = this.config.strokeWidthPx;
              if (animatingArc == null) {
                animatingArc = (t5$ = new (_AnimatedArcOfD()).new(arcKey, datum, domainValue), t5$.setNewTarget((t6 = new (ArcRendererElementOfD()).new(), t6.color = colorFn(arcIndex), t6.startAngle = previousEndAngle, t6.endAngle = previousEndAngle, t6.index = arcIndex, t6.series = series, t6)), t5$);
                arcList.arcs[$add](animatingArc);
              } else {
                animatingArc.datum = datum;
                previousEndAngle = (t5$0 = animatingArc.previousArcEndAngle, t5$0 == null ? 0.0 : t5$0);
              }
              animatingArc.domain = domainValue;
              this[_currentKeys$1][$add](arcKey);
              let arcElement = (t5$1 = new (ArcRendererElementOfD()).new(), t5$1.color = colorFn(arcIndex), t5$1.startAngle = details.startAngle, t5$1.endAngle = details.endAngle, t5$1.index = arcIndex, t5$1.series = series, t5$1);
              animatingArc.setNewTarget(arcElement);
            }
          }
        }, ImmutableSeriesOfDToNull()));
        this[_seriesArcMap][$forEach](dart.fn((key, arcList) => {
          for (let arcIndex = 0; arcIndex < dart.notNull(arcList.arcs[$length]); arcIndex = arcIndex + 1) {
            let arc = arcList.arcs[$_get](arcIndex);
            let arcStartAngle = arc.previousArcStartAngle;
            if (!dart.equals(this[_currentKeys$1][$contains](arc.key), true)) {
              let targetArcAngle = 2 * 3.141592653589793 + dart.notNull(this.config.startAngle);
              for (let nextArc of arcList.arcs[$where](dart.fn(arc => this[_currentKeys$1][$contains](arc.key), _AnimatedArcOfDTobool()))) {
                let nextArcStartAngle = nextArc.newTargetArcStartAngle;
                if (dart.notNull(arcStartAngle) < dart.notNull(nextArcStartAngle) && dart.notNull(nextArcStartAngle) < dart.notNull(targetArcAngle)) {
                  targetArcAngle = nextArcStartAngle;
                }
              }
              arc.animateOut(targetArcAngle);
            }
          }
        }, StringAnd_AnimatedArcListOfDToNull()));
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = JSArrayOfString().of([]);
          this[_seriesArcMap][$forEach](dart.fn((key, arcList) => {
            arcList.arcs[$removeWhere](dart.fn(arc => arc.animatingOut, _AnimatedArcOfDTobool()));
            if (dart.test(arcList.arcs[$isEmpty])) {
              keysToRemove[$add](key);
            }
          }, StringAnd_AnimatedArcListOfDToNull()));
          keysToRemove[$forEach](dart.bind(this[_seriesArcMap], $remove));
        }
        this[_seriesArcMap][$forEach](dart.fn((key, arcList) => {
          let t5;
          let circleSectors = JSArrayOfCanvasPieSlice().of([]);
          let arcElementsList = (t5 = new (ArcRendererElementListOfD()).new(), t5.arcs = JSArrayOfArcRendererElementOfD().of([]), t5.center = arcList.center, t5.innerRadius = arcList.innerRadius, t5.radius = arcList.radius, t5.startAngle = this.config.startAngle, t5.stroke = arcList.stroke, t5.strokeWidthPx = arcList.strokeWidthPx, t5);
          arcList.arcs[$map](ArcRendererElementOfD(), dart.fn(animatingArc => animatingArc.getCurrentArc(animationPercent), _AnimatedArcOfDToArcRendererElementOfD()))[$forEach](dart.fn(arc => {
            circleSectors[$add](new canvas_shapes.CanvasPieSlice.new(arc.startAngle, arc.endAngle, {fill: arc.color}));
            arcElementsList.arcs[$add](ArcRendererElementOfD()._check(arc));
          }, ArcRendererElementToNull()));
          this.arcRendererDecorators[$where](dart.fn(decorator => !dart.test(decorator.renderAbove), ArcRendererDecoratorTobool()))[$forEach](dart.fn(decorator => {
            decorator.decorate(arcElementsList, canvas, this.graphicsFactory, {drawBounds: this.drawBounds, animationPercent: animationPercent, rtl: this.isRtl});
          }, ArcRendererDecoratorToNull()));
          canvas.drawPie(new canvas_shapes.CanvasPie.new(circleSectors, arcList.center, arcList.radius, arcList.innerRadius, {stroke: arcList.stroke, strokeWidthPx: arcList.strokeWidthPx}));
          this.arcRendererDecorators[$where](dart.fn(decorator => decorator.renderAbove, ArcRendererDecoratorTobool()))[$forEach](dart.fn(decorator => {
            decorator.decorate(arcElementsList, canvas, this.graphicsFactory, {drawBounds: this.drawBounds, animationPercent: animationPercent, rtl: this.isRtl});
          }, ArcRendererDecoratorToNull()));
        }, StringAnd_AnimatedArcListOfDToNull()));
      }
      get isRtl() {
        let t5, t5$, t5$0;
        t5$0 = (t5$ = (t5 = this[_chart$1], t5 == null ? null : t5.context), t5$ == null ? null : t5$.isRtl);
        return t5$0 == null ? false : t5$0;
      }
      get centerContentBounds() {
        let arcList = dart.test(this[_seriesArcMap][$isNotEmpty]) ? this[_seriesArcMap][$values][$first] : null;
        if (arcList == null || dart.notNull(arcList.innerRadius) < dart.notNull(this.config.minHoleWidthForCenterContent)) {
          let bounds = this[_chart$1].drawAreaBounds;
          return new (RectangleOfint()).new((dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2)[$round](), (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2)[$round](), 0, 0);
        }
        let width = (dart.notNull(arc_renderer.ArcRenderer._cosPIOver4) * dart.notNull(arcList.innerRadius))[$floor]();
        return new (RectangleOfint()).new((dart.notNull(arcList.center.x) - width)[$round](), (dart.notNull(arcList.center.y) - width)[$round](), width * 2, width * 2);
      }
      getExpandedDatumDetails(seriesDatum) {
        SeriesDatumOfD()._check(seriesDatum);
        let series = seriesDatum.series;
        let datum = seriesDatum.datum;
        let datumIndex = seriesDatum.index;
        let domain = series.domainFn(datumIndex);
        let measure = series.measureFn(datumIndex);
        let color = series.colorFn(datumIndex);
        let chartPosition = this[_getChartPosition](series.id, dart.toString(domain));
        return new (DatumDetailsOfD()).new({datum: datum, domain: domain, measure: measure, series: series, color: color, chartPosition: chartPosition});
      }
      [_getChartPosition](seriesId, key) {
        let chartPosition = null;
        let arcList = this[_seriesArcMap][$_get](seriesId);
        if (arcList == null) {
          return chartPosition;
        }
        for (let arc of arcList.arcs) {
          if (arc.key == key) {
            let centerAngle = dart.notNull(arc.currentArcStartAngle) + (dart.notNull(arc.currentArcEndAngle) - dart.notNull(arc.currentArcStartAngle)) / 2;
            let centerPointRadius = dart.notNull(arcList.innerRadius) + (dart.notNull(arcList.radius) - dart.notNull(arcList.innerRadius)) / 2;
            chartPosition = new (PointOfdouble()).new(centerPointRadius * math.cos(centerAngle) + dart.notNull(arcList.center.x), centerPointRadius * math.sin(centerAngle) + dart.notNull(arcList.center.y));
            break;
          }
        }
        return chartPosition;
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) {
          return nearest;
        }
        this[_seriesArcMap][$forEach](dart.fn((key, arcList) => {
          if (dart.test(arcList.series.overlaySeries)) {
            return;
          }
          let center = arcList.center;
          let innerRadius = arcList.innerRadius;
          let radius = arcList.radius;
          let distance = center.distanceTo(chartPoint);
          let chartPointAngle = math.atan2(dart.notNull(chartPoint.y) - dart.notNull(center.y), dart.notNull(chartPoint.x) - dart.notNull(center.x));
          if (chartPointAngle[$isNaN]) {
            chartPointAngle = this.config.startAngle;
          }
          if (dart.notNull(chartPointAngle) < dart.notNull(this.config.startAngle) && dart.notNull(chartPointAngle) < 0) {
            chartPointAngle = 2 * 3.141592653589793 + dart.notNull(chartPointAngle);
          }
          arcList.arcs[$forEach](dart.fn(arc => {
            if (dart.notNull(innerRadius) <= dart.notNull(distance) && dart.notNull(distance) <= dart.notNull(radius)) {
              if (dart.notNull(arc.currentArcStartAngle) <= dart.notNull(chartPointAngle) && dart.notNull(chartPointAngle) <= dart.notNull(arc.currentArcEndAngle)) {
                nearest[$add](new (DatumDetailsOfD()).new({series: arcList.series, datum: arc.datum, domain: arc.domain, domainDistance: 0.0, measureDistance: 0.0}));
              }
            }
          }, _AnimatedArcOfDToNull()));
        }, StringAnd_AnimatedArcListOfDToNull()));
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let chartPosition = this[_getChartPosition](details.series.id, dart.toString(details.domain));
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
      assignMissingColors(seriesList, opts) {
        IterableOfMutableSeries()._check(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        let maxMissing = 0;
        seriesList[$forEach](dart.fn(series => {
          if (series.colorFn == null) {
            maxMissing = math.max(core.int, maxMissing, series.data[$length]);
          }
        }, MutableSeriesToNull()));
        if (maxMissing > 0) {
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(1);
          let colorPalette = colorPalettes[$_get](0).makeShades(maxMissing);
          seriesList[$forEach](dart.fn(series => {
            let t5;
            t5 = series;
            t5.colorFn == null ? t5.colorFn = dart.fn(index => colorPalette[$_get](index), intToColor()) : null;
          }, MutableSeriesToNull()));
        }
      }
      [_calculateInnerRadius](radius) {
        if (this.config.arcRatio != null) {
          return math.max(core.double, dart.notNull(radius) - dart.notNull(radius) * dart.notNull(this.config.arcRatio), 0.0)[$toDouble]();
        } else if (this.config.arcWidth != null) {
          return math.max(core.double, dart.notNull(radius) - dart.notNull(this.config.arcWidth), 0.0)[$toDouble]();
        } else {
          return 0.0;
        }
      }
    }
    (ArcRenderer._internal = function(opts) {
      let t5, t5$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[_chart$1] = null;
      this[_seriesArcMap] = new (IdentityMapOfString$_AnimatedArcListOfD()).new();
      this[_currentKeys$1] = JSArrayOfString().of([]);
      this[config$3] = config;
      this[arcRendererDecorators] = (t5$ = (t5 = config, t5 == null ? null : t5.arcRendererDecorators), t5$ == null ? JSArrayOfArcRendererDecorator().of([]) : t5$);
      ArcRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = ArcRenderer.prototype;
    dart.addTypeTests(ArcRenderer);
    ArcRenderer.prototype[_is_ArcRenderer_default] = true;
    dart.setMethodSignature(ArcRenderer, () => ({
      __proto__: dart.getMethods(ArcRenderer.__proto__),
      update: dart.fnType(dart.void, [core.Object, core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getExpandedDatumDetails: dart.fnType(datum_details.DatumDetails$(D), [core.Object]),
      [_getChartPosition]: dart.fnType(math.Point$(core.double), [core.String, core.String]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, math.Rectangle$(core.int)]),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object]),
      [_calculateInnerRadius]: dart.fnType(core.double, [core.double])
    }));
    dart.setGetterSignature(ArcRenderer, () => ({
      __proto__: dart.getGetters(ArcRenderer.__proto__),
      isRtl: core.bool,
      centerContentBounds: math.Rectangle$(core.int)
    }));
    dart.setLibraryUri(ArcRenderer, "package:charts_common/src/chart/pie/arc_renderer.dart");
    dart.setFieldSignature(ArcRenderer, () => ({
      __proto__: dart.getFields(ArcRenderer.__proto__),
      config: dart.finalFieldType(arc_renderer_config.ArcRendererConfig$(D)),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator)),
      [_chart$1]: dart.fieldType(base_chart.BaseChart$(D)),
      [_seriesArcMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, arc_renderer._AnimatedArcList$(D))),
      [_currentKeys$1]: dart.finalFieldType(core.List$(core.String))
    }));
    return ArcRenderer;
  });
  arc_renderer.ArcRenderer = arc_renderer.ArcRenderer$();
  dart.defineLazy(arc_renderer.ArcRenderer, {
    /*arc_renderer.ArcRenderer._cosPIOver4*/get _cosPIOver4() {
      return math.cos(3.141592653589793 / 4);
    }
  });
  dart.addTypeTests(arc_renderer.ArcRenderer, _is_ArcRenderer_default);
  const _is_ArcRendererElementList_default = Symbol('_is_ArcRendererElementList_default');
  const arcs = dart.privateName(arc_renderer, "ArcRendererElementList.arcs");
  const center = dart.privateName(arc_renderer, "ArcRendererElementList.center");
  const innerRadius = dart.privateName(arc_renderer, "ArcRendererElementList.innerRadius");
  const radius = dart.privateName(arc_renderer, "ArcRendererElementList.radius");
  const startAngle = dart.privateName(arc_renderer, "ArcRendererElementList.startAngle");
  const stroke = dart.privateName(arc_renderer, "ArcRendererElementList.stroke");
  const strokeWidthPx$6 = dart.privateName(arc_renderer, "ArcRendererElementList.strokeWidthPx");
  arc_renderer.ArcRendererElementList$ = dart.generic(D => {
    let ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer.ArcRendererElement$(D)))();
    let ListOfArcRendererElementOfD = () => (ListOfArcRendererElementOfD = dart.constFn(core.List$(ArcRendererElementOfD())))();
    class ArcRendererElementList extends core.Object {
      get arcs() {
        return this[arcs];
      }
      set arcs(value) {
        this[arcs] = ListOfArcRendererElementOfD()._check(value);
      }
      get center() {
        return this[center];
      }
      set center(value) {
        this[center] = value;
      }
      get innerRadius() {
        return this[innerRadius];
      }
      set innerRadius(value) {
        this[innerRadius] = value;
      }
      get radius() {
        return this[radius];
      }
      set radius(value) {
        this[radius] = value;
      }
      get startAngle() {
        return this[startAngle];
      }
      set startAngle(value) {
        this[startAngle] = value;
      }
      get stroke() {
        return this[stroke];
      }
      set stroke(value) {
        this[stroke] = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$6];
      }
      set strokeWidthPx(value) {
        this[strokeWidthPx$6] = value;
      }
    }
    (ArcRendererElementList.new = function() {
      this[arcs] = null;
      this[center] = null;
      this[innerRadius] = null;
      this[radius] = null;
      this[startAngle] = null;
      this[stroke] = null;
      this[strokeWidthPx$6] = null;
      ;
    }).prototype = ArcRendererElementList.prototype;
    dart.addTypeTests(ArcRendererElementList);
    ArcRendererElementList.prototype[_is_ArcRendererElementList_default] = true;
    dart.setLibraryUri(ArcRendererElementList, "package:charts_common/src/chart/pie/arc_renderer.dart");
    dart.setFieldSignature(ArcRendererElementList, () => ({
      __proto__: dart.getFields(ArcRendererElementList.__proto__),
      arcs: dart.fieldType(core.List$(arc_renderer.ArcRendererElement$(D))),
      center: dart.fieldType(math.Point$(core.double)),
      innerRadius: dart.fieldType(core.double),
      radius: dart.fieldType(core.double),
      startAngle: dart.fieldType(core.double),
      stroke: dart.fieldType(color$.Color),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return ArcRendererElementList;
  });
  arc_renderer.ArcRendererElementList = arc_renderer.ArcRendererElementList$();
  dart.addTypeTests(arc_renderer.ArcRendererElementList, _is_ArcRendererElementList_default);
  const _is_ArcRendererElement_default = Symbol('_is_ArcRendererElement_default');
  const startAngle$0 = dart.privateName(arc_renderer, "ArcRendererElement.startAngle");
  const endAngle = dart.privateName(arc_renderer, "ArcRendererElement.endAngle");
  const color$4 = dart.privateName(arc_renderer, "ArcRendererElement.color");
  const index$0 = dart.privateName(arc_renderer, "ArcRendererElement.index");
  const key = dart.privateName(arc_renderer, "ArcRendererElement.key");
  const domain = dart.privateName(arc_renderer, "ArcRendererElement.domain");
  const series$4 = dart.privateName(arc_renderer, "ArcRendererElement.series");
  arc_renderer.ArcRendererElement$ = dart.generic(D => {
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer.ArcRendererElement$(D)))();
    class ArcRendererElement extends core.Object {
      get startAngle() {
        return this[startAngle$0];
      }
      set startAngle(value) {
        this[startAngle$0] = value;
      }
      get endAngle() {
        return this[endAngle];
      }
      set endAngle(value) {
        this[endAngle] = value;
      }
      get color() {
        return this[color$4];
      }
      set color(value) {
        this[color$4] = value;
      }
      get index() {
        return this[index$0];
      }
      set index(value) {
        this[index$0] = value;
      }
      get key() {
        return this[key];
      }
      set key(value) {
        this[key] = value;
      }
      get domain() {
        return this[domain];
      }
      set domain(value) {
        this[domain] = D._check(value);
      }
      get series() {
        return this[series$4];
      }
      set series(value) {
        this[series$4] = ImmutableSeriesOfD()._check(value);
      }
      clone() {
        let t5;
        t5 = new (ArcRendererElementOfD()).new();
        t5.startAngle = this.startAngle;
        t5.endAngle = this.endAngle;
        t5.color = new color$.Color.fromOther({color: this.color});
        t5.index = this.index;
        t5.key = this.key;
        t5.series = this.series;
        return t5;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        this.startAngle = (dart.notNull(target.startAngle) - dart.notNull(previous.startAngle)) * dart.notNull(animationPercent) + dart.notNull(previous.startAngle);
        this.endAngle = (dart.notNull(target.endAngle) - dart.notNull(previous.endAngle)) * dart.notNull(animationPercent) + dart.notNull(previous.endAngle);
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
      }
    }
    (ArcRendererElement.new = function() {
      this[startAngle$0] = null;
      this[endAngle] = null;
      this[color$4] = null;
      this[index$0] = null;
      this[key] = null;
      this[domain] = null;
      this[series$4] = null;
      ;
    }).prototype = ArcRendererElement.prototype;
    dart.addTypeTests(ArcRendererElement);
    ArcRendererElement.prototype[_is_ArcRendererElement_default] = true;
    dart.setMethodSignature(ArcRendererElement, () => ({
      __proto__: dart.getMethods(ArcRendererElement.__proto__),
      clone: dart.fnType(arc_renderer.ArcRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [arc_renderer.ArcRendererElement, arc_renderer.ArcRendererElement, core.double])
    }));
    dart.setLibraryUri(ArcRendererElement, "package:charts_common/src/chart/pie/arc_renderer.dart");
    dart.setFieldSignature(ArcRendererElement, () => ({
      __proto__: dart.getFields(ArcRendererElement.__proto__),
      startAngle: dart.fieldType(core.double),
      endAngle: dart.fieldType(core.double),
      color: dart.fieldType(color$.Color),
      index: dart.fieldType(core.int),
      key: dart.fieldType(core.num),
      domain: dart.fieldType(D),
      series: dart.fieldType(processed_series.ImmutableSeries$(D))
    }));
    return ArcRendererElement;
  });
  arc_renderer.ArcRendererElement = arc_renderer.ArcRendererElement$();
  dart.addTypeTests(arc_renderer.ArcRendererElement, _is_ArcRendererElement_default);
  const _is__AnimatedArcList_default = Symbol('_is__AnimatedArcList_default');
  const arcs$ = dart.privateName(arc_renderer, "_AnimatedArcList.arcs");
  const series$5 = dart.privateName(arc_renderer, "_AnimatedArcList.series");
  arc_renderer._AnimatedArcList$ = dart.generic(D => {
    let _AnimatedArcOfD = () => (_AnimatedArcOfD = dart.constFn(arc_renderer._AnimatedArc$(D)))();
    let JSArrayOf_AnimatedArcOfD = () => (JSArrayOf_AnimatedArcOfD = dart.constFn(_interceptors.JSArray$(_AnimatedArcOfD())))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    class _AnimatedArcList extends core.Object {
      get arcs() {
        return this[arcs$];
      }
      set arcs(value) {
        super.arcs = value;
      }
      get series() {
        return this[series$5];
      }
      set series(value) {
        this[series$5] = ImmutableSeriesOfD()._check(value);
      }
    }
    (_AnimatedArcList.new = function() {
      this[arcs$] = JSArrayOf_AnimatedArcOfD().of([]);
      this.center = null;
      this.innerRadius = null;
      this.radius = null;
      this[series$5] = null;
      this.stroke = null;
      this.strokeWidthPx = null;
      ;
    }).prototype = _AnimatedArcList.prototype;
    dart.addTypeTests(_AnimatedArcList);
    _AnimatedArcList.prototype[_is__AnimatedArcList_default] = true;
    dart.setLibraryUri(_AnimatedArcList, "package:charts_common/src/chart/pie/arc_renderer.dart");
    dart.setFieldSignature(_AnimatedArcList, () => ({
      __proto__: dart.getFields(_AnimatedArcList.__proto__),
      arcs: dart.finalFieldType(core.List$(arc_renderer._AnimatedArc$(D))),
      center: dart.fieldType(math.Point$(core.double)),
      innerRadius: dart.fieldType(core.double),
      radius: dart.fieldType(core.double),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      stroke: dart.fieldType(color$.Color),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return _AnimatedArcList;
  });
  arc_renderer._AnimatedArcList = arc_renderer._AnimatedArcList$();
  dart.addTypeTests(arc_renderer._AnimatedArcList, _is__AnimatedArcList_default);
  const _previousArc = dart.privateName(arc_renderer, "_previousArc");
  const _targetArc = dart.privateName(arc_renderer, "_targetArc");
  const _currentArc = dart.privateName(arc_renderer, "_currentArc");
  const _is__AnimatedArc_default = Symbol('_is__AnimatedArc_default');
  const domain$1 = dart.privateName(arc_renderer, "_AnimatedArc.domain");
  arc_renderer._AnimatedArc$ = dart.generic(D => {
    let ArcRendererElementOfD = () => (ArcRendererElementOfD = dart.constFn(arc_renderer.ArcRendererElement$(D)))();
    class _AnimatedArc extends core.Object {
      get domain() {
        return this[domain$1];
      }
      set domain(value) {
        this[domain$1] = D._check(value);
      }
      animateOut(endAngle) {
        let newTarget = this[_currentArc].clone();
        newTarget.startAngle = core.double._check(endAngle);
        newTarget.endAngle = core.double._check(endAngle);
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        ArcRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentArc] == null ? this[_currentArc] = newTarget.clone() : null;
        this[_previousArc] = this[_currentArc].clone();
        this[_targetArc] = newTarget;
      }
      getCurrentArc(animationPercent) {
        if (animationPercent === 1.0 || this[_previousArc] == null) {
          this[_currentArc] = this[_targetArc];
          this[_previousArc] = this[_targetArc];
          return this[_currentArc];
        }
        this[_currentArc].updateAnimationPercent(this[_previousArc], this[_targetArc], animationPercent);
        return this[_currentArc];
      }
      get newTargetArcStartAngle() {
        return this[_targetArc] != null ? this[_targetArc].startAngle : null;
      }
      get currentArcEndAngle() {
        return this[_currentArc] != null ? this[_currentArc].endAngle : null;
      }
      get currentArcStartAngle() {
        return this[_currentArc] != null ? this[_currentArc].startAngle : null;
      }
      get previousArcEndAngle() {
        return this[_previousArc] != null ? this[_previousArc].endAngle : null;
      }
      get previousArcStartAngle() {
        return this[_previousArc] != null ? this[_previousArc].startAngle : null;
      }
    }
    (_AnimatedArc.new = function(key, datum, domain) {
      this[_previousArc] = null;
      this[_targetArc] = null;
      this[_currentArc] = null;
      this.animatingOut = false;
      this.key = key;
      this.datum = datum;
      this[domain$1] = domain;
      ;
    }).prototype = _AnimatedArc.prototype;
    dart.addTypeTests(_AnimatedArc);
    _AnimatedArc.prototype[_is__AnimatedArc_default] = true;
    dart.setMethodSignature(_AnimatedArc, () => ({
      __proto__: dart.getMethods(_AnimatedArc.__proto__),
      animateOut: dart.fnType(dart.void, [dart.dynamic]),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentArc: dart.fnType(arc_renderer.ArcRendererElement$(D), [core.double])
    }));
    dart.setGetterSignature(_AnimatedArc, () => ({
      __proto__: dart.getGetters(_AnimatedArc.__proto__),
      newTargetArcStartAngle: core.double,
      currentArcEndAngle: core.double,
      currentArcStartAngle: core.double,
      previousArcEndAngle: core.double,
      previousArcStartAngle: core.double
    }));
    dart.setLibraryUri(_AnimatedArc, "package:charts_common/src/chart/pie/arc_renderer.dart");
    dart.setFieldSignature(_AnimatedArc, () => ({
      __proto__: dart.getFields(_AnimatedArc.__proto__),
      key: dart.finalFieldType(core.String),
      datum: dart.fieldType(dart.dynamic),
      domain: dart.fieldType(D),
      [_previousArc]: dart.fieldType(arc_renderer.ArcRendererElement$(D)),
      [_targetArc]: dart.fieldType(arc_renderer.ArcRendererElement$(D)),
      [_currentArc]: dart.fieldType(arc_renderer.ArcRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedArc;
  });
  arc_renderer._AnimatedArc = arc_renderer._AnimatedArc$();
  dart.addTypeTests(arc_renderer._AnimatedArc, _is__AnimatedArc_default);
  let C186;
  dart.defineLazy(arc_renderer, {
    /*arc_renderer.arcElementsKey*/get arcElementsKey() {
      return C186 || CT.C186;
    }
  });
  const _is_ArcRendererDecorator_default = Symbol('_is_ArcRendererDecorator_default');
  arc_renderer_decorator.ArcRendererDecorator$ = dart.generic(D => {
    class ArcRendererDecorator extends core.Object {}
    (ArcRendererDecorator.new = function() {
      ;
    }).prototype = ArcRendererDecorator.prototype;
    dart.addTypeTests(ArcRendererDecorator);
    ArcRendererDecorator.prototype[_is_ArcRendererDecorator_default] = true;
    dart.setLibraryUri(ArcRendererDecorator, "package:charts_common/src/chart/pie/arc_renderer_decorator.dart");
    return ArcRendererDecorator;
  });
  arc_renderer_decorator.ArcRendererDecorator = arc_renderer_decorator.ArcRendererDecorator$();
  dart.addTypeTests(arc_renderer_decorator.ArcRendererDecorator, _is_ArcRendererDecorator_default);
  let C187;
  const _is_ArcRendererConfig_default = Symbol('_is_ArcRendererConfig_default');
  const customRendererId$2 = dart.privateName(arc_renderer_config, "ArcRendererConfig.customRendererId");
  const arcRendererDecorators$ = dart.privateName(arc_renderer_config, "ArcRendererConfig.arcRendererDecorators");
  const symbolRenderer$5 = dart.privateName(arc_renderer_config, "ArcRendererConfig.symbolRenderer");
  const rendererAttributes$1 = dart.privateName(arc_renderer_config, "ArcRendererConfig.rendererAttributes");
  const arcLength$ = dart.privateName(arc_renderer_config, "ArcRendererConfig.arcLength");
  const arcRatio$ = dart.privateName(arc_renderer_config, "ArcRendererConfig.arcRatio");
  const arcWidth$ = dart.privateName(arc_renderer_config, "ArcRendererConfig.arcWidth");
  const layoutPaintOrder$2 = dart.privateName(arc_renderer_config, "ArcRendererConfig.layoutPaintOrder");
  const minHoleWidthForCenterContent$ = dart.privateName(arc_renderer_config, "ArcRendererConfig.minHoleWidthForCenterContent");
  const startAngle$1 = dart.privateName(arc_renderer_config, "ArcRendererConfig.startAngle");
  const strokeWidthPx$7 = dart.privateName(arc_renderer_config, "ArcRendererConfig.strokeWidthPx");
  const stroke$1 = dart.privateName(arc_renderer_config, "ArcRendererConfig.stroke");
  const noDataColor = dart.privateName(arc_renderer_config, "ArcRendererConfig.noDataColor");
  arc_renderer_config.ArcRendererConfig$ = dart.generic(D => {
    let ArcRendererOfD = () => (ArcRendererOfD = dart.constFn(arc_renderer.ArcRenderer$(D)))();
    class ArcRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$2];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get arcRendererDecorators() {
        return this[arcRendererDecorators$];
      }
      set arcRendererDecorators(value) {
        super.arcRendererDecorators = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$5];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes$1];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get arcLength() {
        return this[arcLength$];
      }
      set arcLength(value) {
        super.arcLength = value;
      }
      get arcRatio() {
        return this[arcRatio$];
      }
      set arcRatio(value) {
        super.arcRatio = value;
      }
      get arcWidth() {
        return this[arcWidth$];
      }
      set arcWidth(value) {
        super.arcWidth = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$2];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get minHoleWidthForCenterContent() {
        return this[minHoleWidthForCenterContent$];
      }
      set minHoleWidthForCenterContent(value) {
        super.minHoleWidthForCenterContent = value;
      }
      get startAngle() {
        return this[startAngle$1];
      }
      set startAngle(value) {
        super.startAngle = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$7];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get stroke() {
        return this[stroke$1];
      }
      set stroke(value) {
        super.stroke = value;
      }
      get noDataColor() {
        return this[noDataColor];
      }
      set noDataColor(value) {
        super.noDataColor = value;
      }
      build() {
        return ArcRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
    }
    (ArcRendererConfig.new = function(opts) {
      let t5;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let arcLength = opts && 'arcLength' in opts ? opts.arcLength : 6.283185307179586;
      let arcRendererDecorators = opts && 'arcRendererDecorators' in opts ? opts.arcRendererDecorators : C187 || CT.C187;
      let arcRatio = opts && 'arcRatio' in opts ? opts.arcRatio : null;
      let arcWidth = opts && 'arcWidth' in opts ? opts.arcWidth : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minHoleWidthForCenterContent = opts && 'minHoleWidthForCenterContent' in opts ? opts.minHoleWidthForCenterContent : 30;
      let startAngle = opts && 'startAngle' in opts ? opts.startAngle : -1.5707963267948966;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[rendererAttributes$1] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$2] = customRendererId;
      this[arcLength$] = arcLength;
      this[arcRendererDecorators$] = arcRendererDecorators;
      this[arcRatio$] = arcRatio;
      this[arcWidth$] = arcWidth;
      this[layoutPaintOrder$2] = layoutPaintOrder;
      this[minHoleWidthForCenterContent$] = minHoleWidthForCenterContent;
      this[startAngle$1] = startAngle;
      this[strokeWidthPx$7] = strokeWidthPx;
      this[noDataColor] = style_factory.StyleFactory.style.noDataColor;
      this[stroke$1] = style_factory.StyleFactory.style.arcStrokeColor;
      this[symbolRenderer$5] = (t5 = symbolRenderer, t5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t5);
      ArcRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = ArcRendererConfig.prototype;
    dart.addTypeTests(ArcRendererConfig);
    ArcRendererConfig.prototype[_is_ArcRendererConfig_default] = true;
    ArcRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(ArcRendererConfig, () => ({
      __proto__: dart.getMethods(ArcRendererConfig.__proto__),
      build: dart.fnType(arc_renderer.ArcRenderer$(D), [])
    }));
    dart.setLibraryUri(ArcRendererConfig, "package:charts_common/src/chart/pie/arc_renderer_config.dart");
    dart.setFieldSignature(ArcRendererConfig, () => ({
      __proto__: dart.getFields(ArcRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(core.String),
      arcRendererDecorators: dart.finalFieldType(core.List$(arc_renderer_decorator.ArcRendererDecorator)),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      arcLength: dart.finalFieldType(core.double),
      arcRatio: dart.finalFieldType(core.double),
      arcWidth: dart.finalFieldType(core.int),
      layoutPaintOrder: dart.finalFieldType(core.int),
      minHoleWidthForCenterContent: dart.finalFieldType(core.int),
      startAngle: dart.finalFieldType(core.double),
      strokeWidthPx: dart.finalFieldType(core.double),
      stroke: dart.finalFieldType(color$.Color),
      noDataColor: dart.finalFieldType(color$.Color)
    }));
    return ArcRendererConfig;
  });
  arc_renderer_config.ArcRendererConfig = arc_renderer_config.ArcRendererConfig$();
  dart.addTypeTests(arc_renderer_config.ArcRendererConfig, _is_ArcRendererConfig_default);
  const _hiddenSeriesList = dart.privateName(series_legend, "_hiddenSeriesList");
  const _defaultHiddenSeries = dart.privateName(series_legend, "_defaultHiddenSeries");
  const _showMeasures = dart.privateName(series_legend, "_showMeasures");
  const _title = dart.privateName(legend, "_title");
  const _chart$2 = dart.privateName(legend, "_chart");
  const _lifecycleListener = dart.privateName(legend, "_lifecycleListener");
  const _componentBounds$ = dart.privateName(legend, "_componentBounds");
  const _drawAreaBounds$1 = dart.privateName(legend, "_drawAreaBounds");
  const _graphicsFactory$0 = dart.privateName(legend, "_graphicsFactory");
  const _behaviorPosition = dart.privateName(legend, "_behaviorPosition");
  const _outsideJustification = dart.privateName(legend, "_outsideJustification");
  const _insideJustification = dart.privateName(legend, "_insideJustification");
  const _cellPadding = dart.privateName(legend, "_cellPadding");
  const _legendPadding = dart.privateName(legend, "_legendPadding");
  const _titleTextStyle = dart.privateName(legend, "_titleTextStyle");
  const _legendTapHandling = dart.privateName(legend, "_legendTapHandling");
  const _currentSeriesList$ = dart.privateName(legend, "_currentSeriesList");
  const _postProcessSeriesList = dart.privateName(legend, "_postProcessSeriesList");
  const _postProcess = dart.privateName(legend, "_postProcess");
  const _preProcess = dart.privateName(legend, "_preProcess");
  const _selectionModel = dart.privateName(legend, "_selectionModel");
  const _legendEntries = dart.privateName(legend, "_legendEntries");
  const _updateLegendEntries = dart.privateName(legend, "_updateLegendEntries");
  const _selectionChanged = dart.privateName(legend, "_selectionChanged");
  const _layoutPosition$ = dart.privateName(legend, "_layoutPosition");
  const _is_Legend_default = Symbol('_is_Legend_default');
  const selectionModelType$0 = dart.privateName(legend, "Legend.selectionModelType");
  const legendState = dart.privateName(legend, "Legend.legendState");
  const legendEntryGenerator$ = dart.privateName(legend, "Legend.legendEntryGenerator");
  legend.Legend$ = dart.generic(D => {
    let LegendStateOfD = () => (LegendStateOfD = dart.constFn(legend.LegendState$(D)))();
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class Legend extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$0];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get legendState() {
        return this[legendState];
      }
      set legendState(value) {
        super.legendState = value;
      }
      get legendEntryGenerator() {
        return this[legendEntryGenerator$];
      }
      set legendEntryGenerator(value) {
        super.legendEntryGenerator = value;
      }
      defaultLegendMeasureFormatter(value) {
        return value == null ? "" : legend.Legend._decimalPattern.format(value);
      }
      get title() {
        return this[_title];
      }
      set title(title) {
        this[_title] = title;
      }
      get behaviorPosition() {
        return this[_behaviorPosition];
      }
      set behaviorPosition(behaviorPosition) {
        this[_behaviorPosition] = behaviorPosition;
      }
      get outsideJustification() {
        return this[_outsideJustification];
      }
      set outsideJustification(outsideJustification) {
        this[_outsideJustification] = outsideJustification;
      }
      get insideJustification() {
        return this[_insideJustification];
      }
      set insideJustification(insideJustification) {
        this[_insideJustification] = insideJustification;
      }
      get cellPadding() {
        return this[_cellPadding];
      }
      set cellPadding(cellPadding) {
        this[_cellPadding] = cellPadding;
      }
      get legendPadding() {
        return this[_legendPadding];
      }
      set legendPadding(legendPadding) {
        this[_legendPadding] = legendPadding;
      }
      get legendTapHandling() {
        return this[_legendTapHandling];
      }
      get entryTextStyle() {
        return this.legendEntryGenerator.entryTextStyle;
      }
      set entryTextStyle(entryTextStyle) {
        this.legendEntryGenerator.entryTextStyle = entryTextStyle;
      }
      get titleTextStyle() {
        return this[_titleTextStyle];
      }
      set titleTextStyle(titleTextStyle) {
        this[_titleTextStyle] = titleTextStyle;
      }
      set legendTapHandling(legendTapHandling) {
        this[_legendTapHandling] = legendTapHandling;
      }
      get showOverlaySeries() {
        return this.legendEntryGenerator.showOverlaySeries;
      }
      set showOverlaySeries(showOverlaySeries) {
        let t5;
        this.legendEntryGenerator.showOverlaySeries = (t5 = showOverlaySeries, t5 == null ? false : t5);
      }
      onData(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      [_preProcess](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_currentSeriesList$] = ListOfMutableSeriesOfD().from(seriesList);
        this.preProcessSeriesList(seriesList);
      }
      preProcessSeriesList(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      [_postProcess](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let selectionModel = this.chart.getSelectionModel(this.selectionModelType);
        if (!dart.equals(this.legendState[_selectionModel], selectionModel) || !dart.equals(this[_postProcessSeriesList], seriesList)) {
          this.legendState[_legendEntries] = this.legendEntryGenerator.getLegendEntries(this[_currentSeriesList$]);
          this.legendState[_selectionModel] = selectionModel;
          this[_postProcessSeriesList] = seriesList;
          this[_updateLegendEntries]();
        }
      }
      [_selectionChanged](selectionModel) {
        this.legendState[_selectionModel] = selectionModel;
        this[_updateLegendEntries]();
      }
      get chartContext() {
        return this[_chart$2].context;
      }
      [_updateLegendEntries]() {
        this.legendEntryGenerator.updateLegendEntries(this.legendState[_legendEntries], SelectionModelOfD()._check(this.legendState[_selectionModel]), ListOfMutableSeriesOfD()._check(this.chart.currentSeriesList));
        this.updateLegend();
      }
      updateLegend() {
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$2] = chart;
        chart.addLifecycleListener(this[_lifecycleListener]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, _selectionChanged));
        chart.addView(this);
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, _selectionChanged));
        chart.removeLifecycleListener(this[_lifecycleListener]);
        chart.removeView(this);
      }
      get chart() {
        return this[_chart$2];
      }
      get role() {
        return "legend-" + dart.str(dart.toString(this.selectionModelType));
      }
      get isRtl() {
        return this[_chart$2].context.isRtl;
      }
      get graphicsFactory() {
        return this[_graphicsFactory$0];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$0] = value;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({position: this[_layoutPosition$], positionOrder: 30, paintOrder: 100});
      }
      get [_layoutPosition$]() {
        let position = null;
        switch (this[_behaviorPosition]) {
          case C140 || CT.C140:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C142 || CT.C142:
          {
            position = dart.test(this.isRtl) ? layout_view.LayoutPosition.Left : layout_view.LayoutPosition.Right;
            break;
          }
          case C143 || CT.C143:
          {
            position = layout_view.LayoutPosition.DrawArea;
            break;
          }
          case C141 || CT.C141:
          {
            position = dart.test(this.isRtl) ? layout_view.LayoutPosition.Right : layout_view.LayoutPosition.Left;
            position = dart.test(this.isRtl) ? layout_view.LayoutPosition.Right : layout_view.LayoutPosition.Left;
            break;
          }
          case C139 || CT.C139:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
        }
        return position;
      }
      measure(maxWidth, maxHeight) {
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: 0, preferredHeight: 0});
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds$] = componentBounds;
        this[_drawAreaBounds$1] = drawAreaBounds;
        this.updateLegend();
      }
      paint(canvas, animationPercent) {
      }
      get componentBounds() {
        return this[_componentBounds$];
      }
      get isSeriesRenderer() {
        return false;
      }
      get drawAreaBounds() {
        return this[_drawAreaBounds$1];
      }
    }
    (Legend.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[legendState] = new (LegendStateOfD()).new();
      this[_title] = null;
      this[_chart$2] = null;
      this[_lifecycleListener] = null;
      this[_componentBounds$] = null;
      this[_drawAreaBounds$1] = null;
      this[_graphicsFactory$0] = null;
      this[_behaviorPosition] = chart_behavior.BehaviorPosition.end;
      this[_outsideJustification] = chart_behavior.OutsideJustification.startDrawArea;
      this[_insideJustification] = chart_behavior.InsideJustification.topStart;
      this[_cellPadding] = null;
      this[_legendPadding] = null;
      this[_titleTextStyle] = null;
      this[_legendTapHandling] = legend.LegendTapHandling.hide;
      this[_currentSeriesList$] = null;
      this[_postProcessSeriesList] = null;
      this[selectionModelType$0] = selectionModelType;
      this[legendEntryGenerator$] = legendEntryGenerator;
      this[_lifecycleListener] = new (LifecycleListenerOfD()).new({onPostprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _postProcess)), onPreprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _preProcess)), onData: ListOfMutableSeriesTodynamic()._check(dart.bind(this, 'onData'))});
      this.legendEntryGenerator.entryTextStyle = axis_spec.TextStyleSpec._check(entryTextStyle);
    }).prototype = Legend.prototype;
    dart.addTypeTests(Legend);
    Legend.prototype[_is_Legend_default] = true;
    Legend[dart.implements] = () => [chart_behavior.ChartBehavior$(D), layout_view.LayoutView];
    dart.setMethodSignature(Legend, () => ({
      __proto__: dart.getMethods(Legend.__proto__),
      defaultLegendMeasureFormatter: dart.fnType(core.String, [core.num]),
      onData: dart.fnType(dart.void, [core.Object]),
      [_preProcess]: dart.fnType(dart.void, [core.Object]),
      preProcessSeriesList: dart.fnType(dart.void, [core.Object]),
      [_postProcess]: dart.fnType(dart.void, [core.Object]),
      [_selectionChanged]: dart.fnType(dart.void, [selection_model.SelectionModel]),
      [_updateLegendEntries]: dart.fnType(dart.void, []),
      updateLegend: dart.fnType(dart.void, []),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(Legend, () => ({
      __proto__: dart.getGetters(Legend.__proto__),
      title: core.String,
      behaviorPosition: chart_behavior.BehaviorPosition,
      outsideJustification: chart_behavior.OutsideJustification,
      insideJustification: chart_behavior.InsideJustification,
      cellPadding: legend.LegendCellPadding,
      legendPadding: legend.LegendCellPadding,
      legendTapHandling: legend.LegendTapHandling,
      entryTextStyle: axis_spec.TextStyleSpec,
      titleTextStyle: axis_spec.TextStyleSpec,
      showOverlaySeries: core.bool,
      chartContext: chart_context.ChartContext,
      chart: base_chart.BaseChart,
      role: core.String,
      isRtl: core.bool,
      graphicsFactory: graphics_factory.GraphicsFactory,
      layoutConfig: layout_view.LayoutViewConfig,
      [_layoutPosition$]: layout_view.LayoutPosition,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool,
      drawAreaBounds: math.Rectangle$(core.int)
    }));
    dart.setSetterSignature(Legend, () => ({
      __proto__: dart.getSetters(Legend.__proto__),
      title: core.String,
      behaviorPosition: chart_behavior.BehaviorPosition,
      outsideJustification: chart_behavior.OutsideJustification,
      insideJustification: chart_behavior.InsideJustification,
      cellPadding: legend.LegendCellPadding,
      legendPadding: legend.LegendCellPadding,
      entryTextStyle: axis_spec.TextStyleSpec,
      titleTextStyle: axis_spec.TextStyleSpec,
      legendTapHandling: legend.LegendTapHandling,
      showOverlaySeries: core.bool,
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(Legend, "package:charts_common/src/chart/common/behavior/legend/legend.dart");
    dart.setFieldSignature(Legend, () => ({
      __proto__: dart.getFields(Legend.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      legendState: dart.finalFieldType(legend.LegendState$(D)),
      legendEntryGenerator: dart.finalFieldType(legend_entry_generator.LegendEntryGenerator$(D)),
      [_title]: dart.fieldType(core.String),
      [_chart$2]: dart.fieldType(base_chart.BaseChart),
      [_lifecycleListener]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_componentBounds$]: dart.fieldType(math.Rectangle$(core.int)),
      [_drawAreaBounds$1]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$0]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_behaviorPosition]: dart.fieldType(chart_behavior.BehaviorPosition),
      [_outsideJustification]: dart.fieldType(chart_behavior.OutsideJustification),
      [_insideJustification]: dart.fieldType(chart_behavior.InsideJustification),
      [_cellPadding]: dart.fieldType(legend.LegendCellPadding),
      [_legendPadding]: dart.fieldType(legend.LegendCellPadding),
      [_titleTextStyle]: dart.fieldType(axis_spec.TextStyleSpec),
      [_legendTapHandling]: dart.fieldType(legend.LegendTapHandling),
      [_currentSeriesList$]: dart.fieldType(core.List$(processed_series.MutableSeries$(D))),
      [_postProcessSeriesList]: dart.fieldType(core.List$(processed_series.MutableSeries$(D)))
    }));
    return Legend;
  });
  legend.Legend = legend.Legend$();
  dart.defineLazy(legend.Legend, {
    /*legend.Legend._decimalPattern*/get _decimalPattern() {
      return new intl.NumberFormat.decimalPattern();
    }
  });
  dart.addTypeTests(legend.Legend, _is_Legend_default);
  const _is_SeriesLegend_default = Symbol('_is_SeriesLegend_default');
  series_legend.SeriesLegend$ = dart.generic(D => {
    let PerSeriesLegendEntryGeneratorOfD = () => (PerSeriesLegendEntryGeneratorOfD = dart.constFn(per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToString = () => (MutableSeriesOfDToString = dart.constFn(dart.fnType(core.String, [MutableSeriesOfD()])))();
    let MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    class SeriesLegend extends legend.Legend$(D) {
      set defaultHiddenSeries(defaultHiddenSeries) {
        this[_defaultHiddenSeries] = defaultHiddenSeries;
        this[_hiddenSeriesList].clear();
        if (this[_defaultHiddenSeries] != null) {
          this[_defaultHiddenSeries][$forEach](dart.bind(this, 'hideSeries'));
        }
      }
      get defaultHiddenSeries() {
        return this[_defaultHiddenSeries];
      }
      get showMeasures() {
        return this[_showMeasures];
      }
      set showMeasures(showMeasures) {
        let t5;
        this[_showMeasures] = (t5 = showMeasures, t5 == null ? false : t5);
      }
      get legendDefaultMeasure() {
        return this.legendEntryGenerator.legendDefaultMeasure;
      }
      set legendDefaultMeasure(legendDefaultMeasure) {
        let t5;
        this.legendEntryGenerator.legendDefaultMeasure = (t5 = legendDefaultMeasure, t5 == null ? legend_entry_generator.LegendDefaultMeasure.none : t5);
      }
      set measureFormatter(formatter) {
        let t5;
        this.legendEntryGenerator.measureFormatter = (t5 = formatter, t5 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t5);
      }
      set secondaryMeasureFormatter(formatter) {
        let t5;
        this.legendEntryGenerator.secondaryMeasureFormatter = (t5 = formatter, t5 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t5);
      }
      onData(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let seriesIds = seriesList[$map](core.String, dart.fn(series => series.id, MutableSeriesOfDToString()));
        this[_hiddenSeriesList].removeWhere(dart.fn(id => !dart.test(seriesIds[$contains](id)), StringTobool()));
      }
      preProcessSeriesList(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$removeWhere](dart.fn(series => this[_hiddenSeriesList].contains(series.id), MutableSeriesOfDTobool()));
      }
      hideSeries(seriesId) {
        this[_hiddenSeriesList].add(seriesId);
      }
      showSeries(seriesId) {
        this[_hiddenSeriesList].removeWhere(dart.fn(id => id == seriesId, StringTobool()));
      }
      isSeriesHidden(seriesId) {
        return this[_hiddenSeriesList].contains(seriesId);
      }
    }
    (SeriesLegend.new = function(opts) {
      let t5, t5$;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let secondaryMeasureFormatter = opts && 'secondaryMeasureFormatter' in opts ? opts.secondaryMeasureFormatter : null;
      let showMeasures = opts && 'showMeasures' in opts ? opts.showMeasures : null;
      let legendDefaultMeasure = opts && 'legendDefaultMeasure' in opts ? opts.legendDefaultMeasure : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[_hiddenSeriesList] = new (_IdentityHashSetOfString()).new();
      this[_defaultHiddenSeries] = null;
      this[_showMeasures] = null;
      SeriesLegend.__proto__.new.call(this, {selectionModelType: (t5 = selectionModelType, t5 == null ? selection_model.SelectionModelType.info : t5), legendEntryGenerator: (t5$ = legendEntryGenerator, t5$ == null ? new (PerSeriesLegendEntryGeneratorOfD()).new() : t5$), entryTextStyle: entryTextStyle});
      this.showMeasures = showMeasures;
      this.legendDefaultMeasure = legendDefaultMeasure;
      this.measureFormatter = measureFormatter;
      this.secondaryMeasureFormatter = secondaryMeasureFormatter;
    }).prototype = SeriesLegend.prototype;
    dart.addTypeTests(SeriesLegend);
    SeriesLegend.prototype[_is_SeriesLegend_default] = true;
    dart.setMethodSignature(SeriesLegend, () => ({
      __proto__: dart.getMethods(SeriesLegend.__proto__),
      hideSeries: dart.fnType(dart.void, [core.String]),
      showSeries: dart.fnType(dart.void, [core.String]),
      isSeriesHidden: dart.fnType(core.bool, [core.String])
    }));
    dart.setGetterSignature(SeriesLegend, () => ({
      __proto__: dart.getGetters(SeriesLegend.__proto__),
      defaultHiddenSeries: core.List$(core.String),
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(SeriesLegend, () => ({
      __proto__: dart.getSetters(SeriesLegend.__proto__),
      defaultHiddenSeries: core.List$(core.String),
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure,
      measureFormatter: dart.fnType(core.String, [core.num]),
      secondaryMeasureFormatter: dart.fnType(core.String, [core.num])
    }));
    dart.setLibraryUri(SeriesLegend, "package:charts_common/src/chart/common/behavior/legend/series_legend.dart");
    dart.setFieldSignature(SeriesLegend, () => ({
      __proto__: dart.getFields(SeriesLegend.__proto__),
      [_hiddenSeriesList]: dart.finalFieldType(core.Set$(core.String)),
      [_defaultHiddenSeries]: dart.fieldType(core.List$(core.String)),
      [_showMeasures]: dart.fieldType(core.bool)
    }));
    return SeriesLegend;
  });
  series_legend.SeriesLegend = series_legend.SeriesLegend$();
  dart.addTypeTests(series_legend.SeriesLegend, _is_SeriesLegend_default);
  const _updateFromSeriesList = dart.privateName(per_series_legend_entry_generator, "_updateFromSeriesList");
  const _updateFromSelection = dart.privateName(per_series_legend_entry_generator, "_updateFromSelection");
  const _resetLegendEntryMeasures = dart.privateName(per_series_legend_entry_generator, "_resetLegendEntryMeasures");
  const _name$12 = dart.privateName(legend_entry_generator, "_name");
  let C188;
  let C189;
  let C190;
  let C191;
  let C192;
  const _is_PerSeriesLegendEntryGenerator_default = Symbol('_is_PerSeriesLegendEntryGenerator_default');
  const entryTextStyle = dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.entryTextStyle");
  const measureFormatter = dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.measureFormatter");
  const secondaryMeasureFormatter = dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.secondaryMeasureFormatter");
  const showOverlaySeries = dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.showOverlaySeries");
  const legendDefaultMeasure = dart.privateName(per_series_legend_entry_generator, "PerSeriesLegendEntryGenerator.legendDefaultMeasure");
  per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDTobool = () => (MutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [MutableSeriesOfD()])))();
    let LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    let MutableSeriesOfDToLegendEntryOfD = () => (MutableSeriesOfDToLegendEntryOfD = dart.constFn(dart.fnType(LegendEntryOfD(), [MutableSeriesOfD()])))();
    let ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    let SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    let MutableSeriesOfDTonum = () => (MutableSeriesOfDTonum = dart.constFn(dart.fnType(core.num, [MutableSeriesOfD()])))();
    class PerSeriesLegendEntryGenerator extends core.Object {
      get entryTextStyle() {
        return this[entryTextStyle];
      }
      set entryTextStyle(value) {
        this[entryTextStyle] = value;
      }
      get measureFormatter() {
        return this[measureFormatter];
      }
      set measureFormatter(value) {
        this[measureFormatter] = value;
      }
      get secondaryMeasureFormatter() {
        return this[secondaryMeasureFormatter];
      }
      set secondaryMeasureFormatter(value) {
        this[secondaryMeasureFormatter] = value;
      }
      get showOverlaySeries() {
        return this[showOverlaySeries];
      }
      set showOverlaySeries(value) {
        this[showOverlaySeries] = value;
      }
      get legendDefaultMeasure() {
        return this[legendDefaultMeasure];
      }
      set legendDefaultMeasure(value) {
        this[legendDefaultMeasure] = value;
      }
      getLegendEntries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let legendEntries = seriesList[$where](dart.fn(series => dart.test(this.showOverlaySeries) || !dart.test(series.overlaySeries), MutableSeriesOfDTobool()))[$map](LegendEntryOfD(), dart.fn(series => new (LegendEntryOfD()).new(series, series.displayName, {color: series.seriesColor, textStyle: this.entryTextStyle}), MutableSeriesOfDToLegendEntryOfD()))[$toList]();
        if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
          this[_updateFromSeriesList](legendEntries, seriesList);
        }
        return legendEntries;
      }
      updateLegendEntries(legendEntries, selectionModel, seriesList) {
        ListOfLegendEntryOfD()._check(legendEntries);
        SelectionModelOfD()._check(selectionModel);
        ListOfMutableSeriesOfD()._check(seriesList);
        if (dart.test(selectionModel.hasAnySelection)) {
          this[_updateFromSelection](legendEntries, selectionModel);
        } else {
          if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
            this[_updateFromSeriesList](legendEntries, seriesList);
          } else {
            this[_resetLegendEntryMeasures](legendEntries);
          }
        }
      }
      [_updateFromSelection](legendEntries, selectionModel) {
        let t5, t5$;
        let seriesAndMeasure = new (IdentityMapOfString$num()).new();
        let secondaryAxisSeriesIDs = new (_IdentityHashSetOfString()).new();
        for (let selectedDatum of selectionModel.selectedDatum) {
          let series = selectedDatum.series;
          let seriesId = series.id;
          let measure = (t5 = series.measureFn(selectedDatum.index), t5 == null ? 0 : t5);
          seriesAndMeasure[$_set](seriesId, dart.test(seriesAndMeasure[$containsKey](seriesId)) ? dart.notNull(seriesAndMeasure[$_get](seriesId)) + dart.notNull(measure) : measure);
          if (series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId") {
            secondaryAxisSeriesIDs.add(seriesId);
          }
        }
        for (let entry of legendEntries) {
          let seriesId = entry.series.id;
          let measureValue = (t5$ = seriesAndMeasure[$_get](seriesId), t5$ == null ? null : t5$[$toDouble]());
          let formattedValue = dart.test(secondaryAxisSeriesIDs.contains(seriesId)) ? this.secondaryMeasureFormatter(measureValue) : this.measureFormatter(measureValue);
          entry.value = measureValue;
          entry.formattedValue = formattedValue;
          entry.isSelected = selectionModel.selectedSeries[$any](dart.fn(selectedSeries => entry.series.id == selectedSeries.id, ImmutableSeriesOfDTobool()));
        }
      }
      [_resetLegendEntryMeasures](legendEntries) {
        for (let entry of legendEntries) {
          entry.value = null;
          entry.formattedValue = null;
          entry.isSelected = false;
        }
      }
      [_updateFromSeriesList](legendEntries, seriesList) {
        let t5;
        function getMeasureTotal(series) {
          let measureTotal = 0.0;
          for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
            measureTotal = measureTotal + dart.notNull(series.measureFn(i));
          }
          return measureTotal;
        }
        dart.fn(getMeasureTotal, MutableSeriesOfDTonum());
        let seriesAndMeasure = new (IdentityMapOfString$double()).new();
        let seriesAndFormattedMeasure = new (IdentityMapOfString$String()).new();
        for (let series of seriesList) {
          let seriesId = series.id;
          let calculatedMeasure = null;
          switch (this.legendDefaultMeasure) {
            case C188 || CT.C188:
            {
              calculatedMeasure = getMeasureTotal(series);
              break;
            }
            case C189 || CT.C189:
            {
              calculatedMeasure = dart.notNull(getMeasureTotal(series)) / dart.notNull(series.data[$length]);
              break;
            }
            case C190 || CT.C190:
            {
              calculatedMeasure = series.measureFn(0);
              break;
            }
            case C191 || CT.C191:
            {
              calculatedMeasure = series.measureFn(dart.notNull(series.data[$length]) - 1);
              break;
            }
            case C192 || CT.C192:
            {
              break;
            }
          }
          seriesAndMeasure[$_set](seriesId, (t5 = calculatedMeasure, t5 == null ? null : t5[$toDouble]()));
          seriesAndFormattedMeasure[$_set](seriesId, series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId" ? this.secondaryMeasureFormatter(calculatedMeasure) : this.measureFormatter(calculatedMeasure));
        }
        for (let entry of legendEntries) {
          let seriesId = entry.series.id;
          entry.value = seriesAndMeasure[$_get](seriesId);
          entry.formattedValue = seriesAndFormattedMeasure[$_get](seriesId);
          entry.isSelected = false;
        }
      }
      _equals(other) {
        if (other == null) return false;
        return per_series_legend_entry_generator.PerSeriesLegendEntryGenerator.is(other) && dart.equals(this.measureFormatter, other.measureFormatter) && dart.equals(this.secondaryMeasureFormatter, other.secondaryMeasureFormatter) && dart.equals(this.legendDefaultMeasure, other.legendDefaultMeasure) && dart.equals(this.entryTextStyle, other.entryTextStyle);
      }
      get hashCode() {
        let t5, t5$;
        let hashcode = (t5$ = (t5 = this.measureFormatter, t5 == null ? null : dart.hashCode(t5)), t5$ == null ? 0 : t5$);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.secondaryMeasureFormatter));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.legendDefaultMeasure));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.entryTextStyle));
        return hashcode;
      }
    }
    (PerSeriesLegendEntryGenerator.new = function() {
      this[entryTextStyle] = null;
      this[measureFormatter] = null;
      this[secondaryMeasureFormatter] = null;
      this[showOverlaySeries] = false;
      this[legendDefaultMeasure] = null;
      ;
    }).prototype = PerSeriesLegendEntryGenerator.prototype;
    dart.addTypeTests(PerSeriesLegendEntryGenerator);
    PerSeriesLegendEntryGenerator.prototype[_is_PerSeriesLegendEntryGenerator_default] = true;
    PerSeriesLegendEntryGenerator[dart.implements] = () => [legend_entry_generator.LegendEntryGenerator$(D)];
    dart.setMethodSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getMethods(PerSeriesLegendEntryGenerator.__proto__),
      getLegendEntries: dart.fnType(core.List$(legend_entry.LegendEntry$(D)), [core.Object]),
      updateLegendEntries: dart.fnType(dart.void, [core.Object, core.Object, core.Object]),
      [_updateFromSelection]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), selection_model.SelectionModel$(D)]),
      [_resetLegendEntryMeasures]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D))]),
      [_updateFromSeriesList]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), core.List$(processed_series.MutableSeries$(D))]),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(PerSeriesLegendEntryGenerator, "package:charts_common/src/chart/common/behavior/legend/per_series_legend_entry_generator.dart");
    dart.setFieldSignature(PerSeriesLegendEntryGenerator, () => ({
      __proto__: dart.getFields(PerSeriesLegendEntryGenerator.__proto__),
      entryTextStyle: dart.fieldType(axis_spec.TextStyleSpec),
      measureFormatter: dart.fieldType(dart.fnType(core.String, [core.num])),
      secondaryMeasureFormatter: dart.fieldType(dart.fnType(core.String, [core.num])),
      showOverlaySeries: dart.fieldType(core.bool),
      legendDefaultMeasure: dart.fieldType(legend_entry_generator.LegendDefaultMeasure)
    }));
    dart.defineExtensionMethods(PerSeriesLegendEntryGenerator, ['_equals']);
    dart.defineExtensionAccessors(PerSeriesLegendEntryGenerator, ['hashCode']);
    return PerSeriesLegendEntryGenerator;
  });
  per_series_legend_entry_generator.PerSeriesLegendEntryGenerator = per_series_legend_entry_generator.PerSeriesLegendEntryGenerator$();
  dart.addTypeTests(per_series_legend_entry_generator.PerSeriesLegendEntryGenerator, _is_PerSeriesLegendEntryGenerator_default);
  const _is_LegendEntryGenerator_default = Symbol('_is_LegendEntryGenerator_default');
  legend_entry_generator.LegendEntryGenerator$ = dart.generic(D => {
    class LegendEntryGenerator extends core.Object {}
    (LegendEntryGenerator.new = function() {
      ;
    }).prototype = LegendEntryGenerator.prototype;
    dart.addTypeTests(LegendEntryGenerator);
    LegendEntryGenerator.prototype[_is_LegendEntryGenerator_default] = true;
    dart.setLibraryUri(LegendEntryGenerator, "package:charts_common/src/chart/common/behavior/legend/legend_entry_generator.dart");
    return LegendEntryGenerator;
  });
  legend_entry_generator.LegendEntryGenerator = legend_entry_generator.LegendEntryGenerator$();
  dart.addTypeTests(legend_entry_generator.LegendEntryGenerator, _is_LegendEntryGenerator_default);
  let C193;
  legend_entry_generator.LegendDefaultMeasure = class LegendDefaultMeasure extends core.Object {
    toString() {
      return this[_name$12];
    }
  };
  (legend_entry_generator.LegendDefaultMeasure.new = function(index, _name) {
    this.index = index;
    this[_name$12] = _name;
    ;
  }).prototype = legend_entry_generator.LegendDefaultMeasure.prototype;
  dart.addTypeTests(legend_entry_generator.LegendDefaultMeasure);
  dart.setLibraryUri(legend_entry_generator.LegendDefaultMeasure, "package:charts_common/src/chart/common/behavior/legend/legend_entry_generator.dart");
  dart.setFieldSignature(legend_entry_generator.LegendDefaultMeasure, () => ({
    __proto__: dart.getFields(legend_entry_generator.LegendDefaultMeasure.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$12]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend_entry_generator.LegendDefaultMeasure, ['toString']);
  legend_entry_generator.LegendDefaultMeasure.none = C192 || CT.C192;
  legend_entry_generator.LegendDefaultMeasure.sum = C188 || CT.C188;
  legend_entry_generator.LegendDefaultMeasure.average = C189 || CT.C189;
  legend_entry_generator.LegendDefaultMeasure.firstValue = C190 || CT.C190;
  legend_entry_generator.LegendDefaultMeasure.lastValue = C191 || CT.C191;
  legend_entry_generator.LegendDefaultMeasure.values = C193 || CT.C193;
  const label$1 = dart.privateName(legend_entry, "LegendEntryBase.label");
  const textStyle$ = dart.privateName(legend_entry, "LegendEntryBase.textStyle");
  const rowNumber$ = dart.privateName(legend_entry, "LegendEntryBase.rowNumber");
  const columnNumber$ = dart.privateName(legend_entry, "LegendEntryBase.columnNumber");
  const rowCount$ = dart.privateName(legend_entry, "LegendEntryBase.rowCount");
  const columnCount$ = dart.privateName(legend_entry, "LegendEntryBase.columnCount");
  const inFirstRow$ = dart.privateName(legend_entry, "LegendEntryBase.inFirstRow");
  const inFirstColumn$ = dart.privateName(legend_entry, "LegendEntryBase.inFirstColumn");
  const inLastRow$ = dart.privateName(legend_entry, "LegendEntryBase.inLastRow");
  const inLastColumn$ = dart.privateName(legend_entry, "LegendEntryBase.inLastColumn");
  legend_entry.LegendEntryBase = class LegendEntryBase extends core.Object {
    get label() {
      return this[label$1];
    }
    set label(value) {
      super.label = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get rowNumber() {
      return this[rowNumber$];
    }
    set rowNumber(value) {
      this[rowNumber$] = value;
    }
    get columnNumber() {
      return this[columnNumber$];
    }
    set columnNumber(value) {
      this[columnNumber$] = value;
    }
    get rowCount() {
      return this[rowCount$];
    }
    set rowCount(value) {
      this[rowCount$] = value;
    }
    get columnCount() {
      return this[columnCount$];
    }
    set columnCount(value) {
      this[columnCount$] = value;
    }
    get inFirstRow() {
      return this[inFirstRow$];
    }
    set inFirstRow(value) {
      this[inFirstRow$] = value;
    }
    get inFirstColumn() {
      return this[inFirstColumn$];
    }
    set inFirstColumn(value) {
      this[inFirstColumn$] = value;
    }
    get inLastRow() {
      return this[inLastRow$];
    }
    set inLastRow(value) {
      this[inLastRow$] = value;
    }
    get inLastColumn() {
      return this[inLastColumn$];
    }
    set inLastColumn(value) {
      this[inLastColumn$] = value;
    }
  };
  (legend_entry.LegendEntryBase.new = function(label, opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
    let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
    let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
    let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
    let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
    let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
    let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
    let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
    let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
    this[label$1] = label;
    this[textStyle$] = textStyle;
    this[rowNumber$] = rowNumber;
    this[columnNumber$] = columnNumber;
    this[rowCount$] = rowCount;
    this[columnCount$] = columnCount;
    this[inFirstRow$] = inFirstRow;
    this[inFirstColumn$] = inFirstColumn;
    this[inLastRow$] = inLastRow;
    this[inLastColumn$] = inLastColumn;
    ;
  }).prototype = legend_entry.LegendEntryBase.prototype;
  dart.addTypeTests(legend_entry.LegendEntryBase);
  dart.setLibraryUri(legend_entry.LegendEntryBase, "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart");
  dart.setFieldSignature(legend_entry.LegendEntryBase, () => ({
    __proto__: dart.getFields(legend_entry.LegendEntryBase.__proto__),
    label: dart.finalFieldType(core.String),
    textStyle: dart.finalFieldType(axis_spec.TextStyleSpec),
    rowNumber: dart.fieldType(core.int),
    columnNumber: dart.fieldType(core.int),
    rowCount: dart.fieldType(core.int),
    columnCount: dart.fieldType(core.int),
    inFirstRow: dart.fieldType(core.bool),
    inFirstColumn: dart.fieldType(core.bool),
    inLastRow: dart.fieldType(core.bool),
    inLastColumn: dart.fieldType(core.bool)
  }));
  const _is_LegendCategory_default = Symbol('_is_LegendCategory_default');
  const entries$ = dart.privateName(legend_entry, "LegendCategory.entries");
  legend_entry.LegendCategory$ = dart.generic(D => {
    class LegendCategory extends legend_entry.LegendEntryBase {
      get entries() {
        return this[entries$];
      }
      set entries(value) {
        super.entries = value;
      }
    }
    (LegendCategory.new = function(label, entries, opts) {
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
      let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
      let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
      let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
      let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
      let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
      let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
      let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
      this[entries$] = entries;
      LegendCategory.__proto__.new.call(this, label, {textStyle: textStyle, rowNumber: rowNumber, columnNumber: columnNumber, rowCount: rowCount, columnCount: columnCount, inFirstRow: inFirstRow, inFirstColumn: inFirstColumn, inLastRow: inLastRow, inLastColumn: inLastColumn});
      ;
    }).prototype = LegendCategory.prototype;
    dart.addTypeTests(LegendCategory);
    LegendCategory.prototype[_is_LegendCategory_default] = true;
    dart.setLibraryUri(LegendCategory, "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart");
    dart.setFieldSignature(LegendCategory, () => ({
      __proto__: dart.getFields(LegendCategory.__proto__),
      entries: dart.finalFieldType(core.List$(legend_entry.LegendEntry$(D)))
    }));
    return LegendCategory;
  });
  legend_entry.LegendCategory = legend_entry.LegendCategory$();
  dart.addTypeTests(legend_entry.LegendCategory, _is_LegendCategory_default);
  const _is_LegendEntry_default = Symbol('_is_LegendEntry_default');
  const series$6 = dart.privateName(legend_entry, "LegendEntry.series");
  const datum$3 = dart.privateName(legend_entry, "LegendEntry.datum");
  const datumIndex$ = dart.privateName(legend_entry, "LegendEntry.datumIndex");
  const domain$2 = dart.privateName(legend_entry, "LegendEntry.domain");
  const color$5 = dart.privateName(legend_entry, "LegendEntry.color");
  const value$1 = dart.privateName(legend_entry, "LegendEntry.value");
  const formattedValue = dart.privateName(legend_entry, "LegendEntry.formattedValue");
  const isSelected$ = dart.privateName(legend_entry, "LegendEntry.isSelected");
  legend_entry.LegendEntry$ = dart.generic(D => {
    class LegendEntry extends legend_entry.LegendEntryBase {
      get series() {
        return this[series$6];
      }
      set series(value) {
        super.series = value;
      }
      get datum() {
        return this[datum$3];
      }
      set datum(value) {
        super.datum = value;
      }
      get datumIndex() {
        return this[datumIndex$];
      }
      set datumIndex(value) {
        super.datumIndex = value;
      }
      get domain() {
        return this[domain$2];
      }
      set domain(value) {
        super.domain = value;
      }
      get color() {
        return this[color$5];
      }
      set color(value) {
        super.color = value;
      }
      get value() {
        return this[value$1];
      }
      set value(value) {
        this[value$1] = value;
      }
      get formattedValue() {
        return this[formattedValue];
      }
      set formattedValue(value) {
        this[formattedValue] = value;
      }
      get isSelected() {
        return this[isSelected$];
      }
      set isSelected(value) {
        this[isSelected$] = value;
      }
      get symbolRenderer() {
        return this.series.getAttr(series_renderer.SeriesRenderer, series_renderer.rendererKey).symbolRenderer;
      }
    }
    (LegendEntry.new = function(series, label, opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let datumIndex = opts && 'datumIndex' in opts ? opts.datumIndex : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let isSelected = opts && 'isSelected' in opts ? opts.isSelected : false;
      let textStyle = opts && 'textStyle' in opts ? opts.textStyle : null;
      let rowNumber = opts && 'rowNumber' in opts ? opts.rowNumber : null;
      let columnNumber = opts && 'columnNumber' in opts ? opts.columnNumber : null;
      let rowCount = opts && 'rowCount' in opts ? opts.rowCount : null;
      let columnCount = opts && 'columnCount' in opts ? opts.columnCount : null;
      let inFirstRow = opts && 'inFirstRow' in opts ? opts.inFirstRow : null;
      let inFirstColumn = opts && 'inFirstColumn' in opts ? opts.inFirstColumn : null;
      let inLastRow = opts && 'inLastRow' in opts ? opts.inLastRow : null;
      let inLastColumn = opts && 'inLastColumn' in opts ? opts.inLastColumn : null;
      this[formattedValue] = null;
      this[series$6] = series;
      this[datum$3] = datum;
      this[datumIndex$] = datumIndex;
      this[domain$2] = domain;
      this[value$1] = value;
      this[color$5] = color;
      this[isSelected$] = isSelected;
      LegendEntry.__proto__.new.call(this, label, {textStyle: textStyle, rowNumber: rowNumber, columnNumber: columnNumber, rowCount: rowCount, columnCount: columnCount, inFirstRow: inFirstRow, inFirstColumn: inFirstColumn, inLastRow: inLastRow, inLastColumn: inLastColumn});
      ;
    }).prototype = LegendEntry.prototype;
    dart.addTypeTests(LegendEntry);
    LegendEntry.prototype[_is_LegendEntry_default] = true;
    dart.setGetterSignature(LegendEntry, () => ({
      __proto__: dart.getGetters(LegendEntry.__proto__),
      symbolRenderer: symbol_renderer.SymbolRenderer
    }));
    dart.setLibraryUri(LegendEntry, "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart");
    dart.setFieldSignature(LegendEntry, () => ({
      __proto__: dart.getFields(LegendEntry.__proto__),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D)),
      datum: dart.finalFieldType(dart.dynamic),
      datumIndex: dart.finalFieldType(core.int),
      domain: dart.finalFieldType(D),
      color: dart.finalFieldType(color$.Color),
      value: dart.fieldType(core.double),
      formattedValue: dart.fieldType(core.String),
      isSelected: dart.fieldType(core.bool)
    }));
    return LegendEntry;
  });
  legend_entry.LegendEntry = legend_entry.LegendEntry$();
  dart.addTypeTests(legend_entry.LegendEntry, _is_LegendEntry_default);
  const _is_LegendState_default = Symbol('_is_LegendState_default');
  const _legendEntries$ = dart.privateName(legend, "LegendState._legendEntries");
  legend.LegendState$ = dart.generic(D => {
    let LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    let ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    class LegendState extends core.Object {
      get [_legendEntries]() {
        return this[_legendEntries$];
      }
      set [_legendEntries](value) {
        this[_legendEntries$] = ListOfLegendEntryOfD()._check(value);
      }
      get legendEntries() {
        return this[_legendEntries];
      }
      get selectionModel() {
        return this[_selectionModel];
      }
    }
    (LegendState.new = function() {
      this[_legendEntries$] = null;
      this[_selectionModel] = null;
      ;
    }).prototype = LegendState.prototype;
    dart.addTypeTests(LegendState);
    LegendState.prototype[_is_LegendState_default] = true;
    dart.setGetterSignature(LegendState, () => ({
      __proto__: dart.getGetters(LegendState.__proto__),
      legendEntries: core.List$(legend_entry.LegendEntry$(D)),
      selectionModel: selection_model.SelectionModel
    }));
    dart.setLibraryUri(LegendState, "package:charts_common/src/chart/common/behavior/legend/legend.dart");
    dart.setFieldSignature(LegendState, () => ({
      __proto__: dart.getFields(LegendState.__proto__),
      [_legendEntries]: dart.fieldType(core.List$(legend_entry.LegendEntry$(D))),
      [_selectionModel]: dart.fieldType(selection_model.SelectionModel)
    }));
    return LegendState;
  });
  legend.LegendState = legend.LegendState$();
  dart.addTypeTests(legend.LegendState, _is_LegendState_default);
  const bottomPct$ = dart.privateName(legend, "LegendCellPadding.bottomPct");
  const bottomPx$0 = dart.privateName(legend, "LegendCellPadding.bottomPx");
  const leftPct$ = dart.privateName(legend, "LegendCellPadding.leftPct");
  const leftPx$0 = dart.privateName(legend, "LegendCellPadding.leftPx");
  const rightPct$ = dart.privateName(legend, "LegendCellPadding.rightPct");
  const rightPx$0 = dart.privateName(legend, "LegendCellPadding.rightPx");
  const topPct$ = dart.privateName(legend, "LegendCellPadding.topPct");
  const topPx$0 = dart.privateName(legend, "LegendCellPadding.topPx");
  legend.LegendCellPadding = class LegendCellPadding extends core.Object {
    get bottomPct() {
      return this[bottomPct$];
    }
    set bottomPct(value) {
      super.bottomPct = value;
    }
    get bottomPx() {
      return this[bottomPx$0];
    }
    set bottomPx(value) {
      super.bottomPx = value;
    }
    get leftPct() {
      return this[leftPct$];
    }
    set leftPct(value) {
      super.leftPct = value;
    }
    get leftPx() {
      return this[leftPx$0];
    }
    set leftPx(value) {
      super.leftPx = value;
    }
    get rightPct() {
      return this[rightPct$];
    }
    set rightPct(value) {
      super.rightPct = value;
    }
    get rightPx() {
      return this[rightPx$0];
    }
    set rightPx(value) {
      super.rightPx = value;
    }
    get topPct() {
      return this[topPct$];
    }
    set topPct(value) {
      super.topPct = value;
    }
    get topPx() {
      return this[topPx$0];
    }
    set topPx(value) {
      super.topPx = value;
    }
    bottom(height) {
      return this.bottomPct != null ? dart.notNull(this.bottomPct) * dart.notNull(height) : this.bottomPx;
    }
    left(width) {
      return this.leftPct != null ? dart.notNull(this.leftPct) * dart.notNull(width) : this.leftPx;
    }
    right(width) {
      return this.rightPct != null ? dart.notNull(this.rightPct) * dart.notNull(width) : this.rightPx;
    }
    top(height) {
      return this.topPct != null ? dart.notNull(this.topPct) * dart.notNull(height) : this.topPx;
    }
  };
  (legend.LegendCellPadding.fromLTRBPct = function(leftPct, topPct, rightPct, bottomPct) {
    this[leftPct$] = leftPct;
    this[topPct$] = topPct;
    this[rightPct$] = rightPct;
    this[bottomPct$] = bottomPct;
    this[leftPx$0] = null;
    this[topPx$0] = null;
    this[rightPx$0] = null;
    this[bottomPx$0] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromLTRBPx = function(leftPx, topPx, rightPx, bottomPx) {
    this[leftPx$0] = leftPx;
    this[topPx$0] = topPx;
    this[rightPx$0] = rightPx;
    this[bottomPx$0] = bottomPx;
    this[leftPct$] = null;
    this[topPct$] = null;
    this[rightPct$] = null;
    this[bottomPct$] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromTRBLPct = function(topPct, rightPct, bottomPct, leftPct) {
    this[topPct$] = topPct;
    this[rightPct$] = rightPct;
    this[bottomPct$] = bottomPct;
    this[leftPct$] = leftPct;
    this[topPx$0] = null;
    this[rightPx$0] = null;
    this[bottomPx$0] = null;
    this[leftPx$0] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.fromTRBLPx = function(topPx, rightPx, bottomPx, leftPx) {
    this[topPx$0] = topPx;
    this[rightPx$0] = rightPx;
    this[bottomPx$0] = bottomPx;
    this[leftPx$0] = leftPx;
    this[topPct$] = null;
    this[rightPct$] = null;
    this[bottomPct$] = null;
    this[leftPct$] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.allPct = function(value) {
    this[leftPct$] = value;
    this[topPct$] = value;
    this[rightPct$] = value;
    this[bottomPct$] = value;
    this[leftPx$0] = null;
    this[topPx$0] = null;
    this[rightPx$0] = null;
    this[bottomPx$0] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  (legend.LegendCellPadding.allPx = function(value) {
    this[leftPx$0] = value;
    this[topPx$0] = value;
    this[rightPx$0] = value;
    this[bottomPx$0] = value;
    this[leftPct$] = null;
    this[topPct$] = null;
    this[rightPct$] = null;
    this[bottomPct$] = null;
    ;
  }).prototype = legend.LegendCellPadding.prototype;
  dart.addTypeTests(legend.LegendCellPadding);
  dart.setMethodSignature(legend.LegendCellPadding, () => ({
    __proto__: dart.getMethods(legend.LegendCellPadding.__proto__),
    bottom: dart.fnType(core.double, [core.num]),
    left: dart.fnType(core.double, [core.num]),
    right: dart.fnType(core.double, [core.num]),
    top: dart.fnType(core.double, [core.num])
  }));
  dart.setLibraryUri(legend.LegendCellPadding, "package:charts_common/src/chart/common/behavior/legend/legend.dart");
  dart.setFieldSignature(legend.LegendCellPadding, () => ({
    __proto__: dart.getFields(legend.LegendCellPadding.__proto__),
    bottomPct: dart.finalFieldType(core.double),
    bottomPx: dart.finalFieldType(core.double),
    leftPct: dart.finalFieldType(core.double),
    leftPx: dart.finalFieldType(core.double),
    rightPct: dart.finalFieldType(core.double),
    rightPx: dart.finalFieldType(core.double),
    topPct: dart.finalFieldType(core.double),
    topPx: dart.finalFieldType(core.double)
  }));
  const _name$13 = dart.privateName(legend, "_name");
  let C194;
  let C195;
  let C196;
  legend.LegendTapHandling = class LegendTapHandling extends core.Object {
    toString() {
      return this[_name$13];
    }
  };
  (legend.LegendTapHandling.new = function(index, _name) {
    this.index = index;
    this[_name$13] = _name;
    ;
  }).prototype = legend.LegendTapHandling.prototype;
  dart.addTypeTests(legend.LegendTapHandling);
  dart.setLibraryUri(legend.LegendTapHandling, "package:charts_common/src/chart/common/behavior/legend/legend.dart");
  dart.setFieldSignature(legend.LegendTapHandling, () => ({
    __proto__: dart.getFields(legend.LegendTapHandling.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$13]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(legend.LegendTapHandling, ['toString']);
  legend.LegendTapHandling.none = C194 || CT.C194;
  legend.LegendTapHandling.hide = C195 || CT.C195;
  legend.LegendTapHandling.values = C196 || CT.C196;
  const _chart$3 = dart.privateName(keyboard_domain_navigator, "_chart");
  const _lifecycleListener$ = dart.privateName(keyboard_domain_navigator, "_lifecycleListener");
  const _domains = dart.privateName(keyboard_domain_navigator, "_domains");
  const _datumPairs = dart.privateName(keyboard_domain_navigator, "_datumPairs");
  const _currentIndex = dart.privateName(keyboard_domain_navigator, "_currentIndex");
  const _getActiveHoverDomainIndex = dart.privateName(keyboard_domain_navigator, "_getActiveHoverDomainIndex");
  const _generateSelectionDomains = dart.privateName(keyboard_domain_navigator, "_generateSelectionDomains");
  const _doNavigate = dart.privateName(keyboard_domain_navigator, "_doNavigate");
  const _selectDomainIndex = dart.privateName(keyboard_domain_navigator, "_selectDomainIndex");
  const _getDatumPairs = dart.privateName(keyboard_domain_navigator, "_getDatumPairs");
  const _is_KeyboardDomainNavigator_default = Symbol('_is_KeyboardDomainNavigator_default');
  keyboard_domain_navigator.KeyboardDomainNavigator$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let JSArrayOfMutableSeriesOfD = () => (JSArrayOfMutableSeriesOfD = dart.constFn(_interceptors.JSArray$(MutableSeriesOfD())))();
    let JSArrayOfD = () => (JSArrayOfD = dart.constFn(_interceptors.JSArray$(D)))();
    let ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    let LinkedMapOfD$ListOfSeriesDatumOfD = () => (LinkedMapOfD$ListOfSeriesDatumOfD = dart.constFn(_js_helper.LinkedMap$(D, ListOfSeriesDatumOfD())))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let IdentityMapOfint$ListOfSeriesDatumOfD = () => (IdentityMapOfint$ListOfSeriesDatumOfD = dart.constFn(_js_helper.IdentityMap$(core.int, ListOfSeriesDatumOfD())))();
    let VoidToListOfSeriesDatumOfD = () => (VoidToListOfSeriesDatumOfD = dart.constFn(dart.fnType(ListOfSeriesDatumOfD(), [])))();
    let DAndListOfSeriesDatumOfDToNull = () => (DAndListOfSeriesDatumOfDToNull = dart.constFn(dart.fnType(core.Null, [D, ListOfSeriesDatumOfD()])))();
    class KeyboardDomainNavigator extends core.Object {
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$3] = chart;
        chart.addLifecycleListener(this[_lifecycleListener$]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeLifecycleListener(this[_lifecycleListener$]);
      }
      onData(_) {
        this[_domains] = null;
        this[_datumPairs] = null;
        this[_currentIndex] = -1;
      }
      handleEscape() {
        this[_currentIndex] = -1;
        this.clearSelection();
        return true;
      }
      handleEnter() {
        this[_currentIndex] = this[_getActiveHoverDomainIndex]();
        this.selectDomain(this[_currentIndex]);
        return true;
      }
      handleLeftArrow() {
        if (this[_datumPairs] == null) {
          this[_generateSelectionDomains]();
        }
        let domainsLength = this[_datumPairs][$length];
        if (domainsLength === 0) {
          return false;
        }
        this[_currentIndex] = this[_getActiveHoverDomainIndex]();
        if (this[_currentIndex] === -1) {
          this[_currentIndex] = dart.notNull(domainsLength) - 1;
        } else {
          this[_currentIndex] = this[_currentIndex] === 0 ? -1 : dart.notNull(this[_currentIndex]) - 1;
        }
        this[_doNavigate](this[_currentIndex]);
        return true;
      }
      handleRightArrow() {
        if (this[_datumPairs] == null) {
          this[_generateSelectionDomains]();
        }
        let domainsLength = this[_datumPairs][$length];
        if (domainsLength === 0) {
          return false;
        }
        this[_currentIndex] = this[_getActiveHoverDomainIndex]();
        if (this[_currentIndex] === -1) {
          this[_currentIndex] = 0;
        } else {
          this[_currentIndex] = this[_currentIndex] === dart.notNull(domainsLength) - 1 ? -1 : dart.notNull(this[_currentIndex]) + 1;
        }
        this[_doNavigate](this[_currentIndex]);
        return true;
      }
      [_doNavigate](domainIndex) {
        this[_selectDomainIndex](selection_model.SelectionModelType.info, core.int._check(domainIndex));
      }
      selectDomain(domainIndex) {
        this[_selectDomainIndex](selection_model.SelectionModelType.action, core.int._check(domainIndex));
      }
      clearSelection() {
        this[_selectDomainIndex](selection_model.SelectionModelType.info, -1);
      }
      [_selectDomainIndex](selectionModelType, domainIndex) {
        let selectionModel = this[_chart$3].getSelectionModel(selectionModelType);
        if (selectionModel == null) {
          return false;
        }
        if (domainIndex === -1) {
          selectionModel.clearSelection();
        } else {
          let datumPairs = this[_getDatumPairs](domainIndex);
          let seriesDatumList = JSArrayOfSeriesDatumOfD().of([]);
          let seriesList = JSArrayOfMutableSeriesOfD().of([]);
          for (let t5 of core.Iterable._check(datumPairs)) {
            let seriesDatum = SeriesDatumOfD()._check(t5);
            seriesDatumList[$add](new (SeriesDatumOfD()).new(seriesDatum.series, seriesDatum.datum));
            if (!dart.test(seriesList[$contains](seriesDatum.series))) {
              seriesList[$add](MutableSeriesOfD()._check(seriesDatum.series));
            }
          }
          selectionModel.updateSelection(seriesDatumList, seriesList);
        }
        return true;
      }
      [_getActiveHoverDomainIndex]() {
        let selectionModel = this[_chart$3].getSelectionModel(selection_model.SelectionModelType.info);
        if (!dart.test(selectionModel.hasAnySelection)) {
          return -1;
        }
        let details = this[_chart$3].getSelectedDatumDetails(selection_model.SelectionModelType.info);
        if (dart.test(details[$isEmpty])) {
          return -1;
        }
        let firstDomain = details[$first].domain;
        if (0 <= dart.notNull(this[_currentIndex]) && dart.notNull(this[_currentIndex]) <= dart.notNull(this[_domains][$length]) - 1 && dart.equals(this[_domains][$_get](this[_currentIndex]), firstDomain)) {
          return this[_currentIndex];
        }
        return this[_domains][$indexOf](D._check(firstDomain));
      }
      [_generateSelectionDomains]() {
        this[_domains] = JSArrayOfD().of([]);
        let allSeriesDatum = this[_chart$3].getAllDatumDetails();
        if (cartesian_chart.CartesianChart.is(this[_chart$3])) {
          let localChart = cartesian_chart.CartesianChart.as(this[_chart$3]);
          if (dart.test(localChart.vertical)) {
            allSeriesDatum[$sort](dart.fn((a, b) => a.chartPosition.x[$compareTo](b.chartPosition.x), DatumDetailsAndDatumDetailsToint()));
          } else {
            allSeriesDatum[$sort](dart.fn((a, b) => a.chartPosition.y[$compareTo](b.chartPosition.y), DatumDetailsAndDatumDetailsToint()));
          }
        }
        let detailsByDomain = new (LinkedMapOfD$ListOfSeriesDatumOfD()).new();
        for (let datumDetails of allSeriesDatum) {
          let domain = datumDetails.domain;
          if (detailsByDomain[$_get](domain) == null) {
            this[_domains][$add](D._check(domain));
            detailsByDomain[$_set](D._check(domain), JSArrayOfSeriesDatumOfD().of([]));
          }
          detailsByDomain[$_get](domain)[$add](new (SeriesDatumOfD()).new(ImmutableSeriesOfD()._check(datumDetails.series), datumDetails.datum));
        }
        this[_datumPairs] = new (IdentityMapOfint$ListOfSeriesDatumOfD()).new();
        let i = 0;
        detailsByDomain[$forEach](dart.fn((key, value) => {
          this[_datumPairs][$putIfAbsent](i, dart.fn(() => value, VoidToListOfSeriesDatumOfD()));
          i = i + 1;
        }, DAndListOfSeriesDatumOfDToNull()));
        this[_currentIndex] = -1;
      }
      [_getDatumPairs](domainIndex) {
        let t6;
        t6 = this[_datumPairs][$_get](domainIndex);
        return t6 == null ? [] : t6;
      }
      get role() {
        return "keyboard-domain-navigator";
      }
    }
    (KeyboardDomainNavigator.new = function() {
      this[_chart$3] = null;
      this[_lifecycleListener$] = null;
      this[_domains] = null;
      this[_datumPairs] = null;
      this[_currentIndex] = -1;
      this[_lifecycleListener$] = new (LifecycleListenerOfD()).new({onData: dart.bind(this, 'onData')});
    }).prototype = KeyboardDomainNavigator.prototype;
    dart.addTypeTests(KeyboardDomainNavigator);
    KeyboardDomainNavigator.prototype[_is_KeyboardDomainNavigator_default] = true;
    KeyboardDomainNavigator[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getMethods(KeyboardDomainNavigator.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      onData: dart.fnType(dart.void, [dart.dynamic]),
      handleEscape: dart.fnType(core.bool, []),
      handleEnter: dart.fnType(core.bool, []),
      handleLeftArrow: dart.fnType(core.bool, []),
      handleRightArrow: dart.fnType(core.bool, []),
      [_doNavigate]: dart.fnType(dart.dynamic, [dart.dynamic]),
      selectDomain: dart.fnType(dart.dynamic, [dart.dynamic]),
      clearSelection: dart.fnType(dart.dynamic, []),
      [_selectDomainIndex]: dart.fnType(core.bool, [selection_model.SelectionModelType, core.int]),
      [_getActiveHoverDomainIndex]: dart.fnType(core.int, []),
      [_generateSelectionDomains]: dart.fnType(dart.void, []),
      [_getDatumPairs]: dart.fnType(dart.dynamic, [dart.dynamic])
    }));
    dart.setGetterSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getGetters(KeyboardDomainNavigator.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(KeyboardDomainNavigator, "package:charts_common/src/chart/common/behavior/a11y/keyboard_domain_navigator.dart");
    dart.setFieldSignature(KeyboardDomainNavigator, () => ({
      __proto__: dart.getFields(KeyboardDomainNavigator.__proto__),
      [_chart$3]: dart.fieldType(base_chart.BaseChart),
      [_lifecycleListener$]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_domains]: dart.fieldType(core.List$(D)),
      [_datumPairs]: dart.fieldType(core.Map$(core.int, core.List$(series_datum.SeriesDatum$(D)))),
      [_currentIndex]: dart.fieldType(core.int)
    }));
    return KeyboardDomainNavigator;
  });
  keyboard_domain_navigator.KeyboardDomainNavigator = keyboard_domain_navigator.KeyboardDomainNavigator$();
  dart.addTypeTests(keyboard_domain_navigator.KeyboardDomainNavigator, _is_KeyboardDomainNavigator_default);
  dart.defineLazy(keyboard_domain_navigator, {
    /*keyboard_domain_navigator.NO_SELECTION*/get NO_SELECTION() {
      return -1;
    }
  });
  const _is_TreeMapRendererElement_default = Symbol('_is_TreeMapRendererElement_default');
  const boundingRect = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.boundingRect");
  const area = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.area");
  const fillColor$1 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.fillColor");
  const fillPattern$0 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.fillPattern");
  const patternColor = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.patternColor");
  const strokeColor = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.strokeColor");
  const isLeaf = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.isLeaf");
  const strokeWidthPx$8 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.strokeWidthPx");
  const index$1 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.index");
  const series$7 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.series");
  const domain$3 = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.domain");
  const measure = dart.privateName(treemap_renderer_element, "TreeMapRendererElement.measure");
  treemap_renderer_element.TreeMapRendererElement$ = dart.generic(D => {
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class TreeMapRendererElement extends core.Object {
      get boundingRect() {
        return this[boundingRect];
      }
      set boundingRect(value) {
        this[boundingRect] = value;
      }
      get area() {
        return this[area];
      }
      set area(value) {
        this[area] = value;
      }
      get fillColor() {
        return this[fillColor$1];
      }
      set fillColor(value) {
        this[fillColor$1] = value;
      }
      get fillPattern() {
        return this[fillPattern$0];
      }
      set fillPattern(value) {
        this[fillPattern$0] = value;
      }
      get patternColor() {
        return this[patternColor];
      }
      set patternColor(value) {
        this[patternColor] = value;
      }
      get strokeColor() {
        return this[strokeColor];
      }
      set strokeColor(value) {
        this[strokeColor] = value;
      }
      get isLeaf() {
        return this[isLeaf];
      }
      set isLeaf(value) {
        this[isLeaf] = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$8];
      }
      set strokeWidthPx(value) {
        this[strokeWidthPx$8] = value;
      }
      get index() {
        return this[index$1];
      }
      set index(value) {
        this[index$1] = value;
      }
      get series() {
        return this[series$7];
      }
      set series(value) {
        this[series$7] = ImmutableSeriesOfD()._check(value);
      }
      get domain() {
        return this[domain$3];
      }
      set domain(value) {
        this[domain$3] = D._check(value);
      }
      get measure() {
        return this[measure];
      }
      set measure(value) {
        this[measure] = value;
      }
      clone() {
        let t6;
        t6 = new (TreeMapRendererElementOfD()).new();
        t6.boundingRect = RectangleOfnum().fromPoints(this.boundingRect[$topLeft], this.boundingRect[$bottomRight]);
        t6.area = this.area;
        t6.fillPattern = this.fillPattern;
        t6.fillColor = new color$.Color.fromOther({color: this.fillColor});
        t6.patternColor = new color$.Color.fromOther({color: this.patternColor});
        t6.strokeColor = new color$.Color.fromOther({color: this.strokeColor});
        t6.strokeWidthPx = this.strokeWidthPx;
        t6.isLeaf = this.isLeaf;
        t6.index = this.index;
        t6.series = this.series;
        t6.domain = this.domain;
        t6.measure = this.measure;
        return t6;
      }
      refreshPaintProperties() {
        this.strokeColor = this.series.colorFn(this.index);
        this.strokeWidthPx = this.series.strokeWidthPxFn(this.index);
        this.fillColor = this.series.fillColorFn(this.index);
        this.fillPattern = this.series.fillPatternFn == null ? chart_canvas.FillPatternType.solid : this.series.fillPatternFn(this.index);
        this.patternColor = this.series.patternColorFn(this.index);
      }
      updateAnimationPercent(previous, target, animationPercent) {
        TreeMapRendererElementOfD()._check(previous);
        TreeMapRendererElementOfD()._check(target);
        this.boundingRect = target.boundingRect;
        this.area = target.area;
      }
      toString() {
        return dart.str(this[$runtimeType]) + dart.notNull(new (IdentityMapOfString$Object()).from(["boundingRect", this.boundingRect, "area", this.area, "strokeColor", this.strokeColor, "strokeWidthPx", this.strokeWidthPx, "fillColor", this.fillColor, "fillPattern", this.fillPattern, "patternColor", this.patternColor, "isLeaf", this.isLeaf, "index", this.index, "domain", this.domain, "measure", this.measure])[$toString]());
      }
    }
    (TreeMapRendererElement.new = function() {
      this[boundingRect] = null;
      this[area] = null;
      this[fillColor$1] = null;
      this[fillPattern$0] = null;
      this[patternColor] = null;
      this[strokeColor] = null;
      this[isLeaf] = null;
      this[strokeWidthPx$8] = null;
      this[index$1] = null;
      this[series$7] = null;
      this[domain$3] = null;
      this[measure] = null;
      ;
    }).prototype = TreeMapRendererElement.prototype;
    dart.addTypeTests(TreeMapRendererElement);
    TreeMapRendererElement.prototype[_is_TreeMapRendererElement_default] = true;
    dart.setMethodSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getMethods(TreeMapRendererElement.__proto__),
      clone: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), []),
      refreshPaintProperties: dart.fnType(dart.void, []),
      updateAnimationPercent: dart.fnType(dart.void, [core.Object, core.Object, core.double])
    }));
    dart.setLibraryUri(TreeMapRendererElement, "package:charts_common/src/chart/treemap/treemap_renderer_element.dart");
    dart.setFieldSignature(TreeMapRendererElement, () => ({
      __proto__: dart.getFields(TreeMapRendererElement.__proto__),
      boundingRect: dart.fieldType(math.Rectangle$(core.num)),
      area: dart.fieldType(core.num),
      fillColor: dart.fieldType(color$.Color),
      fillPattern: dart.fieldType(chart_canvas.FillPatternType),
      patternColor: dart.fieldType(color$.Color),
      strokeColor: dart.fieldType(color$.Color),
      isLeaf: dart.fieldType(core.bool),
      strokeWidthPx: dart.fieldType(core.num),
      index: dart.fieldType(core.int),
      series: dart.fieldType(processed_series.ImmutableSeries$(D)),
      domain: dart.fieldType(D),
      measure: dart.fieldType(core.num)
    }));
    dart.defineExtensionMethods(TreeMapRendererElement, ['toString']);
    return TreeMapRendererElement;
  });
  treemap_renderer_element.TreeMapRendererElement = treemap_renderer_element.TreeMapRendererElement$();
  dart.addTypeTests(treemap_renderer_element.TreeMapRendererElement, _is_TreeMapRendererElement_default);
  const _ratio$ = dart.privateName(squarified_treemap_renderer, "_ratio");
  const _treeNodeToRendererElement = dart.privateName(base_treemap_renderer, "_treeNodeToRendererElement");
  const _animatedTreeMapRects = dart.privateName(base_treemap_renderer, "_animatedTreeMapRects");
  const _chart$4 = dart.privateName(base_treemap_renderer, "_chart");
  const _ensureSingleTree = dart.privateName(base_treemap_renderer, "_ensureSingleTree");
  const _asTreeMapRendererElement = dart.privateName(base_treemap_renderer, "_asTreeMapRendererElement");
  const _configureRootRendererElement = dart.privateName(base_treemap_renderer, "_configureRootRendererElement");
  const _rendererElementForTreeNode = dart.privateName(base_treemap_renderer, "_rendererElementForTreeNode");
  const _asAnimatedTreeMapRect = dart.privateName(base_treemap_renderer, "_asAnimatedTreeMapRect");
  const _is_BaseTreeMapRenderer_default = Symbol('_is_BaseTreeMapRenderer_default');
  const config$4 = dart.privateName(base_treemap_renderer, "BaseTreeMapRenderer.config");
  const labelDecorator = dart.privateName(base_treemap_renderer, "BaseTreeMapRenderer.labelDecorator");
  base_treemap_renderer.BaseTreeMapRenderer$ = dart.generic(D => {
    let TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    let LinkedMapOfTreeNode$TreeMapRendererElementOfD = () => (LinkedMapOfTreeNode$TreeMapRendererElementOfD = dart.constFn(_js_helper.LinkedMap$(tree.TreeNode, TreeMapRendererElementOfD())))();
    let _AnimatedTreeMapRectOfD = () => (_AnimatedTreeMapRectOfD = dart.constFn(base_treemap_renderer._AnimatedTreeMapRect$(D)))();
    let JSArrayOf_AnimatedTreeMapRectOfD = () => (JSArrayOf_AnimatedTreeMapRectOfD = dart.constFn(_interceptors.JSArray$(_AnimatedTreeMapRectOfD())))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let _HashSetOfD = () => (_HashSetOfD = dart.constFn(collection._HashSet$(D)))();
    let _AnimatedTreeMapRectOfDTobool = () => (_AnimatedTreeMapRectOfDTobool = dart.constFn(dart.fnType(core.bool, [_AnimatedTreeMapRectOfD()])))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let IterableOfMutableSeriesOfD = () => (IterableOfMutableSeriesOfD = dart.constFn(core.Iterable$(MutableSeriesOfD())))();
    class BaseTreeMapRenderer extends series_renderer.BaseSeriesRenderer$(D) {
      get config() {
        return this[config$4];
      }
      set config(value) {
        super.config = value;
      }
      get labelDecorator() {
        return this[labelDecorator];
      }
      set labelDecorator(value) {
        super.labelDecorator = value;
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        super.onAttach(chart);
        this[_chart$4] = chart;
      }
      get isRtl() {
        let t6, t6$, t6$0;
        t6$0 = (t6$ = (t6 = this[_chart$4], t6 == null ? null : t6.context), t6$ == null ? null : t6$.isRtl);
        return t6$0 == null ? false : t6$0;
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this.assignMissingColors(seriesList, {emptyCategoryUsesSinglePalette: true});
        this.assignMissingStrokeWidths(seriesList);
      }
      preprocessSeries(seriesList) {
        let t6;
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_ensureSingleTree](seriesList);
        this[_treeNodeToRendererElement][$clear]();
        for (let series of seriesList) {
          let count = series.data[$length];
          for (let i = 0; i < dart.notNull(count); i = i + 1) {
            let node = tree.TreeNode._check(series.data[$_get](i));
            this[_treeNodeToRendererElement][$_set](node, (t6 = this[_asTreeMapRendererElement](series, i), t6.isLeaf = !dart.test(node.hasChildren), t6));
          }
          series.setAttr(IterableOfTreeMapRendererElement(), base_treemap_renderer.treeMapElementsKey, this[_treeNodeToRendererElement][$values]);
        }
      }
      update(seriesList, isAnimating) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        let _visibleTreeMapRectKeys = new (_HashSetOfD()).new();
        for (let series of seriesList) {
          if (dart.test(series.data[$isNotEmpty])) {
            let root = tree.TreeNode._check(series.data[$first]);
            this[_configureRootRendererElement](root);
            for (let t6 of series.data) {
              let node = tree.TreeNode._check(t6);
              this.tile(node);
              let element = this[_rendererElementForTreeNode](node);
              element.refreshPaintProperties();
              let rect = this[_asAnimatedTreeMapRect](element);
              _visibleTreeMapRectKeys.add(rect.key);
            }
          }
        }
        for (let rect of this[_animatedTreeMapRects]) {
          if (!dart.test(_visibleTreeMapRectKeys.contains(rect.key))) {
            rect.animateOut();
          }
        }
      }
      paint(canvas, animationPercent) {
        let t7;
        if (animationPercent === 1.0) {
          this[_animatedTreeMapRects][$removeWhere](dart.fn(rect => rect.animatingOut, _AnimatedTreeMapRectOfDTobool()));
        }
        for (let animatedRect of this[_animatedTreeMapRects]) {
          let element = animatedRect.getCurrentRect(animationPercent);
          let rect = element.boundingRect;
          canvas.drawRRect(rect, {fill: element.fillColor, fillPattern: element.fillPattern, patternStrokeWidthPx: this.config.patternStrokeWidthPx, patternColor: element.patternColor, stroke: element.strokeColor, strokeWidthPx: element.strokeWidthPx, radius: 0, roundTopLeft: false, roundTopRight: false, roundBottomLeft: false, roundBottomRight: false});
          t7 = this.labelDecorator;
          t7 == null ? null : t7.decorate(element, canvas, this.graphicsFactory, {drawBounds: this.drawBounds, animationPercent: animationPercent, rtl: this.isRtl, renderVertically: dart.test(element.isLeaf) && dart.notNull(rect[$width]) < dart.notNull(rect[$height])});
        }
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let t7;
        let nearest = JSArrayOfDatumDetailsOfD().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) return nearest;
        let root = this[_treeNodeToRendererElement][$entries][$first].key;
        let queue = (t7 = new (ListQueueOfTreeNode()).new(), t7.add(root), t7);
        while (dart.test(queue[$isNotEmpty])) {
          let node = queue.removeFirst();
          let element = this[_rendererElementForTreeNode](node);
          if (dart.test(element.boundingRect[$containsPoint](chartPoint))) {
            nearest[$add](new (DatumDetailsOfD()).new({index: element.index, series: element.series, datum: node, domain: element.domain, measure: element.measure, domainDistance: 0.0, measureDistance: 0.0}));
            queue.addAll(node.children);
          }
        }
        nearest[$sort](dart.fn((a, b) => core.int._check(dart.dsend(dart.dload(b.datum, 'depth'), 'compareTo', [dart.dload(a.datum, 'depth')])), DatumDetailsOfDAndDatumDetailsOfDToint()));
        return nearest;
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let bounds = this[_rendererElementForTreeNode](tree.TreeNode._check(seriesDatum.datum)).boundingRect;
        let chartPosition = new (PointOfdouble()).new((dart.test(this.isRtl) ? bounds[$left] : bounds[$right])[$toDouble](), (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2)[$toDouble]());
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
      assignMissingColors(seriesList, opts) {
        let t7, t7$;
        IterableOfMutableSeriesOfD()._check(seriesList);
        let emptyCategoryUsesSinglePalette = opts && 'emptyCategoryUsesSinglePalette' in opts ? opts.emptyCategoryUsesSinglePalette : null;
        for (let series of seriesList) {
          let colorPalettes = style_factory.StyleFactory.style.getOrderedPalettes(series.data[$length]);
          let count = colorPalettes[$length];
          if (series.fillColorFn == null) {
            series.fillColorFn = dart.fn(index => {
              let node = tree.TreeNode._check(series.data[$_get](index));
              return colorPalettes[$_get](node.depth[$modulo](count)).shadeDefault;
            }, intToColor());
          }
          t7 = series;
          t7.colorFn == null ? t7.colorFn = dart.fn(index => this.config.strokeColor, intToColor()) : null;
          t7$ = series;
          t7$.patternColorFn == null ? t7$.patternColorFn = dart.fn(index => this.config.strokeColor, intToColor()) : null;
        }
      }
      assignMissingStrokeWidths(seriesList) {
        IterableOfMutableSeriesOfD()._check(seriesList);
        for (let series of seriesList) {
          if (series.strokeWidthPxFn == null) {
            series.strokeWidthPxFn = dart.fn(_ => this.config.strokeWidthPx, intTodouble());
          }
        }
      }
      availableLayoutBoundingRect(node) {
        let element = this[_rendererElementForTreeNode](node);
        let rect = element.boundingRect;
        let padding = this.config.rectPaddingPx;
        let top = dart.notNull(rect[$top]) + dart.notNull(padding.topPx);
        let left = dart.notNull(rect[$left]) + dart.notNull(padding.leftPx);
        let width = dart.notNull(rect[$width]) - dart.notNull(padding.leftPx) - dart.notNull(padding.rightPx);
        let height = dart.notNull(rect[$height]) - dart.notNull(padding.topPx) - dart.notNull(padding.bottomPx);
        if (width < 0) {
          left = left + width / 2;
          width = 0;
        }
        if (height < 0) {
          top = top + height / 2;
          height = 0;
        }
        return new (MutableRectangleOfnum()).new(left, top, width, height);
      }
      scaleArea(children, scaleFactor) {
        for (let child of children) {
          let element = this[_rendererElementForTreeNode](child);
          let area = dart.notNull(element.measure) * dart.notNull(dart.notNull(scaleFactor) < 0 ? 0 : scaleFactor);
          element.area = area <= 0 ? 0 : area;
        }
      }
      measureForTreeNode(node) {
        return this[_rendererElementForTreeNode](node).measure;
      }
      areaForRectangle(rect) {
        return dart.notNull(rect[$height]) * dart.notNull(rect[$width]);
      }
      areaForTreeNode(node) {
        return this[_rendererElementForTreeNode](node).area;
      }
      position(nodes, boundingRect, side, layoutArea) {
        let t7, t7$, t7$0, t7$1;
        let top = boundingRect.top;
        let left = boundingRect.left;
        let length = dart.notNull(side) > 0 ? (dart.notNull(layoutArea) / dart.notNull(side))[$round]() : 0;
        if (side == boundingRect.height) {
          if (length > dart.notNull(boundingRect.width)) length = boundingRect.width[$toInt]();
          for (let node of nodes) {
            let element = this[_rendererElementForTreeNode](node);
            let height = math.min(core.num, dart.notNull(boundingRect.top) + dart.notNull(boundingRect.height) - dart.notNull(top), length > 0 ? (dart.notNull(element.area) / length)[$round]() : 0);
            element.boundingRect = new (RectangleOfnum()).new(left, top, length, height);
            top = dart.notNull(top) + height;
          }
          t7 = boundingRect;
          t7.left = dart.notNull(t7.left) + length;
          t7$ = boundingRect;
          t7$.width = dart.notNull(t7$.width) - length;
        } else {
          if (length > dart.notNull(boundingRect.height)) length = boundingRect.height[$toInt]();
          for (let node of nodes) {
            let element = this[_rendererElementForTreeNode](node);
            let width = math.min(core.num, dart.notNull(boundingRect.left) + dart.notNull(boundingRect.width) - dart.notNull(left), length > 0 ? (dart.notNull(element.area) / length)[$round]() : 0);
            element.boundingRect = new (RectangleOfnum()).new(left, top, width, length);
            left = dart.notNull(left) + width;
          }
          t7$0 = boundingRect;
          t7$0.top = dart.notNull(t7$0.top) + length;
          t7$1 = boundingRect;
          t7$1.height = dart.notNull(t7$1.height) - length;
        }
      }
      [_configureRootRendererElement](root) {
        let t7;
        t7 = this[_rendererElementForTreeNode](root);
        t7.boundingRect = this.drawBounds;
        t7.area = this.areaForRectangle(this.drawBounds);
        t7;
      }
      [_asAnimatedTreeMapRect](element) {
        let t7;
        let key = element.domain;
        let index = this[_animatedTreeMapRects][$indexWhere](dart.fn(rect => dart.equals(rect.key, key), _AnimatedTreeMapRectOfDTobool()));
        let rect = index === -1 ? new (_AnimatedTreeMapRectOfD()).new({key: key}) : this[_animatedTreeMapRects][$removeAt](index);
        this[_animatedTreeMapRects][$add](rect);
        t7 = rect;
        t7.setNewTarget(element);
        return t7;
      }
      [_asTreeMapRendererElement](series, index) {
        let t7;
        t7 = new (TreeMapRendererElementOfD()).new();
        t7.domain = series.domainFn(index);
        t7.measure = series.measureFn(index);
        t7.index = index;
        t7.series = series;
        return t7;
      }
      [_rendererElementForTreeNode](node) {
        let element = this[_treeNodeToRendererElement][$_get](node);
        if (!(element != null)) dart.assertFailed("There is no associated renderer element for " + dart.str(node) + ".", "org-dartlang-app:///packages/charts_common/src/chart/treemap/base_treemap_renderer.dart", 404, 9, "element != null");
        return element;
      }
      [_ensureSingleTree](seriesList) {
        if (!(dart.notNull(seriesList[$length]) <= 1)) dart.assertFailed("TreeMapRenderer only supports a single series at most.", "org-dartlang-app:///packages/charts_common/src/chart/treemap/base_treemap_renderer.dart", 409, 12, "seriesList.length <= 1");
      }
    }
    (BaseTreeMapRenderer.new = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[_treeNodeToRendererElement] = new (LinkedMapOfTreeNode$TreeMapRendererElementOfD()).new();
      this[_animatedTreeMapRects] = JSArrayOf_AnimatedTreeMapRectOfD().of([]);
      this[_chart$4] = null;
      this[config$4] = config;
      this[labelDecorator] = config.labelDecorator;
      BaseTreeMapRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder, symbolRenderer: config.symbolRenderer});
      ;
    }).prototype = BaseTreeMapRenderer.prototype;
    dart.addTypeTests(BaseTreeMapRenderer);
    BaseTreeMapRenderer.prototype[_is_BaseTreeMapRenderer_default] = true;
    dart.setMethodSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getMethods(BaseTreeMapRenderer.__proto__),
      update: dart.fnType(dart.void, [core.Object, core.bool]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      getNearestDatumDetailPerSeries: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [math.Point$(core.double), core.bool, math.Rectangle$(core.int)]),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object]),
      assignMissingStrokeWidths: dart.fnType(dart.void, [core.Object]),
      availableLayoutBoundingRect: dart.fnType(math.MutableRectangle$(core.num), [tree.TreeNode]),
      scaleArea: dart.fnType(dart.void, [core.Iterable$(tree.TreeNode), core.num]),
      measureForTreeNode: dart.fnType(core.num, [tree.TreeNode]),
      areaForRectangle: dart.fnType(core.num, [math.Rectangle$(core.num)]),
      areaForTreeNode: dart.fnType(core.num, [tree.TreeNode]),
      position: dart.fnType(dart.void, [core.Iterable$(tree.TreeNode), math.MutableRectangle$(core.num), core.num, core.num]),
      [_configureRootRendererElement]: dart.fnType(dart.void, [tree.TreeNode]),
      [_asAnimatedTreeMapRect]: dart.fnType(base_treemap_renderer._AnimatedTreeMapRect$(D), [treemap_renderer_element.TreeMapRendererElement$(D)]),
      [_asTreeMapRendererElement]: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [processed_series.MutableSeries$(D), core.int]),
      [_rendererElementForTreeNode]: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [tree.TreeNode]),
      [_ensureSingleTree]: dart.fnType(dart.void, [core.List$(processed_series.ImmutableSeries$(D))])
    }));
    dart.setGetterSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getGetters(BaseTreeMapRenderer.__proto__),
      isRtl: core.bool
    }));
    dart.setLibraryUri(BaseTreeMapRenderer, "package:charts_common/src/chart/treemap/base_treemap_renderer.dart");
    dart.setFieldSignature(BaseTreeMapRenderer, () => ({
      __proto__: dart.getFields(BaseTreeMapRenderer.__proto__),
      [_treeNodeToRendererElement]: dart.finalFieldType(collection.LinkedHashMap$(tree.TreeNode, treemap_renderer_element.TreeMapRendererElement$(D))),
      [_animatedTreeMapRects]: dart.finalFieldType(core.List$(base_treemap_renderer._AnimatedTreeMapRect$(D))),
      config: dart.finalFieldType(treemap_renderer_config.TreeMapRendererConfig$(D)),
      labelDecorator: dart.finalFieldType(treemap_label_decorator.TreeMapLabelDecorator),
      [_chart$4]: dart.fieldType(base_chart.BaseChart$(D))
    }));
    return BaseTreeMapRenderer;
  });
  base_treemap_renderer.BaseTreeMapRenderer = base_treemap_renderer.BaseTreeMapRenderer$();
  dart.defineLazy(base_treemap_renderer.BaseTreeMapRenderer, {
    /*base_treemap_renderer.BaseTreeMapRenderer.defaultRendererId*/get defaultRendererId() {
      return "treemap";
    }
  });
  dart.addTypeTests(base_treemap_renderer.BaseTreeMapRenderer, _is_BaseTreeMapRenderer_default);
  const _is_SquarifiedTreeMapRenderer_default = Symbol('_is_SquarifiedTreeMapRenderer_default');
  let C197;
  squarified_treemap_renderer.SquarifiedTreeMapRenderer$ = dart.generic(D => {
    let TreeMapRendererConfigOfD = () => (TreeMapRendererConfigOfD = dart.constFn(treemap_renderer_config.TreeMapRendererConfig$(D)))();
    class SquarifiedTreeMapRenderer extends base_treemap_renderer.BaseTreeMapRenderer$(D) {
      tile(node) {
        let children = node.children;
        if (dart.test(children[$isNotEmpty])) {
          let remainingNodes = ListQueueOfTreeNode().from(children);
          let rect = this.availableLayoutBoundingRect(node);
          let analyzer = new squarified_treemap_renderer._SquarifyRatioAnalyzer.new(this[_ratio$], dart.bind(this, 'areaForTreeNode'));
          let bestScore = 1 / 0;
          let width = math.min(core.num, rect.width, rect.height);
          this.scaleArea(children, dart.notNull(this.areaForRectangle(rect)) / dart.notNull(this.measureForTreeNode(node)));
          while (dart.test(remainingNodes[$isNotEmpty])) {
            let child = remainingNodes[$first];
            analyzer.addNode(child);
            let score = analyzer.worst(width);
            if (dart.notNull(score) <= dart.notNull(bestScore)) {
              remainingNodes.removeFirst();
              bestScore = score;
            } else {
              analyzer.removeLast();
              this.position(analyzer.nodes, rect, width, analyzer.layoutArea);
              width = math.min(core.num, rect.width, rect.height);
              analyzer.reset();
              bestScore = 1 / 0;
            }
          }
          if (dart.test(analyzer.nodes[$isNotEmpty])) {
            this.position(analyzer.nodes, rect, width, analyzer.layoutArea);
            analyzer.reset();
          }
        }
      }
    }
    (SquarifiedTreeMapRenderer.new = function(opts) {
      let t6, t6$;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[_ratio$] = 0.5 * (1 + math.sqrt(5));
      SquarifiedTreeMapRenderer.__proto__.new.call(this, {config: TreeMapRendererConfigOfD()._check((t6 = config, t6 == null ? new (TreeMapRendererConfigOfD()).new({tileType: treemap_renderer_config.TileType.squarified, rectPaddingPx: squarified_treemap_renderer.SquarifiedTreeMapRenderer._defaultRectPadding}) : t6)), rendererId: (t6$ = rendererId, t6$ == null ? "treemap" : t6$)});
      ;
    }).prototype = SquarifiedTreeMapRenderer.prototype;
    dart.addTypeTests(SquarifiedTreeMapRenderer);
    SquarifiedTreeMapRenderer.prototype[_is_SquarifiedTreeMapRenderer_default] = true;
    dart.setMethodSignature(SquarifiedTreeMapRenderer, () => ({
      __proto__: dart.getMethods(SquarifiedTreeMapRenderer.__proto__),
      tile: dart.fnType(dart.void, [tree.TreeNode])
    }));
    dart.setLibraryUri(SquarifiedTreeMapRenderer, "package:charts_common/src/chart/treemap/squarified_treemap_renderer.dart");
    dart.setFieldSignature(SquarifiedTreeMapRenderer, () => ({
      __proto__: dart.getFields(SquarifiedTreeMapRenderer.__proto__),
      [_ratio$]: dart.finalFieldType(core.double)
    }));
    return SquarifiedTreeMapRenderer;
  });
  squarified_treemap_renderer.SquarifiedTreeMapRenderer = squarified_treemap_renderer.SquarifiedTreeMapRenderer$();
  dart.defineLazy(squarified_treemap_renderer.SquarifiedTreeMapRenderer, {
    /*squarified_treemap_renderer.SquarifiedTreeMapRenderer._defaultRectPadding*/get _defaultRectPadding() {
      return C197 || CT.C197;
    }
  });
  dart.addTypeTests(squarified_treemap_renderer.SquarifiedTreeMapRenderer, _is_SquarifiedTreeMapRenderer_default);
  const _layoutArea = dart.privateName(squarified_treemap_renderer, "_layoutArea");
  const _areaFn$ = dart.privateName(squarified_treemap_renderer, "_areaFn");
  const _square = dart.privateName(squarified_treemap_renderer, "_square");
  squarified_treemap_renderer._SquarifyRatioAnalyzer = class _SquarifyRatioAnalyzer extends core.Object {
    addNode(node) {
      this.nodes[$add](node);
      this[_layoutArea] = dart.notNull(this[_layoutArea]) + dart.notNull(this[_areaFn$](node));
    }
    removeLast() {
      this[_layoutArea] = dart.notNull(this[_layoutArea]) - dart.notNull(this[_areaFn$](this.nodes[$removeLast]()));
    }
    get layoutArea() {
      return this[_layoutArea];
    }
    worst(width) {
      let rMin = 1 / 0;
      let rMax = 0.0;
      for (let node of this.nodes) {
        let area = this[_areaFn$](node);
        if (dart.notNull(area) <= 0) continue;
        if (dart.notNull(area) < dart.notNull(rMin)) rMin = area;
        if (dart.notNull(area) > dart.notNull(rMax)) rMax = area;
      }
      let sqWidth = this[_square](width);
      let sqArea = this[_square](this[_layoutArea]);
      return dart.notNull(sqArea) > 0 ? math.max(core.num, dart.notNull(sqWidth) * dart.notNull(rMax) * dart.notNull(this[_ratio$]) / dart.notNull(sqArea), dart.notNull(sqArea) / (dart.notNull(sqWidth) * dart.notNull(rMin) * dart.notNull(this[_ratio$]))) : 1 / 0;
    }
    reset() {
      this.nodes[$clear]();
      this[_layoutArea] = 0.0;
    }
    [_square](n) {
      return dart.notNull(n) * dart.notNull(n);
    }
  };
  (squarified_treemap_renderer._SquarifyRatioAnalyzer.new = function(_ratio, _areaFn) {
    this.nodes = JSArrayOfTreeNode().of([]);
    this[_layoutArea] = 0.0;
    this[_ratio$] = _ratio;
    this[_areaFn$] = _areaFn;
    ;
  }).prototype = squarified_treemap_renderer._SquarifyRatioAnalyzer.prototype;
  dart.addTypeTests(squarified_treemap_renderer._SquarifyRatioAnalyzer);
  dart.setMethodSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getMethods(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    addNode: dart.fnType(dart.void, [tree.TreeNode]),
    removeLast: dart.fnType(dart.void, []),
    worst: dart.fnType(core.num, [core.num]),
    reset: dart.fnType(dart.void, []),
    [_square]: dart.fnType(core.num, [core.num])
  }));
  dart.setGetterSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getGetters(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    layoutArea: core.num
  }));
  dart.setLibraryUri(squarified_treemap_renderer._SquarifyRatioAnalyzer, "package:charts_common/src/chart/treemap/squarified_treemap_renderer.dart");
  dart.setFieldSignature(squarified_treemap_renderer._SquarifyRatioAnalyzer, () => ({
    __proto__: dart.getFields(squarified_treemap_renderer._SquarifyRatioAnalyzer.__proto__),
    [_areaFn$]: dart.finalFieldType(dart.fnType(core.num, [tree.TreeNode])),
    [_ratio$]: dart.finalFieldType(core.num),
    nodes: dart.finalFieldType(core.List$(tree.TreeNode)),
    [_layoutArea]: dart.fieldType(core.double)
  }));
  const _name$14 = dart.privateName(treemap_renderer_config, "_name");
  let C198;
  const _is_TreeMapRendererConfig_default = Symbol('_is_TreeMapRendererConfig_default');
  const customRendererId$3 = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.customRendererId");
  const symbolRenderer$6 = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.symbolRenderer");
  const rendererAttributes$2 = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.rendererAttributes");
  const tileType$ = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.tileType");
  const layoutPaintOrder$3 = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.layoutPaintOrder");
  const rectPaddingPx$ = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.rectPaddingPx");
  const strokeWidthPx$9 = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.strokeWidthPx");
  const strokeColor$ = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.strokeColor");
  const patternStrokeWidthPx$ = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.patternStrokeWidthPx");
  const labelDecorator$ = dart.privateName(treemap_renderer_config, "TreeMapRendererConfig.labelDecorator");
  treemap_renderer_config.TreeMapRendererConfig$ = dart.generic(D => {
    let SquarifiedTreeMapRendererOfD = () => (SquarifiedTreeMapRendererOfD = dart.constFn(squarified_treemap_renderer.SquarifiedTreeMapRenderer$(D)))();
    class TreeMapRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$3];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$6];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes$2];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get tileType() {
        return this[tileType$];
      }
      set tileType(value) {
        super.tileType = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$3];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get rectPaddingPx() {
        return this[rectPaddingPx$];
      }
      set rectPaddingPx(value) {
        super.rectPaddingPx = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$9];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get strokeColor() {
        return this[strokeColor$];
      }
      set strokeColor(value) {
        super.strokeColor = value;
      }
      get patternStrokeWidthPx() {
        return this[patternStrokeWidthPx$];
      }
      set patternStrokeWidthPx(value) {
        super.patternStrokeWidthPx = value;
      }
      get labelDecorator() {
        return this[labelDecorator$];
      }
      set labelDecorator(value) {
        super.labelDecorator = value;
      }
      build() {
        return dart.equals(this.tileType, treemap_renderer_config.TileType.squarified) ? new (SquarifiedTreeMapRendererOfD()).new({config: this, rendererId: this.customRendererId}) : null;
      }
    }
    (TreeMapRendererConfig.new = function(opts) {
      let t7, t7$;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let patternStrokeWidthPx = opts && 'patternStrokeWidthPx' in opts ? opts.patternStrokeWidthPx : 1;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 1;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let rectPaddingPx = opts && 'rectPaddingPx' in opts ? opts.rectPaddingPx : C128 || CT.C128;
      let tileType = opts && 'tileType' in opts ? opts.tileType : C198 || CT.C198;
      let labelDecorator = opts && 'labelDecorator' in opts ? opts.labelDecorator : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[rendererAttributes$2] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$3] = customRendererId;
      this[patternStrokeWidthPx$] = patternStrokeWidthPx;
      this[strokeWidthPx$9] = strokeWidthPx;
      this[layoutPaintOrder$3] = layoutPaintOrder;
      this[rectPaddingPx$] = rectPaddingPx;
      this[tileType$] = tileType;
      this[labelDecorator$] = labelDecorator;
      this[strokeColor$] = (t7 = strokeColor, t7 == null ? style_factory.StyleFactory.style.black : t7);
      this[symbolRenderer$6] = (t7$ = symbolRenderer, t7$ == null ? new symbol_renderer.RectSymbolRenderer.new() : t7$);
      TreeMapRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = TreeMapRendererConfig.prototype;
    dart.addTypeTests(TreeMapRendererConfig);
    TreeMapRendererConfig.prototype[_is_TreeMapRendererConfig_default] = true;
    TreeMapRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(D)];
    dart.setMethodSignature(TreeMapRendererConfig, () => ({
      __proto__: dart.getMethods(TreeMapRendererConfig.__proto__),
      build: dart.fnType(base_treemap_renderer.BaseTreeMapRenderer$(D), [])
    }));
    dart.setLibraryUri(TreeMapRendererConfig, "package:charts_common/src/chart/treemap/treemap_renderer_config.dart");
    dart.setFieldSignature(TreeMapRendererConfig, () => ({
      __proto__: dart.getFields(TreeMapRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(core.String),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      rendererAttributes: dart.finalFieldType(series_renderer_config.RendererAttributes),
      tileType: dart.finalFieldType(treemap_renderer_config.TileType),
      layoutPaintOrder: dart.finalFieldType(core.int),
      rectPaddingPx: dart.finalFieldType(layout_view.ViewMargin),
      strokeWidthPx: dart.finalFieldType(core.double),
      strokeColor: dart.finalFieldType(color$.Color),
      patternStrokeWidthPx: dart.finalFieldType(core.double),
      labelDecorator: dart.finalFieldType(treemap_label_decorator.TreeMapLabelDecorator)
    }));
    return TreeMapRendererConfig;
  });
  treemap_renderer_config.TreeMapRendererConfig = treemap_renderer_config.TreeMapRendererConfig$();
  dart.addTypeTests(treemap_renderer_config.TreeMapRendererConfig, _is_TreeMapRendererConfig_default);
  let C199;
  treemap_renderer_config.TileType = class TileType extends core.Object {
    toString() {
      return this[_name$14];
    }
  };
  (treemap_renderer_config.TileType.new = function(index, _name) {
    this.index = index;
    this[_name$14] = _name;
    ;
  }).prototype = treemap_renderer_config.TileType.prototype;
  dart.addTypeTests(treemap_renderer_config.TileType);
  dart.setLibraryUri(treemap_renderer_config.TileType, "package:charts_common/src/chart/treemap/treemap_renderer_config.dart");
  dart.setFieldSignature(treemap_renderer_config.TileType, () => ({
    __proto__: dart.getFields(treemap_renderer_config.TileType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$14]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(treemap_renderer_config.TileType, ['toString']);
  treemap_renderer_config.TileType.squarified = C198 || CT.C198;
  treemap_renderer_config.TileType.values = C199 || CT.C199;
  const _asTextStyle = dart.privateName(treemap_label_decorator, "_asTextStyle");
  const _datumStyle = dart.privateName(treemap_label_decorator, "_datumStyle");
  const _drawLabel = dart.privateName(treemap_label_decorator, "_drawLabel");
  const _is_TreeMapRendererDecorator_default = Symbol('_is_TreeMapRendererDecorator_default');
  treemap_renderer_decorator.TreeMapRendererDecorator$ = dart.generic(D => {
    class TreeMapRendererDecorator extends core.Object {}
    (TreeMapRendererDecorator.new = function() {
      ;
    }).prototype = TreeMapRendererDecorator.prototype;
    dart.addTypeTests(TreeMapRendererDecorator);
    TreeMapRendererDecorator.prototype[_is_TreeMapRendererDecorator_default] = true;
    dart.setLibraryUri(TreeMapRendererDecorator, "package:charts_common/src/chart/treemap/treemap_renderer_decorator.dart");
    return TreeMapRendererDecorator;
  });
  treemap_renderer_decorator.TreeMapRendererDecorator = treemap_renderer_decorator.TreeMapRendererDecorator$();
  dart.addTypeTests(treemap_renderer_decorator.TreeMapRendererDecorator, _is_TreeMapRendererDecorator_default);
  const _is_TreeMapLabelDecorator_default = Symbol('_is_TreeMapLabelDecorator_default');
  const labelStyleSpec$ = dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.labelStyleSpec");
  const labelPadding$ = dart.privateName(treemap_label_decorator, "TreeMapLabelDecorator.labelPadding");
  treemap_label_decorator.TreeMapLabelDecorator$ = dart.generic(D => {
    let TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class TreeMapLabelDecorator extends treemap_renderer_decorator.TreeMapRendererDecorator$(D) {
      get labelStyleSpec() {
        return this[labelStyleSpec$];
      }
      set labelStyleSpec(value) {
        super.labelStyleSpec = value;
      }
      get labelPadding() {
        return this[labelPadding$];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      decorate(rendererElement, canvas, graphicsFactory, opts) {
        let t7;
        TreeMapRendererElementOfD()._check(rendererElement);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : false;
        if (animationPercent !== 1.0) return;
        let labelStyle = this[_asTextStyle](graphicsFactory, this.labelStyleSpec);
        let labelFn = rendererElement.series.labelAccessorFn;
        let datumIndex = rendererElement.index;
        let label = labelFn != null ? labelFn(datumIndex) : null;
        if (label == null || label[$isEmpty]) return;
        let datumLabelStyle = this[_datumStyle](rendererElement.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: labelStyle});
        let rect = rendererElement.boundingRect;
        let maxLabelHeight = dart.notNull(dart.test(renderVertically) ? rect[$width] : rect[$height]) - dart.notNull(this.labelPadding) * 2;
        let maxLabelWidth = dart.notNull(dart.test(renderVertically) ? rect[$height] : rect[$width]) - dart.notNull(this.labelPadding) * 2;
        let labelElement = (t7 = graphicsFactory.createTextElement(label), t7.textStyle = datumLabelStyle, t7.maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize, t7.maxWidth = maxLabelWidth[$toInt](), t7.textDirection = dart.test(rtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr, t7);
        if (dart.notNull(labelElement.measurement.verticalSliceWidth) > maxLabelHeight) return;
        if (dart.notNull(labelElement.maxWidth) > 0) {
          this[_drawLabel](canvas, rect, labelElement, {rtl: rtl, rotate: renderVertically});
        }
      }
      [_asTextStyle](graphicsFactory, labelSpec) {
        let t8, t8$, t8$0, t8$1, t8$2, t8$3, t7;
        t7 = graphicsFactory.createTextPaint();
        t7.color = (t8$ = (t8 = labelSpec, t8 == null ? null : t8.color), t8$ == null ? color$.Color.black : t8$);
        t7.fontFamily = (t8$0 = labelSpec, t8$0 == null ? null : t8$0.fontFamily);
        t7.fontSize = (t8$2 = (t8$1 = labelSpec, t8$1 == null ? null : t8$1.fontSize), t8$2 == null ? 12 : t8$2);
        t7.lineHeight = (t8$3 = labelSpec, t8$3 == null ? null : t8$3.lineHeight);
        return t7;
      }
      [_datumStyle](labelStyleFn, datumIndex, graphicsFactory, opts) {
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = labelStyleFn != null ? labelStyleFn(datumIndex) : null;
        return styleSpec != null ? this[_asTextStyle](graphicsFactory, styleSpec) : defaultStyle;
      }
      [_drawLabel](canvas, elementBoundingRect, labelElement, opts) {
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        let rotate = opts && 'rotate' in opts ? opts.rotate : false;
        let x = null;
        if (dart.test(rotate)) {
          x = dart.notNull(elementBoundingRect[$left]) + dart.notNull(this.labelPadding) - dart.notNull(labelElement.textStyle.fontSize);
        } else if (dart.test(rtl)) {
          x = dart.notNull(elementBoundingRect[$right]) - dart.notNull(this.labelPadding);
        } else {
          x = dart.notNull(elementBoundingRect[$left]) + dart.notNull(this.labelPadding);
        }
        let y = dart.test(rtl) && dart.test(rotate) ? dart.notNull(elementBoundingRect[$bottom]) - dart.notNull(this.labelPadding) : dart.notNull(elementBoundingRect[$top]) + dart.notNull(this.labelPadding);
        let rotationAngle = dart.test(rotate) ? 1.5707963267948966 : 0.0;
        canvas.drawText(labelElement, x[$toInt](), y[$toInt](), {rotation: rotationAngle});
      }
    }
    (TreeMapLabelDecorator.new = function(opts) {
      let t7;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 4;
      this[labelPadding$] = labelPadding;
      this[labelStyleSpec$] = (t7 = labelStyleSpec, t7 == null ? treemap_label_decorator.TreeMapLabelDecorator._defaultLabelStyle : t7);
      TreeMapLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = TreeMapLabelDecorator.prototype;
    dart.addTypeTests(TreeMapLabelDecorator);
    TreeMapLabelDecorator.prototype[_is_TreeMapLabelDecorator_default] = true;
    dart.setMethodSignature(TreeMapLabelDecorator, () => ({
      __proto__: dart.getMethods(TreeMapLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [core.Object, chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), renderVertically: core.bool, rtl: core.bool}, {}),
      [_asTextStyle]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec]),
      [_datumStyle]: dart.fnType(text_style.TextStyle, [dart.fnType(axis_spec.TextStyleSpec, [core.int]), core.int, graphics_factory.GraphicsFactory], {defaultStyle: text_style.TextStyle}, {}),
      [_drawLabel]: dart.fnType(dart.void, [chart_canvas.ChartCanvas, math.Rectangle$(core.num), text_element.TextElement], {rotate: core.bool, rtl: core.bool}, {})
    }));
    dart.setLibraryUri(TreeMapLabelDecorator, "package:charts_common/src/chart/treemap/treemap_label_decorator.dart");
    dart.setFieldSignature(TreeMapLabelDecorator, () => ({
      __proto__: dart.getFields(TreeMapLabelDecorator.__proto__),
      labelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      labelPadding: dart.finalFieldType(core.int)
    }));
    return TreeMapLabelDecorator;
  });
  treemap_label_decorator.TreeMapLabelDecorator = treemap_label_decorator.TreeMapLabelDecorator$();
  dart.defineLazy(treemap_label_decorator.TreeMapLabelDecorator, {
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 4;
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultFontSize*/get _defaultFontSize() {
      return 12;
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._defaultLabelStyle*/get _defaultLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*treemap_label_decorator.TreeMapLabelDecorator._90DegreeClockwise*/get _90DegreeClockwise() {
      return 1.5707963267948966;
    }
  });
  dart.addTypeTests(treemap_label_decorator.TreeMapLabelDecorator, _is_TreeMapLabelDecorator_default);
  const _previousRect = dart.privateName(base_treemap_renderer, "_previousRect");
  const _targetRect = dart.privateName(base_treemap_renderer, "_targetRect");
  const _currentRect = dart.privateName(base_treemap_renderer, "_currentRect");
  const _is__AnimatedTreeMapRect_default = Symbol('_is__AnimatedTreeMapRect_default');
  base_treemap_renderer._AnimatedTreeMapRect$ = dart.generic(D => {
    let TreeMapRendererElementOfD = () => (TreeMapRendererElementOfD = dart.constFn(treemap_renderer_element.TreeMapRendererElement$(D)))();
    class _AnimatedTreeMapRect extends core.Object {
      animateOut() {
        let newTarget = this[_currentRect].clone();
        let rect = newTarget.boundingRect;
        newTarget.boundingRect = new (RectangleOfnum()).new(dart.notNull(rect[$left]) + dart.notNull(rect[$width]) / 2, dart.notNull(rect[$top]) + dart.notNull(rect[$height]) / 2, 0, 0);
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        TreeMapRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentRect] == null ? this[_currentRect] = newTarget.clone() : null;
        this[_previousRect] = this[_currentRect].clone();
        this[_targetRect] = newTarget;
      }
      getCurrentRect(animationPercent) {
        if (animationPercent === 1.0 || this[_previousRect] == null) {
          this[_currentRect] = this[_targetRect];
          this[_previousRect] = this[_targetRect];
          return this[_currentRect];
        }
        this[_currentRect].updateAnimationPercent(this[_previousRect], this[_targetRect], animationPercent);
        return this[_currentRect];
      }
    }
    (_AnimatedTreeMapRect.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[_previousRect] = null;
      this[_targetRect] = null;
      this[_currentRect] = null;
      this.animatingOut = false;
      this.key = key;
      ;
    }).prototype = _AnimatedTreeMapRect.prototype;
    dart.addTypeTests(_AnimatedTreeMapRect);
    _AnimatedTreeMapRect.prototype[_is__AnimatedTreeMapRect_default] = true;
    dart.setMethodSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getMethods(_AnimatedTreeMapRect.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentRect: dart.fnType(treemap_renderer_element.TreeMapRendererElement$(D), [core.double])
    }));
    dart.setLibraryUri(_AnimatedTreeMapRect, "package:charts_common/src/chart/treemap/base_treemap_renderer.dart");
    dart.setFieldSignature(_AnimatedTreeMapRect, () => ({
      __proto__: dart.getFields(_AnimatedTreeMapRect.__proto__),
      key: dart.finalFieldType(D),
      [_previousRect]: dart.fieldType(treemap_renderer_element.TreeMapRendererElement$(D)),
      [_targetRect]: dart.fieldType(treemap_renderer_element.TreeMapRendererElement$(D)),
      [_currentRect]: dart.fieldType(treemap_renderer_element.TreeMapRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedTreeMapRect;
  });
  base_treemap_renderer._AnimatedTreeMapRect = base_treemap_renderer._AnimatedTreeMapRect$();
  dart.addTypeTests(base_treemap_renderer._AnimatedTreeMapRect, _is__AnimatedTreeMapRect_default);
  let C200;
  dart.defineLazy(base_treemap_renderer, {
    /*base_treemap_renderer.treeMapElementsKey*/get treeMapElementsKey() {
      return C200 || CT.C200;
    }
  });
  const _is_Tree_default = Symbol('_is_Tree_default');
  const id$1 = dart.privateName(tree, "Tree.id");
  const root$ = dart.privateName(tree, "Tree.root");
  const domainFn$0 = dart.privateName(tree, "Tree.domainFn");
  const measureFn$0 = dart.privateName(tree, "Tree.measureFn");
  const colorFn$0 = dart.privateName(tree, "Tree.colorFn");
  const fillColorFn$0 = dart.privateName(tree, "Tree.fillColorFn");
  const patternColorFn$0 = dart.privateName(tree, "Tree.patternColorFn");
  const fillPatternFn$0 = dart.privateName(tree, "Tree.fillPatternFn");
  const strokeWidthPxFn$0 = dart.privateName(tree, "Tree.strokeWidthPxFn");
  const labelFn$ = dart.privateName(tree, "Tree.labelFn");
  const labelStyleFn$ = dart.privateName(tree, "Tree.labelStyleFn");
  const attributes$ = dart.privateName(tree, "Tree.attributes");
  tree.Tree$ = dart.generic((T, D) => {
    let TreeNodeOfT = () => (TreeNodeOfT = dart.constFn(tree.TreeNode$(T)))();
    let JSArrayOfTreeNodeOfT = () => (JSArrayOfTreeNodeOfT = dart.constFn(_interceptors.JSArray$(TreeNodeOfT())))();
    let SeriesOfTreeNodeOfT$D = () => (SeriesOfTreeNodeOfT$D = dart.constFn(series$.Series$(TreeNodeOfT(), D)))();
    class Tree extends core.Object {
      get id() {
        return this[id$1];
      }
      set id(value) {
        super.id = value;
      }
      get root() {
        return this[root$];
      }
      set root(value) {
        super.root = value;
      }
      get domainFn() {
        return this[domainFn$0];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get measureFn() {
        return this[measureFn$0];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get colorFn() {
        return this[colorFn$0];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get fillColorFn() {
        return this[fillColorFn$0];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[patternColorFn$0];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn$0];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn$0];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelFn() {
        return this[labelFn$];
      }
      set labelFn(value) {
        super.labelFn = value;
      }
      get labelStyleFn() {
        return this[labelStyleFn$];
      }
      set labelStyleFn(value) {
        super.labelStyleFn = value;
      }
      get attributes() {
        return this[attributes$];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let root = opts && 'root' in opts ? opts.root : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let labelFn = opts && 'labelFn' in opts ? opts.labelFn : null;
        let labelStyleFn = opts && 'labelStyleFn' in opts ? opts.labelStyleFn : null;
        return new (tree.Tree$(T, D)).__({id: core.String._check(id), root: root, domainFn: tree._castFrom(T, D, domainFn), measureFn: tree._castFrom(T, core.num, measureFn), colorFn: tree._castFrom(T, color$.Color, colorFn), fillColorFn: tree._castFrom(T, color$.Color, fillColorFn), fillPatternFn: tree._castFrom(T, chart_canvas.FillPatternType, fillPatternFn), patternColorFn: tree._castFrom(T, color$.Color, patternColorFn), strokeWidthPxFn: tree._castFrom(T, core.num, strokeWidthPxFn), labelFn: tree._castFrom(T, core.String, labelFn), labelStyleFn: tree._castFrom(T, axis_spec.TextStyleSpec, labelStyleFn)});
      }
      toSeries() {
        let t7;
        let data = JSArrayOfTreeNodeOfT().of([]);
        this.root.visit(dart.bind(data, $add));
        t7 = SeriesOfTreeNodeOfT$D().new({id: this.id, data: data, domainFn: this.domainFn, measureFn: this.measureFn, colorFn: this.colorFn, fillColorFn: this.fillColorFn, fillPatternFn: this.fillPatternFn, patternColorFn: this.patternColorFn, strokeWidthPxFn: this.strokeWidthPxFn, labelAccessorFn: this.labelFn, insideLabelStyleAccessorFn: this.labelStyleFn});
        t7.attributes.mergeFrom(this.attributes);
        return t7;
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(R, key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(R, key);
      }
    }
    (Tree.__ = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let root = opts && 'root' in opts ? opts.root : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      let labelFn = opts && 'labelFn' in opts ? opts.labelFn : null;
      let labelStyleFn = opts && 'labelStyleFn' in opts ? opts.labelStyleFn : null;
      this[attributes$] = new tree.TreeAttributes.new();
      this[id$1] = id;
      this[root$] = root;
      this[domainFn$0] = domainFn;
      this[measureFn$0] = measureFn;
      this[colorFn$0] = colorFn;
      this[fillColorFn$0] = fillColorFn;
      this[fillPatternFn$0] = fillPatternFn;
      this[patternColorFn$0] = patternColorFn;
      this[strokeWidthPxFn$0] = strokeWidthPxFn;
      this[labelFn$] = labelFn;
      this[labelStyleFn$] = labelStyleFn;
      ;
    }).prototype = Tree.prototype;
    dart.addTypeTests(Tree);
    Tree.prototype[_is_Tree_default] = true;
    dart.setMethodSignature(Tree, () => ({
      __proto__: dart.getMethods(Tree.__proto__),
      toSeries: dart.fnType(series$.Series$(tree.TreeNode$(T), D), []),
      setAttribute: dart.gFnType(R => [dart.void, [series$.AttributeKey$(R), R]]),
      getAttribute: dart.gFnType(R => [R, [series$.AttributeKey$(R)]])
    }));
    dart.setLibraryUri(Tree, "package:charts_common/src/data/tree.dart");
    dart.setFieldSignature(Tree, () => ({
      __proto__: dart.getFields(Tree.__proto__),
      id: dart.finalFieldType(core.String),
      root: dart.finalFieldType(tree.TreeNode$(T)),
      domainFn: dart.finalFieldType(dart.fnType(D, [tree.TreeNode$(T), core.int])),
      measureFn: dart.finalFieldType(dart.fnType(core.num, [tree.TreeNode$(T), core.int])),
      colorFn: dart.finalFieldType(dart.fnType(color$.Color, [tree.TreeNode$(T), core.int])),
      fillColorFn: dart.finalFieldType(dart.fnType(color$.Color, [tree.TreeNode$(T), core.int])),
      patternColorFn: dart.finalFieldType(dart.fnType(color$.Color, [tree.TreeNode$(T), core.int])),
      fillPatternFn: dart.finalFieldType(dart.fnType(chart_canvas.FillPatternType, [tree.TreeNode$(T), core.int])),
      strokeWidthPxFn: dart.finalFieldType(dart.fnType(core.num, [tree.TreeNode$(T), core.int])),
      labelFn: dart.finalFieldType(dart.fnType(core.String, [tree.TreeNode$(T), core.int])),
      labelStyleFn: dart.finalFieldType(dart.fnType(axis_spec.TextStyleSpec, [tree.TreeNode$(T), core.int])),
      attributes: dart.finalFieldType(tree.TreeAttributes)
    }));
    return Tree;
  });
  tree.Tree = tree.Tree$();
  dart.addTypeTests(tree.Tree, _is_Tree_default);
  const _children = dart.privateName(tree, "_children");
  const _depth = dart.privateName(tree, "_depth");
  const _is_TreeNode_default = Symbol('_is_TreeNode_default');
  const data$0 = dart.privateName(tree, "TreeNode.data");
  tree.TreeNode$ = dart.generic(T => {
    let TreeNodeOfT = () => (TreeNodeOfT = dart.constFn(tree.TreeNode$(T)))();
    let JSArrayOfTreeNodeOfT = () => (JSArrayOfTreeNodeOfT = dart.constFn(_interceptors.JSArray$(TreeNodeOfT())))();
    let TreeNodeOfTToint = () => (TreeNodeOfTToint = dart.constFn(dart.fnType(core.int, [TreeNodeOfT()])))();
    let IterableOfTreeNodeOfT = () => (IterableOfTreeNodeOfT = dart.constFn(core.Iterable$(TreeNodeOfT())))();
    let ListQueueOfTreeNodeOfT = () => (ListQueueOfTreeNodeOfT = dart.constFn(collection.ListQueue$(TreeNodeOfT())))();
    class TreeNode extends core.Object {
      get data() {
        return this[data$0];
      }
      set data(value) {
        super.data = value;
      }
      get depth() {
        return this[_depth];
      }
      set depth(val) {
        this[_depth] = val;
      }
      get children() {
        return this[_children];
      }
      get hasChildren() {
        return this[_children][$isNotEmpty];
      }
      addChild(child) {
        TreeNodeOfT()._check(child);
        let delta = dart.notNull(this.depth) - dart.notNull(child.depth) + 1;
        if (delta !== 0) child.visit(dart.fn(node => {
          let t7;
          t7 = node;
          return t7.depth = dart.notNull(t7.depth) + delta;
        }, TreeNodeOfTToint()));
        this[_children][$add](child);
      }
      addChildren(newChildren) {
        IterableOfTreeNodeOfT()._check(newChildren);
        newChildren[$forEach](dart.bind(this, 'addChild'));
      }
      visit(f) {
        let t7;
        let queue = (t7 = new (ListQueueOfTreeNodeOfT()).new(), t7.add(this), t7);
        while (dart.test(queue[$isNotEmpty])) {
          let node = queue.removeFirst();
          f(node);
          queue.addAll(node.children);
        }
      }
    }
    (TreeNode.new = function(data) {
      this[_children] = JSArrayOfTreeNodeOfT().of([]);
      this[_depth] = 0;
      this[data$0] = data;
      ;
    }).prototype = TreeNode.prototype;
    dart.addTypeTests(TreeNode);
    TreeNode.prototype[_is_TreeNode_default] = true;
    dart.setMethodSignature(TreeNode, () => ({
      __proto__: dart.getMethods(TreeNode.__proto__),
      addChild: dart.fnType(dart.void, [core.Object]),
      addChildren: dart.fnType(dart.void, [core.Object]),
      visit: dart.fnType(dart.void, [dart.fnType(dart.void, [tree.TreeNode$(T)])])
    }));
    dart.setGetterSignature(TreeNode, () => ({
      __proto__: dart.getGetters(TreeNode.__proto__),
      depth: core.int,
      children: core.Iterable$(tree.TreeNode$(T)),
      hasChildren: core.bool
    }));
    dart.setSetterSignature(TreeNode, () => ({
      __proto__: dart.getSetters(TreeNode.__proto__),
      depth: core.int
    }));
    dart.setLibraryUri(TreeNode, "package:charts_common/src/data/tree.dart");
    dart.setFieldSignature(TreeNode, () => ({
      __proto__: dart.getFields(TreeNode.__proto__),
      data: dart.finalFieldType(T),
      [_children]: dart.finalFieldType(core.List$(tree.TreeNode$(T))),
      [_depth]: dart.fieldType(core.int)
    }));
    return TreeNode;
  });
  tree.TreeNode = tree.TreeNode$();
  dart.addTypeTests(tree.TreeNode, _is_TreeNode_default);
  tree.TreeAttributes = class TreeAttributes extends typed_registry.TypedRegistry {};
  (tree.TreeAttributes.new = function() {
    tree.TreeAttributes.__proto__.new.call(this);
    ;
  }).prototype = tree.TreeAttributes.prototype;
  dart.addTypeTests(tree.TreeAttributes);
  dart.setLibraryUri(tree.TreeAttributes, "package:charts_common/src/data/tree.dart");
  tree._castFrom = function _castFrom(T, R, f) {
    return f == null ? null : dart.fn((node, index) => f(node.data, index), dart.fnType(R, [tree.TreeNode$(T), core.int]));
  };
  const _threshold = dart.privateName(bucketing_numeric_tick_provider, "_threshold");
  const _showBucket = dart.privateName(bucketing_numeric_tick_provider, "_showBucket");
  bucketing_numeric_tick_provider.BucketingNumericTickProvider = class BucketingNumericTickProvider extends numeric_tick_provider.NumericTickProvider {
    set threshold(threshold) {
      this[_threshold] = threshold;
    }
    set showBucket(showBucket) {
      this[_showBucket] = showBucket;
    }
    getTicks(opts) {
      let t7;
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      numeric_scale.NumericScale._check(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      TickFormatterOfnum()._check(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      MapOfnum$String()._check(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      TickHintOfnum()._check(tickHint);
      if (this[_threshold] == null) {
        dart.throw("Bucketing threshold must be set before getting ticks.");
      }
      if (this[_showBucket] == null) {
        dart.throw("The showBucket flag must be set before getting ticks.");
      }
      let localFormatter = (t7 = new bucketing_numeric_tick_provider._BucketingFormatter.new(), t7.threshold = this[_threshold], t7.originalFormatter = SimpleTickFormatterBaseOfnum()._check(formatter), t7);
      let ticks = super.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: localFormatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation, viewportExtensionEnabled: viewportExtensionEnabled});
      if (!(scale != null)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart", 100, 12, "scale != null");
      let thresholdTick = new (TickOfnum()).new({value: this[_threshold], textElement: graphicsFactory.createTextElement(localFormatter.formatValue(this[_threshold])), locationPx: dart.test(this[_showBucket]) ? scale._get(this[_threshold]) : scale._get(0), labelOffsetPx: dart.test(this[_showBucket]) ? -0.5 * (dart.notNull(scale._get(this[_threshold])) - dart.notNull(scale._get(0))) : 0.0});
      tickDrawStrategy.decorateTicks(JSArrayOfTickOfnum().of([thresholdTick]));
      ticks[$removeWhere](dart.fn(tick => dart.notNull(tick.value) <= dart.notNull(thresholdTick.value) && tick.value !== 0.0, TickOfnumTobool()));
      ticks[$add](thresholdTick);
      ticks[$sort](dart.fn((a, b) => {
        if (dart.notNull(a.value) < dart.notNull(b.value)) {
          return -1;
        } else if (dart.notNull(a.value) > dart.notNull(b.value)) {
          return 1;
        } else {
          return 0;
        }
      }, TickOfnumAndTickOfnumToint()));
      return ticks;
    }
  };
  (bucketing_numeric_tick_provider.BucketingNumericTickProvider.new = function() {
    this[_threshold] = null;
    this[_showBucket] = null;
    bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = bucketing_numeric_tick_provider.BucketingNumericTickProvider.prototype;
  dart.addTypeTests(bucketing_numeric_tick_provider.BucketingNumericTickProvider);
  dart.setSetterSignature(bucketing_numeric_tick_provider.BucketingNumericTickProvider, () => ({
    __proto__: dart.getSetters(bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__),
    threshold: core.num,
    showBucket: core.bool
  }));
  dart.setLibraryUri(bucketing_numeric_tick_provider.BucketingNumericTickProvider, "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart");
  dart.setFieldSignature(bucketing_numeric_tick_provider.BucketingNumericTickProvider, () => ({
    __proto__: dart.getFields(bucketing_numeric_tick_provider.BucketingNumericTickProvider.__proto__),
    [_threshold]: dart.fieldType(core.num),
    [_showBucket]: dart.fieldType(core.bool)
  }));
  bucketing_numeric_tick_provider._BucketingFormatter = class _BucketingFormatter extends tick_formatter.SimpleTickFormatterBase$(core.num) {
    formatValue(value) {
      core.num._check(value);
      if (dart.notNull(value) < dart.notNull(this.threshold)) {
        return "";
      } else if (value == this.threshold) {
        return "< " + dart.notNull(this.originalFormatter.formatValue(value));
      } else {
        return this.originalFormatter.formatValue(value);
      }
    }
  };
  (bucketing_numeric_tick_provider._BucketingFormatter.new = function() {
    this.threshold = null;
    this.originalFormatter = null;
    bucketing_numeric_tick_provider._BucketingFormatter.__proto__.new.call(this);
    ;
  }).prototype = bucketing_numeric_tick_provider._BucketingFormatter.prototype;
  dart.addTypeTests(bucketing_numeric_tick_provider._BucketingFormatter);
  dart.setMethodSignature(bucketing_numeric_tick_provider._BucketingFormatter, () => ({
    __proto__: dart.getMethods(bucketing_numeric_tick_provider._BucketingFormatter.__proto__),
    formatValue: dart.fnType(core.String, [core.Object])
  }));
  dart.setLibraryUri(bucketing_numeric_tick_provider._BucketingFormatter, "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart");
  dart.setFieldSignature(bucketing_numeric_tick_provider._BucketingFormatter, () => ({
    __proto__: dart.getFields(bucketing_numeric_tick_provider._BucketingFormatter.__proto__),
    threshold: dart.fieldType(core.num),
    originalFormatter: dart.fieldType(tick_formatter.SimpleTickFormatterBase$(core.num))
  }));
  const _name$15 = dart.privateName(a11y_explore_behavior, "_name");
  let C201;
  let C202;
  let C203;
  a11y_explore_behavior.ExploreModeTrigger = class ExploreModeTrigger extends core.Object {
    toString() {
      return this[_name$15];
    }
  };
  (a11y_explore_behavior.ExploreModeTrigger.new = function(index, _name) {
    this.index = index;
    this[_name$15] = _name;
    ;
  }).prototype = a11y_explore_behavior.ExploreModeTrigger.prototype;
  dart.addTypeTests(a11y_explore_behavior.ExploreModeTrigger);
  dart.setLibraryUri(a11y_explore_behavior.ExploreModeTrigger, "package:charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart");
  dart.setFieldSignature(a11y_explore_behavior.ExploreModeTrigger, () => ({
    __proto__: dart.getFields(a11y_explore_behavior.ExploreModeTrigger.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$15]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(a11y_explore_behavior.ExploreModeTrigger, ['toString']);
  a11y_explore_behavior.ExploreModeTrigger.pressHold = C201 || CT.C201;
  a11y_explore_behavior.ExploreModeTrigger.tap = C202 || CT.C202;
  a11y_explore_behavior.ExploreModeTrigger.values = C203 || CT.C203;
  const _chart$5 = dart.privateName(a11y_explore_behavior, "_chart");
  const _listener$ = dart.privateName(a11y_explore_behavior, "_listener");
  const _exploreModeOn = dart.privateName(a11y_explore_behavior, "_exploreModeOn");
  const _toggleExploreMode = dart.privateName(a11y_explore_behavior, "_toggleExploreMode");
  const _is_A11yExploreBehavior_default = Symbol('_is_A11yExploreBehavior_default');
  const exploreModeTrigger$ = dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeTrigger");
  const minimumWidth$ = dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.minimumWidth");
  const exploreModeEnabledAnnouncement$ = dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeEnabledAnnouncement");
  const exploreModeDisabledAnnouncement$ = dart.privateName(a11y_explore_behavior, "A11yExploreBehavior.exploreModeDisabledAnnouncement");
  a11y_explore_behavior.A11yExploreBehavior$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class A11yExploreBehavior extends core.Object {
      get exploreModeTrigger() {
        return this[exploreModeTrigger$];
      }
      set exploreModeTrigger(value) {
        super.exploreModeTrigger = value;
      }
      get minimumWidth() {
        return this[minimumWidth$];
      }
      set minimumWidth(value) {
        super.minimumWidth = value;
      }
      get exploreModeEnabledAnnouncement() {
        return this[exploreModeEnabledAnnouncement$];
      }
      set exploreModeEnabledAnnouncement(value) {
        super.exploreModeEnabledAnnouncement = value;
      }
      get exploreModeDisabledAnnouncement() {
        return this[exploreModeDisabledAnnouncement$];
      }
      set exploreModeDisabledAnnouncement(value) {
        super.exploreModeDisabledAnnouncement = value;
      }
      [_toggleExploreMode](_) {
        if (dart.test(this[_exploreModeOn])) {
          this[_exploreModeOn] = false;
          this[_chart$5].context.disableA11yExploreMode({announcement: this.exploreModeDisabledAnnouncement});
        } else {
          this[_exploreModeOn] = true;
          this[_chart$5].context.enableA11yExploreMode(this.createA11yNodes(), {announcement: this.exploreModeEnabledAnnouncement});
        }
        return true;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$5] = chart;
        chart.addGestureListener(this[_listener$]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeGestureListener(this[_listener$]);
      }
    }
    (A11yExploreBehavior.new = function(opts) {
      let t7;
      let exploreModeTrigger = opts && 'exploreModeTrigger' in opts ? opts.exploreModeTrigger : C201 || CT.C201;
      let minimumWidth = opts && 'minimumWidth' in opts ? opts.minimumWidth : null;
      let exploreModeEnabledAnnouncement = opts && 'exploreModeEnabledAnnouncement' in opts ? opts.exploreModeEnabledAnnouncement : null;
      let exploreModeDisabledAnnouncement = opts && 'exploreModeDisabledAnnouncement' in opts ? opts.exploreModeDisabledAnnouncement : null;
      this[_chart$5] = null;
      this[_listener$] = null;
      this[_exploreModeOn] = false;
      this[exploreModeTrigger$] = exploreModeTrigger;
      this[exploreModeEnabledAnnouncement$] = exploreModeEnabledAnnouncement;
      this[exploreModeDisabledAnnouncement$] = exploreModeDisabledAnnouncement;
      this[minimumWidth$] = (t7 = minimumWidth, t7 == null ? 1.0 : t7);
      if (!(dart.notNull(this.minimumWidth) >= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart", 56, 12, "this.minimumWidth >= 1.0");
      switch (this.exploreModeTrigger) {
        case C201 || CT.C201:
        {
          this[_listener$] = new gesture_listener.GestureListener.new({onLongPress: dart.bind(this, _toggleExploreMode)});
          break;
        }
        case C202 || CT.C202:
        {
          this[_listener$] = new gesture_listener.GestureListener.new({onTap: dart.bind(this, _toggleExploreMode)});
          break;
        }
      }
    }).prototype = A11yExploreBehavior.prototype;
    dart.addTypeTests(A11yExploreBehavior);
    A11yExploreBehavior.prototype[_is_A11yExploreBehavior_default] = true;
    A11yExploreBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getMethods(A11yExploreBehavior.__proto__),
      [_toggleExploreMode]: dart.fnType(core.bool, [dart.dynamic]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setLibraryUri(A11yExploreBehavior, "package:charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart");
    dart.setFieldSignature(A11yExploreBehavior, () => ({
      __proto__: dart.getFields(A11yExploreBehavior.__proto__),
      exploreModeTrigger: dart.finalFieldType(a11y_explore_behavior.ExploreModeTrigger),
      minimumWidth: dart.finalFieldType(core.double),
      exploreModeEnabledAnnouncement: dart.finalFieldType(core.String),
      exploreModeDisabledAnnouncement: dart.finalFieldType(core.String),
      [_chart$5]: dart.fieldType(base_chart.BaseChart$(D)),
      [_listener$]: dart.fieldType(gesture_listener.GestureListener),
      [_exploreModeOn]: dart.fieldType(core.bool)
    }));
    return A11yExploreBehavior;
  });
  a11y_explore_behavior.A11yExploreBehavior = a11y_explore_behavior.A11yExploreBehavior$();
  dart.addTypeTests(a11y_explore_behavior.A11yExploreBehavior, _is_A11yExploreBehavior_default);
  const _chart$6 = dart.privateName(line_point_highlighter, "_chart");
  const _view = dart.privateName(line_point_highlighter, "_view");
  const _lifecycleListener$0 = dart.privateName(line_point_highlighter, "_lifecycleListener");
  const _seriesPointMap = dart.privateName(line_point_highlighter, "_seriesPointMap");
  const _currentKeys$2 = dart.privateName(line_point_highlighter, "_currentKeys");
  const _updateViewData = dart.privateName(line_point_highlighter, "_updateViewData");
  const _selectionChanged$ = dart.privateName(line_point_highlighter, "_selectionChanged");
  const _is_LinePointHighlighter_default = Symbol('_is_LinePointHighlighter_default');
  const selectionModelType$1 = dart.privateName(line_point_highlighter, "LinePointHighlighter.selectionModelType");
  const defaultRadiusPx$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.defaultRadiusPx");
  const radiusPaddingPx$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.radiusPaddingPx");
  const showHorizontalFollowLine$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.showHorizontalFollowLine");
  const showVerticalFollowLine$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.showVerticalFollowLine");
  const dashPattern$4 = dart.privateName(line_point_highlighter, "LinePointHighlighter.dashPattern");
  const drawFollowLinesAcrossChart$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.drawFollowLinesAcrossChart");
  const symbolRenderer$7 = dart.privateName(line_point_highlighter, "LinePointHighlighter.symbolRenderer");
  line_point_highlighter.LinePointHighlighter$ = dart.generic(D => {
    let _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    let IdentityMapOfString$_AnimatedPointOfD = () => (IdentityMapOfString$_AnimatedPointOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _AnimatedPointOfD())))();
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let _LinePointLayoutViewOfD = () => (_LinePointLayoutViewOfD = dart.constFn(line_point_highlighter._LinePointLayoutView$(D)))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    let _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    let StringAnd_AnimatedPointOfDToNull = () => (StringAnd_AnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedPointOfD()])))();
    let LinkedHashMapOfString$_AnimatedPointOfD = () => (LinkedHashMapOfString$_AnimatedPointOfD = dart.constFn(collection.LinkedHashMap$(core.String, _AnimatedPointOfD())))();
    class LinePointHighlighter extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$1];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get defaultRadiusPx() {
        return this[defaultRadiusPx$];
      }
      set defaultRadiusPx(value) {
        super.defaultRadiusPx = value;
      }
      get radiusPaddingPx() {
        return this[radiusPaddingPx$];
      }
      set radiusPaddingPx(value) {
        super.radiusPaddingPx = value;
      }
      get showHorizontalFollowLine() {
        return this[showHorizontalFollowLine$];
      }
      set showHorizontalFollowLine(value) {
        super.showHorizontalFollowLine = value;
      }
      get showVerticalFollowLine() {
        return this[showVerticalFollowLine$];
      }
      set showVerticalFollowLine(value) {
        super.showVerticalFollowLine = value;
      }
      get dashPattern() {
        return this[dashPattern$4];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get drawFollowLinesAcrossChart() {
        return this[drawFollowLinesAcrossChart$];
      }
      set drawFollowLinesAcrossChart(value) {
        super.drawFollowLinesAcrossChart = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$7];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$6] = chart;
        this[_view] = new (_LinePointLayoutViewOfD()).new({chart: chart, layoutPaintOrder: 110, showHorizontalFollowLine: this.showHorizontalFollowLine, showVerticalFollowLine: this.showVerticalFollowLine, dashPattern: this.dashPattern, drawFollowLinesAcrossChart: this.drawFollowLinesAcrossChart, symbolRenderer: this.symbolRenderer});
        if (cartesian_chart.CartesianChart.is(chart)) {
          if (!dart.test(cartesian_chart.CartesianChart.as(chart).vertical)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/line_point_highlighter.dart", 156, 14, "(chart as CartesianChart).vertical");
        }
        chart.addView(this[_view]);
        chart.addLifecycleListener(this[_lifecycleListener$0]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, _selectionChanged$));
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.removeView(this[_view]);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, _selectionChanged$));
        chart.removeLifecycleListener(this[_lifecycleListener$0]);
      }
      [_selectionChanged$](selectionModel) {
        this[_chart$6].redraw({skipLayout: true, skipAnimation: true});
      }
      [_updateViewData]() {
        let t8, t7, t7$;
        this[_currentKeys$2][$clear]();
        let selectedDatumDetails = this[_chart$6].getSelectedDatumDetails(this.selectionModelType);
        let newSeriesMap = new (IdentityMapOfString$_AnimatedPointOfD()).new();
        for (let detail of selectedDatumDetails) {
          if (detail == null) {
            continue;
          }
          let series = detail.series;
          let datum = detail.datum;
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
          let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
          let lineKey = series.id;
          let radiusPx = detail.radiusPx != null ? detail.radiusPx[$toDouble]() + dart.notNull(this.radiusPaddingPx) : this.defaultRadiusPx;
          let pointKey = dart.str(lineKey) + "::" + dart.str(detail.domain);
          let animatingPoint = null;
          if (dart.test(this[_seriesPointMap][$containsKey](pointKey))) {
            animatingPoint = this[_seriesPointMap][$_get](pointKey);
          } else {
            let point = new (_DatumPointOfD()).new({datum: datum, domain: detail.domain, series: series, x: domainAxis.getLocation(detail.domain), y: measureAxis.getLocation(0.0)});
            animatingPoint = (t7 = new (_AnimatedPointOfD()).new({key: pointKey, overlaySeries: series.overlaySeries}), t7.setNewTarget((t8 = new (_PointRendererElementOfD()).new(), t8.point = point, t8.color = detail.color, t8.fillColor = detail.fillColor, t8.radiusPx = radiusPx, t8.measureAxisPosition = measureAxis.getLocation(0.0), t8.strokeWidthPx = detail.strokeWidthPx, t8.symbolRenderer = detail.symbolRenderer, t8)), t7);
          }
          newSeriesMap[$_set](pointKey, animatingPoint);
          let point = new (_DatumPointOfD()).new({datum: datum, domain: detail.domain, series: series, x: detail.chartPosition.x, y: detail.chartPosition.y});
          this[_currentKeys$2][$add](pointKey);
          let pointElement = (t7$ = new (_PointRendererElementOfD()).new(), t7$.point = point, t7$.color = detail.color, t7$.fillColor = detail.fillColor, t7$.radiusPx = radiusPx, t7$.measureAxisPosition = measureAxis.getLocation(0.0), t7$.strokeWidthPx = detail.strokeWidthPx, t7$.symbolRenderer = detail.symbolRenderer, t7$);
          animatingPoint.setNewTarget(pointElement);
        }
        this[_seriesPointMap][$forEach](dart.fn((key, point) => {
          if (!dart.equals(this[_currentKeys$2][$contains](point.key), true)) {
            point.animateOut();
            newSeriesMap[$_set](point.key, point);
          }
        }, StringAnd_AnimatedPointOfDToNull()));
        this[_seriesPointMap] = LinkedHashMapOfString$_AnimatedPointOfD()._check(newSeriesMap);
        this[_view].seriesPointMap = this[_seriesPointMap];
      }
      get role() {
        return "LinePointHighlighter-" + dart.str(dart.toString(this.selectionModelType));
      }
    }
    (LinePointHighlighter.new = function(opts) {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3, t7$4, t7$5;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let defaultRadiusPx = opts && 'defaultRadiusPx' in opts ? opts.defaultRadiusPx : null;
      let radiusPaddingPx = opts && 'radiusPaddingPx' in opts ? opts.radiusPaddingPx : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_chart$6] = null;
      this[_view] = null;
      this[_lifecycleListener$0] = null;
      this[_seriesPointMap] = new (IdentityMapOfString$_AnimatedPointOfD()).new();
      this[_currentKeys$2] = JSArrayOfString().of([]);
      this[selectionModelType$1] = (t7 = selectionModelType, t7 == null ? selection_model.SelectionModelType.info : t7);
      this[defaultRadiusPx$] = (t7$ = defaultRadiusPx, t7$ == null ? 4.0 : t7$);
      this[radiusPaddingPx$] = (t7$0 = radiusPaddingPx, t7$0 == null ? 2.0 : t7$0);
      this[showHorizontalFollowLine$] = (t7$1 = showHorizontalFollowLine, t7$1 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.none : t7$1);
      this[showVerticalFollowLine$] = (t7$2 = showVerticalFollowLine, t7$2 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.nearest : t7$2);
      this[dashPattern$4] = (t7$3 = dashPattern, t7$3 == null ? JSArrayOfint().of([1, 3]) : t7$3);
      this[drawFollowLinesAcrossChart$] = (t7$4 = drawFollowLinesAcrossChart, t7$4 == null ? true : t7$4);
      this[symbolRenderer$7] = (t7$5 = symbolRenderer, t7$5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t7$5);
      this[_lifecycleListener$0] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, _updateViewData)});
    }).prototype = LinePointHighlighter.prototype;
    dart.addTypeTests(LinePointHighlighter);
    LinePointHighlighter.prototype[_is_LinePointHighlighter_default] = true;
    LinePointHighlighter[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(LinePointHighlighter, () => ({
      __proto__: dart.getMethods(LinePointHighlighter.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      [_selectionChanged$]: dart.fnType(dart.void, [selection_model.SelectionModel]),
      [_updateViewData]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(LinePointHighlighter, () => ({
      __proto__: dart.getGetters(LinePointHighlighter.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(LinePointHighlighter, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(LinePointHighlighter, () => ({
      __proto__: dart.getFields(LinePointHighlighter.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      defaultRadiusPx: dart.finalFieldType(core.double),
      radiusPaddingPx: dart.finalFieldType(core.double),
      showHorizontalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      showVerticalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      drawFollowLinesAcrossChart: dart.finalFieldType(core.bool),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      [_chart$6]: dart.fieldType(base_chart.BaseChart$(D)),
      [_view]: dart.fieldType(line_point_highlighter._LinePointLayoutView),
      [_lifecycleListener$0]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_seriesPointMap]: dart.fieldType(collection.LinkedHashMap$(core.String, line_point_highlighter._AnimatedPoint$(D))),
      [_currentKeys$2]: dart.finalFieldType(core.List$(core.String))
    }));
    return LinePointHighlighter;
  });
  line_point_highlighter.LinePointHighlighter = line_point_highlighter.LinePointHighlighter$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighter, _is_LinePointHighlighter_default);
  const _drawAreaBounds$2 = dart.privateName(line_point_highlighter, "_drawAreaBounds");
  const _graphicsFactory$1 = dart.privateName(line_point_highlighter, "_graphicsFactory");
  const _is__LinePointLayoutView_default = Symbol('_is__LinePointLayoutView_default');
  const layoutConfig$ = dart.privateName(line_point_highlighter, "_LinePointLayoutView.layoutConfig");
  line_point_highlighter._LinePointLayoutView$ = dart.generic(D => {
    let _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    let LinkedHashMapOfString$_AnimatedPointOfD = () => (LinkedHashMapOfString$_AnimatedPointOfD = dart.constFn(collection.LinkedHashMap$(core.String, _AnimatedPointOfD())))();
    let StringAnd_AnimatedPointOfDToNull = () => (StringAnd_AnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedPointOfD()])))();
    let StringTo_AnimatedPointOfD = () => (StringTo_AnimatedPointOfD = dart.constFn(dart.fnType(_AnimatedPointOfD(), [core.String])))();
    let _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    let JSArrayOf_PointRendererElementOfD = () => (JSArrayOf_PointRendererElementOfD = dart.constFn(_interceptors.JSArray$(_PointRendererElementOfD())))();
    class _LinePointLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[layoutConfig$];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get drawBounds() {
        return this[_drawAreaBounds$2];
      }
      set seriesPointMap(value) {
        LinkedHashMapOfString$_AnimatedPointOfD()._check(value);
        this[_seriesPointMap] = value;
      }
      get graphicsFactory() {
        return this[_graphicsFactory$1];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$1] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds$2] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let t7;
        if (this[_seriesPointMap] == null) {
          return;
        }
        if (animationPercent === 1.0) {
          let keysToRemove = JSArrayOfString().of([]);
          this[_seriesPointMap][$forEach](dart.fn((key, point) => {
            if (dart.test(point.animatingOut)) {
              keysToRemove[$add](key);
            }
          }, StringAnd_AnimatedPointOfDToNull()));
          keysToRemove[$forEach](dart.fn(key => this[_seriesPointMap][$remove](key), StringTo_AnimatedPointOfD()));
        }
        let points = JSArrayOf_PointRendererElementOfD().of([]);
        this[_seriesPointMap][$forEach](dart.fn((key, point) => {
          points[$add](point.getCurrentPoint(animationPercent));
        }, StringAnd_AnimatedPointOfDToNull()));
        let endPointPerValueVertical = new (IdentityMapOfint$int()).new();
        let endPointPerValueHorizontal = new (IdentityMapOfint$int()).new();
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let roundedX = pointElement.point.x[$round]();
          let roundedY = pointElement.point.y[$round]();
          if (endPointPerValueVertical[$_get](roundedX) == null) {
            endPointPerValueVertical[$_set](roundedX, roundedY);
          } else {
            if (!dart.equals(this.showVerticalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest)) {
              endPointPerValueVertical[$_set](roundedX, math.min(core.int, endPointPerValueVertical[$_get](roundedX), roundedY));
            }
          }
          if (endPointPerValueHorizontal[$_get](roundedY) == null) {
            endPointPerValueHorizontal[$_set](roundedY, roundedX);
          } else {
            if (!dart.equals(this.showHorizontalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest)) {
              endPointPerValueHorizontal[$_set](roundedY, math.max(core.int, endPointPerValueHorizontal[$_get](roundedY), roundedX));
            }
          }
        }
        let shouldShowHorizontalFollowLine = dart.equals(this.showHorizontalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.all) || dart.equals(this.showHorizontalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest);
        let shouldShowVerticalFollowLine = dart.equals(this.showVerticalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.all) || dart.equals(this.showVerticalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest);
        let paintedHorizontalLinePositions = JSArrayOfnum().of([]);
        let paintedVerticalLinePositions = JSArrayOfnum().of([]);
        let drawBounds = this.chart.drawableLayoutAreaBounds;
        let rtl = this.chart.context.isRtl;
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let roundedX = pointElement.point.x[$round]();
          let roundedY = pointElement.point.y[$round]();
          if (shouldShowHorizontalFollowLine && !dart.test(paintedHorizontalLinePositions[$contains](roundedY))) {
            let leftBound = null;
            let rightBound = null;
            if (dart.test(this.drawFollowLinesAcrossChart)) {
              leftBound = drawBounds[$left];
              rightBound = dart.notNull(drawBounds[$left]) + dart.notNull(drawBounds[$width]);
            } else {
              let x = endPointPerValueHorizontal[$_get](roundedY);
              leftBound = dart.test(rtl) ? x : drawBounds[$left];
              rightBound = dart.test(rtl) ? dart.notNull(drawBounds[$left]) + dart.notNull(drawBounds[$width]) : x;
            }
            canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(leftBound, pointElement.point.y), new (PointOfnum()).new(rightBound, pointElement.point.y)]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (dart.equals(this.showHorizontalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest)) {
              shouldShowHorizontalFollowLine = false;
            }
            paintedHorizontalLinePositions[$add](roundedY);
          }
          if (shouldShowVerticalFollowLine && !dart.test(paintedVerticalLinePositions[$contains](roundedX))) {
            let topBound = dart.test(this.drawFollowLinesAcrossChart) ? drawBounds[$top] : endPointPerValueVertical[$_get](roundedX);
            canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(pointElement.point.x, topBound), new (PointOfnum()).new(pointElement.point.x, dart.notNull(drawBounds[$top]) + dart.notNull(drawBounds[$height]))]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (dart.equals(this.showVerticalFollowLine, line_point_highlighter.LinePointHighlighterFollowLineType.nearest)) {
              shouldShowVerticalFollowLine = false;
            }
            paintedVerticalLinePositions[$add](roundedX);
          }
          if (!shouldShowHorizontalFollowLine && !shouldShowVerticalFollowLine) {
            break;
          }
        }
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let bounds = new (RectangleOfdouble()).new(dart.notNull(pointElement.point.x) - dart.notNull(pointElement.radiusPx), dart.notNull(pointElement.point.y) - dart.notNull(pointElement.radiusPx), dart.notNull(pointElement.radiusPx) * 2, dart.notNull(pointElement.radiusPx) * 2);
          (t7 = pointElement.symbolRenderer, t7 == null ? this.symbolRenderer : t7).paint(canvas, bounds, {fillColor: pointElement.fillColor, strokeColor: pointElement.color, strokeWidthPx: pointElement.strokeWidthPx});
        }
      }
      get componentBounds() {
        return this[_drawAreaBounds$2];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_LinePointLayoutView.new = function(opts) {
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      this[_drawAreaBounds$2] = null;
      this[_graphicsFactory$1] = null;
      this[_seriesPointMap] = null;
      this.chart = chart;
      this.showHorizontalFollowLine = showHorizontalFollowLine;
      this.showVerticalFollowLine = showVerticalFollowLine;
      this.symbolRenderer = symbolRenderer;
      this.dashPattern = dashPattern;
      this.drawFollowLinesAcrossChart = drawFollowLinesAcrossChart;
      this[layoutConfig$] = new layout_view.LayoutViewConfig.new({paintOrder: 110, position: layout_view.LayoutPosition.DrawArea, positionOrder: layoutPaintOrder});
      ;
    }).prototype = _LinePointLayoutView.prototype;
    dart.addTypeTests(_LinePointLayoutView);
    _LinePointLayoutView.prototype[_is__LinePointLayoutView_default] = true;
    dart.setMethodSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getMethods(_LinePointLayoutView.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getGetters(_LinePointLayoutView.__proto__),
      drawBounds: math.Rectangle$(core.int),
      graphicsFactory: graphics_factory.GraphicsFactory,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getSetters(_LinePointLayoutView.__proto__),
      seriesPointMap: core.Object,
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(_LinePointLayoutView, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getFields(_LinePointLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      showHorizontalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      showVerticalFollowLine: dart.finalFieldType(line_point_highlighter.LinePointHighlighterFollowLineType),
      chart: dart.finalFieldType(base_chart.BaseChart$(D)),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      [_drawAreaBounds$2]: dart.fieldType(math.Rectangle$(core.int)),
      drawFollowLinesAcrossChart: dart.finalFieldType(core.bool),
      symbolRenderer: dart.finalFieldType(symbol_renderer.SymbolRenderer),
      [_graphicsFactory$1]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_seriesPointMap]: dart.fieldType(collection.LinkedHashMap$(core.String, line_point_highlighter._AnimatedPoint$(D)))
    }));
    return _LinePointLayoutView;
  });
  line_point_highlighter._LinePointLayoutView = line_point_highlighter._LinePointLayoutView$();
  dart.addTypeTests(line_point_highlighter._LinePointLayoutView, _is__LinePointLayoutView_default);
  const _is__DatumPoint_default$ = Symbol('_is__DatumPoint_default');
  line_point_highlighter._DatumPoint$ = dart.generic(D => {
    class _DatumPoint extends math.Point$(core.double) {
      static from(other, x, y) {
        let t7, t7$;
        if (x === void 0) x = null;
        if (y === void 0) y = null;
        return new (line_point_highlighter._DatumPoint$(D)).new({datum: other.datum, domain: other.domain, series: other.series, x: (t7 = x, t7 == null ? other.x : t7), y: (t7$ = y, t7$ == null ? other.y : t7$)});
      }
    }
    (_DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      this.datum = datum;
      this.domain = domain;
      this.series = series;
      _DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = _DatumPoint.prototype;
    dart.addTypeTests(_DatumPoint);
    _DatumPoint.prototype[_is__DatumPoint_default$] = true;
    dart.setLibraryUri(_DatumPoint, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(_DatumPoint, () => ({
      __proto__: dart.getFields(_DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      domain: dart.finalFieldType(D),
      series: dart.finalFieldType(processed_series.ImmutableSeries$(D))
    }));
    return _DatumPoint;
  });
  line_point_highlighter._DatumPoint = line_point_highlighter._DatumPoint$();
  dart.addTypeTests(line_point_highlighter._DatumPoint, _is__DatumPoint_default$);
  const _lerpDouble$ = dart.privateName(line_point_highlighter, "_lerpDouble");
  const _is__PointRendererElement_default = Symbol('_is__PointRendererElement_default');
  const point$ = dart.privateName(line_point_highlighter, "_PointRendererElement.point");
  line_point_highlighter._PointRendererElement$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    let _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    class _PointRendererElement extends core.Object {
      get point() {
        return this[point$];
      }
      set point(value) {
        this[point$] = _DatumPointOfD()._check(value);
      }
      clone() {
        let t7;
        t7 = new (_PointRendererElementOfD()).new();
        t7.point = this.point;
        t7.color = this.color;
        t7.fillColor = this.fillColor;
        t7.measureAxisPosition = this.measureAxisPosition;
        t7.radiusPx = this.radiusPx;
        t7.strokeWidthPx = this.strokeWidthPx;
        t7.symbolRenderer = this.symbolRenderer;
        return t7;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let targetPoint = target.point;
        let previousPoint = previous.point;
        let x = this[_lerpDouble$](previousPoint.x, targetPoint.x, animationPercent);
        let y = this[_lerpDouble$](previousPoint.y, targetPoint.y, animationPercent);
        this.point = _DatumPointOfD().from(_DatumPointOfD()._check(targetPoint), x, y);
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        this.fillColor = chart_canvas.getAnimatedColor(previous.fillColor, target.fillColor, animationPercent);
        this.radiusPx = this[_lerpDouble$](previous.radiusPx, target.radiusPx, animationPercent);
        if (target.strokeWidthPx != null && previous.strokeWidthPx != null) {
          this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
        } else {
          this.strokeWidthPx = null;
        }
      }
      [_lerpDouble$](a, b, t) {
        if (a == null || b == null) return null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
      }
    }
    (_PointRendererElement.new = function() {
      this[point$] = null;
      this.color = null;
      this.fillColor = null;
      this.radiusPx = null;
      this.measureAxisPosition = null;
      this.strokeWidthPx = null;
      this.symbolRenderer = null;
      ;
    }).prototype = _PointRendererElement.prototype;
    dart.addTypeTests(_PointRendererElement);
    _PointRendererElement.prototype[_is__PointRendererElement_default] = true;
    dart.setMethodSignature(_PointRendererElement, () => ({
      __proto__: dart.getMethods(_PointRendererElement.__proto__),
      clone: dart.fnType(line_point_highlighter._PointRendererElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [line_point_highlighter._PointRendererElement, line_point_highlighter._PointRendererElement, core.double]),
      [_lerpDouble$]: dart.fnType(core.double, [core.double, core.double, core.double])
    }));
    dart.setLibraryUri(_PointRendererElement, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(_PointRendererElement, () => ({
      __proto__: dart.getFields(_PointRendererElement.__proto__),
      point: dart.fieldType(line_point_highlighter._DatumPoint$(D)),
      color: dart.fieldType(color$.Color),
      fillColor: dart.fieldType(color$.Color),
      radiusPx: dart.fieldType(core.double),
      measureAxisPosition: dart.fieldType(core.double),
      strokeWidthPx: dart.fieldType(core.double),
      symbolRenderer: dart.fieldType(symbol_renderer.SymbolRenderer)
    }));
    return _PointRendererElement;
  });
  line_point_highlighter._PointRendererElement = line_point_highlighter._PointRendererElement$();
  dart.addTypeTests(line_point_highlighter._PointRendererElement, _is__PointRendererElement_default);
  const _previousPoint$ = dart.privateName(line_point_highlighter, "_previousPoint");
  const _targetPoint$ = dart.privateName(line_point_highlighter, "_targetPoint");
  const _currentPoint$ = dart.privateName(line_point_highlighter, "_currentPoint");
  const _is__AnimatedPoint_default = Symbol('_is__AnimatedPoint_default');
  line_point_highlighter._AnimatedPoint$ = dart.generic(D => {
    let _DatumPointOfD = () => (_DatumPointOfD = dart.constFn(line_point_highlighter._DatumPoint$(D)))();
    let _PointRendererElementOfD = () => (_PointRendererElementOfD = dart.constFn(line_point_highlighter._PointRendererElement$(D)))();
    class _AnimatedPoint extends core.Object {
      animateOut() {
        let newTarget = this[_currentPoint$].clone();
        let targetPoint = newTarget.point;
        let newPoint = _DatumPointOfD().from(targetPoint, targetPoint.x, newTarget.measureAxisPosition[$roundToDouble]());
        newTarget.point = newPoint;
        newTarget.radiusPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _PointRendererElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentPoint$] == null ? this[_currentPoint$] = newTarget.clone() : null;
        this[_previousPoint$] = this[_currentPoint$].clone();
        this[_targetPoint$] = newTarget;
      }
      getCurrentPoint(animationPercent) {
        if (animationPercent === 1.0 || this[_previousPoint$] == null) {
          this[_currentPoint$] = this[_targetPoint$];
          this[_previousPoint$] = this[_targetPoint$];
          return this[_currentPoint$];
        }
        this[_currentPoint$].updateAnimationPercent(this[_previousPoint$], this[_targetPoint$], animationPercent);
        return this[_currentPoint$];
      }
    }
    (_AnimatedPoint.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[_previousPoint$] = null;
      this[_targetPoint$] = null;
      this[_currentPoint$] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedPoint.prototype;
    dart.addTypeTests(_AnimatedPoint);
    _AnimatedPoint.prototype[_is__AnimatedPoint_default] = true;
    dart.setMethodSignature(_AnimatedPoint, () => ({
      __proto__: dart.getMethods(_AnimatedPoint.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentPoint: dart.fnType(line_point_highlighter._PointRendererElement$(D), [core.double])
    }));
    dart.setLibraryUri(_AnimatedPoint, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(_AnimatedPoint, () => ({
      __proto__: dart.getFields(_AnimatedPoint.__proto__),
      key: dart.finalFieldType(core.String),
      overlaySeries: dart.finalFieldType(core.bool),
      [_previousPoint$]: dart.fieldType(line_point_highlighter._PointRendererElement$(D)),
      [_targetPoint$]: dart.fieldType(line_point_highlighter._PointRendererElement$(D)),
      [_currentPoint$]: dart.fieldType(line_point_highlighter._PointRendererElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedPoint;
  });
  line_point_highlighter._AnimatedPoint = line_point_highlighter._AnimatedPoint$();
  dart.addTypeTests(line_point_highlighter._AnimatedPoint, _is__AnimatedPoint_default);
  const _name$16 = dart.privateName(line_point_highlighter, "_name");
  let C204;
  let C205;
  let C206;
  let C207;
  line_point_highlighter.LinePointHighlighterFollowLineType = class LinePointHighlighterFollowLineType extends core.Object {
    toString() {
      return this[_name$16];
    }
  };
  (line_point_highlighter.LinePointHighlighterFollowLineType.new = function(index, _name) {
    this.index = index;
    this[_name$16] = _name;
    ;
  }).prototype = line_point_highlighter.LinePointHighlighterFollowLineType.prototype;
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterFollowLineType);
  dart.setLibraryUri(line_point_highlighter.LinePointHighlighterFollowLineType, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
  dart.setFieldSignature(line_point_highlighter.LinePointHighlighterFollowLineType, () => ({
    __proto__: dart.getFields(line_point_highlighter.LinePointHighlighterFollowLineType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$16]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(line_point_highlighter.LinePointHighlighterFollowLineType, ['toString']);
  line_point_highlighter.LinePointHighlighterFollowLineType.nearest = C204 || CT.C204;
  line_point_highlighter.LinePointHighlighterFollowLineType.none = C205 || CT.C205;
  line_point_highlighter.LinePointHighlighterFollowLineType.all = C206 || CT.C206;
  line_point_highlighter.LinePointHighlighterFollowLineType.values = C207 || CT.C207;
  const _is_LinePointHighlighterTester_default = Symbol('_is_LinePointHighlighterTester_default');
  const behavior$ = dart.privateName(line_point_highlighter, "LinePointHighlighterTester.behavior");
  line_point_highlighter.LinePointHighlighterTester$ = dart.generic(D => {
    let _AnimatedPointOfD = () => (_AnimatedPointOfD = dart.constFn(line_point_highlighter._AnimatedPoint$(D)))();
    let StringAnd_AnimatedPointOfDToNull = () => (StringAnd_AnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedPointOfD()])))();
    class LinePointHighlighterTester extends core.Object {
      get behavior() {
        return this[behavior$];
      }
      set behavior(value) {
        super.behavior = value;
      }
      getSelectionLength() {
        return this.behavior[_seriesPointMap][$length];
      }
      isDatumSelected(datum) {
        D._check(datum);
        let contains = false;
        this.behavior[_seriesPointMap][$forEach](dart.fn((key, point) => {
          if (dart.equals(point[_currentPoint$].point.datum, datum)) {
            contains = true;
            return;
          }
        }, StringAnd_AnimatedPointOfDToNull()));
        return contains;
      }
    }
    (LinePointHighlighterTester.new = function(behavior) {
      this[behavior$] = behavior;
      ;
    }).prototype = LinePointHighlighterTester.prototype;
    dart.addTypeTests(LinePointHighlighterTester);
    LinePointHighlighterTester.prototype[_is_LinePointHighlighterTester_default] = true;
    dart.setMethodSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getMethods(LinePointHighlighterTester.__proto__),
      getSelectionLength: dart.fnType(core.int, []),
      isDatumSelected: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(LinePointHighlighterTester, "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart");
    dart.setFieldSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getFields(LinePointHighlighterTester.__proto__),
      behavior: dart.finalFieldType(line_point_highlighter.LinePointHighlighter$(D))
    }));
    return LinePointHighlighterTester;
  });
  line_point_highlighter.LinePointHighlighterTester = line_point_highlighter.LinePointHighlighterTester$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterTester, _is_LinePointHighlighterTester_default);
  const _listener$0 = dart.privateName(select_nearest, "_listener");
  const _chart$7 = dart.privateName(select_nearest, "_chart");
  const _delaySelect = dart.privateName(select_nearest, "_delaySelect");
  const _onTapTest$ = dart.privateName(select_nearest, "_onTapTest");
  const _onSelect$ = dart.privateName(select_nearest, "_onSelect");
  const _onDeselectAll = dart.privateName(select_nearest, "_onDeselectAll");
  const _onLongPressSelect = dart.privateName(select_nearest, "_onLongPressSelect");
  const _expandToDomain = dart.privateName(select_nearest, "_expandToDomain");
  const _is_SelectNearest_default = Symbol('_is_SelectNearest_default');
  const selectionModelType$2 = dart.privateName(select_nearest, "SelectNearest.selectionModelType");
  const eventTrigger$ = dart.privateName(select_nearest, "SelectNearest.eventTrigger");
  const expandToDomain$ = dart.privateName(select_nearest, "SelectNearest.expandToDomain");
  const selectAcrossAllSeriesRendererComponents$ = dart.privateName(select_nearest, "SelectNearest.selectAcrossAllSeriesRendererComponents");
  const selectClosestSeries$ = dart.privateName(select_nearest, "SelectNearest.selectClosestSeries");
  const maximumDomainDistancePx$ = dart.privateName(select_nearest, "SelectNearest.maximumDomainDistancePx");
  select_nearest.SelectNearest$ = dart.generic(D => {
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let DatumDetailsOfDAndDatumDetailsOfDToint = () => (DatumDetailsOfDAndDatumDetailsOfDToint = dart.constFn(dart.fnType(core.int, [DatumDetailsOfD(), DatumDetailsOfD()])))();
    let SeriesDatumOfDTobool = () => (SeriesDatumOfDTobool = dart.constFn(dart.fnType(core.bool, [SeriesDatumOfD()])))();
    let ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    let SeriesDatumOfDAndSeriesDatumOfDToint = () => (SeriesDatumOfDAndSeriesDatumOfDToint = dart.constFn(dart.fnType(core.int, [SeriesDatumOfD(), SeriesDatumOfD()])))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class SelectNearest extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$2];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get eventTrigger() {
        return this[eventTrigger$];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get expandToDomain() {
        return this[expandToDomain$];
      }
      set expandToDomain(value) {
        super.expandToDomain = value;
      }
      get selectAcrossAllSeriesRendererComponents() {
        return this[selectAcrossAllSeriesRendererComponents$];
      }
      set selectAcrossAllSeriesRendererComponents(value) {
        super.selectAcrossAllSeriesRendererComponents = value;
      }
      get selectClosestSeries() {
        return this[selectClosestSeries$];
      }
      set selectClosestSeries(value) {
        super.selectClosestSeries = value;
      }
      get maximumDomainDistancePx() {
        return this[maximumDomainDistancePx$];
      }
      set maximumDomainDistancePx(value) {
        super.maximumDomainDistancePx = value;
      }
      [_onTapTest$](chartPoint) {
        this[_delaySelect] = dart.equals(this.eventTrigger, selection_trigger.SelectionTrigger.longPressHold);
        return this[_chart$7].pointWithinRenderer(chartPoint);
      }
      [_onLongPressSelect](chartPoint) {
        this[_delaySelect] = false;
        return this[_onSelect$](chartPoint);
      }
      [_onSelect$](chartPoint, ignored) {
        if (ignored === void 0) ignored = null;
        if (dart.test(this[_delaySelect])) {
          return false;
        }
        let details = this[_chart$7].getNearestDatumDetailPerSeries(chartPoint, this.selectAcrossAllSeriesRendererComponents);
        let seriesList = JSArrayOfImmutableSeriesOfD().of([]);
        let seriesDatumList = JSArrayOfSeriesDatumOfD().of([]);
        if (details != null && dart.test(details[$isNotEmpty])) {
          details[$sort](dart.fn((a, b) => a.domainDistance[$compareTo](b.domainDistance), DatumDetailsOfDAndDatumDetailsOfDToint()));
          if (this.maximumDomainDistancePx == null || dart.notNull(details[$_get](0).domainDistance) <= dart.notNull(this.maximumDomainDistancePx)) {
            seriesDatumList = dart.test(this.expandToDomain) ? this[_expandToDomain](details[$first]) : JSArrayOfSeriesDatumOfD().of([new (SeriesDatumOfD()).new(details[$first].series, details[$first].datum)]);
            seriesDatumList[$removeWhere](dart.fn(datum => datum.series.overlaySeries, SeriesDatumOfDTobool()));
            if (dart.test(this.selectClosestSeries) && dart.test(seriesList[$isEmpty])) {
              if (dart.test(details[$first].series.overlaySeries)) {
                let sortedSeriesDatumList = ListOfSeriesDatumOfD().from(seriesDatumList);
                sortedSeriesDatumList[$sort](dart.fn((a, b) => core.int._check(dart.dsend(dart.dload(a.datum, 'domainDistance'), 'compareTo', [dart.dload(b.datum, 'domainDistance')])), SeriesDatumOfDAndSeriesDatumOfDToint()));
                seriesList[$add](sortedSeriesDatumList[$first].series);
              } else {
                seriesList[$add](details[$first].series);
              }
            }
          }
        }
        return this[_chart$7].getSelectionModel(this.selectionModelType).updateSelection(seriesDatumList, seriesList);
      }
      [_onDeselectAll](_, __, ___) {
        if (dart.test(this[_delaySelect])) {
          return false;
        }
        this[_chart$7].getSelectionModel(this.selectionModelType).updateSelection(JSArrayOfSeriesDatumOfD().of([]), JSArrayOfImmutableSeriesOfD().of([]));
        return false;
      }
      [_expandToDomain](nearestDetails) {
        let data = JSArrayOfSeriesDatumOfD().of([new (SeriesDatumOfD()).new(nearestDetails.series, nearestDetails.datum)]);
        let nearestDomain = nearestDetails.domain;
        for (let series of this[_chart$7].currentSeriesList) {
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          let testBounds = domainLowerBoundFn != null && domainUpperBoundFn != null;
          for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
            let datum = series.data[$_get](i);
            let domain = domainFn(i);
            if (dart.equals(nearestDetails.series, series) && dart.equals(nearestDetails.datum, datum)) {
              continue;
            }
            if (dart.equals(domain, nearestDomain)) {
              data[$add](new (SeriesDatumOfD()).new(series, datum));
            } else if (testBounds) {
              let domainLowerBound = domainLowerBoundFn(i);
              let domainUpperBound = domainUpperBoundFn(i);
              let addDatum = false;
              if (domainLowerBound != null && domainUpperBound != null) {
                if (core.int.is(domain)) {
                  addDatum = dart.notNull(core.int.as(domainLowerBound)) <= dart.notNull(core.int.as(nearestDomain)) && dart.notNull(core.int.as(nearestDomain)) <= dart.notNull(core.int.as(domainUpperBound));
                } else if (typeof domain == 'number') {
                  addDatum = dart.notNull(core.double.as(domainLowerBound)) <= dart.notNull(core.double.as(nearestDomain)) && dart.notNull(core.double.as(nearestDomain)) <= dart.notNull(core.double.as(domainUpperBound));
                } else if (core.DateTime.is(domain)) {
                  addDatum = dart.equals(domainLowerBound, nearestDomain) || dart.equals(domainUpperBound, nearestDomain) || dart.test(core.DateTime.as(domainLowerBound).isBefore(core.DateTime.as(nearestDomain))) && dart.test(core.DateTime.as(nearestDomain).isBefore(core.DateTime.as(domainUpperBound)));
                }
              }
              if (addDatum) {
                data[$add](new (SeriesDatumOfD()).new(series, datum));
              }
            }
          }
        }
        return data;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$7] = chart;
        chart.addGestureListener(this[_listener$0]);
        switch (this.eventTrigger) {
          case C166 || CT.C166:
          case C167 || CT.C167:
          case C168 || CT.C168:
          case C169 || CT.C169:
          {
            chart.registerTappable(this);
            break;
          }
          case C170 || CT.C170:
          default:
          {
            chart.unregisterTappable(this);
            break;
          }
        }
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeGestureListener(this[_listener$0]);
        chart.unregisterTappable(this);
        this[_chart$7] = null;
      }
      get role() {
        return "SelectNearest-" + dart.str(dart.toString(this.selectionModelType)) + "}";
      }
    }
    (SelectNearest.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C136 || CT.C136;
      let expandToDomain = opts && 'expandToDomain' in opts ? opts.expandToDomain : true;
      let selectAcrossAllSeriesRendererComponents = opts && 'selectAcrossAllSeriesRendererComponents' in opts ? opts.selectAcrossAllSeriesRendererComponents : true;
      let selectClosestSeries = opts && 'selectClosestSeries' in opts ? opts.selectClosestSeries : true;
      let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : C170 || CT.C170;
      let maximumDomainDistancePx = opts && 'maximumDomainDistancePx' in opts ? opts.maximumDomainDistancePx : null;
      this[_listener$0] = null;
      this[_chart$7] = null;
      this[_delaySelect] = false;
      this[selectionModelType$2] = selectionModelType;
      this[expandToDomain$] = expandToDomain;
      this[selectAcrossAllSeriesRendererComponents$] = selectAcrossAllSeriesRendererComponents;
      this[selectClosestSeries$] = selectClosestSeries;
      this[eventTrigger$] = eventTrigger;
      this[maximumDomainDistancePx$] = maximumDomainDistancePx;
      switch (this.eventTrigger) {
        case C166 || CT.C166:
        {
          this[_listener$0] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$), onTap: dart.bind(this, _onSelect$)});
          break;
        }
        case C167 || CT.C167:
        {
          this[_listener$0] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$), onTap: dart.bind(this, _onSelect$), onDragStart: dart.bind(this, _onSelect$), onDragUpdate: dart.bind(this, _onSelect$)});
          break;
        }
        case C168 || CT.C168:
        {
          this[_listener$0] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$), onLongPress: dart.bind(this, _onSelect$), onDragStart: dart.bind(this, _onSelect$), onDragUpdate: dart.bind(this, _onSelect$), onDragEnd: dart.bind(this, _onDeselectAll)});
          break;
        }
        case C169 || CT.C169:
        {
          this[_listener$0] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$), onLongPress: dart.bind(this, _onLongPressSelect), onDragStart: dart.bind(this, _onSelect$), onDragUpdate: dart.bind(this, _onSelect$), onDragEnd: dart.bind(this, _onDeselectAll)});
          break;
        }
        case C170 || CT.C170:
        default:
        {
          this[_listener$0] = new gesture_listener.GestureListener.new({onHover: dart.bind(this, _onSelect$)});
          break;
        }
      }
    }).prototype = SelectNearest.prototype;
    dart.addTypeTests(SelectNearest);
    SelectNearest.prototype[_is_SelectNearest_default] = true;
    SelectNearest[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(SelectNearest, () => ({
      __proto__: dart.getMethods(SelectNearest.__proto__),
      [_onTapTest$]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onLongPressSelect]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onSelect$]: dart.fnType(core.bool, [math.Point$(core.double)], [core.double]),
      [_onDeselectAll]: dart.fnType(core.bool, [dart.dynamic, dart.dynamic, dart.dynamic]),
      [_expandToDomain]: dart.fnType(core.List$(series_datum.SeriesDatum$(D)), [datum_details.DatumDetails$(D)]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(SelectNearest, () => ({
      __proto__: dart.getGetters(SelectNearest.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(SelectNearest, "package:charts_common/src/chart/common/behavior/selection/select_nearest.dart");
    dart.setFieldSignature(SelectNearest, () => ({
      __proto__: dart.getFields(SelectNearest.__proto__),
      [_listener$0]: dart.fieldType(gesture_listener.GestureListener),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      expandToDomain: dart.finalFieldType(core.bool),
      selectAcrossAllSeriesRendererComponents: dart.finalFieldType(core.bool),
      selectClosestSeries: dart.finalFieldType(core.bool),
      maximumDomainDistancePx: dart.finalFieldType(core.int),
      [_chart$7]: dart.fieldType(base_chart.BaseChart$(D)),
      [_delaySelect]: dart.fieldType(core.bool)
    }));
    return SelectNearest;
  });
  select_nearest.SelectNearest = select_nearest.SelectNearest$();
  dart.addTypeTests(select_nearest.SelectNearest, _is_SelectNearest_default);
  const _is_TreeMapChart_default = Symbol('_is_TreeMapChart_default');
  treemap_chart.TreeMapChart$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let SquarifiedTreeMapRendererOfD = () => (SquarifiedTreeMapRendererOfD = dart.constFn(squarified_treemap_renderer.SquarifiedTreeMapRenderer$(D)))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    class TreeMapChart extends base_chart.BaseChart$(D) {
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        if (dart.notNull(seriesList[$length]) > 1) {
          dart.throw(new core.ArgumentError.new("TreeMapChart can only render a single tree."));
        }
        super.drawInternal(seriesList, {skipAnimation: skipAnimation, skipLayout: skipLayout});
      }
      makeDefaultRenderer() {
        let t7;
        t7 = new (SquarifiedTreeMapRendererOfD()).new();
        t7.rendererId = "default";
        return t7;
      }
      getDatumDetails(type) {
        let details = JSArrayOfDatumDetailsOfD().of([]);
        let treeMapSelection = this.getSelectionModel(type);
        for (let seriesDatum of treeMapSelection.selectedDatum) {
          let series = seriesDatum.series;
          let datumIndex = seriesDatum.index;
          let renderer = this.getSeriesRenderer(series.getAttr(core.String, series_renderer.rendererIdKey));
          let datumDetails = renderer.addPositionToDetailsForSeriesDatum(new (DatumDetailsOfD()).new({datum: seriesDatum.datum, domain: series.domainFn(datumIndex), measure: series.measureFn(datumIndex), series: seriesDatum.series, color: series.colorFn(datumIndex)}), seriesDatum);
          details[$add](datumDetails);
        }
        return details;
      }
    }
    (TreeMapChart.new = function(opts) {
      let t7;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      TreeMapChart.__proto__.new.call(this, {layoutConfig: (t7 = layoutConfig, t7 == null ? new layout_config.LayoutConfig.new() : t7)});
      ;
    }).prototype = TreeMapChart.prototype;
    dart.addTypeTests(TreeMapChart);
    TreeMapChart.prototype[_is_TreeMapChart_default] = true;
    dart.setMethodSignature(TreeMapChart, () => ({
      __proto__: dart.getMethods(TreeMapChart.__proto__),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setLibraryUri(TreeMapChart, "package:charts_common/src/chart/treemap/treemap_chart.dart");
    return TreeMapChart;
  });
  treemap_chart.TreeMapChart = treemap_chart.TreeMapChart$();
  dart.addTypeTests(treemap_chart.TreeMapChart, _is_TreeMapChart_default);
  const backgroundBarColor$ = dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.backgroundBarColor");
  const emptyLaneLabel$ = dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.emptyLaneLabel");
  const mergeEmptyLanes$ = dart.privateName(bar_lane_renderer_config, "BarLaneRendererConfig.mergeEmptyLanes");
  bar_lane_renderer_config.BarLaneRendererConfig = class BarLaneRendererConfig extends bar_renderer_config.BarRendererConfig$(core.String) {
    get backgroundBarColor() {
      return this[backgroundBarColor$];
    }
    set backgroundBarColor(value) {
      super.backgroundBarColor = value;
    }
    get emptyLaneLabel() {
      return this[emptyLaneLabel$];
    }
    set emptyLaneLabel(value) {
      super.emptyLaneLabel = value;
    }
    get mergeEmptyLanes() {
      return this[mergeEmptyLanes$];
    }
    set mergeEmptyLanes(value) {
      super.mergeEmptyLanes = value;
    }
    build() {
      return BarLaneRendererOfString().new({config: this, rendererId: this.customRendererId});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!bar_lane_renderer_config.BarLaneRendererConfig.is(other)) {
        return false;
      }
      return dart.equals(dart.dload(other, 'backgroundBarColor'), this.backgroundBarColor) && dart.equals(dart.dload(other, 'emptyLaneLabel'), this.emptyLaneLabel) && dart.equals(dart.dload(other, 'mergeEmptyLanes'), this.mergeEmptyLanes) && super._equals(other);
    }
    get hashCode() {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3;
      let hash = super.hashCode;
      hash = dart.notNull(hash) * 31 + dart.notNull((t7$ = (t7 = this.backgroundBarColor, t7 == null ? null : dart.hashCode(t7)), t7$ == null ? 0 : t7$));
      hash = dart.notNull(hash) * 31 + dart.notNull((t7$1 = (t7$0 = this.emptyLaneLabel, t7$0 == null ? null : dart.hashCode(t7$0)), t7$1 == null ? 0 : t7$1));
      hash = dart.notNull(hash) * 31 + dart.notNull((t7$3 = (t7$2 = this.mergeEmptyLanes, t7$2 == null ? null : dart.hashCode(t7$2)), t7$3 == null ? 0 : t7$3));
      return hash;
    }
  };
  (bar_lane_renderer_config.BarLaneRendererConfig.new = function(opts) {
    let t7, t7$;
    let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
    let cornerStrategy = opts && 'cornerStrategy' in opts ? opts.cornerStrategy : null;
    let emptyLaneLabel = opts && 'emptyLaneLabel' in opts ? opts.emptyLaneLabel : "No data";
    let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
    let groupingType = opts && 'groupingType' in opts ? opts.groupingType : null;
    let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
    let mergeEmptyLanes = opts && 'mergeEmptyLanes' in opts ? opts.mergeEmptyLanes : false;
    let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
    let stackHorizontalSeparator = opts && 'stackHorizontalSeparator' in opts ? opts.stackHorizontalSeparator : null;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
    let barRendererDecorator = opts && 'barRendererDecorator' in opts ? opts.barRendererDecorator : null;
    let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
    let backgroundBarColor = opts && 'backgroundBarColor' in opts ? opts.backgroundBarColor : null;
    let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
    this[emptyLaneLabel$] = emptyLaneLabel;
    this[mergeEmptyLanes$] = mergeEmptyLanes;
    this[backgroundBarColor$] = (t7 = backgroundBarColor, t7 == null ? style_factory.StyleFactory.style.noDataColor : t7);
    bar_lane_renderer_config.BarLaneRendererConfig.__proto__.new.call(this, {barRendererDecorator: barRendererDecorator, cornerStrategy: cornerStrategy, customRendererId: customRendererId, groupingType: (t7$ = groupingType, t7$ == null ? base_bar_renderer_config.BarGroupingType.grouped : t7$), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, fillPattern: fillPattern, stackHorizontalSeparator: stackHorizontalSeparator, strokeWidthPx: strokeWidthPx, symbolRenderer: symbolRenderer, weightPattern: weightPattern});
    ;
  }).prototype = bar_lane_renderer_config.BarLaneRendererConfig.prototype;
  dart.addTypeTests(bar_lane_renderer_config.BarLaneRendererConfig);
  dart.setMethodSignature(bar_lane_renderer_config.BarLaneRendererConfig, () => ({
    __proto__: dart.getMethods(bar_lane_renderer_config.BarLaneRendererConfig.__proto__),
    build: dart.fnType(bar_lane_renderer.BarLaneRenderer$(core.String), [])
  }));
  dart.setLibraryUri(bar_lane_renderer_config.BarLaneRendererConfig, "package:charts_common/src/chart/bar/bar_lane_renderer_config.dart");
  dart.setFieldSignature(bar_lane_renderer_config.BarLaneRendererConfig, () => ({
    __proto__: dart.getFields(bar_lane_renderer_config.BarLaneRendererConfig.__proto__),
    backgroundBarColor: dart.finalFieldType(color$.Color),
    emptyLaneLabel: dart.finalFieldType(core.String),
    mergeEmptyLanes: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(bar_lane_renderer_config.BarLaneRendererConfig, ['_equals']);
  dart.defineExtensionAccessors(bar_lane_renderer_config.BarLaneRendererConfig, ['hashCode']);
  const _barLaneStackMap = dart.privateName(bar_lane_renderer, "_barLaneStackMap");
  const _allMeasuresForDomainNullMap = dart.privateName(bar_lane_renderer, "_allMeasuresForDomainNullMap");
  const _getMaxMeasureValue = dart.privateName(bar_lane_renderer, "_getMaxMeasureValue");
  const _is_BarLaneRenderer_default = Symbol('_is_BarLaneRenderer_default');
  const barRendererDecorator$0 = dart.privateName(bar_lane_renderer, "BarLaneRenderer.barRendererDecorator");
  bar_lane_renderer.BarLaneRenderer$ = dart.generic(D => {
    let AnimatedBarOfD = () => (AnimatedBarOfD = dart.constFn(bar_renderer.AnimatedBar$(D)))();
    let ListOfAnimatedBarOfD = () => (ListOfAnimatedBarOfD = dart.constFn(core.List$(AnimatedBarOfD())))();
    let IdentityMapOfString$ListOfAnimatedBarOfD = () => (IdentityMapOfString$ListOfAnimatedBarOfD = dart.constFn(_js_helper.IdentityMap$(core.String, ListOfAnimatedBarOfD())))();
    let LinkedMapOfD$bool = () => (LinkedMapOfD$bool = dart.constFn(_js_helper.LinkedMap$(D, core.bool)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let _HashSetOfD = () => (_HashSetOfD = dart.constFn(collection._HashSet$(D)))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ListOfImmutableSeriesOfD = () => (ListOfImmutableSeriesOfD = dart.constFn(core.List$(ImmutableSeriesOfD())))();
    let SetOfD = () => (SetOfD = dart.constFn(core.Set$(D)))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let JSArrayOfAnimatedBarOfD = () => (JSArrayOfAnimatedBarOfD = dart.constFn(_interceptors.JSArray$(AnimatedBarOfD())))();
    let VoidToListOfAnimatedBarOfD = () => (VoidToListOfAnimatedBarOfD = dart.constFn(dart.fnType(ListOfAnimatedBarOfD(), [])))();
    let BarRendererElementOfD = () => (BarRendererElementOfD = dart.constFn(bar_renderer.BarRendererElement$(D)))();
    let DToNull = () => (DToNull = dart.constFn(dart.fnType(core.Null, [D])))();
    let ImmutableSeriesOfDToNull = () => (ImmutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesOfD()])))();
    let DAndboolToNull = () => (DAndboolToNull = dart.constFn(dart.fnType(core.Null, [D, core.bool])))();
    let AnimatedBarOfDToBarRendererElementOfD = () => (AnimatedBarOfDToBarRendererElementOfD = dart.constFn(dart.fnType(BarRendererElementOfD(), [AnimatedBarOfD()])))();
    let StringAndListOfAnimatedBarOfDToNull = () => (StringAndListOfAnimatedBarOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfAnimatedBarOfD()])))();
    class BarLaneRenderer extends bar_renderer.BarRenderer$(D) {
      get barRendererDecorator() {
        return this[barRendererDecorator$0];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        rendererId == null ? rendererId = "bar" : null;
        config == null ? config = new bar_lane_renderer_config.BarLaneRendererConfig.new() : null;
        return new (bar_lane_renderer.BarLaneRenderer$(D))._internal({config: config, rendererId: rendererId});
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        super.preprocessSeries(seriesList);
        this[_allMeasuresForDomainNullMap][$clear]();
        seriesList[$forEach](dart.fn(series => {
          let domainFn = series.domainFn;
          let measureFn = series.rawMeasureFn;
          let domainValues = new (_HashSetOfD()).new();
          for (let barIndex = 0; barIndex < dart.notNull(series.data[$length]); barIndex = barIndex + 1) {
            let domain = domainFn(barIndex);
            let measure = measureFn(barIndex);
            domainValues.add(domain);
            if (dart.test(bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).mergeEmptyLanes)) {
              let allNull = this[_allMeasuresForDomainNullMap][$_get](domain);
              let isNull = measure == null;
              this[_allMeasuresForDomainNullMap][$_set](domain, allNull != null ? dart.test(allNull) && isNull : isNull);
            }
          }
          series.setAttr(core.Set, bar_lane_renderer.domainValuesKey, domainValues);
        }, MutableSeriesOfDToNull()));
      }
      update(seriesList, isAnimatingThisDraw) {
        ListOfImmutableSeriesOfD()._check(seriesList);
        super.update(seriesList, isAnimatingThisDraw);
        seriesList[$forEach](dart.fn(series => {
          let domainValues = SetOfD().as(series.getAttr(core.Set, bar_lane_renderer.domainValuesKey));
          let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
          let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
          let seriesStackKey = series.getAttr(core.String, base_bar_renderer.stackKeyKey);
          let barGroupCount = series.getAttr(core.int, base_bar_renderer.barGroupCountKey);
          let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
          let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
          let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let maxMeasureValue = this[_getMaxMeasureValue](measureAxis);
          let laneSeries = new (MutableSeriesOfD()).clone(MutableSeriesOfD()._check(seriesList[$_get](0)));
          laneSeries.data = [];
          laneSeries.labelAccessorFn = dart.fn(index => "", intToString());
          let laneSeriesIndex = 0;
          domainValues[$forEach](dart.fn(domainValue => {
            let t7;
            if (dart.equals(this[_allMeasuresForDomainNullMap][$_get](domainValue), true)) {
              return;
            }
            let datum = new (IdentityMapOfString$int()).from(["index", laneSeriesIndex]);
            laneSeries.data[$add](datum);
            let barStackMapKey = dart.notNull(dart.toString(domainValue)) + "__" + dart.notNull(seriesStackKey) + "__" + dart.toString(barGroupIndex);
            let barKey = barStackMapKey + "0";
            let barStackList = this[_barLaneStackMap][$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfAnimatedBarOfD().of([]), VoidToListOfAnimatedBarOfD()));
            let animatingBar = barStackList[$firstWhere](dart.fn(bar => bar.key === barKey, AnimatedBarTobool()), {orElse: dart.fn(() => null, VoidToNull())});
            if (animatingBar == null) {
              animatingBar = this.makeAnimatedBar({key: barKey, series: laneSeries, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
              barStackList[$add](animatingBar);
            } else {
              t7 = animatingBar;
              t7.datum = datum;
              t7.series = laneSeries;
              t7.domainValue = domainValue;
              t7;
            }
            let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
            animatingBar.setNewTarget(BarRendererElementOfD()._check(barElement));
            laneSeriesIndex = laneSeriesIndex + 1;
          }, DToNull()));
        }, ImmutableSeriesOfDToNull()));
        if (dart.test(bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).mergeEmptyLanes)) {
          let domainAxis = ImmutableAxisOfD().as(seriesList[$_get](0).getAttr(axis$.Axis, axis$.domainAxisKey));
          let measureAxis = ImmutableAxisOfnum().as(seriesList[$_get](0).getAttr(axis$.Axis, axis$.measureAxisKey));
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let maxMeasureValue = this[_getMaxMeasureValue](measureAxis);
          let barGroupIndex = 0;
          let previousBarGroupWeight = 0.0;
          let barGroupWeight = 1.0;
          let barGroupCount = 1;
          let mergedSeries = new (MutableSeriesOfD()).clone(MutableSeriesOfD()._check(seriesList[$_get](0)));
          mergedSeries.data = [];
          mergedSeries.labelAccessorFn = dart.fn(index => bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).emptyLaneLabel, intToString());
          let mergedSeriesIndex = 0;
          this[_allMeasuresForDomainNullMap][$forEach](dart.fn((domainValue, allNull) => {
            let t7;
            if (dart.test(allNull)) {
              let datum = new (IdentityMapOfString$int()).from(["index", mergedSeriesIndex]);
              mergedSeries.data[$add](datum);
              let barStackMapKey = dart.notNull(dart.toString(domainValue)) + "__allNull__";
              let barKey = barStackMapKey + "0";
              let barStackList = this[_barLaneStackMap][$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfAnimatedBarOfD().of([]), VoidToListOfAnimatedBarOfD()));
              let animatingBar = barStackList[$firstWhere](dart.fn(bar => bar.key === barKey, AnimatedBarTobool()), {orElse: dart.fn(() => null, VoidToNull())});
              if (animatingBar == null) {
                animatingBar = this.makeAnimatedBar({key: barKey, series: mergedSeries, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
                barStackList[$add](animatingBar);
              } else {
                t7 = animatingBar;
                t7.datum = datum;
                t7.series = mergedSeries;
                t7.domainValue = domainValue;
                t7;
              }
              let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, details: new (BarRendererElementOfD()).new(), domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: bar_lane_renderer_config.BarLaneRendererConfig.as(this.config).backgroundBarColor, measureValue: maxMeasureValue, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: this.config.strokeWidthPx, measureIsNull: false, measureIsNegative: false});
              animatingBar.setNewTarget(BarRendererElementOfD()._check(barElement));
              mergedSeriesIndex = mergedSeriesIndex + 1;
            }
          }, DAndboolToNull()));
        }
      }
      [_getMaxMeasureValue](measureAxis) {
        let pos = dart.test(cartesian_chart.CartesianChart.as(this.chart).vertical) ? this.chart.drawAreaBounds[$top] : dart.test(this.isRtl) ? this.chart.drawAreaBounds[$left] : this.chart.drawAreaBounds[$right];
        return measureAxis.getDomain(pos[$toDouble]());
      }
      paint(canvas, animationPercent) {
        this[_barLaneStackMap][$forEach](dart.fn((stackKey, barStack) => {
          let barElements = barStack[$map](BarRendererElementOfD(), dart.fn(animatingBar => animatingBar.getCurrentBar(animationPercent), AnimatedBarOfDToBarRendererElementOfD()))[$toList]();
          this.paintBar(canvas, animationPercent, barElements);
        }, StringAndListOfAnimatedBarOfDToNull()));
        super.paint(canvas, animationPercent);
      }
    }
    (BarLaneRenderer._internal = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[_barLaneStackMap] = new (IdentityMapOfString$ListOfAnimatedBarOfD()).new();
      this[_allMeasuresForDomainNullMap] = new (LinkedMapOfD$bool()).new();
      this[barRendererDecorator$0] = config.barRendererDecorator;
      BarLaneRenderer.__proto__.internal.call(this, {config: config, rendererId: rendererId});
      ;
    }).prototype = BarLaneRenderer.prototype;
    dart.addTypeTests(BarLaneRenderer);
    BarLaneRenderer.prototype[_is_BarLaneRenderer_default] = true;
    dart.setMethodSignature(BarLaneRenderer, () => ({
      __proto__: dart.getMethods(BarLaneRenderer.__proto__),
      [_getMaxMeasureValue]: dart.fnType(core.num, [axis$.ImmutableAxis$(core.num)])
    }));
    dart.setLibraryUri(BarLaneRenderer, "package:charts_common/src/chart/bar/bar_lane_renderer.dart");
    dart.setFieldSignature(BarLaneRenderer, () => ({
      __proto__: dart.getFields(BarLaneRenderer.__proto__),
      barRendererDecorator: dart.finalFieldType(bar_renderer_decorator.BarRendererDecorator),
      [_barLaneStackMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, core.List$(bar_renderer.AnimatedBar$(D)))),
      [_allMeasuresForDomainNullMap]: dart.finalFieldType(collection.LinkedHashMap$(D, core.bool))
    }));
    return BarLaneRenderer;
  });
  bar_lane_renderer.BarLaneRenderer = bar_lane_renderer.BarLaneRenderer$();
  dart.addTypeTests(bar_lane_renderer.BarLaneRenderer, _is_BarLaneRenderer_default);
  let C208;
  dart.defineLazy(bar_lane_renderer, {
    /*bar_lane_renderer.domainValuesKey*/get domainValuesKey() {
      return C208 || CT.C208;
    }
  });
  const _name$17 = dart.privateName(bar_label_decorator, "_name");
  let C209;
  const _decorateVerticalBars = dart.privateName(bar_label_decorator, "_decorateVerticalBars");
  const _decorateHorizontalBars = dart.privateName(bar_label_decorator, "_decorateHorizontalBars");
  const _getTextStyle = dart.privateName(bar_label_decorator, "_getTextStyle");
  const _getDatumStyle = dart.privateName(bar_label_decorator, "_getDatumStyle");
  const _getTotalLabelHeight = dart.privateName(bar_label_decorator, "_getTotalLabelHeight");
  let C210;
  let C211;
  let C212;
  const _is_BarLabelDecorator_default = Symbol('_is_BarLabelDecorator_default');
  const insideLabelStyleSpec$ = dart.privateName(bar_label_decorator, "BarLabelDecorator.insideLabelStyleSpec");
  const outsideLabelStyleSpec$ = dart.privateName(bar_label_decorator, "BarLabelDecorator.outsideLabelStyleSpec");
  const labelPosition$ = dart.privateName(bar_label_decorator, "BarLabelDecorator.labelPosition");
  const labelAnchor$0 = dart.privateName(bar_label_decorator, "BarLabelDecorator.labelAnchor");
  const labelPadding$0 = dart.privateName(bar_label_decorator, "BarLabelDecorator.labelPadding");
  bar_label_decorator.BarLabelDecorator$ = dart.generic(D => {
    let ImmutableBarRendererElementOfD = () => (ImmutableBarRendererElementOfD = dart.constFn(bar_renderer.ImmutableBarRendererElement$(D)))();
    let IterableOfImmutableBarRendererElementOfD = () => (IterableOfImmutableBarRendererElementOfD = dart.constFn(core.Iterable$(ImmutableBarRendererElementOfD())))();
    class BarLabelDecorator extends bar_renderer_decorator.BarRendererDecorator$(D) {
      get insideLabelStyleSpec() {
        return this[insideLabelStyleSpec$];
      }
      set insideLabelStyleSpec(value) {
        super.insideLabelStyleSpec = value;
      }
      get outsideLabelStyleSpec() {
        return this[outsideLabelStyleSpec$];
      }
      set outsideLabelStyleSpec(value) {
        super.outsideLabelStyleSpec = value;
      }
      get labelPosition() {
        return this[labelPosition$];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelAnchor() {
        return this[labelAnchor$0];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelPadding() {
        return this[labelPadding$0];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      decorate(barElements, canvas, graphicsFactory, opts) {
        IterableOfImmutableBarRendererElementOfD()._check(barElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let renderingVertically = opts && 'renderingVertically' in opts ? opts.renderingVertically : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        if (dart.test(renderingVertically)) {
          this[_decorateVerticalBars](barElements, canvas, graphicsFactory, drawBounds, rtl);
        } else {
          this[_decorateHorizontalBars](barElements, canvas, graphicsFactory, drawBounds, rtl);
        }
      }
      [_decorateVerticalBars](barElements, canvas, graphicsFactory, drawBounds, rtl) {
        let t7;
        let insideLabelStyle = this[_getTextStyle](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[_getTextStyle](graphicsFactory, this.outsideLabelStyleSpec);
        for (let element of barElements) {
          let labelFn = element.series.labelAccessorFn;
          let datumIndex = element.index;
          let label = labelFn != null ? labelFn(datumIndex) : null;
          let datumInsideLabelStyle = this[_getDatumStyle](element.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[_getDatumStyle](element.series.outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[$isEmpty]) {
            continue;
          }
          let labelElements = label[$split](bar_label_decorator.BarLabelDecorator._labelSplitPattern)[$map](text_element.TextElement, dart.fn(labelPart => graphicsFactory.createTextElement(labelPart), StringToTextElement()));
          let bounds = element.bounds;
          let totalPadding = dart.notNull(this.labelPadding) * 2;
          let insideBarHeight = dart.notNull(bounds[$height]) - totalPadding;
          let outsideBarHeight = dart.notNull(drawBounds[$height]) - dart.notNull(bounds[$height]) - totalPadding;
          let calculatedLabelPosition = this.labelPosition;
          if (dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.auto)) {
            labelElements = labelElements[$map](text_element.TextElement, dart.fn(labelElement => {
              let t7;
              t7 = labelElement;
              t7.textStyle = datumInsideLabelStyle;
              return t7;
            }, TextElementToTextElement()));
            let labelMaxWidth = labelElements[$map](core.double, dart.fn(labelElement => labelElement.measurement.horizontalSliceWidth, TextElementTodouble()))[$fold](dart.dynamic, 0, dart.fn((max, current) => dart.dtest(dart.dsend(max, '>', [current])) ? max : current, dynamicAnddoubleTodynamic()));
            let totalLabelHeight = this[_getTotalLabelHeight](labelElements);
            calculatedLabelPosition = dart.notNull(totalLabelHeight) < insideBarHeight && dart.dtest(dart.dsend(labelMaxWidth, '<', [bounds[$width]])) ? bar_label_decorator.BarLabelPosition.inside : bar_label_decorator.BarLabelPosition.outside;
          }
          labelElements = labelElements[$map](text_element.TextElement, dart.fn(labelElement => {
            let t7;
            t7 = labelElement;
            t7.textStyle = dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.inside) ? datumInsideLabelStyle : datumOutsideLabelStyle;
            t7.maxWidth = bounds[$width];
            t7.textDirection = dart.test(rtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            return t7;
          }, TextElementToTextElement()));
          let totalLabelHeight = this[_getTotalLabelHeight](labelElements);
          let labelsDrawn = 0;
          for (let labelElement of labelElements) {
            let labelY = null;
            let labelHeight = labelElement.measurement.verticalSliceWidth[$round]();
            let offsetHeight = (labelHeight + dart.notNull(bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding)) * labelsDrawn;
            if (dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.inside)) {
              let _labelAnchor = (t7 = this.labelAnchor, t7 == null ? bar_label_decorator.BarLabelDecorator._defaultVerticalLabelAnchor : t7);
              switch (_labelAnchor) {
                case C210 || CT.C210:
                {
                  labelY = dart.notNull(bounds[$top]) + dart.notNull(this.labelPadding) + offsetHeight;
                  break;
                }
                case C211 || CT.C211:
                {
                  labelY = (dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$height]) / 2 - dart.notNull(totalLabelHeight) / 2 + offsetHeight)[$round]();
                  break;
                }
                case C212 || CT.C212:
                {
                  labelY = dart.notNull(bounds[$bottom]) - dart.notNull(this.labelPadding) - dart.notNull(totalLabelHeight) + offsetHeight;
                  break;
                }
              }
            } else {
              labelY = dart.notNull(bounds[$top]) - dart.notNull(this.labelPadding) - dart.notNull(totalLabelHeight) + offsetHeight;
            }
            let labelX = (dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2 - dart.notNull(labelElement.measurement.horizontalSliceWidth) / 2)[$round]();
            canvas.drawText(labelElement, labelX, labelY);
            labelsDrawn = labelsDrawn + 1;
          }
        }
      }
      [_decorateHorizontalBars](barElements, canvas, graphicsFactory, drawBounds, rtl) {
        let t7;
        let insideLabelStyle = this[_getTextStyle](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[_getTextStyle](graphicsFactory, this.outsideLabelStyleSpec);
        for (let element of barElements) {
          let labelFn = element.series.labelAccessorFn;
          let datumIndex = element.index;
          let label = labelFn != null ? labelFn(datumIndex) : null;
          let datumInsideLabelStyle = this[_getDatumStyle](element.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[_getDatumStyle](element.series.outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[$isEmpty]) {
            continue;
          }
          let bounds = element.bounds;
          let totalPadding = dart.notNull(this.labelPadding) * 2;
          let insideBarWidth = dart.notNull(bounds[$width]) - totalPadding;
          let outsideBarWidth = dart.notNull(drawBounds[$width]) - dart.notNull(bounds[$width]) - totalPadding;
          let labelElement = graphicsFactory.createTextElement(label);
          let calculatedLabelPosition = this.labelPosition;
          if (dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.auto)) {
            labelElement.textStyle = datumInsideLabelStyle;
            calculatedLabelPosition = insideBarWidth >= outsideBarWidth || dart.notNull(labelElement.measurement.horizontalSliceWidth) < insideBarWidth ? bar_label_decorator.BarLabelPosition.inside : bar_label_decorator.BarLabelPosition.outside;
          }
          if (dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.inside)) {
            labelElement.textStyle = datumInsideLabelStyle;
            labelElement.maxWidth = insideBarWidth;
          } else {
            labelElement.textStyle = datumOutsideLabelStyle;
            labelElement.maxWidth = dart.asInt(outsideBarWidth);
          }
          if (dart.notNull(labelElement.maxWidth) > 0) {
            let labelX = null;
            if (dart.equals(calculatedLabelPosition, bar_label_decorator.BarLabelPosition.inside)) {
              let _labelAnchor = (t7 = this.labelAnchor, t7 == null ? bar_label_decorator.BarLabelDecorator._defaultHorizontalLabelAnchor : t7);
              switch (_labelAnchor) {
                case C211 || CT.C211:
                {
                  labelX = (dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2 - dart.notNull(labelElement.measurement.horizontalSliceWidth) / 2)[$round]();
                  labelElement.textDirection = dart.test(rtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
                  break;
                }
                case C210 || CT.C210:
                case C212 || CT.C212:
                {
                  let alignLeft = dart.test(rtl) ? dart.equals(_labelAnchor, bar_label_decorator.BarLabelAnchor.end) : dart.equals(_labelAnchor, bar_label_decorator.BarLabelAnchor.start);
                  if (alignLeft) {
                    labelX = dart.notNull(bounds[$left]) + dart.notNull(this.labelPadding);
                    labelElement.textDirection = text_element.TextDirection.ltr;
                  } else {
                    labelX = dart.notNull(bounds[$right]) - dart.notNull(this.labelPadding);
                    labelElement.textDirection = text_element.TextDirection.rtl;
                  }
                  break;
                }
              }
            } else {
              labelX = dart.notNull(bounds[$right]) + dart.notNull(this.labelPadding);
              labelElement.textDirection = text_element.TextDirection.ltr;
            }
            let labelY = (dart.notNull(bounds[$top]) + (dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$top])) / 2 - dart.notNull(labelElement.measurement.verticalSliceWidth) / 2)[$round]();
            canvas.drawText(labelElement, labelX, labelY);
          }
        }
      }
      [_getTotalLabelHeight](labelElements) {
        return (dart.notNull(labelElements[$first].measurement.verticalSliceWidth) * dart.notNull(labelElements[$length]))[$round]() + dart.notNull(bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding) * (dart.notNull(labelElements[$length]) - 1);
      }
      [_getTextStyle](graphicsFactory, labelSpec) {
        let t8, t8$, t8$0, t8$1, t8$2, t8$3, t7;
        t7 = graphicsFactory.createTextPaint();
        t7.color = (t8$ = (t8 = labelSpec, t8 == null ? null : t8.color), t8$ == null ? color$.Color.black : t8$);
        t7.fontFamily = (t8$0 = labelSpec, t8$0 == null ? null : t8$0.fontFamily);
        t7.fontSize = (t8$2 = (t8$1 = labelSpec, t8$1 == null ? null : t8$1.fontSize), t8$2 == null ? 12 : t8$2);
        t7.lineHeight = (t8$3 = labelSpec, t8$3 == null ? null : t8$3.lineHeight);
        return t7;
      }
      [_getDatumStyle](labelFn, datumIndex, graphicsFactory, opts) {
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = labelFn != null ? labelFn(datumIndex) : null;
        return styleSpec != null ? this[_getTextStyle](graphicsFactory, styleSpec) : defaultStyle;
      }
    }
    (BarLabelDecorator.new = function(opts) {
      let t7, t7$;
      let insideLabelStyleSpec = opts && 'insideLabelStyleSpec' in opts ? opts.insideLabelStyleSpec : null;
      let outsideLabelStyleSpec = opts && 'outsideLabelStyleSpec' in opts ? opts.outsideLabelStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : C209 || CT.C209;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 5;
      this[labelAnchor$0] = labelAnchor;
      this[labelPosition$] = labelPosition;
      this[labelPadding$0] = labelPadding;
      this[insideLabelStyleSpec$] = (t7 = insideLabelStyleSpec, t7 == null ? bar_label_decorator.BarLabelDecorator._defaultInsideLabelStyle : t7);
      this[outsideLabelStyleSpec$] = (t7$ = outsideLabelStyleSpec, t7$ == null ? bar_label_decorator.BarLabelDecorator._defaultOutsideLabelStyle : t7$);
      BarLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = BarLabelDecorator.prototype;
    dart.addTypeTests(BarLabelDecorator);
    BarLabelDecorator.prototype[_is_BarLabelDecorator_default] = true;
    dart.setMethodSignature(BarLabelDecorator, () => ({
      __proto__: dart.getMethods(BarLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [core.Object, chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), renderingVertically: core.bool, rtl: core.bool}, {}),
      [_decorateVerticalBars]: dart.fnType(dart.void, [core.Iterable$(bar_renderer.ImmutableBarRendererElement$(D)), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory, math.Rectangle$(core.num), core.bool]),
      [_decorateHorizontalBars]: dart.fnType(dart.void, [core.Iterable$(bar_renderer.ImmutableBarRendererElement$(D)), chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory, math.Rectangle$(core.num), core.bool]),
      [_getTotalLabelHeight]: dart.fnType(core.int, [core.Iterable$(text_element.TextElement)]),
      [_getTextStyle]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec]),
      [_getDatumStyle]: dart.fnType(text_style.TextStyle, [dart.fnType(axis_spec.TextStyleSpec, [core.int]), core.int, graphics_factory.GraphicsFactory], {defaultStyle: text_style.TextStyle}, {})
    }));
    dart.setLibraryUri(BarLabelDecorator, "package:charts_common/src/chart/bar/bar_label_decorator.dart");
    dart.setFieldSignature(BarLabelDecorator, () => ({
      __proto__: dart.getFields(BarLabelDecorator.__proto__),
      insideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      outsideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      labelPosition: dart.finalFieldType(bar_label_decorator.BarLabelPosition),
      labelAnchor: dart.finalFieldType(bar_label_decorator.BarLabelAnchor),
      labelPadding: dart.finalFieldType(core.int)
    }));
    return BarLabelDecorator;
  });
  bar_label_decorator.BarLabelDecorator = bar_label_decorator.BarLabelDecorator$();
  dart.defineLazy(bar_label_decorator.BarLabelDecorator, {
    /*bar_label_decorator.BarLabelDecorator._defaultLabelPosition*/get _defaultLabelPosition() {
      return C209 || CT.C209;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultHorizontalLabelAnchor*/get _defaultHorizontalLabelAnchor() {
      return C212 || CT.C212;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultVerticalLabelAnchor*/get _defaultVerticalLabelAnchor() {
      return C210 || CT.C210;
    },
    /*bar_label_decorator.BarLabelDecorator._defaultInsideLabelStyle*/get _defaultInsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.white});
    },
    /*bar_label_decorator.BarLabelDecorator._defaultOutsideLabelStyle*/get _defaultOutsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*bar_label_decorator.BarLabelDecorator._labelSplitPattern*/get _labelSplitPattern() {
      return "\n";
    },
    /*bar_label_decorator.BarLabelDecorator._defaultMultiLineLabelPadding*/get _defaultMultiLineLabelPadding() {
      return 2;
    }
  });
  dart.addTypeTests(bar_label_decorator.BarLabelDecorator, _is_BarLabelDecorator_default);
  let C213;
  let C214;
  let C215;
  bar_label_decorator.BarLabelPosition = class BarLabelPosition extends core.Object {
    toString() {
      return this[_name$17];
    }
  };
  (bar_label_decorator.BarLabelPosition.new = function(index, _name) {
    this.index = index;
    this[_name$17] = _name;
    ;
  }).prototype = bar_label_decorator.BarLabelPosition.prototype;
  dart.addTypeTests(bar_label_decorator.BarLabelPosition);
  dart.setLibraryUri(bar_label_decorator.BarLabelPosition, "package:charts_common/src/chart/bar/bar_label_decorator.dart");
  dart.setFieldSignature(bar_label_decorator.BarLabelPosition, () => ({
    __proto__: dart.getFields(bar_label_decorator.BarLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$17]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_label_decorator.BarLabelPosition, ['toString']);
  bar_label_decorator.BarLabelPosition.auto = C209 || CT.C209;
  bar_label_decorator.BarLabelPosition.outside = C213 || CT.C213;
  bar_label_decorator.BarLabelPosition.inside = C214 || CT.C214;
  bar_label_decorator.BarLabelPosition.values = C215 || CT.C215;
  let C216;
  bar_label_decorator.BarLabelAnchor = class BarLabelAnchor extends core.Object {
    toString() {
      return this[_name$17];
    }
  };
  (bar_label_decorator.BarLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$17] = _name;
    ;
  }).prototype = bar_label_decorator.BarLabelAnchor.prototype;
  dart.addTypeTests(bar_label_decorator.BarLabelAnchor);
  dart.setLibraryUri(bar_label_decorator.BarLabelAnchor, "package:charts_common/src/chart/bar/bar_label_decorator.dart");
  dart.setFieldSignature(bar_label_decorator.BarLabelAnchor, () => ({
    __proto__: dart.getFields(bar_label_decorator.BarLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$17]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(bar_label_decorator.BarLabelAnchor, ['toString']);
  bar_label_decorator.BarLabelAnchor.start = C212 || CT.C212;
  bar_label_decorator.BarLabelAnchor.middle = C211 || CT.C211;
  bar_label_decorator.BarLabelAnchor.end = C210 || CT.C210;
  bar_label_decorator.BarLabelAnchor.values = C216 || CT.C216;
  const _name$18 = dart.privateName(arc_label_decorator, "_name");
  let C217;
  const _getTextStyle$ = dart.privateName(arc_label_decorator, "_getTextStyle");
  const _getDatumStyle$ = dart.privateName(arc_label_decorator, "_getDatumStyle");
  const _drawInsideLabel = dart.privateName(arc_label_decorator, "_drawInsideLabel");
  const _drawOutsideLabel = dart.privateName(arc_label_decorator, "_drawOutsideLabel");
  const _detectOutsideLabelCollision = dart.privateName(arc_label_decorator, "_detectOutsideLabelCollision");
  const _drawLeaderLine = dart.privateName(arc_label_decorator, "_drawLeaderLine");
  const _is_ArcLabelDecorator_default = Symbol('_is_ArcLabelDecorator_default');
  const insideLabelStyleSpec$0 = dart.privateName(arc_label_decorator, "ArcLabelDecorator.insideLabelStyleSpec");
  const outsideLabelStyleSpec$0 = dart.privateName(arc_label_decorator, "ArcLabelDecorator.outsideLabelStyleSpec");
  const leaderLineStyleSpec$ = dart.privateName(arc_label_decorator, "ArcLabelDecorator.leaderLineStyleSpec");
  const labelPosition$0 = dart.privateName(arc_label_decorator, "ArcLabelDecorator.labelPosition");
  const labelPadding$1 = dart.privateName(arc_label_decorator, "ArcLabelDecorator.labelPadding");
  const showLeaderLines$ = dart.privateName(arc_label_decorator, "ArcLabelDecorator.showLeaderLines");
  const renderAbove$ = dart.privateName(arc_label_decorator, "ArcLabelDecorator.renderAbove");
  arc_label_decorator.ArcLabelDecorator$ = dart.generic(D => {
    let ArcRendererElementListOfD = () => (ArcRendererElementListOfD = dart.constFn(arc_renderer.ArcRendererElementList$(D)))();
    class ArcLabelDecorator extends arc_renderer_decorator.ArcRendererDecorator$(D) {
      get insideLabelStyleSpec() {
        return this[insideLabelStyleSpec$0];
      }
      set insideLabelStyleSpec(value) {
        super.insideLabelStyleSpec = value;
      }
      get outsideLabelStyleSpec() {
        return this[outsideLabelStyleSpec$0];
      }
      set outsideLabelStyleSpec(value) {
        super.outsideLabelStyleSpec = value;
      }
      get leaderLineStyleSpec() {
        return this[leaderLineStyleSpec$];
      }
      set leaderLineStyleSpec(value) {
        super.leaderLineStyleSpec = value;
      }
      get labelPosition() {
        return this[labelPosition$0];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelPadding() {
        return this[labelPadding$1];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      get showLeaderLines() {
        return this[showLeaderLines$];
      }
      set showLeaderLines(value) {
        super.showLeaderLines = value;
      }
      get renderAbove() {
        return this[renderAbove$];
      }
      set renderAbove(value) {
        super.renderAbove = value;
      }
      decorate(arcElements, canvas, graphicsFactory, opts) {
        let t7;
        ArcRendererElementListOfD()._check(arcElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        let insideLabelStyle = this[_getTextStyle$](graphicsFactory, this.insideLabelStyleSpec);
        let outsideLabelStyle = this[_getTextStyle$](graphicsFactory, this.outsideLabelStyleSpec);
        let previousOutsideLabelY = null;
        let previousLabelLeftOfChart = null;
        for (let element of arcElements.arcs) {
          let labelFn = element.series.labelAccessorFn;
          let datumIndex = element.index;
          let label = labelFn != null ? labelFn(datumIndex) : null;
          let datumInsideLabelStyle = this[_getDatumStyle$](element.series.insideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: insideLabelStyle});
          let datumOutsideLabelStyle = this[_getDatumStyle$](element.series.outsideLabelStyleAccessorFn, datumIndex, graphicsFactory, {defaultStyle: outsideLabelStyle});
          if (label == null || label[$isEmpty]) {
            continue;
          }
          let arcAngle = dart.notNull(element.endAngle) - dart.notNull(element.startAngle);
          let centerAngle = dart.notNull(element.startAngle) + arcAngle / 2;
          let centerRadius = dart.notNull(arcElements.innerRadius) + (dart.notNull(arcElements.radius) - dart.notNull(arcElements.innerRadius)) / 2;
          let innerPoint = new (PointOfdouble()).new(dart.notNull(arcElements.center.x) + dart.notNull(arcElements.innerRadius) * math.cos(centerAngle), dart.notNull(arcElements.center.y) + dart.notNull(arcElements.innerRadius) * math.sin(centerAngle));
          let outerPoint = new (PointOfdouble()).new(dart.notNull(arcElements.center.x) + dart.notNull(arcElements.radius) * math.cos(centerAngle), dart.notNull(arcElements.center.y) + dart.notNull(arcElements.radius) * math.sin(centerAngle));
          let bounds = RectangleOfdouble().fromPoints(innerPoint, outerPoint);
          let totalPadding = dart.notNull(this.labelPadding) * 2;
          let insideArcWidth = math.min(core.num, (arcAngle * 180 / 3.141592653589793 / 360 * (2 * 3.141592653589793 * centerRadius))[$round](), dart.notNull(arcElements.radius) - dart.notNull(arcElements.innerRadius) - dart.notNull(this.labelPadding))[$round]();
          let leaderLineLength = dart.test(this.showLeaderLines) ? this.leaderLineStyleSpec.length : 0;
          let outsideArcWidth = (dart.notNull(drawBounds[$width]) / 2 - dart.notNull(bounds[$width]) - totalPadding - dart.notNull(leaderLineLength))[$round]();
          let labelElement = (t7 = graphicsFactory.createTextElement(label), t7.maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize, t7);
          let calculatedLabelPosition = this.labelPosition;
          if (dart.equals(calculatedLabelPosition, arc_label_decorator.ArcLabelPosition.auto)) {
            labelElement.textStyle = datumInsideLabelStyle;
            calculatedLabelPosition = insideArcWidth >= outsideArcWidth || dart.notNull(labelElement.measurement.horizontalSliceWidth) < insideArcWidth ? arc_label_decorator.ArcLabelPosition.inside : arc_label_decorator.ArcLabelPosition.outside;
          }
          if (dart.equals(calculatedLabelPosition, arc_label_decorator.ArcLabelPosition.inside)) {
            labelElement.textStyle = datumInsideLabelStyle;
            labelElement.maxWidth = insideArcWidth;
          } else {
            labelElement.textStyle = datumOutsideLabelStyle;
            labelElement.maxWidth = outsideArcWidth;
          }
          if (dart.notNull(labelElement.maxWidth) > 0) {
            if (dart.equals(calculatedLabelPosition, arc_label_decorator.ArcLabelPosition.inside)) {
              this[_drawInsideLabel](canvas, arcElements, labelElement, centerAngle);
            } else {
              let l = this[_drawOutsideLabel](canvas, drawBounds, arcElements, labelElement, centerAngle, previousOutsideLabelY, previousLabelLeftOfChart);
              if (l != null) {
                previousLabelLeftOfChart = core.bool._check(l[$_get](0));
                previousOutsideLabelY = core.num._check(l[$_get](1));
              }
            }
          }
        }
      }
      [_getTextStyle$](graphicsFactory, labelSpec) {
        let t8, t8$, t8$0, t8$1, t8$2, t8$3, t7;
        t7 = graphicsFactory.createTextPaint();
        t7.color = (t8$ = (t8 = labelSpec, t8 == null ? null : t8.color), t8$ == null ? color$.Color.black : t8$);
        t7.fontFamily = (t8$0 = labelSpec, t8$0 == null ? null : t8$0.fontFamily);
        t7.fontSize = (t8$2 = (t8$1 = labelSpec, t8$1 == null ? null : t8$1.fontSize), t8$2 == null ? 12 : t8$2);
        t7.lineHeight = (t8$3 = labelSpec, t8$3 == null ? null : t8$3.lineHeight);
        return t7;
      }
      [_getDatumStyle$](labelFn, datumIndex, graphicsFactory, opts) {
        let defaultStyle = opts && 'defaultStyle' in opts ? opts.defaultStyle : null;
        let styleSpec = labelFn != null ? labelFn(datumIndex) : null;
        return styleSpec != null ? this[_getTextStyle$](graphicsFactory, styleSpec) : defaultStyle;
      }
      [_drawInsideLabel](canvas, arcElements, labelElement, centerAngle) {
        let labelRadius = dart.notNull(arcElements.innerRadius) + (dart.notNull(arcElements.radius) - dart.notNull(arcElements.innerRadius)) / 2;
        let labelX = (dart.notNull(arcElements.center.x) + labelRadius * math.cos(centerAngle))[$round]();
        let labelY = (dart.notNull(arcElements.center.y) + labelRadius * math.sin(centerAngle) - dart.notNull(this.insideLabelStyleSpec.fontSize) / 2)[$round]();
        labelElement.textDirection = text_element.TextDirection.center;
        canvas.drawText(labelElement, labelX, labelY);
      }
      [_drawOutsideLabel](canvas, drawBounds, arcElements, labelElement, centerAngle, previousOutsideLabelY, previousLabelLeftOfChart) {
        let labelRadius = dart.notNull(arcElements.radius) + dart.notNull(this.leaderLineStyleSpec.length) / 2;
        let labelPoint = new (PointOfdouble()).new(dart.notNull(arcElements.center.x) + labelRadius * math.cos(centerAngle), dart.notNull(arcElements.center.y) + labelRadius * math.sin(centerAngle));
        let centerAbs = centerAngle[$abs]()[$modulo](2 * 3.141592653589793);
        let labelLeftOfChart = 3.141592653589793 / 2 < centerAbs && centerAbs < 3.141592653589793 * 3 / 2;
        let labelX = labelLeftOfChart ? (dart.notNull(labelPoint.x) - dart.notNull(this.labelPadding))[$round]() : (dart.notNull(labelPoint.x) + dart.notNull(this.labelPadding))[$round]();
        let labelY = (dart.notNull(labelPoint.y) - dart.notNull(this.outsideLabelStyleSpec.fontSize) / 2)[$round]();
        labelElement.textDirection = labelLeftOfChart ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
        if (dart.test(this[_detectOutsideLabelCollision](labelY, labelLeftOfChart, previousOutsideLabelY, previousLabelLeftOfChart))) {
          return null;
        }
        if (dart.test(this.showLeaderLines)) {
          let tailX = this[_drawLeaderLine](canvas, labelLeftOfChart, labelPoint, arcElements.radius, arcElements.center, centerAngle);
          labelX = (labelX + dart.notNull(tailX))[$round]();
          labelElement.maxWidth = (dart.notNull(labelElement.maxWidth) - dart.notNull(tailX))[$round]();
        }
        canvas.drawText(labelElement, labelX, labelY);
        return [labelLeftOfChart, labelY];
      }
      [_detectOutsideLabelCollision](labelY, labelLeftOfChart, previousOutsideLabelY, previousLabelLeftOfChart) {
        let collides = false;
        if (previousOutsideLabelY != null && dart.equals(labelLeftOfChart, previousLabelLeftOfChart)) {
          if (dart.notNull(labelY) > dart.notNull(previousOutsideLabelY)) {
            if (dart.notNull(labelY) - dart.notNull(this.outsideLabelStyleSpec.fontSize) <= dart.notNull(previousOutsideLabelY)) {
              collides = true;
            }
          } else {
            if (dart.notNull(labelY) + dart.notNull(this.outsideLabelStyleSpec.fontSize) >= dart.notNull(previousOutsideLabelY)) {
              collides = true;
            }
          }
        }
        return collides;
      }
      [_drawLeaderLine](canvas, labelLeftOfChart, labelPoint, radius, arcCenterPoint, centerAngle) {
        let tailX = (dart.test(labelLeftOfChart) ? -1 : 1) * dart.notNull(this.leaderLineStyleSpec.length);
        let leaderLineTailPoint = new (PointOfdouble()).new(dart.notNull(labelPoint.x) + tailX, labelPoint.y);
        let centerRadius = dart.notNull(radius) - dart.notNull(this.leaderLineStyleSpec.length) / 2;
        let leaderLineStartPoint = new (PointOfdouble()).new(dart.notNull(arcCenterPoint.x) + centerRadius * math.cos(centerAngle), dart.notNull(arcCenterPoint.y) + centerRadius * math.sin(centerAngle));
        canvas.drawLine({points: JSArrayOfPointOfnum().of([leaderLineStartPoint, labelPoint, leaderLineTailPoint]), stroke: this.leaderLineStyleSpec.color, strokeWidthPx: this.leaderLineStyleSpec.thickness});
        return tailX;
      }
    }
    (ArcLabelDecorator.new = function(opts) {
      let t7, t7$, t7$0;
      let insideLabelStyleSpec = opts && 'insideLabelStyleSpec' in opts ? opts.insideLabelStyleSpec : null;
      let outsideLabelStyleSpec = opts && 'outsideLabelStyleSpec' in opts ? opts.outsideLabelStyleSpec : null;
      let leaderLineStyleSpec = opts && 'leaderLineStyleSpec' in opts ? opts.leaderLineStyleSpec : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : C217 || CT.C217;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : 5;
      let showLeaderLines = opts && 'showLeaderLines' in opts ? opts.showLeaderLines : true;
      let leaderLineColor = opts && 'leaderLineColor' in opts ? opts.leaderLineColor : null;
      this[renderAbove$] = true;
      this[labelPosition$0] = labelPosition;
      this[labelPadding$1] = labelPadding;
      this[showLeaderLines$] = showLeaderLines;
      this[insideLabelStyleSpec$0] = (t7 = insideLabelStyleSpec, t7 == null ? arc_label_decorator.ArcLabelDecorator._defaultInsideLabelStyle : t7);
      this[outsideLabelStyleSpec$0] = (t7$ = outsideLabelStyleSpec, t7$ == null ? arc_label_decorator.ArcLabelDecorator._defaultOutsideLabelStyle : t7$);
      this[leaderLineStyleSpec$] = (t7$0 = leaderLineStyleSpec, t7$0 == null ? arc_label_decorator.ArcLabelDecorator._defaultLeaderLineStyle : t7$0);
      ArcLabelDecorator.__proto__.new.call(this);
      ;
    }).prototype = ArcLabelDecorator.prototype;
    dart.addTypeTests(ArcLabelDecorator);
    ArcLabelDecorator.prototype[_is_ArcLabelDecorator_default] = true;
    dart.setMethodSignature(ArcLabelDecorator, () => ({
      __proto__: dart.getMethods(ArcLabelDecorator.__proto__),
      decorate: dart.fnType(dart.void, [core.Object, chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), rtl: core.bool}, {}),
      [_getTextStyle$]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec]),
      [_getDatumStyle$]: dart.fnType(text_style.TextStyle, [dart.fnType(axis_spec.TextStyleSpec, [core.int]), core.int, graphics_factory.GraphicsFactory], {defaultStyle: text_style.TextStyle}, {}),
      [_drawInsideLabel]: dart.fnType(dart.void, [chart_canvas.ChartCanvas, arc_renderer.ArcRendererElementList$(D), text_element.TextElement, core.double]),
      [_drawOutsideLabel]: dart.fnType(core.List, [chart_canvas.ChartCanvas, math.Rectangle$(core.num), arc_renderer.ArcRendererElementList$(D), text_element.TextElement, core.double, core.num, core.bool]),
      [_detectOutsideLabelCollision]: dart.fnType(core.bool, [core.num, core.bool, core.num, core.bool]),
      [_drawLeaderLine]: dart.fnType(core.double, [chart_canvas.ChartCanvas, core.bool, math.Point$(core.num), core.double, math.Point$(core.double), core.double])
    }));
    dart.setLibraryUri(ArcLabelDecorator, "package:charts_common/src/chart/pie/arc_label_decorator.dart");
    dart.setFieldSignature(ArcLabelDecorator, () => ({
      __proto__: dart.getFields(ArcLabelDecorator.__proto__),
      insideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      outsideLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      leaderLineStyleSpec: dart.finalFieldType(arc_label_decorator.ArcLabelLeaderLineStyleSpec),
      labelPosition: dart.finalFieldType(arc_label_decorator.ArcLabelPosition),
      labelPadding: dart.finalFieldType(core.int),
      showLeaderLines: dart.finalFieldType(core.bool),
      renderAbove: dart.finalFieldType(core.bool)
    }));
    return ArcLabelDecorator;
  });
  arc_label_decorator.ArcLabelDecorator = arc_label_decorator.ArcLabelDecorator$();
  dart.defineLazy(arc_label_decorator.ArcLabelDecorator, {
    /*arc_label_decorator.ArcLabelDecorator._defaultLabelPosition*/get _defaultLabelPosition() {
      return C217 || CT.C217;
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultInsideLabelStyle*/get _defaultInsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.white});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultOutsideLabelStyle*/get _defaultOutsideLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultLeaderLineStyle*/get _defaultLeaderLineStyle() {
      return new arc_label_decorator.ArcLabelLeaderLineStyleSpec.new({length: 20.0, thickness: 1.0, color: style_factory.StyleFactory.style.arcLabelOutsideLeaderLine});
    },
    /*arc_label_decorator.ArcLabelDecorator._defaultShowLeaderLines*/get _defaultShowLeaderLines() {
      return true;
    }
  });
  dart.addTypeTests(arc_label_decorator.ArcLabelDecorator, _is_ArcLabelDecorator_default);
  let C218;
  let C219;
  let C220;
  arc_label_decorator.ArcLabelPosition = class ArcLabelPosition extends core.Object {
    toString() {
      return this[_name$18];
    }
  };
  (arc_label_decorator.ArcLabelPosition.new = function(index, _name) {
    this.index = index;
    this[_name$18] = _name;
    ;
  }).prototype = arc_label_decorator.ArcLabelPosition.prototype;
  dart.addTypeTests(arc_label_decorator.ArcLabelPosition);
  dart.setLibraryUri(arc_label_decorator.ArcLabelPosition, "package:charts_common/src/chart/pie/arc_label_decorator.dart");
  dart.setFieldSignature(arc_label_decorator.ArcLabelPosition, () => ({
    __proto__: dart.getFields(arc_label_decorator.ArcLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$18]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(arc_label_decorator.ArcLabelPosition, ['toString']);
  arc_label_decorator.ArcLabelPosition.auto = C217 || CT.C217;
  arc_label_decorator.ArcLabelPosition.outside = C218 || CT.C218;
  arc_label_decorator.ArcLabelPosition.inside = C219 || CT.C219;
  arc_label_decorator.ArcLabelPosition.values = C220 || CT.C220;
  const color$6 = dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.color");
  const length$ = dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.length");
  const thickness$0 = dart.privateName(arc_label_decorator, "ArcLabelLeaderLineStyleSpec.thickness");
  arc_label_decorator.ArcLabelLeaderLineStyleSpec = class ArcLabelLeaderLineStyleSpec extends core.Object {
    get color() {
      return this[color$6];
    }
    set color(value) {
      super.color = value;
    }
    get length() {
      return this[length$];
    }
    set length(value) {
      super.length = value;
    }
    get thickness() {
      return this[thickness$0];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return arc_label_decorator.ArcLabelLeaderLineStyleSpec.is(other) && dart.equals(this.color, other.color) && this.thickness == other.thickness && this.length == other.length;
    }
    get hashCode() {
      let t7, t7$, t7$0, t7$1, t7$2, t7$3;
      let hashcode = (t7$ = (t7 = this.color, t7 == null ? null : dart.hashCode(t7)), t7$ == null ? 0 : t7$);
      hashcode = (t7$1 = dart.notNull(hashcode) * 37 + dart.notNull((t7$0 = this.thickness, t7$0 == null ? null : dart.hashCode(t7$0))), t7$1 === null ? 0 : t7$1);
      hashcode = (t7$3 = dart.notNull(hashcode) * 37 + dart.notNull((t7$2 = this.length, t7$2 == null ? null : dart.hashCode(t7$2))), t7$3 === null ? 0 : t7$3);
      return hashcode;
    }
  };
  (arc_label_decorator.ArcLabelLeaderLineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let length = opts && 'length' in opts ? opts.length : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[color$6] = color;
    this[length$] = length;
    this[thickness$0] = thickness;
    ;
  }).prototype = arc_label_decorator.ArcLabelLeaderLineStyleSpec.prototype;
  dart.addTypeTests(arc_label_decorator.ArcLabelLeaderLineStyleSpec);
  dart.setMethodSignature(arc_label_decorator.ArcLabelLeaderLineStyleSpec, () => ({
    __proto__: dart.getMethods(arc_label_decorator.ArcLabelLeaderLineStyleSpec.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(arc_label_decorator.ArcLabelLeaderLineStyleSpec, "package:charts_common/src/chart/pie/arc_label_decorator.dart");
  dart.setFieldSignature(arc_label_decorator.ArcLabelLeaderLineStyleSpec, () => ({
    __proto__: dart.getFields(arc_label_decorator.ArcLabelLeaderLineStyleSpec.__proto__),
    color: dart.finalFieldType(color$.Color),
    length: dart.finalFieldType(core.double),
    thickness: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(arc_label_decorator.ArcLabelLeaderLineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(arc_label_decorator.ArcLabelLeaderLineStyleSpec, ['hashCode']);
  const _showMeasures$ = dart.privateName(datum_legend, "_showMeasures");
  const _is_DatumLegend_default = Symbol('_is_DatumLegend_default');
  datum_legend.DatumLegend$ = dart.generic(D => {
    let PerDatumLegendEntryGeneratorOfD = () => (PerDatumLegendEntryGeneratorOfD = dart.constFn(per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$(D)))();
    class DatumLegend extends legend.Legend$(D) {
      get showMeasures() {
        return this[_showMeasures$];
      }
      set showMeasures(showMeasures) {
        let t7;
        this[_showMeasures$] = (t7 = showMeasures, t7 == null ? false : t7);
      }
      get legendDefaultMeasure() {
        return this.legendEntryGenerator.legendDefaultMeasure;
      }
      set legendDefaultMeasure(legendDefaultMeasure) {
        let t7;
        this.legendEntryGenerator.legendDefaultMeasure = (t7 = legendDefaultMeasure, t7 == null ? legend_entry_generator.LegendDefaultMeasure.none : t7);
      }
      set measureFormatter(formatter) {
        let t7;
        this.legendEntryGenerator.measureFormatter = (t7 = formatter, t7 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t7);
      }
      set secondaryMeasureFormatter(formatter) {
        let t7;
        this.legendEntryGenerator.secondaryMeasureFormatter = (t7 = formatter, t7 == null ? dart.bind(this, 'defaultLegendMeasureFormatter') : t7);
      }
    }
    (DatumLegend.new = function(opts) {
      let t7, t7$;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let legendEntryGenerator = opts && 'legendEntryGenerator' in opts ? opts.legendEntryGenerator : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let secondaryMeasureFormatter = opts && 'secondaryMeasureFormatter' in opts ? opts.secondaryMeasureFormatter : null;
      let showMeasures = opts && 'showMeasures' in opts ? opts.showMeasures : null;
      let legendDefaultMeasure = opts && 'legendDefaultMeasure' in opts ? opts.legendDefaultMeasure : null;
      let entryTextStyle = opts && 'entryTextStyle' in opts ? opts.entryTextStyle : null;
      this[_showMeasures$] = null;
      DatumLegend.__proto__.new.call(this, {selectionModelType: (t7 = selectionModelType, t7 == null ? selection_model.SelectionModelType.info : t7), legendEntryGenerator: (t7$ = legendEntryGenerator, t7$ == null ? new (PerDatumLegendEntryGeneratorOfD()).new() : t7$), entryTextStyle: entryTextStyle});
      this.showMeasures = showMeasures;
      this.legendDefaultMeasure = legendDefaultMeasure;
      this.measureFormatter = measureFormatter;
      this.secondaryMeasureFormatter = secondaryMeasureFormatter;
    }).prototype = DatumLegend.prototype;
    dart.addTypeTests(DatumLegend);
    DatumLegend.prototype[_is_DatumLegend_default] = true;
    dart.setGetterSignature(DatumLegend, () => ({
      __proto__: dart.getGetters(DatumLegend.__proto__),
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure
    }));
    dart.setSetterSignature(DatumLegend, () => ({
      __proto__: dart.getSetters(DatumLegend.__proto__),
      showMeasures: core.bool,
      legendDefaultMeasure: legend_entry_generator.LegendDefaultMeasure,
      measureFormatter: dart.fnType(core.String, [core.num]),
      secondaryMeasureFormatter: dart.fnType(core.String, [core.num])
    }));
    dart.setLibraryUri(DatumLegend, "package:charts_common/src/chart/common/behavior/legend/datum_legend.dart");
    dart.setFieldSignature(DatumLegend, () => ({
      __proto__: dart.getFields(DatumLegend.__proto__),
      [_showMeasures$]: dart.fieldType(core.bool)
    }));
    return DatumLegend;
  });
  datum_legend.DatumLegend = datum_legend.DatumLegend$();
  dart.addTypeTests(datum_legend.DatumLegend, _is_DatumLegend_default);
  const _updateFromSeriesList$ = dart.privateName(per_datum_legend_entry_generator, "_updateFromSeriesList");
  const _updateFromSelection$ = dart.privateName(per_datum_legend_entry_generator, "_updateFromSelection");
  const _resetLegendEntryMeasures$ = dart.privateName(per_datum_legend_entry_generator, "_resetLegendEntryMeasures");
  const _getFormattedMeasureValue = dart.privateName(per_datum_legend_entry_generator, "_getFormattedMeasureValue");
  const _is_PerDatumLegendEntryGenerator_default = Symbol('_is_PerDatumLegendEntryGenerator_default');
  const entryTextStyle$ = dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.entryTextStyle");
  const measureFormatter$0 = dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.measureFormatter");
  const secondaryMeasureFormatter$ = dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.secondaryMeasureFormatter");
  const showOverlaySeries$ = dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.showOverlaySeries");
  const legendDefaultMeasure$ = dart.privateName(per_datum_legend_entry_generator, "PerDatumLegendEntryGenerator.legendDefaultMeasure");
  per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let LegendEntryOfD = () => (LegendEntryOfD = dart.constFn(legend_entry.LegendEntry$(D)))();
    let JSArrayOfLegendEntryOfD = () => (JSArrayOfLegendEntryOfD = dart.constFn(_interceptors.JSArray$(LegendEntryOfD())))();
    let ListOfLegendEntryOfD = () => (ListOfLegendEntryOfD = dart.constFn(core.List$(LegendEntryOfD())))();
    let SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ImmutableSeriesOfDTobool = () => (ImmutableSeriesOfDTobool = dart.constFn(dart.fnType(core.bool, [ImmutableSeriesOfD()])))();
    class PerDatumLegendEntryGenerator extends core.Object {
      get entryTextStyle() {
        return this[entryTextStyle$];
      }
      set entryTextStyle(value) {
        this[entryTextStyle$] = value;
      }
      get measureFormatter() {
        return this[measureFormatter$0];
      }
      set measureFormatter(value) {
        this[measureFormatter$0] = value;
      }
      get secondaryMeasureFormatter() {
        return this[secondaryMeasureFormatter$];
      }
      set secondaryMeasureFormatter(value) {
        this[secondaryMeasureFormatter$] = value;
      }
      get showOverlaySeries() {
        return this[showOverlaySeries$];
      }
      set showOverlaySeries(value) {
        this[showOverlaySeries$] = value;
      }
      get legendDefaultMeasure() {
        return this[legendDefaultMeasure$];
      }
      set legendDefaultMeasure(value) {
        this[legendDefaultMeasure$] = value;
      }
      getLegendEntries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let legendEntries = JSArrayOfLegendEntryOfD().of([]);
        let series = seriesList[$_get](0);
        for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
          legendEntries[$add](new (LegendEntryOfD()).new(series, dart.toString(series.domainFn(i)), {color: series.colorFn(i), datum: series.data[$_get](i), datumIndex: i, textStyle: this.entryTextStyle}));
        }
        if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
          this[_updateFromSeriesList$](legendEntries, seriesList);
        }
        return legendEntries;
      }
      updateLegendEntries(legendEntries, selectionModel, seriesList) {
        ListOfLegendEntryOfD()._check(legendEntries);
        SelectionModelOfD()._check(selectionModel);
        ListOfMutableSeriesOfD()._check(seriesList);
        if (dart.test(selectionModel.hasAnySelection)) {
          this[_updateFromSelection$](legendEntries, selectionModel);
        } else {
          if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
            this[_updateFromSeriesList$](legendEntries, seriesList);
          } else {
            this[_resetLegendEntryMeasures$](legendEntries);
          }
        }
      }
      [_updateFromSelection$](legendEntries, selectionModel) {
        if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
          for (let entry of legendEntries) {
            let series = entry.series;
            let measure = series.measureFn(entry.datumIndex);
            entry.value = measure[$toDouble]();
            entry.formattedValue = this[_getFormattedMeasureValue](series, measure);
            entry.isSelected = selectionModel.selectedSeries[$any](dart.fn(selectedSeries => series.id == selectedSeries.id, ImmutableSeriesOfDTobool()));
          }
        }
      }
      [_resetLegendEntryMeasures$](legendEntries) {
        for (let entry of legendEntries) {
          entry.value = null;
          entry.formattedValue = null;
          entry.isSelected = false;
        }
      }
      [_updateFromSeriesList$](legendEntries, seriesList) {
        if (!dart.equals(this.legendDefaultMeasure, legend_entry_generator.LegendDefaultMeasure.none)) {
          for (let entry of legendEntries) {
            let series = entry.series;
            let measure = series.measureFn(entry.datumIndex);
            entry.value = measure[$toDouble]();
            entry.formattedValue = this[_getFormattedMeasureValue](series, measure);
            entry.isSelected = false;
          }
        }
      }
      [_getFormattedMeasureValue](series, measure) {
        return series.getAttr(core.String, axis$.measureAxisIdKey) === "secondaryMeasureAxisId" ? this.secondaryMeasureFormatter(measure) : this.measureFormatter(measure);
      }
      _equals(other) {
        if (other == null) return false;
        return per_datum_legend_entry_generator.PerDatumLegendEntryGenerator.is(other) && dart.equals(this.measureFormatter, other.measureFormatter) && dart.equals(this.secondaryMeasureFormatter, other.secondaryMeasureFormatter) && dart.equals(this.legendDefaultMeasure, other.legendDefaultMeasure) && dart.equals(this.entryTextStyle, other.entryTextStyle);
      }
      get hashCode() {
        let t7, t7$;
        let hashcode = (t7$ = (t7 = this.measureFormatter, t7 == null ? null : dart.hashCode(t7)), t7$ == null ? 0 : t7$);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.secondaryMeasureFormatter));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.legendDefaultMeasure));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.entryTextStyle));
        return hashcode;
      }
    }
    (PerDatumLegendEntryGenerator.new = function() {
      this[entryTextStyle$] = null;
      this[measureFormatter$0] = null;
      this[secondaryMeasureFormatter$] = null;
      this[showOverlaySeries$] = null;
      this[legendDefaultMeasure$] = null;
      ;
    }).prototype = PerDatumLegendEntryGenerator.prototype;
    dart.addTypeTests(PerDatumLegendEntryGenerator);
    PerDatumLegendEntryGenerator.prototype[_is_PerDatumLegendEntryGenerator_default] = true;
    PerDatumLegendEntryGenerator[dart.implements] = () => [legend_entry_generator.LegendEntryGenerator$(D)];
    dart.setMethodSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getMethods(PerDatumLegendEntryGenerator.__proto__),
      getLegendEntries: dart.fnType(core.List$(legend_entry.LegendEntry$(D)), [core.Object]),
      updateLegendEntries: dart.fnType(dart.void, [core.Object, core.Object, core.Object]),
      [_updateFromSelection$]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), selection_model.SelectionModel$(D)]),
      [_resetLegendEntryMeasures$]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D))]),
      [_updateFromSeriesList$]: dart.fnType(dart.void, [core.List$(legend_entry.LegendEntry$(D)), core.List$(processed_series.MutableSeries$(D))]),
      [_getFormattedMeasureValue]: dart.fnType(core.String, [processed_series.ImmutableSeries, core.num]),
      _equals: dart.fnType(core.bool, [core.Object]),
      [$_equals]: dart.fnType(core.bool, [core.Object])
    }));
    dart.setLibraryUri(PerDatumLegendEntryGenerator, "package:charts_common/src/chart/common/behavior/legend/per_datum_legend_entry_generator.dart");
    dart.setFieldSignature(PerDatumLegendEntryGenerator, () => ({
      __proto__: dart.getFields(PerDatumLegendEntryGenerator.__proto__),
      entryTextStyle: dart.fieldType(axis_spec.TextStyleSpec),
      measureFormatter: dart.fieldType(dart.fnType(core.String, [core.num])),
      secondaryMeasureFormatter: dart.fieldType(dart.fnType(core.String, [core.num])),
      showOverlaySeries: dart.fieldType(core.bool),
      legendDefaultMeasure: dart.fieldType(legend_entry_generator.LegendDefaultMeasure)
    }));
    dart.defineExtensionMethods(PerDatumLegendEntryGenerator, ['_equals']);
    dart.defineExtensionAccessors(PerDatumLegendEntryGenerator, ['hashCode']);
    return PerDatumLegendEntryGenerator;
  });
  per_datum_legend_entry_generator.PerDatumLegendEntryGenerator = per_datum_legend_entry_generator.PerDatumLegendEntryGenerator$();
  dart.addTypeTests(per_datum_legend_entry_generator.PerDatumLegendEntryGenerator, _is_PerDatumLegendEntryGenerator_default);
  let C221;
  const threshold$ = dart.privateName(bucketing_axis_spec, "BucketingAxisSpec.threshold");
  const showBucket$ = dart.privateName(bucketing_axis_spec, "BucketingAxisSpec.showBucket");
  bucketing_axis_spec.BucketingAxisSpec = class BucketingAxisSpec extends numeric_axis_spec.NumericAxisSpec {
    get threshold() {
      return this[threshold$];
    }
    set threshold(value) {
      super.threshold = value;
    }
    get showBucket() {
      return this[showBucket$];
    }
    set showBucket(value) {
      super.showBucket = value;
    }
    configure(axis, context, graphicsFactory) {
      AxisOfnum()._check(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.NumericAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(this.viewport);
      }
      if (bucketing_numeric_axis.BucketingNumericAxis.is(axis) && this.threshold != null) {
        axis.threshold = this.threshold;
      }
      if (bucketing_numeric_axis.BucketingNumericAxis.is(axis) && this.showBucket != null) {
        axis.showBucket = this.showBucket;
      }
    }
    createAxis() {
      return new bucketing_numeric_axis.BucketingNumericAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || bucketing_axis_spec.BucketingAxisSpec.is(other) && dart.equals(this.showBucket, other.showBucket) && this.threshold == other.threshold && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.showBucket);
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.threshold);
      return hashcode;
    }
  };
  (bucketing_axis_spec.BucketingAxisSpec.new = function(opts) {
    let t7, t7$, t7$0, t7$1;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let showBucket = opts && 'showBucket' in opts ? opts.showBucket : null;
    let threshold = opts && 'threshold' in opts ? opts.threshold : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[threshold$] = threshold;
    this[showBucket$] = (t7 = showBucket, t7 == null ? true : t7);
    bucketing_axis_spec.BucketingAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: (t7$ = tickProviderSpec, t7$ == null ? C221 || CT.C221 : t7$), tickFormatterSpec: (t7$0 = tickFormatterSpec, t7$0 == null ? new numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat(new intl.NumberFormat.percentPattern()) : t7$0), showAxisLine: showAxisLine, viewport: (t7$1 = viewport, t7$1 == null ? C131 || CT.C131 : t7$1)});
    ;
  }).prototype = bucketing_axis_spec.BucketingAxisSpec.prototype;
  dart.addTypeTests(bucketing_axis_spec.BucketingAxisSpec);
  dart.setMethodSignature(bucketing_axis_spec.BucketingAxisSpec, () => ({
    __proto__: dart.getMethods(bucketing_axis_spec.BucketingAxisSpec.__proto__),
    createAxis: dart.fnType(bucketing_numeric_axis.BucketingNumericAxis, [])
  }));
  dart.setLibraryUri(bucketing_axis_spec.BucketingAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/bucketing_axis_spec.dart");
  dart.setFieldSignature(bucketing_axis_spec.BucketingAxisSpec, () => ({
    __proto__: dart.getFields(bucketing_axis_spec.BucketingAxisSpec.__proto__),
    threshold: dart.finalFieldType(core.num),
    showBucket: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(bucketing_axis_spec.BucketingAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(bucketing_axis_spec.BucketingAxisSpec, ['hashCode']);
  bucketing_axis_spec.BucketingNumericTickProviderSpec = class BucketingNumericTickProviderSpec extends numeric_axis_spec.BasicNumericTickProviderSpec {
    createTickProvider(context) {
      let t7, t7$, t7$0, t7$1, t7$2;
      let provider = (t7 = new bucketing_numeric_tick_provider.BucketingNumericTickProvider.new(), t7.zeroBound = this.zeroBound, t7.dataIsInWholeNumbers = this.dataIsInWholeNumbers, t7);
      if (this.desiredMinTickCount != null || this.desiredMaxTickCount != null || this.desiredTickCount != null) {
        provider.setTickCount((t7$0 = (t7$ = this.desiredMaxTickCount, t7$ == null ? this.desiredTickCount : t7$), t7$0 == null ? 10 : t7$0), (t7$2 = (t7$1 = this.desiredMinTickCount, t7$1 == null ? this.desiredTickCount : t7$1), t7$2 == null ? 2 : t7$2));
      }
      return provider;
    }
  };
  (bucketing_axis_spec.BucketingNumericTickProviderSpec.new = function(opts) {
    let t7, t7$;
    let zeroBound = opts && 'zeroBound' in opts ? opts.zeroBound : null;
    let dataIsInWholeNumbers = opts && 'dataIsInWholeNumbers' in opts ? opts.dataIsInWholeNumbers : null;
    let desiredTickCount = opts && 'desiredTickCount' in opts ? opts.desiredTickCount : null;
    let desiredMinTickCount = opts && 'desiredMinTickCount' in opts ? opts.desiredMinTickCount : null;
    let desiredMaxTickCount = opts && 'desiredMaxTickCount' in opts ? opts.desiredMaxTickCount : null;
    bucketing_axis_spec.BucketingNumericTickProviderSpec.__proto__.new.call(this, {zeroBound: (t7 = zeroBound, t7 == null ? true : t7), dataIsInWholeNumbers: (t7$ = dataIsInWholeNumbers, t7$ == null ? false : t7$), desiredTickCount: desiredTickCount, desiredMinTickCount: desiredMinTickCount, desiredMaxTickCount: desiredMaxTickCount});
    ;
  }).prototype = bucketing_axis_spec.BucketingNumericTickProviderSpec.prototype;
  dart.addTypeTests(bucketing_axis_spec.BucketingNumericTickProviderSpec);
  dart.setMethodSignature(bucketing_axis_spec.BucketingNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(bucketing_axis_spec.BucketingNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(bucketing_numeric_tick_provider.BucketingNumericTickProvider, [chart_context.ChartContext])
  }));
  dart.setLibraryUri(bucketing_axis_spec.BucketingNumericTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/bucketing_axis_spec.dart");
  const _threshold$ = dart.privateName(bucketing_numeric_axis, "_threshold");
  const _showBucket$ = dart.privateName(bucketing_numeric_axis, "_showBucket");
  bucketing_numeric_axis.BucketingNumericAxis = class BucketingNumericAxis extends axis$.NumericAxis {
    set threshold(threshold) {
      this[_threshold$] = threshold;
      bucketing_numeric_tick_provider.BucketingNumericTickProvider.as(this.tickProvider).threshold = threshold;
    }
    set showBucket(showBucket) {
      this[_showBucket$] = showBucket;
      bucketing_numeric_tick_provider.BucketingNumericTickProvider.as(this.tickProvider).showBucket = showBucket;
    }
    getLocation(domain) {
      core.num._check(domain);
      if (domain == null) {
        return null;
      } else if (this[_threshold$] != null && dart.notNull(domain) < dart.notNull(this[_threshold$])) {
        return dart.test(this[_showBucket$]) ? this.scale._get(dart.notNull(this[_threshold$]) / 2) : this.scale._get(0.0);
      } else {
        return this.scale._get(domain);
      }
    }
  };
  (bucketing_numeric_axis.BucketingNumericAxis.new = function() {
    this[_threshold$] = null;
    this[_showBucket$] = null;
    bucketing_numeric_axis.BucketingNumericAxis.__proto__.new.call(this, {tickProvider: new bucketing_numeric_tick_provider.BucketingNumericTickProvider.new()});
    ;
  }).prototype = bucketing_numeric_axis.BucketingNumericAxis.prototype;
  dart.addTypeTests(bucketing_numeric_axis.BucketingNumericAxis);
  dart.setSetterSignature(bucketing_numeric_axis.BucketingNumericAxis, () => ({
    __proto__: dart.getSetters(bucketing_numeric_axis.BucketingNumericAxis.__proto__),
    threshold: core.num,
    showBucket: core.bool
  }));
  dart.setLibraryUri(bucketing_numeric_axis.BucketingNumericAxis, "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_axis.dart");
  dart.setFieldSignature(bucketing_numeric_axis.BucketingNumericAxis, () => ({
    __proto__: dart.getFields(bucketing_numeric_axis.BucketingNumericAxis.__proto__),
    [_threshold$]: dart.fieldType(core.num),
    [_showBucket$]: dart.fieldType(core.bool)
  }));
  performance.Performance = class Performance extends core.Object {};
  (performance.Performance.new = function() {
    ;
  }).prototype = performance.Performance.prototype;
  dart.addTypeTests(performance.Performance);
  dart.setLibraryUri(performance.Performance, "package:charts_common/src/common/performance.dart");
  dart.defineLazy(performance.Performance, {
    /*performance.Performance.time*/get time() {
      return dart.fn(_ => {
      }, StringToNull());
    },
    set time(_) {},
    /*performance.Performance.timeEnd*/get timeEnd() {
      return dart.fn(_ => {
      }, StringToNull());
    },
    set timeEnd(_) {}
  });
  const _chart$8 = dart.privateName(sliding_viewport, "_chart");
  const _selectionChanged$0 = dart.privateName(sliding_viewport, "_selectionChanged");
  const _is_SlidingViewport_default = Symbol('_is_SlidingViewport_default');
  const selectionModelType$3 = dart.privateName(sliding_viewport, "SlidingViewport.selectionModelType");
  sliding_viewport.SlidingViewport$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class SlidingViewport extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$3];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      [_selectionChanged$0](selectionModel) {
        if (dart.equals(selectionModel.hasAnySelection, false)) {
          return;
        }
        let domainAxis = this[_chart$8].domainAxis;
        let selectedDatum = selectionModel.selectedDatum[$first];
        let domainLocation = domainAxis.getLocation(selectedDatum.series.domainFn(selectedDatum.index));
        let viewportCenter = dart.notNull(domainAxis.range.start) + dart.notNull(domainAxis.range.width) / 2;
        let translatePx = dart.notNull(domainAxis.viewportTranslatePx) + (viewportCenter - dart.notNull(domainLocation));
        domainAxis.setViewportSettings(domainAxis.viewportScalingFactor, translatePx);
        this[_chart$8].redraw();
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/sliding_viewport.dart", 59, 12, "chart is CartesianChart");
        this[_chart$8] = CartesianChartOfD().as(chart);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, _selectionChanged$0));
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, _selectionChanged$0));
      }
      get role() {
        return "slidingViewport-" + dart.str(dart.toString(this.selectionModelType));
      }
    }
    (SlidingViewport.new = function(selectionModelType) {
      if (selectionModelType === void 0) selectionModelType = C136 || CT.C136;
      this[_chart$8] = null;
      this[selectionModelType$3] = selectionModelType;
      ;
    }).prototype = SlidingViewport.prototype;
    dart.addTypeTests(SlidingViewport);
    SlidingViewport.prototype[_is_SlidingViewport_default] = true;
    SlidingViewport[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(SlidingViewport, () => ({
      __proto__: dart.getMethods(SlidingViewport.__proto__),
      [_selectionChanged$0]: dart.fnType(dart.void, [selection_model.SelectionModel]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(SlidingViewport, () => ({
      __proto__: dart.getGetters(SlidingViewport.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(SlidingViewport, "package:charts_common/src/chart/common/behavior/sliding_viewport.dart");
    dart.setFieldSignature(SlidingViewport, () => ({
      __proto__: dart.getFields(SlidingViewport.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      [_chart$8]: dart.fieldType(cartesian_chart.CartesianChart$(D))
    }));
    return SlidingViewport;
  });
  sliding_viewport.SlidingViewport = sliding_viewport.SlidingViewport$();
  dart.addTypeTests(sliding_viewport.SlidingViewport, _is_SlidingViewport_default);
  const _is_BarTargetLineRendererConfig_default = Symbol('_is_BarTargetLineRendererConfig_default');
  const overDrawOuterPx$ = dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.overDrawOuterPx");
  const overDrawPx$ = dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.overDrawPx");
  const roundEndCaps$0 = dart.privateName(bar_target_line_renderer_config, "BarTargetLineRendererConfig.roundEndCaps");
  bar_target_line_renderer_config.BarTargetLineRendererConfig$ = dart.generic(D => {
    let BarTargetLineRendererOfD = () => (BarTargetLineRendererOfD = dart.constFn(bar_target_line_renderer.BarTargetLineRenderer$(D)))();
    class BarTargetLineRendererConfig extends base_bar_renderer_config.BaseBarRendererConfig$(D) {
      get overDrawOuterPx() {
        return this[overDrawOuterPx$];
      }
      set overDrawOuterPx(value) {
        super.overDrawOuterPx = value;
      }
      get overDrawPx() {
        return this[overDrawPx$];
      }
      set overDrawPx(value) {
        super.overDrawPx = value;
      }
      get roundEndCaps() {
        return this[roundEndCaps$0];
      }
      set roundEndCaps(value) {
        super.roundEndCaps = value;
      }
      build() {
        return BarTargetLineRendererOfD().new({config: this, rendererId: this.customRendererId});
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!bar_target_line_renderer_config.BarTargetLineRendererConfig.is(other)) {
          return false;
        }
        return dart.equals(dart.dload(other, 'overDrawOuterPx'), this.overDrawOuterPx) && dart.equals(dart.dload(other, 'overDrawPx'), this.overDrawPx) && dart.equals(dart.dload(other, 'roundEndCaps'), this.roundEndCaps) && super._equals(other);
      }
      get hashCode() {
        let t7, t7$, t7$0, t7$1, t7$2, t7$3;
        let hash = 1;
        hash = hash * 31 + dart.notNull((t7$ = (t7 = this.overDrawOuterPx, t7 == null ? null : dart.hashCode(t7)), t7$ == null ? 0 : t7$));
        hash = hash * 31 + dart.notNull((t7$1 = (t7$0 = this.overDrawPx, t7$0 == null ? null : dart.hashCode(t7$0)), t7$1 == null ? 0 : t7$1));
        hash = hash * 31 + dart.notNull((t7$3 = (t7$2 = this.roundEndCaps, t7$2 == null ? null : dart.hashCode(t7$2)), t7$3 == null ? 0 : t7$3));
        return hash;
      }
    }
    (BarTargetLineRendererConfig.new = function(opts) {
      let t7;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : C161 || CT.C161;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 15;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let overDrawOuterPx = opts && 'overDrawOuterPx' in opts ? opts.overDrawOuterPx : null;
      let overDrawPx = opts && 'overDrawPx' in opts ? opts.overDrawPx : 0;
      let roundEndCaps = opts && 'roundEndCaps' in opts ? opts.roundEndCaps : true;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 3;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[overDrawOuterPx$] = overDrawOuterPx;
      this[overDrawPx$] = overDrawPx;
      this[roundEndCaps$0] = roundEndCaps;
      BarTargetLineRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, dashPattern: dashPattern, groupingType: base_bar_renderer_config.BarGroupingType._check(groupingType), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, strokeWidthPx: strokeWidthPx, symbolRenderer: (t7 = symbolRenderer, t7 == null ? new symbol_renderer.LineSymbolRenderer.new() : t7), weightPattern: weightPattern});
      ;
    }).prototype = BarTargetLineRendererConfig.prototype;
    dart.addTypeTests(BarTargetLineRendererConfig);
    BarTargetLineRendererConfig.prototype[_is_BarTargetLineRendererConfig_default] = true;
    dart.setMethodSignature(BarTargetLineRendererConfig, () => ({
      __proto__: dart.getMethods(BarTargetLineRendererConfig.__proto__),
      build: dart.fnType(bar_target_line_renderer.BarTargetLineRenderer$(D), [])
    }));
    dart.setLibraryUri(BarTargetLineRendererConfig, "package:charts_common/src/chart/bar/bar_target_line_renderer_config.dart");
    dart.setFieldSignature(BarTargetLineRendererConfig, () => ({
      __proto__: dart.getFields(BarTargetLineRendererConfig.__proto__),
      overDrawOuterPx: dart.finalFieldType(core.int),
      overDrawPx: dart.finalFieldType(core.int),
      roundEndCaps: dart.finalFieldType(core.bool)
    }));
    dart.defineExtensionMethods(BarTargetLineRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BarTargetLineRendererConfig, ['hashCode']);
    return BarTargetLineRendererConfig;
  });
  bar_target_line_renderer_config.BarTargetLineRendererConfig = bar_target_line_renderer_config.BarTargetLineRendererConfig$();
  dart.addTypeTests(bar_target_line_renderer_config.BarTargetLineRendererConfig, _is_BarTargetLineRendererConfig_default);
  const _barGroupInnerPadding$ = dart.privateName(bar_target_line_renderer, "_barGroupInnerPadding");
  const _color = dart.privateName(bar_target_line_renderer, "_color");
  const _getTargetLinePoints = dart.privateName(bar_target_line_renderer, "_getTargetLinePoints");
  bar_target_line_renderer._BarTargetLineRendererElement = class _BarTargetLineRendererElement extends base_bar_renderer_element.BaseBarRendererElement {
    updateAnimationPercent(previous, target, animationPercent) {
      let localPrevious = bar_target_line_renderer._BarTargetLineRendererElement._check(previous);
      let localTarget = bar_target_line_renderer._BarTargetLineRendererElement._check(target);
      let previousPoints = localPrevious.points;
      let targetPoints = localTarget.points;
      let lastPoint = null;
      let pointIndex = null;
      for (let t8 = pointIndex = 0; dart.notNull(pointIndex) < dart.notNull(targetPoints[$length]); pointIndex = dart.notNull(pointIndex) + 1) {
        let targetPoint = targetPoints[$_get](pointIndex);
        let previousPoint = null;
        if (dart.notNull(previousPoints[$length]) - 1 >= dart.notNull(pointIndex)) {
          previousPoint = previousPoints[$_get](pointIndex);
          lastPoint = previousPoint;
        } else {
          previousPoint = new (PointOfint()).new(targetPoint.x, lastPoint.y);
        }
        let x = (dart.notNull(targetPoint.x) - dart.notNull(previousPoint.x)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.x);
        let y = (dart.notNull(targetPoint.y) - dart.notNull(previousPoint.y)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.y);
        if (dart.notNull(this.points[$length]) - 1 >= dart.notNull(pointIndex)) {
          this.points[$_set](pointIndex, new (PointOfint()).new(x[$round](), y[$round]()));
        } else {
          this.points[$add](new (PointOfint()).new(x[$round](), y[$round]()));
        }
      }
      if (dart.notNull(pointIndex) < dart.notNull(this.points[$length])) {
        this.points[$removeRange](pointIndex, this.points[$length]);
      }
      this.strokeWidthPx = (dart.notNull(localTarget.strokeWidthPx) - dart.notNull(localPrevious.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(localPrevious.strokeWidthPx);
      this.roundEndCaps = localTarget.roundEndCaps;
      super.updateAnimationPercent(previous, target, animationPercent);
    }
  };
  (bar_target_line_renderer._BarTargetLineRendererElement.new = function() {
    this.points = null;
    this.roundEndCaps = null;
    bar_target_line_renderer._BarTargetLineRendererElement.__proto__.new.call(this);
    ;
  }).prototype = bar_target_line_renderer._BarTargetLineRendererElement.prototype;
  (bar_target_line_renderer._BarTargetLineRendererElement.clone = function(other) {
    this.points = null;
    this.roundEndCaps = null;
    bar_target_line_renderer._BarTargetLineRendererElement.__proto__.clone.call(this, other);
    this.points = ListOfPointOfint().from(other.points);
    this.roundEndCaps = other.roundEndCaps;
  }).prototype = bar_target_line_renderer._BarTargetLineRendererElement.prototype;
  dart.addTypeTests(bar_target_line_renderer._BarTargetLineRendererElement);
  dart.setLibraryUri(bar_target_line_renderer._BarTargetLineRendererElement, "package:charts_common/src/chart/bar/bar_target_line_renderer.dart");
  dart.setFieldSignature(bar_target_line_renderer._BarTargetLineRendererElement, () => ({
    __proto__: dart.getFields(bar_target_line_renderer._BarTargetLineRendererElement.__proto__),
    points: dart.fieldType(core.List$(math.Point$(core.int))),
    roundEndCaps: dart.fieldType(core.bool)
  }));
  const _is__AnimatedBarTargetLine_default = Symbol('_is__AnimatedBarTargetLine_default');
  bar_target_line_renderer._AnimatedBarTargetLine$ = dart.generic(D => {
    class _AnimatedBarTargetLine extends base_bar_renderer_element.BaseAnimatedBar$(D, bar_target_line_renderer._BarTargetLineRendererElement) {
      animateElementToMeasureAxisPosition(target) {
        base_bar_renderer_element.BaseBarRendererElement._check(target);
        let localTarget = bar_target_line_renderer._BarTargetLineRendererElement._check(target);
        let newPoints = JSArrayOfPointOfint().of([]);
        for (let index = 0; index < dart.notNull(localTarget.points[$length]); index = index + 1) {
          let targetPoint = localTarget.points[$_get](index);
          newPoints[$add](new (PointOfint()).new(targetPoint.x, localTarget.measureAxisPosition[$round]()));
        }
        localTarget.points = newPoints;
      }
      clone(bar) {
        bar_target_line_renderer._BarTargetLineRendererElement._check(bar);
        return new bar_target_line_renderer._BarTargetLineRendererElement.clone(bar);
      }
    }
    (_AnimatedBarTargetLine.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      _AnimatedBarTargetLine.__proto__.new.call(this, {key: key, datum: datum, series: series, domainValue: domainValue});
      ;
    }).prototype = _AnimatedBarTargetLine.prototype;
    dart.addTypeTests(_AnimatedBarTargetLine);
    _AnimatedBarTargetLine.prototype[_is__AnimatedBarTargetLine_default] = true;
    dart.setMethodSignature(_AnimatedBarTargetLine, () => ({
      __proto__: dart.getMethods(_AnimatedBarTargetLine.__proto__),
      animateElementToMeasureAxisPosition: dart.fnType(dart.void, [core.Object]),
      clone: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [core.Object])
    }));
    dart.setLibraryUri(_AnimatedBarTargetLine, "package:charts_common/src/chart/bar/bar_target_line_renderer.dart");
    return _AnimatedBarTargetLine;
  });
  bar_target_line_renderer._AnimatedBarTargetLine = bar_target_line_renderer._AnimatedBarTargetLine$();
  dart.addTypeTests(bar_target_line_renderer._AnimatedBarTargetLine, _is__AnimatedBarTargetLine_default);
  const _is_BarTargetLineRenderer_default = Symbol('_is_BarTargetLineRenderer_default');
  bar_target_line_renderer.BarTargetLineRenderer$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let BarTargetLineRendererConfigOfD = () => (BarTargetLineRendererConfigOfD = dart.constFn(bar_target_line_renderer_config.BarTargetLineRendererConfig$(D)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let _AnimatedBarTargetLineOfD = () => (_AnimatedBarTargetLineOfD = dart.constFn(bar_target_line_renderer._AnimatedBarTargetLine$(D)))();
    class BarTargetLineRenderer extends base_bar_renderer.BaseBarRenderer$(D, bar_target_line_renderer._BarTargetLineRendererElement, bar_target_line_renderer._AnimatedBarTargetLine$(D)) {
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : "barTargetLine";
        config == null ? config = new (bar_target_line_renderer_config.BarTargetLineRendererConfig$(D)).new() : null;
        return new (bar_target_line_renderer.BarTargetLineRenderer$(D))._internal({config: config, rendererId: rendererId});
      }
      configureSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          let t7, t7$;
          t7 = series;
          t7.colorFn == null ? t7.colorFn = dart.fn(_ => this[_color], intToColor()) : null;
          t7$ = series;
          t7$.fillColorFn == null ? t7$.fillColorFn = dart.fn(_ => this[_color], intToColor()) : null;
          if (series.seriesColor == null) {
            try {
              series.seriesColor = series.colorFn(0);
            } catch (e) {
              let exception = dart.getThrown(e);
              series.seriesColor = this[_color];
            }
          }
        }, MutableSeriesOfDToNull()));
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsOfD()._check(details);
        SeriesDatumOfD()._check(seriesDatum);
        let series = details.series;
        let domainAxis = ImmutableAxisOfD().as(series.getAttr(axis$.Axis, axis$.domainAxisKey));
        let measureAxis = ImmutableAxisOfnum().as(series.getAttr(axis$.Axis, axis$.measureAxisKey));
        let barGroupIndex = series.getAttr(core.int, base_bar_renderer.barGroupIndexKey);
        let previousBarGroupWeight = series.getAttr(core.double, base_bar_renderer.previousBarGroupWeightKey);
        let barGroupWeight = series.getAttr(core.double, base_bar_renderer.barGroupWeightKey);
        let numBarGroups = series.getAttr(core.int, base_bar_renderer.barGroupCountKey);
        let points = this[_getTargetLinePoints](details.domain, domainAxis, domainAxis.rangeBand[$round](), details.measure, details.measureOffset, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
        let chartPosition = null;
        if (dart.test(this.renderingVertically)) {
          chartPosition = new (PointOfdouble()).new((dart.notNull(points[$_get](0).x) + (dart.notNull(points[$_get](1).x) - dart.notNull(points[$_get](0).x)) / 2)[$toDouble](), points[$_get](0).y[$toDouble]());
        } else {
          chartPosition = new (PointOfdouble()).new(points[$_get](0).x[$toDouble](), (dart.notNull(points[$_get](0).y) + (dart.notNull(points[$_get](1).y) - dart.notNull(points[$_get](0).y)) / 2)[$toDouble]());
        }
        return DatumDetailsOfD().from(details, {chartPosition: chartPosition});
      }
      getBaseDetails(datum, index) {
        let t8;
        let localConfig = BarTargetLineRendererConfigOfD()._check(this.config);
        t8 = new bar_target_line_renderer._BarTargetLineRendererElement.new();
        t8.roundEndCaps = localConfig.roundEndCaps;
        return t8;
      }
      makeAnimatedBar(opts) {
        let t8;
        let key = opts && 'key' in opts ? opts.key : null;
        let series = opts && 'series' in opts ? opts.series : null;
        ImmutableSeriesOfD()._check(series);
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        bar_target_line_renderer._BarTargetLineRendererElement._check(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        D._check(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD()._check(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t8 = new (_AnimatedBarTargetLineOfD()).new({key: key, datum: datum, series: series, domainValue: domainValue});
        t8.setNewTarget(this.makeBarRendererElement({color: color, details: details, dashPattern: dashPattern, domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainWidth, measureValue: measureValue, measureOffsetValue: measureOffsetValue, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, fillColor: fillColor, fillPattern: fillPattern, strokeWidthPx: strokeWidthPx, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, numBarGroups: numBarGroups, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative}));
        return t8;
      }
      makeBarRendererElement(opts) {
        let t8;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        bar_target_line_renderer._BarTargetLineRendererElement._check(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        D._check(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisOfD()._check(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t8 = new bar_target_line_renderer._BarTargetLineRendererElement.new();
        t8.color = color;
        t8.dashPattern = dashPattern;
        t8.fillColor = fillColor;
        t8.fillPattern = fillPattern;
        t8.measureAxisPosition = measureAxisPosition;
        t8.roundEndCaps = details.roundEndCaps;
        t8.strokeWidthPx = strokeWidthPx;
        t8.measureIsNull = measureIsNull;
        t8.measureIsNegative = measureIsNegative;
        t8.points = this[_getTargetLinePoints](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
        return t8;
      }
      paintBar(canvas, animationPercent, barElements) {
        IterableOf_BarTargetLineRendererElement()._check(barElements);
        barElements[$forEach](dart.fn(bar => {
          canvas.drawLine({clipBounds: this.drawBounds, points: bar.points, stroke: bar.color, roundEndCaps: bar.roundEndCaps, strokeWidthPx: bar.strokeWidthPx});
        }, _BarTargetLineRendererElementToNull()));
      }
      [_getTargetLinePoints](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups) {
        if (barGroupWeight == null) {
          barGroupWeight = 1 / dart.notNull(numBarGroups);
          previousBarGroupWeight = dart.notNull(barGroupIndex) * dart.notNull(barGroupWeight);
        }
        let localConfig = BarTargetLineRendererConfigOfD()._check(this.config);
        let spacingLoss = dart.notNull(this[_barGroupInnerPadding$]) * (dart.notNull(numBarGroups) - 1);
        let barWidth = ((dart.notNull(domainWidth) - spacingLoss) * dart.notNull(barGroupWeight))[$round]();
        let overDrawOuterPx = localConfig.overDrawOuterPx;
        let overDrawPx = localConfig.overDrawPx;
        let overDrawStartPx = barGroupIndex === 0 && overDrawOuterPx != null ? overDrawOuterPx : overDrawPx;
        let overDrawEndPx = barGroupIndex === dart.notNull(numBarGroups) - 1 && overDrawOuterPx != null ? overDrawOuterPx : overDrawPx;
        let adjustedBarGroupIndex = dart.test(this.isRtl) ? dart.notNull(numBarGroups) - dart.notNull(barGroupIndex) - 1 : barGroupIndex;
        let previousAverageWidth = dart.notNull(adjustedBarGroupIndex) > 0 ? ((dart.notNull(domainWidth) - spacingLoss) * (dart.notNull(previousBarGroupWeight) / dart.notNull(adjustedBarGroupIndex)))[$round]() : 0;
        let domainStart = (dart.notNull(domainAxis.getLocation(domainValue)) - dart.notNull(domainWidth) / 2 + (previousAverageWidth + dart.notNull(this[_barGroupInnerPadding$])) * dart.notNull(adjustedBarGroupIndex) - dart.notNull(overDrawStartPx))[$round]();
        let domainEnd = domainStart + barWidth + dart.notNull(overDrawStartPx) + dart.notNull(overDrawEndPx);
        measureValue = measureValue != null ? measureValue : 0;
        let measureStart = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue))[$round]();
        let points = null;
        if (dart.test(this.renderingVertically)) {
          points = JSArrayOfPointOfint().of([new (PointOfint()).new(domainStart, measureStart), new (PointOfint()).new(domainEnd, measureStart)]);
        } else {
          points = JSArrayOfPointOfint().of([new (PointOfint()).new(measureStart, domainStart), new (PointOfint()).new(measureStart, domainEnd)]);
        }
        return points;
      }
      getBoundsForBar(bar) {
        bar_target_line_renderer._BarTargetLineRendererElement._check(bar);
        let points = bar.points;
        let top = null;
        let bottom = null;
        let left = null;
        let right = null;
        points[$forEach](dart.fn(p => {
          top = top != null ? math.min(core.int, top, p.y) : p.y;
          left = left != null ? math.min(core.int, left, p.x) : p.x;
          bottom = bottom != null ? math.max(core.int, bottom, p.y) : p.y;
          right = right != null ? math.max(core.int, right, p.x) : p.x;
        }, PointOfintToNull()));
        return new (RectangleOfint()).new(left, top, dart.notNull(right) - dart.notNull(left), dart.notNull(bottom) - dart.notNull(top));
      }
    }
    (BarTargetLineRenderer._internal = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[_barGroupInnerPadding$] = 2;
      this[_color] = new color$.Color.new({r: 0, g: 0, b: 0, a: 153});
      BarTargetLineRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder});
      ;
    }).prototype = BarTargetLineRenderer.prototype;
    dart.addTypeTests(BarTargetLineRenderer);
    BarTargetLineRenderer.prototype[_is_BarTargetLineRenderer_default] = true;
    dart.setMethodSignature(BarTargetLineRenderer, () => ({
      __proto__: dart.getMethods(BarTargetLineRenderer.__proto__),
      addPositionToDetailsForSeriesDatum: dart.fnType(datum_details.DatumDetails$(D), [core.Object, core.Object]),
      getBaseDetails: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [dart.dynamic, core.int]),
      makeAnimatedBar: dart.fnType(bar_target_line_renderer._AnimatedBarTargetLine$(D), [], {barGroupIndex: core.int, barGroupWeight: core.double, color: color$.Color, dashPattern: core.List$(core.int), datum: dart.dynamic, details: core.Object, domainAxis: core.Object, domainValue: core.Object, domainWidth: core.int, fillColor: color$.Color, fillPattern: chart_canvas.FillPatternType, key: core.String, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: core.double, measureIsNegative: core.bool, measureIsNull: core.bool, measureOffsetValue: core.num, measureValue: core.num, numBarGroups: core.int, previousBarGroupWeight: core.double, series: core.Object, strokeWidthPx: core.double}, {}),
      makeBarRendererElement: dart.fnType(bar_target_line_renderer._BarTargetLineRendererElement, [], {barGroupIndex: core.int, barGroupWeight: core.double, color: color$.Color, dashPattern: core.List$(core.int), details: core.Object, domainAxis: core.Object, domainValue: core.Object, domainWidth: core.int, fillColor: color$.Color, fillPattern: chart_canvas.FillPatternType, measureAxis: axis$.ImmutableAxis$(core.num), measureAxisPosition: core.double, measureIsNegative: core.bool, measureIsNull: core.bool, measureOffsetValue: core.num, measureValue: core.num, numBarGroups: core.int, previousBarGroupWeight: core.double, strokeWidthPx: core.double}, {}),
      paintBar: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double, core.Object]),
      [_getTargetLinePoints]: dart.fnType(core.List$(math.Point$(core.int)), [D, axis$.ImmutableAxis$(D), core.int, core.num, core.num, axis$.ImmutableAxis$(core.num), core.int, core.double, core.double, core.int]),
      getBoundsForBar: dart.fnType(math.Rectangle$(core.int), [core.Object])
    }));
    dart.setLibraryUri(BarTargetLineRenderer, "package:charts_common/src/chart/bar/bar_target_line_renderer.dart");
    dart.setFieldSignature(BarTargetLineRenderer, () => ({
      __proto__: dart.getFields(BarTargetLineRenderer.__proto__),
      [_barGroupInnerPadding$]: dart.finalFieldType(core.int),
      [_color]: dart.finalFieldType(color$.Color)
    }));
    return BarTargetLineRenderer;
  });
  bar_target_line_renderer.BarTargetLineRenderer = bar_target_line_renderer.BarTargetLineRenderer$();
  dart.addTypeTests(bar_target_line_renderer.BarTargetLineRenderer, _is_BarTargetLineRenderer_default);
  const _chart$9 = dart.privateName(initial_selection, "_chart");
  const _lifecycleListener$1 = dart.privateName(initial_selection, "_lifecycleListener");
  const _firstDraw = dart.privateName(initial_selection, "_firstDraw");
  const _setInitialSelection = dart.privateName(initial_selection, "_setInitialSelection");
  const _is_InitialSelection_default = Symbol('_is_InitialSelection_default');
  const selectionModelType$4 = dart.privateName(initial_selection, "InitialSelection.selectionModelType");
  const selectedSeriesConfig$ = dart.privateName(initial_selection, "InitialSelection.selectedSeriesConfig");
  const selectedDataConfig$ = dart.privateName(initial_selection, "InitialSelection.selectedDataConfig");
  initial_selection.InitialSelection$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let SelectionModelOfD = () => (SelectionModelOfD = dart.constFn(selection_model.SelectionModel$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class InitialSelection extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$4];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get selectedSeriesConfig() {
        return this[selectedSeriesConfig$];
      }
      set selectedSeriesConfig(value) {
        super.selectedSeriesConfig = value;
      }
      get selectedDataConfig() {
        return this[selectedDataConfig$];
      }
      set selectedDataConfig(value) {
        super.selectedDataConfig = value;
      }
      [_setInitialSelection](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        if (!dart.test(this[_firstDraw])) {
          return;
        }
        this[_firstDraw] = false;
        let immutableModel = new (SelectionModelOfD()).fromConfig(this.selectedDataConfig, this.selectedSeriesConfig, seriesList);
        this[_chart$9].getSelectionModel(this.selectionModelType).updateSelection(immutableModel.selectedDatum, immutableModel.selectedSeries, {notifyListeners: false});
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$9] = chart;
        chart.addLifecycleListener(this[_lifecycleListener$1]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeLifecycleListener(this[_lifecycleListener$1]);
        this[_chart$9] = null;
      }
      get role() {
        return "InitialSelection-" + dart.str(dart.toString(this.selectionModelType)) + "}";
      }
    }
    (InitialSelection.new = function(opts) {
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : C136 || CT.C136;
      let selectedDataConfig = opts && 'selectedDataConfig' in opts ? opts.selectedDataConfig : null;
      let selectedSeriesConfig = opts && 'selectedSeriesConfig' in opts ? opts.selectedSeriesConfig : null;
      this[_chart$9] = null;
      this[_lifecycleListener$1] = null;
      this[_firstDraw] = true;
      this[selectionModelType$4] = selectionModelType;
      this[selectedDataConfig$] = selectedDataConfig;
      this[selectedSeriesConfig$] = selectedSeriesConfig;
      this[_lifecycleListener$1] = new (LifecycleListenerOfD()).new({onData: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _setInitialSelection))});
    }).prototype = InitialSelection.prototype;
    dart.addTypeTests(InitialSelection);
    InitialSelection.prototype[_is_InitialSelection_default] = true;
    InitialSelection[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(InitialSelection, () => ({
      __proto__: dart.getMethods(InitialSelection.__proto__),
      [_setInitialSelection]: dart.fnType(dart.void, [core.Object]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(InitialSelection, () => ({
      __proto__: dart.getGetters(InitialSelection.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(InitialSelection, "package:charts_common/src/chart/common/behavior/initial_selection.dart");
    dart.setFieldSignature(InitialSelection, () => ({
      __proto__: dart.getFields(InitialSelection.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      selectedSeriesConfig: dart.finalFieldType(core.List$(core.String)),
      selectedDataConfig: dart.finalFieldType(core.List$(series_datum.SeriesDatumConfig)),
      [_chart$9]: dart.fieldType(base_chart.BaseChart$(D)),
      [_lifecycleListener$1]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_firstDraw]: dart.fieldType(core.bool)
    }));
    return InitialSelection;
  });
  initial_selection.InitialSelection = initial_selection.InitialSelection$();
  dart.addTypeTests(initial_selection.InitialSelection, _is_InitialSelection_default);
  bar_chart.BarChart = class BarChart extends cartesian_chart.OrdinalCartesianChart {
    makeDefaultRenderer() {
      let t9;
      t9 = BarRendererOfString().new();
      t9.rendererId = "default";
      return t9;
    }
  };
  (bar_chart.BarChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    bar_chart.BarChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = bar_chart.BarChart.prototype;
  dart.addTypeTests(bar_chart.BarChart);
  dart.setLibraryUri(bar_chart.BarChart, "package:charts_common/src/chart/bar/bar_chart.dart");
  const _view$ = dart.privateName(slider, "_view");
  const _gestureListener = dart.privateName(slider, "_gestureListener");
  const _lifecycleListener$2 = dart.privateName(slider, "_lifecycleListener");
  const _sliderEventListener = dart.privateName(slider, "_sliderEventListener");
  const _handleRenderer = dart.privateName(slider, "_handleRenderer");
  const _roleId = dart.privateName(slider, "_roleId");
  const _style$ = dart.privateName(slider, "_style");
  const _chart$10 = dart.privateName(slider, "_chart");
  const _sliderHandle = dart.privateName(slider, "_sliderHandle");
  const _delaySelect$ = dart.privateName(slider, "_delaySelect");
  const _handleDrag = dart.privateName(slider, "_handleDrag");
  const _domainCenterPoint = dart.privateName(slider, "_domainCenterPoint");
  const _previousDomainCenterPoint = dart.privateName(slider, "_previousDomainCenterPoint");
  const _handleBounds = dart.privateName(slider, "_handleBounds");
  const _domainValue = dart.privateName(slider, "_domainValue");
  const _dragStateToFireOnPostRender = dart.privateName(slider, "_dragStateToFireOnPostRender");
  const _onTapTest$0 = dart.privateName(slider, "_onTapTest");
  const _onSelect$0 = dart.privateName(slider, "_onSelect");
  const _onDragEnd = dart.privateName(slider, "_onDragEnd");
  const _onLongPressSelect$ = dart.privateName(slider, "_onLongPressSelect");
  const _setInitialDragState = dart.privateName(slider, "_setInitialDragState");
  const _updateViewData$ = dart.privateName(slider, "_updateViewData");
  const _fireChangeEvent = dart.privateName(slider, "_fireChangeEvent");
  const _sliderContainsPoint = dart.privateName(slider, "_sliderContainsPoint");
  const _moveSliderToPoint = dart.privateName(slider, "_moveSliderToPoint");
  const _moveSliderToDomain = dart.privateName(slider, "_moveSliderToDomain");
  const _name$19 = dart.privateName(slider, "_name");
  let C222;
  let C223;
  const _is_Slider_default = Symbol('_is_Slider_default');
  const layoutPaintOrder$4 = dart.privateName(slider, "Slider.layoutPaintOrder");
  const eventTrigger$0 = dart.privateName(slider, "Slider.eventTrigger");
  const snapToDatum$ = dart.privateName(slider, "Slider.snapToDatum");
  slider.Slider$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let SliderEventListenerOfD = () => (SliderEventListenerOfD = dart.constFn(slider.SliderEventListener$(D)))();
    let PointOfintAndDAndString__Todynamic = () => (PointOfintAndDAndString__Todynamic = dart.constFn(dart.fnType(dart.dynamic, [PointOfint(), D, core.String, slider.SliderListenerDragState])))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    let _SliderLayoutViewOfD = () => (_SliderLayoutViewOfD = dart.constFn(slider._SliderLayoutView$(D)))();
    class Slider extends core.Object {
      get layoutPaintOrder() {
        return this[layoutPaintOrder$4];
      }
      set layoutPaintOrder(value) {
        this[layoutPaintOrder$4] = value;
      }
      get eventTrigger() {
        return this[eventTrigger$0];
      }
      set eventTrigger(value) {
        super.eventTrigger = value;
      }
      get snapToDatum() {
        return this[snapToDatum$];
      }
      set snapToDatum(value) {
        super.snapToDatum = value;
      }
      [_onTapTest$0](chartPoint) {
        this[_delaySelect$] = dart.equals(this.eventTrigger, selection_trigger.SelectionTrigger.longPressHold);
        this[_handleDrag] = this[_sliderContainsPoint](chartPoint);
        return this[_handleDrag];
      }
      [_onLongPressSelect$](chartPoint) {
        this[_delaySelect$] = false;
        return this[_onSelect$0](chartPoint);
      }
      [_onSelect$0](chartPoint, ignored) {
        if (ignored === void 0) ignored = null;
        if (!dart.test(this[_handleDrag]) || dart.test(this[_delaySelect$])) {
          return false;
        }
        let positionChanged = this[_moveSliderToPoint](chartPoint);
        if (dart.test(positionChanged)) {
          this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.drag;
          this[_chart$10].redraw({skipAnimation: true, skipLayout: true});
        }
        return true;
      }
      [_onDragEnd](chartPoint, __, ___) {
        if (dart.test(this[_delaySelect$])) {
          return false;
        }
        this[_handleDrag] = false;
        if (dart.test(this.snapToDatum)) {
          let details = this[_chart$10].getNearestDatumDetailPerSeries(chartPoint, true);
          if (dart.test(details[$isNotEmpty]) && details[$_get](0).chartPosition.x != null) {
            if (!dart.equals(this[_domainValue], details[$_get](0).domain)) {
              this[_moveSliderToDomain](details[$_get](0).domain);
              this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
              this[_chart$10].redraw({skipAnimation: false, skipLayout: true});
            }
          }
        } else {
          this[_moveSliderToPoint](chartPoint);
          this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
          this[_chart$10].redraw({skipAnimation: true, skipLayout: true});
        }
        return false;
      }
      [_sliderContainsPoint](chartPoint) {
        return this[_handleBounds][$containsPoint](chartPoint);
      }
      [_setInitialDragState](_) {
        this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.initial;
      }
      [_updateViewData$]() {
        let t9;
        this[_sliderHandle] == null ? this[_sliderHandle] = new slider._AnimatedSlider.new() : null;
        this[_domainValue] == null ? this[_domainValue] = D._check(dart.dsend(this[_chart$10].domainAxis.getDomain(dart.notNull(this[_view$].drawBounds[$left]) + dart.notNull(this[_view$].drawBounds[$width]) / 2), 'round', [])) : null;
        this[_moveSliderToDomain](this[_domainValue]);
        let element = (t9 = new slider._SliderElement.new(), t9.domainCenterPoint = new (PointOfint()).new(this[_domainCenterPoint].x, this[_domainCenterPoint].y), t9.buttonBounds = new (RectangleOfint()).new(this[_handleBounds][$left], this[_handleBounds][$top], this[_handleBounds][$width], this[_handleBounds][$height]), t9.fill = this[_style$].fillColor, t9.stroke = this[_style$].strokeColor, t9.strokeWidthPx = this[_style$].strokeWidthPx, t9);
        this[_sliderHandle].setNewTarget(element);
        this[_view$].sliderHandle = this[_sliderHandle];
      }
      [_fireChangeEvent](_) {
        if (dart.wrapType(slider.SliderListenerDragState) === null || PointOfintAndDAndString__Todynamic()._check(this[_sliderEventListener].onChange) == null) {
          return;
        }
        let dragState = this[_dragStateToFireOnPostRender];
        if (dart.equals(dragState, slider.SliderListenerDragState.initial) && dart.equals(this[_previousDomainCenterPoint], this[_domainCenterPoint])) {
          dragState = null;
        }
        this[_dragStateToFireOnPostRender] = null;
        this[_previousDomainCenterPoint] = this[_domainCenterPoint];
        if (dragState == null) {
          return;
        }
        PointOfintAndDAndString__Todynamic()._check(this[_sliderEventListener].onChange)(new (PointOfint()).new(this[_domainCenterPoint].x, this[_domainCenterPoint].y), this[_domainValue], this[_roleId], dragState);
      }
      [_moveSliderToPoint](point) {
        let positionChanged = false;
        if (this[_chart$10] != null) {
          let viewBounds = this[_view$].componentBounds;
          let position = math$.clamp(point.x, viewBounds[$left], viewBounds[$right]);
          positionChanged = this[_previousDomainCenterPoint] != null && position != this[_previousDomainCenterPoint].x;
          this[_domainValue] = D._check(this[_chart$10].domainAxis.getDomain(position[$toDouble]()));
          if (this[_domainCenterPoint] != null) {
            this[_domainCenterPoint] = new (PointOfint()).new(position[$round](), this[_domainCenterPoint].y);
          } else {
            this[_domainCenterPoint] = new (PointOfint()).new(position[$round](), (dart.notNull(viewBounds[$top]) + dart.notNull(viewBounds[$height]) / 2)[$round]());
          }
          let handleReferenceY = null;
          switch (this[_style$].handlePosition) {
            case C222 || CT.C222:
            {
              handleReferenceY = this[_domainCenterPoint].y;
              break;
            }
            case C223 || CT.C223:
            {
              handleReferenceY = viewBounds[$top];
              break;
            }
            default:
            {
              dart.throw(new core.ArgumentError.new("Slider does not support the handle position " + "\"" + dart.str(this[_style$].handlePosition) + "\""));
            }
          }
          this[_handleBounds] = new (RectangleOfint()).new((dart.notNull(this[_domainCenterPoint].x) - dart.notNull(this[_style$].handleSize[$width]) / 2 + dart.notNull(this[_style$].handleOffset.x))[$round](), (dart.notNull(handleReferenceY) - dart.notNull(this[_style$].handleSize[$height]) / 2 + dart.notNull(this[_style$].handleOffset.y))[$round](), this[_style$].handleSize[$width], this[_style$].handleSize[$height]);
        }
        return positionChanged;
      }
      [_moveSliderToDomain](domain) {
        let x = this[_chart$10].domainAxis.getLocation(domain);
        return this[_moveSliderToPoint](new (PointOfdouble()).new(x, 0.0));
      }
      moveSliderToDomain(domain, opts) {
        D._check(domain);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : true;
        if (this[_chart$10] == null || dart.equals(domain, this[_domainValue])) {
          return;
        }
        let positionChanged = this[_moveSliderToDomain](domain);
        if (dart.test(positionChanged)) {
          this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.end;
          this[_chart$10].redraw({skipAnimation: skipAnimation, skipLayout: true});
        }
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("Slider can only be attached to a cartesian chart."));
        }
        this[_chart$10] = CartesianChartOfD()._check(cartesian_chart.CartesianChart.as(chart));
        if (!dart.test(this[_chart$10].vertical)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/slider/slider.dart", 480, 12, "_chart.vertical");
        this[_view$] = new (_SliderLayoutViewOfD()).new({layoutPaintOrder: this.layoutPaintOrder, handleRenderer: this[_handleRenderer]});
        chart.addView(this[_view$]);
        chart.addGestureListener(this[_gestureListener]);
        chart.addLifecycleListener(this[_lifecycleListener$2]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeView(this[_view$]);
        chart.removeGestureListener(this[_gestureListener]);
        chart.removeLifecycleListener(this[_lifecycleListener$2]);
        this[_chart$10] = null;
      }
      get role() {
        return "Slider-" + dart.str(dart.toString(this.eventTrigger)) + "-" + dart.str(this[_roleId]);
      }
    }
    (Slider.new = function(opts) {
      let t9, t9$, t9$0;
      let eventTrigger = opts && 'eventTrigger' in opts ? opts.eventTrigger : C167 || CT.C167;
      let handleRenderer = opts && 'handleRenderer' in opts ? opts.handleRenderer : null;
      let initialDomainValue = opts && 'initialDomainValue' in opts ? opts.initialDomainValue : null;
      let onChangeCallback = opts && 'onChangeCallback' in opts ? opts.onChangeCallback : null;
      let roleId = opts && 'roleId' in opts ? opts.roleId : null;
      let snapToDatum = opts && 'snapToDatum' in opts ? opts.snapToDatum : false;
      let style = opts && 'style' in opts ? opts.style : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 150;
      this[_view$] = null;
      this[_gestureListener] = null;
      this[_lifecycleListener$2] = null;
      this[_sliderEventListener] = null;
      this[_handleRenderer] = null;
      this[_roleId] = null;
      this[_style$] = null;
      this[_chart$10] = null;
      this[_sliderHandle] = null;
      this[_delaySelect$] = false;
      this[_handleDrag] = false;
      this[_domainCenterPoint] = null;
      this[_previousDomainCenterPoint] = null;
      this[_handleBounds] = null;
      this[_domainValue] = null;
      this[_dragStateToFireOnPostRender] = null;
      this[eventTrigger$0] = eventTrigger;
      this[snapToDatum$] = snapToDatum;
      this[layoutPaintOrder$4] = layoutPaintOrder;
      this[_handleRenderer] = (t9 = handleRenderer, t9 == null ? new symbol_renderer.RectSymbolRenderer.new() : t9);
      this[_roleId] = (t9$ = roleId, t9$ == null ? "" : t9$);
      this[_style$] = (t9$0 = style, t9$0 == null ? new slider.SliderStyle.new() : t9$0);
      this[_domainValue] = initialDomainValue;
      if (this[_domainValue] != null) {
        this[_dragStateToFireOnPostRender] = slider.SliderListenerDragState.initial;
      }
      switch (this.eventTrigger) {
        case C167 || CT.C167:
        {
          this[_gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$0), onTap: dart.bind(this, _onSelect$0), onDragStart: dart.bind(this, _onSelect$0), onDragUpdate: dart.bind(this, _onSelect$0), onDragEnd: dart.bind(this, _onDragEnd)});
          break;
        }
        case C168 || CT.C168:
        {
          this[_gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$0), onLongPress: dart.bind(this, _onSelect$0), onDragStart: dart.bind(this, _onSelect$0), onDragUpdate: dart.bind(this, _onSelect$0), onDragEnd: dart.bind(this, _onDragEnd)});
          break;
        }
        case C169 || CT.C169:
        {
          this[_gestureListener] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, _onTapTest$0), onLongPress: dart.bind(this, _onLongPressSelect$), onDragStart: dart.bind(this, _onSelect$0), onDragUpdate: dart.bind(this, _onSelect$0), onDragEnd: dart.bind(this, _onDragEnd)});
          break;
        }
        default:
        {
          dart.throw(new core.ArgumentError.new("Slider does not support the event trigger " + "\"" + dart.str(this.eventTrigger) + "\""));
          break;
        }
      }
      this[_lifecycleListener$2] = new (LifecycleListenerOfD()).new({onData: dart.bind(this, _setInitialDragState), onAxisConfigured: dart.bind(this, _updateViewData$), onPostrender: dart.bind(this, _fireChangeEvent)});
      this[_sliderEventListener] = new (SliderEventListenerOfD()).new({onChange: onChangeCallback});
    }).prototype = Slider.prototype;
    dart.addTypeTests(Slider);
    Slider.prototype[_is_Slider_default] = true;
    Slider[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(Slider, () => ({
      __proto__: dart.getMethods(Slider.__proto__),
      [_onTapTest$0]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onLongPressSelect$]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onSelect$0]: dart.fnType(core.bool, [math.Point$(core.double)], [core.double]),
      [_onDragEnd]: dart.fnType(core.bool, [math.Point$(core.double), dart.dynamic, dart.dynamic]),
      [_sliderContainsPoint]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_setInitialDragState]: dart.fnType(dart.void, [dart.dynamic]),
      [_updateViewData$]: dart.fnType(dart.void, []),
      [_fireChangeEvent]: dart.fnType(dart.void, [dart.dynamic]),
      [_moveSliderToPoint]: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_moveSliderToDomain]: dart.fnType(core.bool, [D]),
      moveSliderToDomain: dart.fnType(dart.void, [core.Object], {skipAnimation: core.bool}, {}),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(Slider, () => ({
      __proto__: dart.getGetters(Slider.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(Slider, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(Slider, () => ({
      __proto__: dart.getFields(Slider.__proto__),
      [_view$]: dart.fieldType(slider._SliderLayoutView),
      [_gestureListener]: dart.fieldType(gesture_listener.GestureListener),
      [_lifecycleListener$2]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_sliderEventListener]: dart.fieldType(slider.SliderEventListener$(D)),
      layoutPaintOrder: dart.fieldType(core.int),
      eventTrigger: dart.finalFieldType(selection_trigger.SelectionTrigger),
      [_handleRenderer]: dart.fieldType(symbol_renderer.SymbolRenderer),
      [_roleId]: dart.fieldType(core.String),
      snapToDatum: dart.finalFieldType(core.bool),
      [_style$]: dart.fieldType(slider.SliderStyle),
      [_chart$10]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_sliderHandle]: dart.fieldType(slider._AnimatedSlider),
      [_delaySelect$]: dart.fieldType(core.bool),
      [_handleDrag]: dart.fieldType(core.bool),
      [_domainCenterPoint]: dart.fieldType(math.Point$(core.int)),
      [_previousDomainCenterPoint]: dart.fieldType(math.Point$(core.int)),
      [_handleBounds]: dart.fieldType(math.Rectangle$(core.int)),
      [_domainValue]: dart.fieldType(D),
      [_dragStateToFireOnPostRender]: dart.fieldType(slider.SliderListenerDragState)
    }));
    return Slider;
  });
  slider.Slider = slider.Slider$();
  dart.addTypeTests(slider.Slider, _is_Slider_default);
  const Point_y = dart.privateName(math, "Point.y");
  const Point_x = dart.privateName(math, "Point.x");
  let C224;
  const Rectangle_height = dart.privateName(math, "Rectangle.height");
  const Rectangle_width = dart.privateName(math, "Rectangle.width");
  const Rectangle_top = dart.privateName(math, "Rectangle.top");
  const Rectangle_left = dart.privateName(math, "Rectangle.left");
  let C225;
  const fillColor$2 = dart.privateName(slider, "SliderStyle.fillColor");
  const handleOffset$ = dart.privateName(slider, "SliderStyle.handleOffset");
  const handlePosition$ = dart.privateName(slider, "SliderStyle.handlePosition");
  const handleSize$ = dart.privateName(slider, "SliderStyle.handleSize");
  const strokeWidthPx$10 = dart.privateName(slider, "SliderStyle.strokeWidthPx");
  const strokeColor$0 = dart.privateName(slider, "SliderStyle.strokeColor");
  slider.SliderStyle = class SliderStyle extends core.Object {
    get fillColor() {
      return this[fillColor$2];
    }
    set fillColor(value) {
      this[fillColor$2] = value;
    }
    get handleOffset() {
      return this[handleOffset$];
    }
    set handleOffset(value) {
      this[handleOffset$] = value;
    }
    get handlePosition() {
      return this[handlePosition$];
    }
    set handlePosition(value) {
      this[handlePosition$] = value;
    }
    get handleSize() {
      return this[handleSize$];
    }
    set handleSize(value) {
      this[handleSize$] = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx$10];
    }
    set strokeWidthPx(value) {
      this[strokeWidthPx$10] = value;
    }
    get strokeColor() {
      return this[strokeColor$0];
    }
    set strokeColor(value) {
      this[strokeColor$0] = value;
    }
    _equals(o) {
      if (o == null) return false;
      return slider.SliderStyle.is(o) && dart.equals(this.fillColor, o.fillColor) && dart.equals(this.handleOffset, o.handleOffset) && dart.equals(this.handleSize, o.handleSize) && this.strokeWidthPx == o.strokeWidthPx && dart.equals(this.strokeColor, o.strokeColor);
    }
    get hashCode() {
      let t9, t9$, t9$0, t9$1, t9$2, t9$3, t9$4, t9$5, t9$6, t9$7, t9$8, t9$9;
      let hashcode = (t9$ = (t9 = this.fillColor, t9 == null ? null : dart.hashCode(t9)), t9$ == null ? 0 : t9$);
      hashcode = (t9$1 = dart.notNull(hashcode) * 37 + dart.notNull((t9$0 = this.handleOffset, t9$0 == null ? null : dart.hashCode(t9$0))), t9$1 === null ? 0 : t9$1);
      hashcode = (t9$3 = dart.notNull(hashcode) * 37 + dart.notNull((t9$2 = this.handleSize, t9$2 == null ? null : dart.hashCode(t9$2))), t9$3 === null ? 0 : t9$3);
      hashcode = (t9$5 = dart.notNull(hashcode) * 37 + dart.notNull((t9$4 = this.strokeWidthPx, t9$4 == null ? null : dart.hashCode(t9$4))), t9$5 === null ? 0 : t9$5);
      hashcode = (t9$7 = dart.notNull(hashcode) * 37 + dart.notNull((t9$6 = this.strokeColor, t9$6 == null ? null : dart.hashCode(t9$6))), t9$7 === null ? 0 : t9$7);
      hashcode = (t9$9 = dart.notNull(hashcode) * 37 + dart.notNull((t9$8 = this.handlePosition, t9$8 == null ? null : dart.hashCode(t9$8))), t9$9 === null ? 0 : t9$9);
      return hashcode;
    }
  };
  (slider.SliderStyle.new = function(opts) {
    let t9, t9$;
    let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
    let handleOffset = opts && 'handleOffset' in opts ? opts.handleOffset : C224 || CT.C224;
    let handleSize = opts && 'handleSize' in opts ? opts.handleSize : C225 || CT.C225;
    let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
    let handlePosition = opts && 'handlePosition' in opts ? opts.handlePosition : C222 || CT.C222;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
    this[fillColor$2] = null;
    this[strokeColor$0] = style_factory.StyleFactory.style.sliderStrokeColor;
    this[handleOffset$] = handleOffset;
    this[handleSize$] = handleSize;
    this[handlePosition$] = handlePosition;
    this[strokeWidthPx$10] = strokeWidthPx;
    this.fillColor = (t9 = fillColor, t9 == null ? style_factory.StyleFactory.style.sliderFillColor : t9);
    this.strokeColor = (t9$ = strokeColor, t9$ == null ? style_factory.StyleFactory.style.sliderStrokeColor : t9$);
  }).prototype = slider.SliderStyle.prototype;
  dart.addTypeTests(slider.SliderStyle);
  dart.setMethodSignature(slider.SliderStyle, () => ({
    __proto__: dart.getMethods(slider.SliderStyle.__proto__),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(slider.SliderStyle, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
  dart.setFieldSignature(slider.SliderStyle, () => ({
    __proto__: dart.getFields(slider.SliderStyle.__proto__),
    fillColor: dart.fieldType(color$.Color),
    handleOffset: dart.fieldType(math.Point$(core.double)),
    handlePosition: dart.fieldType(slider.SliderHandlePosition),
    handleSize: dart.fieldType(math.Rectangle$(core.int)),
    strokeWidthPx: dart.fieldType(core.double),
    strokeColor: dart.fieldType(color$.Color)
  }));
  dart.defineExtensionMethods(slider.SliderStyle, ['_equals']);
  dart.defineExtensionAccessors(slider.SliderStyle, ['hashCode']);
  let C226;
  slider.SliderHandlePosition = class SliderHandlePosition extends core.Object {
    toString() {
      return this[_name$19];
    }
  };
  (slider.SliderHandlePosition.new = function(index, _name) {
    this.index = index;
    this[_name$19] = _name;
    ;
  }).prototype = slider.SliderHandlePosition.prototype;
  dart.addTypeTests(slider.SliderHandlePosition);
  dart.setLibraryUri(slider.SliderHandlePosition, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
  dart.setFieldSignature(slider.SliderHandlePosition, () => ({
    __proto__: dart.getFields(slider.SliderHandlePosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$19]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(slider.SliderHandlePosition, ['toString']);
  slider.SliderHandlePosition.middle = C222 || CT.C222;
  slider.SliderHandlePosition.top = C223 || CT.C223;
  slider.SliderHandlePosition.values = C226 || CT.C226;
  const _drawAreaBounds$3 = dart.privateName(slider, "_drawAreaBounds");
  const _graphicsFactory$2 = dart.privateName(slider, "_graphicsFactory");
  const _is__SliderLayoutView_default = Symbol('_is__SliderLayoutView_default');
  const layoutConfig$0 = dart.privateName(slider, "_SliderLayoutView.layoutConfig");
  slider._SliderLayoutView$ = dart.generic(D => {
    class _SliderLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[layoutConfig$0];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get drawBounds() {
        return this[_drawAreaBounds$3];
      }
      set sliderHandle(value) {
        this[_sliderHandle] = value;
      }
      get graphicsFactory() {
        return this[_graphicsFactory$2];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$2] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds$3] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let sliderElement = this[_sliderHandle].getCurrentSlider(animationPercent);
        canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(sliderElement.domainCenterPoint.x, this[_drawAreaBounds$3][$top]), new (PointOfnum()).new(sliderElement.domainCenterPoint.x, this[_drawAreaBounds$3][$bottom])]), stroke: sliderElement.stroke, strokeWidthPx: sliderElement.strokeWidthPx});
        this[_handleRenderer].paint(canvas, sliderElement.buttonBounds, {fillColor: sliderElement.fill, strokeColor: sliderElement.stroke, strokeWidthPx: sliderElement.strokeWidthPx});
      }
      get componentBounds() {
        return this[_drawAreaBounds$3];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_SliderLayoutView.new = function(opts) {
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let handleRenderer = opts && 'handleRenderer' in opts ? opts.handleRenderer : null;
      this[_drawAreaBounds$3] = null;
      this[_graphicsFactory$2] = null;
      this[_sliderHandle] = null;
      this[layoutConfig$0] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      this[_handleRenderer] = handleRenderer;
      ;
    }).prototype = _SliderLayoutView.prototype;
    dart.addTypeTests(_SliderLayoutView);
    _SliderLayoutView.prototype[_is__SliderLayoutView_default] = true;
    dart.setMethodSignature(_SliderLayoutView, () => ({
      __proto__: dart.getMethods(_SliderLayoutView.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double])
    }));
    dart.setGetterSignature(_SliderLayoutView, () => ({
      __proto__: dart.getGetters(_SliderLayoutView.__proto__),
      drawBounds: math.Rectangle$(core.int),
      graphicsFactory: graphics_factory.GraphicsFactory,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_SliderLayoutView, () => ({
      __proto__: dart.getSetters(_SliderLayoutView.__proto__),
      sliderHandle: slider._AnimatedSlider,
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(_SliderLayoutView, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(_SliderLayoutView, () => ({
      __proto__: dart.getFields(_SliderLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      [_drawAreaBounds$3]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$2]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_handleRenderer]: dart.fieldType(symbol_renderer.SymbolRenderer),
      [_sliderHandle]: dart.fieldType(slider._AnimatedSlider)
    }));
    return _SliderLayoutView;
  });
  slider._SliderLayoutView = slider._SliderLayoutView$();
  dart.addTypeTests(slider._SliderLayoutView, _is__SliderLayoutView_default);
  const _is__SliderElement_default = Symbol('_is__SliderElement_default');
  slider._SliderElement$ = dart.generic(D => {
    let _SliderElementOfD = () => (_SliderElementOfD = dart.constFn(slider._SliderElement$(D)))();
    class _SliderElement extends core.Object {
      clone() {
        let t9;
        t9 = new (_SliderElementOfD()).new();
        t9.domainCenterPoint = this.domainCenterPoint;
        t9.buttonBounds = this.buttonBounds;
        t9.fill = this.fill;
        t9.stroke = this.stroke;
        t9.strokeWidthPx = this.strokeWidthPx;
        return t9;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let localPrevious = previous;
        let localTarget = target;
        let previousPoint = localPrevious.domainCenterPoint;
        let targetPoint = localTarget.domainCenterPoint;
        let x = (dart.notNull(targetPoint.x) - dart.notNull(previousPoint.x)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.x);
        let y = (dart.notNull(targetPoint.y) - dart.notNull(previousPoint.y)) * dart.notNull(animationPercent) + dart.notNull(previousPoint.y);
        this.domainCenterPoint = new (PointOfint()).new(x[$round](), y[$round]());
        let previousBounds = localPrevious.buttonBounds;
        let targetBounds = localTarget.buttonBounds;
        let top = (dart.notNull(targetBounds[$top]) - dart.notNull(previousBounds[$top])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$top]);
        let right = (dart.notNull(targetBounds[$right]) - dart.notNull(previousBounds[$right])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$right]);
        let bottom = (dart.notNull(targetBounds[$bottom]) - dart.notNull(previousBounds[$bottom])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$bottom]);
        let left = (dart.notNull(targetBounds[$left]) - dart.notNull(previousBounds[$left])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$left]);
        this.buttonBounds = new (RectangleOfint()).new(left[$round](), top[$round](), (right - left)[$round](), (bottom - top)[$round]());
        this.fill = chart_canvas.getAnimatedColor(previous.fill, target.fill, animationPercent);
        this.stroke = chart_canvas.getAnimatedColor(previous.stroke, target.stroke, animationPercent);
        this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
      }
    }
    (_SliderElement.new = function() {
      this.domainCenterPoint = null;
      this.buttonBounds = null;
      this.fill = null;
      this.stroke = null;
      this.strokeWidthPx = null;
      ;
    }).prototype = _SliderElement.prototype;
    dart.addTypeTests(_SliderElement);
    _SliderElement.prototype[_is__SliderElement_default] = true;
    dart.setMethodSignature(_SliderElement, () => ({
      __proto__: dart.getMethods(_SliderElement.__proto__),
      clone: dart.fnType(slider._SliderElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [slider._SliderElement, slider._SliderElement, core.double])
    }));
    dart.setLibraryUri(_SliderElement, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(_SliderElement, () => ({
      __proto__: dart.getFields(_SliderElement.__proto__),
      domainCenterPoint: dart.fieldType(math.Point$(core.int)),
      buttonBounds: dart.fieldType(math.Rectangle$(core.int)),
      fill: dart.fieldType(color$.Color),
      stroke: dart.fieldType(color$.Color),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return _SliderElement;
  });
  slider._SliderElement = slider._SliderElement$();
  dart.addTypeTests(slider._SliderElement, _is__SliderElement_default);
  const _previousSlider = dart.privateName(slider, "_previousSlider");
  const _targetSlider = dart.privateName(slider, "_targetSlider");
  const _currentSlider = dart.privateName(slider, "_currentSlider");
  const _is__AnimatedSlider_default = Symbol('_is__AnimatedSlider_default');
  slider._AnimatedSlider$ = dart.generic(D => {
    let _SliderElementOfD = () => (_SliderElementOfD = dart.constFn(slider._SliderElement$(D)))();
    class _AnimatedSlider extends core.Object {
      animateOut() {
        let newTarget = this[_currentSlider].clone();
        let targetBounds = newTarget.buttonBounds;
        let top = targetBounds[$top];
        let right = dart.notNull(targetBounds[$left]) + dart.notNull(targetBounds[$width]) / 2;
        let bottom = targetBounds[$bottom];
        let left = right;
        newTarget.buttonBounds = new (RectangleOfint()).new(left[$round](), top[$round](), (right - left)[$round](), (dart.notNull(bottom) - dart.notNull(top))[$round]());
        newTarget.strokeWidthPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _SliderElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentSlider] == null ? this[_currentSlider] = newTarget.clone() : null;
        this[_previousSlider] = this[_currentSlider].clone();
        this[_targetSlider] = newTarget;
      }
      getCurrentSlider(animationPercent) {
        if (animationPercent === 1.0 || this[_previousSlider] == null) {
          this[_currentSlider] = this[_targetSlider];
          this[_previousSlider] = this[_targetSlider];
          return this[_currentSlider];
        }
        this[_currentSlider].updateAnimationPercent(this[_previousSlider], this[_targetSlider], animationPercent);
        return this[_currentSlider];
      }
    }
    (_AnimatedSlider.new = function() {
      this[_previousSlider] = null;
      this[_targetSlider] = null;
      this[_currentSlider] = null;
      this.animatingOut = false;
      ;
    }).prototype = _AnimatedSlider.prototype;
    dart.addTypeTests(_AnimatedSlider);
    _AnimatedSlider.prototype[_is__AnimatedSlider_default] = true;
    dart.setMethodSignature(_AnimatedSlider, () => ({
      __proto__: dart.getMethods(_AnimatedSlider.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentSlider: dart.fnType(slider._SliderElement$(D), [core.double])
    }));
    dart.setLibraryUri(_AnimatedSlider, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(_AnimatedSlider, () => ({
      __proto__: dart.getFields(_AnimatedSlider.__proto__),
      [_previousSlider]: dart.fieldType(slider._SliderElement$(D)),
      [_targetSlider]: dart.fieldType(slider._SliderElement$(D)),
      [_currentSlider]: dart.fieldType(slider._SliderElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedSlider;
  });
  slider._AnimatedSlider = slider._AnimatedSlider$();
  dart.addTypeTests(slider._AnimatedSlider, _is__AnimatedSlider_default);
  const _is_SliderEventListener_default = Symbol('_is_SliderEventListener_default');
  const onChange$ = dart.privateName(slider, "SliderEventListener.onChange");
  slider.SliderEventListener$ = dart.generic(D => {
    class SliderEventListener extends core.Object {
      get onChange() {
        return this[onChange$];
      }
      set onChange(value) {
        super.onChange = value;
      }
    }
    (SliderEventListener.new = function(opts) {
      let onChange = opts && 'onChange' in opts ? opts.onChange : null;
      this[onChange$] = onChange;
      ;
    }).prototype = SliderEventListener.prototype;
    dart.addTypeTests(SliderEventListener);
    SliderEventListener.prototype[_is_SliderEventListener_default] = true;
    dart.setLibraryUri(SliderEventListener, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(SliderEventListener, () => ({
      __proto__: dart.getFields(SliderEventListener.__proto__),
      onChange: dart.finalFieldType(dart.fnType(dart.dynamic, [math.Point$(core.int), D, core.String, slider.SliderListenerDragState]))
    }));
    return SliderEventListener;
  });
  slider.SliderEventListener = slider.SliderEventListener$();
  dart.addTypeTests(slider.SliderEventListener, _is_SliderEventListener_default);
  let C227;
  let C228;
  let C229;
  let C230;
  slider.SliderListenerDragState = class SliderListenerDragState extends core.Object {
    toString() {
      return this[_name$19];
    }
  };
  (slider.SliderListenerDragState.new = function(index, _name) {
    this.index = index;
    this[_name$19] = _name;
    ;
  }).prototype = slider.SliderListenerDragState.prototype;
  dart.addTypeTests(slider.SliderListenerDragState);
  dart.setLibraryUri(slider.SliderListenerDragState, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
  dart.setFieldSignature(slider.SliderListenerDragState, () => ({
    __proto__: dart.getFields(slider.SliderListenerDragState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$19]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(slider.SliderListenerDragState, ['toString']);
  slider.SliderListenerDragState.initial = C227 || CT.C227;
  slider.SliderListenerDragState.drag = C228 || CT.C228;
  slider.SliderListenerDragState.end = C229 || CT.C229;
  slider.SliderListenerDragState.values = C230 || CT.C230;
  const _is_SliderTester_default = Symbol('_is_SliderTester_default');
  const behavior$0 = dart.privateName(slider, "SliderTester.behavior");
  slider.SliderTester$ = dart.generic(D => {
    class SliderTester extends core.Object {
      get behavior() {
        return this[behavior$0];
      }
      set behavior(value) {
        super.behavior = value;
      }
      get domainCenterPoint() {
        return this.behavior[_domainCenterPoint];
      }
      get domainValue() {
        return this.behavior[_domainValue];
      }
      get handleBounds() {
        return this.behavior[_handleBounds];
      }
      layout(componentBounds, drawAreaBounds) {
        this.behavior[_view$].layout(componentBounds, drawAreaBounds);
      }
      get view() {
        return this.behavior[_view$];
      }
    }
    (SliderTester.new = function(behavior) {
      this[behavior$0] = behavior;
      ;
    }).prototype = SliderTester.prototype;
    dart.addTypeTests(SliderTester);
    SliderTester.prototype[_is_SliderTester_default] = true;
    dart.setMethodSignature(SliderTester, () => ({
      __proto__: dart.getMethods(SliderTester.__proto__),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)])
    }));
    dart.setGetterSignature(SliderTester, () => ({
      __proto__: dart.getGetters(SliderTester.__proto__),
      domainCenterPoint: math.Point$(core.int),
      domainValue: D,
      handleBounds: math.Rectangle$(core.int),
      view: slider._SliderLayoutView
    }));
    dart.setLibraryUri(SliderTester, "package:charts_common/src/chart/common/behavior/slider/slider.dart");
    dart.setFieldSignature(SliderTester, () => ({
      __proto__: dart.getFields(SliderTester.__proto__),
      behavior: dart.finalFieldType(slider.Slider$(D))
    }));
    return SliderTester;
  });
  slider.SliderTester = slider.SliderTester$();
  dart.addTypeTests(slider.SliderTester, _is_SliderTester_default);
  const _listener$1 = dart.privateName(pan_behavior, "_listener");
  const _domainAxisTickProvider = dart.privateName(pan_behavior, "_domainAxisTickProvider");
  const _chart$11 = dart.privateName(pan_behavior, "_chart");
  const _isPanning = dart.privateName(pan_behavior, "_isPanning");
  const _lastPosition = dart.privateName(pan_behavior, "_lastPosition");
  const _panningCompletedCallback = dart.privateName(pan_behavior, "_panningCompletedCallback");
  const _is_PanBehavior_default = Symbol('_is_PanBehavior_default');
  pan_behavior.PanBehavior$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    let PanningTickProviderOfD = () => (PanningTickProviderOfD = dart.constFn(panning_tick_provider.PanningTickProvider$(D)))();
    let TickProviderOfD = () => (TickProviderOfD = dart.constFn(tick_provider.TickProvider$(D)))();
    class PanBehavior extends core.Object {
      get domainAxisTickProvider() {
        return this[_domainAxisTickProvider];
      }
      get role() {
        return "Pan";
      }
      get chart() {
        return this[_chart$11];
      }
      get isPanning() {
        return this[_isPanning];
      }
      get lastPosition() {
        return this[_lastPosition];
      }
      set panningCompletedCallback(callback) {
        this[_panningCompletedCallback] = callback;
      }
      attachTo(chart) {
        let t9;
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("PanBehavior can only be attached to a CartesianChart"));
        }
        this[_chart$11] = CartesianChartOfD()._check(chart);
        this[_chart$11].addGestureListener(this[_listener$1]);
        t9 = this[_chart$11].domainAxis;
        t9 == null ? null : t9.autoViewport = false;
        this[_domainAxisTickProvider] = new (PanningTickProviderOfD()).new(TickProviderOfD()._check(this[_chart$11].domainAxis.tickProvider));
        this[_chart$11].domainAxis.tickProvider = this[_domainAxisTickProvider];
      }
      removeFrom(chart) {
        let t9;
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("PanBehavior can only be attached to a CartesianChart"));
        }
        this[_chart$11] = CartesianChartOfD()._check(chart);
        this[_chart$11].removeGestureListener(this[_listener$1]);
        t9 = this[_chart$11].domainAxis;
        t9 == null ? null : t9.autoViewport = true;
        this[_chart$11].domainAxis.tickProvider = this[_domainAxisTickProvider].tickProvider;
        this[_chart$11] = null;
      }
      onTapTest(localPosition) {
        if (this[_chart$11] == null) {
          return false;
        }
        return this[_chart$11].withinDrawArea(localPosition);
      }
      onDragStart(localPosition) {
        if (this[_chart$11] == null) {
          return false;
        }
        this.onPanStart();
        this[_lastPosition] = localPosition;
        this[_isPanning] = true;
        return true;
      }
      onDragUpdate(localPosition, scale) {
        if (!dart.test(this[_isPanning]) || this[_lastPosition] == null || this[_chart$11] == null) {
          return false;
        }
        if (scale !== 1.0) {
          this[_isPanning] = false;
          return false;
        }
        let domainAxis = this[_chart$11].domainAxis;
        if (domainAxis == null) {
          return false;
        }
        this[_domainAxisTickProvider].mode = panning_tick_provider.PanningTickProviderMode.stepSizeLocked;
        let domainScalingFactor = domainAxis.viewportScalingFactor;
        let domainChange = dart.notNull(domainAxis.viewportTranslatePx) + dart.notNull(localPosition.x) - dart.notNull(this[_lastPosition].x);
        domainAxis.setViewportSettings(domainScalingFactor, domainChange, {drawAreaWidth: this.chart.drawAreaBounds[$width]});
        this[_lastPosition] = localPosition;
        this[_chart$11].redraw({skipAnimation: true, skipLayout: true});
        return true;
      }
      onDragEnd(localPosition, scale, pixelsPerSec) {
        this.onPanEnd();
        return true;
      }
      onPanStart() {
        let t9;
        this[_chart$11].getMeasureAxis().lockAxis = true;
        t9 = this[_chart$11].getMeasureAxis({axisId: "secondaryMeasureAxisId"});
        t9 == null ? null : t9.lockAxis = true;
      }
      onPanEnd() {
        let t9;
        this.cancelPanning();
        this[_domainAxisTickProvider].mode = panning_tick_provider.PanningTickProviderMode.passThrough;
        this[_chart$11].getMeasureAxis().lockAxis = false;
        t9 = this[_chart$11].getMeasureAxis({axisId: "secondaryMeasureAxisId"});
        t9 == null ? null : t9.lockAxis = false;
        this[_chart$11].redraw();
        if (this[_panningCompletedCallback] != null) {
          this[_panningCompletedCallback]();
        }
      }
      cancelPanning() {
        this[_isPanning] = false;
      }
    }
    (PanBehavior.new = function() {
      this[_listener$1] = null;
      this[_domainAxisTickProvider] = null;
      this[_chart$11] = null;
      this[_isPanning] = false;
      this[_lastPosition] = null;
      this[_panningCompletedCallback] = null;
      this[_listener$1] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, 'onTapTest'), onDragStart: dart.bind(this, 'onDragStart'), onDragUpdate: dart.bind(this, 'onDragUpdate'), onDragEnd: dart.bind(this, 'onDragEnd')});
    }).prototype = PanBehavior.prototype;
    dart.addTypeTests(PanBehavior);
    PanBehavior.prototype[_is_PanBehavior_default] = true;
    PanBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(PanBehavior, () => ({
      __proto__: dart.getMethods(PanBehavior.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      onTapTest: dart.fnType(core.bool, [math.Point$(core.double)]),
      onDragStart: dart.fnType(core.bool, [math.Point$(core.double)]),
      onDragUpdate: dart.fnType(core.bool, [math.Point$(core.double), core.double]),
      onDragEnd: dart.fnType(core.bool, [math.Point$(core.double), core.double, core.double]),
      onPanStart: dart.fnType(dart.void, []),
      onPanEnd: dart.fnType(dart.void, []),
      cancelPanning: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(PanBehavior, () => ({
      __proto__: dart.getGetters(PanBehavior.__proto__),
      domainAxisTickProvider: panning_tick_provider.PanningTickProvider,
      role: core.String,
      chart: cartesian_chart.CartesianChart$(D),
      isPanning: core.bool,
      lastPosition: math.Point$(core.double)
    }));
    dart.setSetterSignature(PanBehavior, () => ({
      __proto__: dart.getSetters(PanBehavior.__proto__),
      panningCompletedCallback: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(PanBehavior, "package:charts_common/src/chart/common/behavior/zoom/pan_behavior.dart");
    dart.setFieldSignature(PanBehavior, () => ({
      __proto__: dart.getFields(PanBehavior.__proto__),
      [_listener$1]: dart.fieldType(gesture_listener.GestureListener),
      [_domainAxisTickProvider]: dart.fieldType(panning_tick_provider.PanningTickProvider),
      [_chart$11]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_isPanning]: dart.fieldType(core.bool),
      [_lastPosition]: dart.fieldType(math.Point$(core.double)),
      [_panningCompletedCallback]: dart.fieldType(dart.fnType(dart.void, []))
    }));
    return PanBehavior;
  });
  pan_behavior.PanBehavior = pan_behavior.PanBehavior$();
  dart.addTypeTests(pan_behavior.PanBehavior, _is_PanBehavior_default);
  const _name$20 = dart.privateName(panning_tick_provider, "_name");
  let C231;
  let C232;
  let C233;
  let C234;
  panning_tick_provider.PanningTickProviderMode = class PanningTickProviderMode extends core.Object {
    toString() {
      return this[_name$20];
    }
  };
  (panning_tick_provider.PanningTickProviderMode.new = function(index, _name) {
    this.index = index;
    this[_name$20] = _name;
    ;
  }).prototype = panning_tick_provider.PanningTickProviderMode.prototype;
  dart.addTypeTests(panning_tick_provider.PanningTickProviderMode);
  dart.setLibraryUri(panning_tick_provider.PanningTickProviderMode, "package:charts_common/src/chart/common/behavior/zoom/panning_tick_provider.dart");
  dart.setFieldSignature(panning_tick_provider.PanningTickProviderMode, () => ({
    __proto__: dart.getFields(panning_tick_provider.PanningTickProviderMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$20]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(panning_tick_provider.PanningTickProviderMode, ['toString']);
  panning_tick_provider.PanningTickProviderMode.useCachedTicks = C231 || CT.C231;
  panning_tick_provider.PanningTickProviderMode.stepSizeLocked = C232 || CT.C232;
  panning_tick_provider.PanningTickProviderMode.passThrough = C233 || CT.C233;
  panning_tick_provider.PanningTickProviderMode.values = C234 || CT.C234;
  const _mode = dart.privateName(panning_tick_provider, "_mode");
  const _ticks = dart.privateName(panning_tick_provider, "_ticks");
  const _is_PanningTickProvider_default = Symbol('_is_PanningTickProvider_default');
  const tickProvider$ = dart.privateName(panning_tick_provider, "PanningTickProvider.tickProvider");
  panning_tick_provider.PanningTickProvider$ = dart.generic(D => {
    let MutableScaleOfD = () => (MutableScaleOfD = dart.constFn(scale$.MutableScale$(D)))();
    let TickFormatterOfD = () => (TickFormatterOfD = dart.constFn(tick_formatter.TickFormatter$(D)))();
    let MapOfD$String = () => (MapOfD$String = dart.constFn(core.Map$(D, core.String)))();
    let TickHintOfD = () => (TickHintOfD = dart.constFn(tick_provider.TickHint$(D)))();
    class PanningTickProvider extends core.Object {
      get tickProvider() {
        return this[tickProvider$];
      }
      set tickProvider(value) {
        super.tickProvider = value;
      }
      set mode(mode) {
        this[_mode] = mode;
      }
      getTicks(opts) {
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleOfD()._check(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterOfD()._check(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapOfD$String()._check(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
        let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
        TickHintOfD()._check(tickHint);
        if (dart.equals(this[_mode], panning_tick_provider.PanningTickProviderMode.stepSizeLocked)) {
          tickHint = new (TickHintOfD()).new(this[_ticks][$first].value, this[_ticks][$last].value, {tickCount: this[_ticks][$length]});
        }
        if (!dart.equals(this[_mode], panning_tick_provider.PanningTickProviderMode.useCachedTicks)) {
          this[_ticks] = this.tickProvider.getTicks({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, orientation: orientation, viewportExtensionEnabled: viewportExtensionEnabled, tickHint: tickHint});
        }
        return this[_ticks];
      }
    }
    (PanningTickProvider.new = function(tickProvider) {
      this[_mode] = panning_tick_provider.PanningTickProviderMode.passThrough;
      this[_ticks] = null;
      this[tickProvider$] = tickProvider;
      ;
    }).prototype = PanningTickProvider.prototype;
    dart.addTypeTests(PanningTickProvider);
    PanningTickProvider.prototype[_is_PanningTickProvider_default] = true;
    PanningTickProvider[dart.implements] = () => [tick_provider.TickProvider$(D)];
    dart.setMethodSignature(PanningTickProvider, () => ({
      __proto__: dart.getMethods(PanningTickProvider.__proto__),
      getTicks: dart.fnType(core.List$(tick.Tick$(D)), [], {context: chart_context.ChartContext, formatter: core.Object, formatterValueCache: core.Object, graphicsFactory: graphics_factory.GraphicsFactory, orientation: axis$.AxisOrientation, scale: core.Object, tickDrawStrategy: tick_draw_strategy.TickDrawStrategy, tickHint: core.Object, viewportExtensionEnabled: core.bool}, {})
    }));
    dart.setSetterSignature(PanningTickProvider, () => ({
      __proto__: dart.getSetters(PanningTickProvider.__proto__),
      mode: panning_tick_provider.PanningTickProviderMode
    }));
    dart.setLibraryUri(PanningTickProvider, "package:charts_common/src/chart/common/behavior/zoom/panning_tick_provider.dart");
    dart.setFieldSignature(PanningTickProvider, () => ({
      __proto__: dart.getFields(PanningTickProvider.__proto__),
      tickProvider: dart.finalFieldType(tick_provider.TickProvider$(D)),
      [_mode]: dart.fieldType(panning_tick_provider.PanningTickProviderMode),
      [_ticks]: dart.fieldType(core.List$(tick.Tick$(D)))
    }));
    return PanningTickProvider;
  });
  panning_tick_provider.PanningTickProvider = panning_tick_provider.PanningTickProvider$();
  dart.addTypeTests(panning_tick_provider.PanningTickProvider, _is_PanningTickProvider_default);
  scatter_plot_chart.ScatterPlotChart = class ScatterPlotChart extends cartesian_chart.NumericCartesianChart {
    get selectNearestByDomain() {
      return false;
    }
    makeDefaultRenderer() {
      let t9;
      t9 = new (PointRendererOfnum()).new();
      t9.rendererId = "default";
      return t9;
    }
    initDomainAxis() {
      this.domainAxis.tickDrawStrategy = new (GridlineRendererSpecOfnum()).new().createDrawStrategy(this.context, this.graphicsFactory);
    }
  };
  (scatter_plot_chart.ScatterPlotChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    scatter_plot_chart.ScatterPlotChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = scatter_plot_chart.ScatterPlotChart.prototype;
  dart.addTypeTests(scatter_plot_chart.ScatterPlotChart);
  dart.setLibraryUri(scatter_plot_chart.ScatterPlotChart, "package:charts_common/src/chart/scatter_plot/scatter_plot_chart.dart");
  const _listener$2 = dart.privateName(initial_hint_behavior, "_listener");
  const _lifecycleListener$3 = dart.privateName(initial_hint_behavior, "_lifecycleListener");
  const _chart$12 = dart.privateName(initial_hint_behavior, "_chart");
  const _hintDuration = dart.privateName(initial_hint_behavior, "_hintDuration");
  const _maxHintTranslate = dart.privateName(initial_hint_behavior, "_maxHintTranslate");
  const _maxHintScaleFactor = dart.privateName(initial_hint_behavior, "_maxHintScaleFactor");
  const _hintSetupCompleted = dart.privateName(initial_hint_behavior, "_hintSetupCompleted");
  const _firstAxisConfigured = dart.privateName(initial_hint_behavior, "_firstAxisConfigured");
  const _initialViewportTranslatePx = dart.privateName(initial_hint_behavior, "_initialViewportTranslatePx");
  const _initialViewportScalingFactor = dart.privateName(initial_hint_behavior, "_initialViewportScalingFactor");
  const _targetViewportTranslatePx = dart.privateName(initial_hint_behavior, "_targetViewportTranslatePx");
  const _targetViewportScalingFactor = dart.privateName(initial_hint_behavior, "_targetViewportScalingFactor");
  const _onAxisConfigured = dart.privateName(initial_hint_behavior, "_onAxisConfigured");
  const _onAnimationComplete = dart.privateName(initial_hint_behavior, "_onAnimationComplete");
  const _lerpDouble$0 = dart.privateName(initial_hint_behavior, "_lerpDouble");
  const _is_InitialHintBehavior_default = Symbol('_is_InitialHintBehavior_default');
  initial_hint_behavior.InitialHintBehavior$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class InitialHintBehavior extends core.Object {
      get role() {
        return "InitialHint";
      }
      get chart() {
        return this[_chart$12];
      }
      get hintDuration() {
        return this[_hintDuration];
      }
      set hintDuration(duration) {
        this[_hintDuration] = duration;
      }
      get maxHintTranslate() {
        return this[_maxHintTranslate];
      }
      set maxHintTranslate(maxHintTranslate) {
        this[_maxHintTranslate] = maxHintTranslate;
      }
      get maxHintScaleFactor() {
        return this[_maxHintScaleFactor];
      }
      set maxHintScaleFactor(maxHintScaleFactor) {
        if (!(maxHintScaleFactor != null && dart.notNull(maxHintScaleFactor) >= 1.0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart", 85, 12, "maxHintScaleFactor != null && maxHintScaleFactor >= 1.0");
        this[_maxHintScaleFactor] = maxHintScaleFactor;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("InitialHintBehavior can only be attached to a CartesianChart"));
        }
        this[_chart$12] = CartesianChartOfD()._check(chart);
        this[_chart$12].addGestureListener(this[_listener$2]);
        this[_chart$12].addLifecycleListener(this[_lifecycleListener$3]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("InitialHintBehavior can only be removed from a CartesianChart"));
        }
        this.stopHintAnimation();
        this[_chart$12] = CartesianChartOfD()._check(chart);
        this[_chart$12].removeGestureListener(this[_listener$2]);
        this[_chart$12].removeLifecycleListener(this[_lifecycleListener$3]);
        this[_chart$12] = null;
      }
      onTapTest(localPosition) {
        if (this[_chart$12] == null) {
          return false;
        }
        this.stopHintAnimation();
        return this[_chart$12].withinDrawArea(localPosition);
      }
      [_onAxisConfigured]() {
        let t9;
        if (dart.equals(this[_firstAxisConfigured], false)) {
          this[_firstAxisConfigured] = true;
          let domainAxis = this.chart.domainAxis;
          if (!(domainAxis.stepSize !== 0.0)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart", 166, 14, "domainAxis.stepSize != 0.0");
          this[_targetViewportTranslatePx] = domainAxis.viewportTranslatePx;
          this[_targetViewportScalingFactor] = domainAxis.viewportScalingFactor;
          let translateAmount = dart.notNull(domainAxis.stepSize) * dart.notNull(this.maxHintTranslate);
          this[_initialViewportTranslatePx] = dart.notNull(this[_targetViewportTranslatePx]) - translateAmount;
          this[_initialViewportScalingFactor] = (t9 = this.maxHintScaleFactor, t9 == null ? this[_targetViewportScalingFactor] : t9);
          domainAxis.setViewportSettings(this[_initialViewportScalingFactor], this[_initialViewportTranslatePx]);
          this.chart.redraw({skipAnimation: true, skipLayout: false});
        }
      }
      [_onAnimationComplete]() {
        if (dart.equals(this[_hintSetupCompleted], false)) {
          this[_hintSetupCompleted] = true;
          this.startHintAnimation();
        }
      }
      startHintAnimation() {
        let t9;
        this[_chart$12].getMeasureAxis().lockAxis = true;
        t9 = this[_chart$12].getMeasureAxis({axisId: "secondaryMeasureAxisId"});
        t9 == null ? null : t9.lockAxis = true;
      }
      stopHintAnimation() {
        let t9;
        this[_chart$12].getMeasureAxis().lockAxis = false;
        t9 = this[_chart$12].getMeasureAxis({axisId: "secondaryMeasureAxisId"});
        t9 == null ? null : t9.lockAxis = false;
      }
      onHintTick() {
        let percent = this.hintAnimationPercent;
        let scaleFactor = this[_lerpDouble$0](this[_initialViewportScalingFactor], this[_targetViewportScalingFactor], percent);
        let translatePx = this[_lerpDouble$0](this[_initialViewportTranslatePx], this[_targetViewportTranslatePx], percent);
        if (this[_initialViewportScalingFactor] != this[_targetViewportScalingFactor]) {
          translatePx = dart.notNull(translatePx) * dart.notNull(percent);
        }
        let domainAxis = this.chart.domainAxis;
        domainAxis.setViewportSettings(scaleFactor, translatePx, {drawAreaWidth: this.chart.drawAreaBounds[$width]});
        if (dart.notNull(percent) >= 1.0) {
          this.stopHintAnimation();
          this.chart.redraw();
        } else {
          this.chart.redraw({skipAnimation: true, skipLayout: true});
        }
      }
      [_lerpDouble$0](a, b, t) {
        if (a == null && b == null) return null;
        a == null ? a = 0.0 : null;
        b == null ? b = 0.0 : null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
      }
    }
    (InitialHintBehavior.new = function() {
      this[_listener$2] = null;
      this[_lifecycleListener$3] = null;
      this[_chart$12] = null;
      this[_hintDuration] = new core.Duration.new({milliseconds: 3000});
      this[_maxHintTranslate] = 0.0;
      this[_maxHintScaleFactor] = null;
      this[_hintSetupCompleted] = false;
      this[_firstAxisConfigured] = false;
      this[_initialViewportTranslatePx] = null;
      this[_initialViewportScalingFactor] = null;
      this[_targetViewportTranslatePx] = null;
      this[_targetViewportScalingFactor] = null;
      this[_listener$2] = new gesture_listener.GestureListener.new({onTapTest: dart.bind(this, 'onTapTest')});
      this[_lifecycleListener$3] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, _onAxisConfigured), onAnimationComplete: dart.bind(this, _onAnimationComplete)});
    }).prototype = InitialHintBehavior.prototype;
    dart.addTypeTests(InitialHintBehavior);
    InitialHintBehavior.prototype[_is_InitialHintBehavior_default] = true;
    InitialHintBehavior[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(InitialHintBehavior, () => ({
      __proto__: dart.getMethods(InitialHintBehavior.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      onTapTest: dart.fnType(core.bool, [math.Point$(core.double)]),
      [_onAxisConfigured]: dart.fnType(dart.void, []),
      [_onAnimationComplete]: dart.fnType(dart.void, []),
      startHintAnimation: dart.fnType(dart.void, []),
      stopHintAnimation: dart.fnType(dart.void, []),
      onHintTick: dart.fnType(dart.void, []),
      [_lerpDouble$0]: dart.fnType(core.double, [core.double, core.double, core.double])
    }));
    dart.setGetterSignature(InitialHintBehavior, () => ({
      __proto__: dart.getGetters(InitialHintBehavior.__proto__),
      role: core.String,
      chart: cartesian_chart.CartesianChart$(D),
      hintDuration: core.Duration,
      maxHintTranslate: core.double,
      maxHintScaleFactor: core.double
    }));
    dart.setSetterSignature(InitialHintBehavior, () => ({
      __proto__: dart.getSetters(InitialHintBehavior.__proto__),
      hintDuration: core.Duration,
      maxHintTranslate: core.double,
      maxHintScaleFactor: core.double
    }));
    dart.setLibraryUri(InitialHintBehavior, "package:charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart");
    dart.setFieldSignature(InitialHintBehavior, () => ({
      __proto__: dart.getFields(InitialHintBehavior.__proto__),
      [_listener$2]: dart.fieldType(gesture_listener.GestureListener),
      [_lifecycleListener$3]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_chart$12]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_hintDuration]: dart.fieldType(core.Duration),
      [_maxHintTranslate]: dart.fieldType(core.double),
      [_maxHintScaleFactor]: dart.fieldType(core.double),
      [_hintSetupCompleted]: dart.fieldType(core.bool),
      [_firstAxisConfigured]: dart.fieldType(core.bool),
      [_initialViewportTranslatePx]: dart.fieldType(core.double),
      [_initialViewportScalingFactor]: dart.fieldType(core.double),
      [_targetViewportTranslatePx]: dart.fieldType(core.double),
      [_targetViewportScalingFactor]: dart.fieldType(core.double)
    }));
    return InitialHintBehavior;
  });
  initial_hint_behavior.InitialHintBehavior = initial_hint_behavior.InitialHintBehavior$();
  dart.addTypeTests(initial_hint_behavior.InitialHintBehavior, _is_InitialHintBehavior_default);
  line_chart.LineChart = class LineChart extends cartesian_chart.NumericCartesianChart {
    makeDefaultRenderer() {
      let t9;
      t9 = LineRendererOfnum().new();
      t9.rendererId = "default";
      return t9;
    }
  };
  (line_chart.LineChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    line_chart.LineChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = line_chart.LineChart.prototype;
  dart.addTypeTests(line_chart.LineChart);
  dart.setLibraryUri(line_chart.LineChart, "package:charts_common/src/chart/line/line_chart.dart");
  let C235;
  let C236;
  end_points_time_axis_spec.EndPointsTimeAxisSpec = class EndPointsTimeAxisSpec extends date_time_axis_spec.DateTimeAxisSpec {
    _equals(other) {
      if (other == null) return false;
      return this === other || end_points_time_axis_spec.EndPointsTimeAxisSpec.is(other) && super._equals(other);
    }
  };
  (end_points_time_axis_spec.EndPointsTimeAxisSpec.new = function(opts) {
    let t9, t9$;
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    let usingBarRenderer = opts && 'usingBarRenderer' in opts ? opts.usingBarRenderer : false;
    end_points_time_axis_spec.EndPointsTimeAxisSpec.__proto__.new.call(this, {renderSpec: (t9 = renderSpec, t9 == null ? C235 || CT.C235 : t9), tickProviderSpec: (t9$ = tickProviderSpec, t9$ == null ? C236 || CT.C236 : t9$), tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine, viewport: viewport});
    ;
  }).prototype = end_points_time_axis_spec.EndPointsTimeAxisSpec.prototype;
  dart.addTypeTests(end_points_time_axis_spec.EndPointsTimeAxisSpec);
  dart.setLibraryUri(end_points_time_axis_spec.EndPointsTimeAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/end_points_time_axis_spec.dart");
  dart.defineExtensionMethods(end_points_time_axis_spec.EndPointsTimeAxisSpec, ['_equals']);
  const viewport$1 = dart.privateName(ordinal_axis_spec, "OrdinalAxisSpec.viewport");
  ordinal_axis_spec.OrdinalAxisSpec = class OrdinalAxisSpec extends axis_spec.AxisSpec$(core.String) {
    get viewport() {
      return this[viewport$1];
    }
    set viewport(value) {
      super.viewport = value;
    }
    configure(axis, context, graphicsFactory) {
      AxisOfString()._check(axis);
      super.configure(axis, context, graphicsFactory);
      if (axis$.OrdinalAxis.is(axis) && this.viewport != null) {
        axis.setScaleViewport(this.viewport);
      }
    }
    createAxis() {
      return new axis$.OrdinalAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || ordinal_axis_spec.OrdinalAxisSpec.is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.viewport));
      return hashcode;
    }
  };
  (ordinal_axis_spec.OrdinalAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[viewport$1] = viewport;
    ordinal_axis_spec.OrdinalAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine, scaleSpec: scaleSpec});
    ;
  }).prototype = ordinal_axis_spec.OrdinalAxisSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalAxisSpec);
  dart.setMethodSignature(ordinal_axis_spec.OrdinalAxisSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.OrdinalAxisSpec.__proto__),
    createAxis: dart.fnType(axis$.OrdinalAxis, [])
  }));
  dart.setLibraryUri(ordinal_axis_spec.OrdinalAxisSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.setFieldSignature(ordinal_axis_spec.OrdinalAxisSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.OrdinalAxisSpec.__proto__),
    viewport: dart.finalFieldType(axis$.OrdinalViewport)
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.OrdinalAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.OrdinalAxisSpec, ['hashCode']);
  ordinal_axis_spec.OrdinalTickProviderSpec = class OrdinalTickProviderSpec extends axis_spec.TickProviderSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalTickProviderSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalTickProviderSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  ordinal_axis_spec.OrdinalTickFormatterSpec = class OrdinalTickFormatterSpec extends axis_spec.TickFormatterSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalTickFormatterSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalTickFormatterSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalTickFormatterSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  ordinal_axis_spec.OrdinalScaleSpec = class OrdinalScaleSpec extends axis_spec.ScaleSpec$(core.String) {};
  (ordinal_axis_spec.OrdinalScaleSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.OrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.OrdinalScaleSpec);
  dart.setLibraryUri(ordinal_axis_spec.OrdinalScaleSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  ordinal_axis_spec.BasicOrdinalTickProviderSpec = class BasicOrdinalTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new ordinal_tick_provider.OrdinalTickProvider.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.BasicOrdinalTickProviderSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.BasicOrdinalTickProviderSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.BasicOrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.BasicOrdinalTickProviderSpec);
  ordinal_axis_spec.BasicOrdinalTickProviderSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickProviderSpec];
  dart.setMethodSignature(ordinal_axis_spec.BasicOrdinalTickProviderSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.BasicOrdinalTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(ordinal_tick_provider.OrdinalTickProvider, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.BasicOrdinalTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.defineExtensionMethods(ordinal_axis_spec.BasicOrdinalTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.BasicOrdinalTickProviderSpec, ['hashCode']);
  const tickSpecs$1 = dart.privateName(ordinal_axis_spec, "StaticOrdinalTickProviderSpec.tickSpecs");
  ordinal_axis_spec.StaticOrdinalTickProviderSpec = class StaticOrdinalTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[tickSpecs$1];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (StaticTickProviderOfString()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || ordinal_axis_spec.StaticOrdinalTickProviderSpec.is(other) && dart.equals(this.tickSpecs, other.tickSpecs);
    }
    get hashCode() {
      return dart.hashCode(this.tickSpecs);
    }
  };
  (ordinal_axis_spec.StaticOrdinalTickProviderSpec.new = function(tickSpecs) {
    this[tickSpecs$1] = tickSpecs;
    ;
  }).prototype = ordinal_axis_spec.StaticOrdinalTickProviderSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.StaticOrdinalTickProviderSpec);
  ordinal_axis_spec.StaticOrdinalTickProviderSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickProviderSpec];
  dart.setMethodSignature(ordinal_axis_spec.StaticOrdinalTickProviderSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.StaticOrdinalTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(static_tick_provider.StaticTickProvider$(core.String), [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.StaticOrdinalTickProviderSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.setFieldSignature(ordinal_axis_spec.StaticOrdinalTickProviderSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.StaticOrdinalTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(core.List$(tick_spec.TickSpec$(core.String)))
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.StaticOrdinalTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.StaticOrdinalTickProviderSpec, ['hashCode']);
  ordinal_axis_spec.BasicOrdinalTickFormatterSpec = class BasicOrdinalTickFormatterSpec extends core.Object {
    createTickFormatter(context) {
      return new tick_formatter.OrdinalTickFormatter.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.BasicOrdinalTickFormatterSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.BasicOrdinalTickFormatterSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.BasicOrdinalTickFormatterSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.BasicOrdinalTickFormatterSpec);
  ordinal_axis_spec.BasicOrdinalTickFormatterSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalTickFormatterSpec];
  dart.setMethodSignature(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.BasicOrdinalTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(tick_formatter.OrdinalTickFormatter, [chart_context.ChartContext]),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.defineExtensionMethods(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.BasicOrdinalTickFormatterSpec, ['hashCode']);
  ordinal_axis_spec.SimpleOrdinalScaleSpec = class SimpleOrdinalScaleSpec extends core.Object {
    createScale() {
      return new simple_ordinal_scale.SimpleOrdinalScale.new();
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.SimpleOrdinalScaleSpec.new = function() {
    ;
  }).prototype = ordinal_axis_spec.SimpleOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.SimpleOrdinalScaleSpec);
  ordinal_axis_spec.SimpleOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.SimpleOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.SimpleOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, []),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.SimpleOrdinalScaleSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.defineExtensionMethods(ordinal_axis_spec.SimpleOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.SimpleOrdinalScaleSpec, ['hashCode']);
  const pixelSpaceBetweenBars$ = dart.privateName(ordinal_axis_spec, "FixedPixelSpaceOrdinalScaleSpec.pixelSpaceBetweenBars");
  ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec = class FixedPixelSpaceOrdinalScaleSpec extends core.Object {
    get pixelSpaceBetweenBars() {
      return this[pixelSpaceBetweenBars$];
    }
    set pixelSpaceBetweenBars(value) {
      super.pixelSpaceBetweenBars = value;
    }
    createScale() {
      let scale = new simple_ordinal_scale.SimpleOrdinalScale.new();
      scale.rangeBandConfig = new scale$.RangeBandConfig.fixedPixelSpaceBetweenStep(this.pixelSpaceBetweenBars);
      return scale;
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.new = function(pixelSpaceBetweenBars) {
    this[pixelSpaceBetweenBars$] = pixelSpaceBetweenBars;
    ;
  }).prototype = ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec);
  ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, []),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.setFieldSignature(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec.__proto__),
    pixelSpaceBetweenBars: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.FixedPixelSpaceOrdinalScaleSpec, ['hashCode']);
  const pixels$ = dart.privateName(ordinal_axis_spec, "FixedPixelOrdinalScaleSpec.pixels");
  ordinal_axis_spec.FixedPixelOrdinalScaleSpec = class FixedPixelOrdinalScaleSpec extends core.Object {
    get pixels() {
      return this[pixels$];
    }
    set pixels(value) {
      super.pixels = value;
    }
    createScale() {
      let scale = new simple_ordinal_scale.SimpleOrdinalScale.new();
      scale.rangeBandConfig = new scale$.RangeBandConfig.fixedPixel(this.pixels);
      return scale;
    }
    _equals(other) {
      if (other == null) return false;
      return ordinal_axis_spec.SimpleOrdinalScaleSpec.is(other);
    }
    get hashCode() {
      return 37;
    }
  };
  (ordinal_axis_spec.FixedPixelOrdinalScaleSpec.new = function(pixels) {
    this[pixels$] = pixels;
    ;
  }).prototype = ordinal_axis_spec.FixedPixelOrdinalScaleSpec.prototype;
  dart.addTypeTests(ordinal_axis_spec.FixedPixelOrdinalScaleSpec);
  ordinal_axis_spec.FixedPixelOrdinalScaleSpec[dart.implements] = () => [ordinal_axis_spec.OrdinalScaleSpec];
  dart.setMethodSignature(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, () => ({
    __proto__: dart.getMethods(ordinal_axis_spec.FixedPixelOrdinalScaleSpec.__proto__),
    createScale: dart.fnType(ordinal_scale.OrdinalScale, []),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart");
  dart.setFieldSignature(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, () => ({
    __proto__: dart.getFields(ordinal_axis_spec.FixedPixelOrdinalScaleSpec.__proto__),
    pixels: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, ['_equals']);
  dart.defineExtensionAccessors(ordinal_axis_spec.FixedPixelOrdinalScaleSpec, ['hashCode']);
  const _chart$13 = dart.privateName(range_annotation, "_chart");
  const _view$0 = dart.privateName(range_annotation, "_view");
  const _lifecycleListener$4 = dart.privateName(range_annotation, "_lifecycleListener");
  const _annotationMap = dart.privateName(range_annotation, "_annotationMap");
  const _currentKeys$3 = dart.privateName(range_annotation, "_currentKeys");
  const _updateAxisRange = dart.privateName(range_annotation, "_updateAxisRange");
  const _updateViewData$0 = dart.privateName(range_annotation, "_updateViewData");
  const _name$21 = dart.privateName(range_annotation, "_name");
  let C237;
  let C238;
  const _getAnnotationDatum = dart.privateName(range_annotation, "_getAnnotationDatum");
  const _is_RangeAnnotation_default = Symbol('_is_RangeAnnotation_default');
  const annotations$ = dart.privateName(range_annotation, "RangeAnnotation.annotations");
  const defaultColor$ = dart.privateName(range_annotation, "RangeAnnotation.defaultColor");
  const defaultLabelAnchor$ = dart.privateName(range_annotation, "RangeAnnotation.defaultLabelAnchor");
  const defaultLabelDirection$ = dart.privateName(range_annotation, "RangeAnnotation.defaultLabelDirection");
  const defaultLabelPosition$ = dart.privateName(range_annotation, "RangeAnnotation.defaultLabelPosition");
  const defaultLabelStyleSpec$ = dart.privateName(range_annotation, "RangeAnnotation.defaultLabelStyleSpec");
  const defaultStrokeWidthPx$ = dart.privateName(range_annotation, "RangeAnnotation.defaultStrokeWidthPx");
  const extendAxis$ = dart.privateName(range_annotation, "RangeAnnotation.extendAxis");
  const labelPadding$2 = dart.privateName(range_annotation, "RangeAnnotation.labelPadding");
  let C239;
  let C240;
  let C241;
  range_annotation.RangeAnnotation$ = dart.generic(D => {
    let _AnimatedAnnotationOfD = () => (_AnimatedAnnotationOfD = dart.constFn(range_annotation._AnimatedAnnotation$(D)))();
    let IdentityMapOfString$_AnimatedAnnotationOfD = () => (IdentityMapOfString$_AnimatedAnnotationOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _AnimatedAnnotationOfD())))();
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    let _RangeAnnotationLayoutViewOfD = () => (_RangeAnnotationLayoutViewOfD = dart.constFn(range_annotation._RangeAnnotationLayoutView$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    let StringAnd_AnimatedAnnotationOfDToNull = () => (StringAnd_AnimatedAnnotationOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedAnnotationOfD()])))();
    class RangeAnnotation extends core.Object {
      get annotations() {
        return this[annotations$];
      }
      set annotations(value) {
        super.annotations = value;
      }
      get defaultColor() {
        return this[defaultColor$];
      }
      set defaultColor(value) {
        super.defaultColor = value;
      }
      get defaultLabelAnchor() {
        return this[defaultLabelAnchor$];
      }
      set defaultLabelAnchor(value) {
        super.defaultLabelAnchor = value;
      }
      get defaultLabelDirection() {
        return this[defaultLabelDirection$];
      }
      set defaultLabelDirection(value) {
        super.defaultLabelDirection = value;
      }
      get defaultLabelPosition() {
        return this[defaultLabelPosition$];
      }
      set defaultLabelPosition(value) {
        super.defaultLabelPosition = value;
      }
      get defaultLabelStyleSpec() {
        return this[defaultLabelStyleSpec$];
      }
      set defaultLabelStyleSpec(value) {
        super.defaultLabelStyleSpec = value;
      }
      get defaultStrokeWidthPx() {
        return this[defaultStrokeWidthPx$];
      }
      set defaultStrokeWidthPx(value) {
        super.defaultStrokeWidthPx = value;
      }
      get extendAxis() {
        return this[extendAxis$];
      }
      set extendAxis(value) {
        super.extendAxis = value;
      }
      get labelPadding() {
        return this[labelPadding$2];
      }
      set labelPadding(value) {
        super.labelPadding = value;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("RangeAnnotation can only be attached to a CartesianChart"));
        }
        this[_chart$13] = CartesianChartOfD()._check(chart);
        this[_view$0] = new (_RangeAnnotationLayoutViewOfD()).new({defaultColor: this.defaultColor, labelPadding: this.labelPadding, chart: CartesianChartOfD()._check(chart), rangeAnnotation: this});
        chart.addView(this[_view$0]);
        chart.addLifecycleListener(this[_lifecycleListener$4]);
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.removeView(this[_view$0]);
        chart.removeLifecycleListener(this[_lifecycleListener$4]);
        this[_view$0].chart = null;
      }
      shouldShowLabels(annotation) {
        return true;
      }
      [_updateAxisRange](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        if (dart.test(this.extendAxis)) {
          let domainAxis = this[_chart$13].domainAxis;
          this.annotations[$forEach](dart.fn(annotation => {
            let axis = null;
            switch (annotation.axisType) {
              case C237 || CT.C237:
              {
                axis = domainAxis;
                break;
              }
              case C238 || CT.C238:
              {
                axis = this[_chart$13].getMeasureAxis({axisId: annotation.axisId});
                break;
              }
            }
            if (range_annotation.RangeAnnotationSegment.is(annotation)) {
              axis.addDomainValue(annotation.startValue);
              axis.addDomainValue(annotation.endValue);
            } else if (range_annotation.LineAnnotationSegment.is(annotation)) {
              axis.addDomainValue(annotation.value);
            }
          }, AnnotationSegmentToNull()));
        }
      }
      [_updateViewData$0]() {
        this[_currentKeys$3][$clear]();
        this.annotations[$forEach](dart.fn(annotation => {
          let t9, t9$, t9$0, t9$1, t9$2, t9$3, t10, t9$4, t9$5;
          let axis = null;
          switch (annotation.axisType) {
            case C237 || CT.C237:
            {
              axis = this[_chart$13].domainAxis;
              break;
            }
            case C238 || CT.C238:
            {
              axis = this[_chart$13].getMeasureAxis({axisId: annotation.axisId});
              break;
            }
          }
          let key = annotation.key;
          let color = (t9 = annotation.color, t9 == null ? this.defaultColor : t9);
          let startLabel = annotation.startLabel;
          let endLabel = annotation.endLabel;
          let middleLabel = annotation.middleLabel;
          let labelAnchor = (t9$ = annotation.labelAnchor, t9$ == null ? this.defaultLabelAnchor : t9$);
          let labelDirection = (t9$0 = annotation.labelDirection, t9$0 == null ? this.defaultLabelDirection : t9$0);
          if (dart.equals(labelDirection, range_annotation.AnnotationLabelDirection.auto)) {
            switch (annotation.axisType) {
              case C237 || CT.C237:
              {
                labelDirection = range_annotation.AnnotationLabelDirection.vertical;
                break;
              }
              case C238 || CT.C238:
              {
                labelDirection = range_annotation.AnnotationLabelDirection.horizontal;
                break;
              }
            }
          }
          let labelPosition = (t9$1 = annotation.labelPosition, t9$1 == null ? this.defaultLabelPosition : t9$1);
          let labelStyleSpec = (t9$2 = annotation.labelStyleSpec, t9$2 == null ? this.defaultLabelStyleSpec : t9$2);
          let dashPattern = range_annotation.LineAnnotationSegment.is(annotation) ? annotation.dashPattern : null;
          let strokeWidthPx = range_annotation.LineAnnotationSegment.is(annotation) ? (t9$3 = annotation.strokeWidthPx, t9$3 == null ? this.defaultLabelStyleSpec : t9$3) : 0.0;
          let isRange = range_annotation.RangeAnnotationSegment.is(annotation);
          let startValue = null;
          let endValue = null;
          if (range_annotation.RangeAnnotationSegment.is(annotation)) {
            startValue = annotation.startValue;
            endValue = annotation.endValue;
          } else if (range_annotation.LineAnnotationSegment.is(annotation)) {
            startValue = annotation.value;
            endValue = annotation.value;
          }
          let annotationDatum = this[_getAnnotationDatum](startValue, endValue, axis, annotation.axisType);
          let animatingAnnotation = null;
          if (dart.test(this[_annotationMap][$containsKey](key))) {
            animatingAnnotation = this[_annotationMap][$_get](key);
          } else {
            animatingAnnotation = (t9$4 = new (_AnimatedAnnotationOfD()).new({key: key}), t9$4.setNewTarget((t10 = new (_AnnotationElementOfD()).new(), t10.annotation = annotationDatum, t10.annotationSegment = annotation, t10.color = color, t10.dashPattern = dashPattern, t10.startLabel = startLabel, t10.endLabel = endLabel, t10.middleLabel = middleLabel, t10.isRange = isRange, t10.labelAnchor = labelAnchor, t10.labelDirection = labelDirection, t10.labelPosition = labelPosition, t10.labelStyleSpec = labelStyleSpec, t10.strokeWidthPx = core.double._check(strokeWidthPx), t10)), t9$4);
            this[_annotationMap][$_set](key, animatingAnnotation);
          }
          this[_currentKeys$3][$add](key);
          let annotationElement = (t9$5 = new (_AnnotationElementOfD()).new(), t9$5.annotation = annotationDatum, t9$5.annotationSegment = annotation, t9$5.color = color, t9$5.dashPattern = dashPattern, t9$5.startLabel = startLabel, t9$5.endLabel = endLabel, t9$5.middleLabel = middleLabel, t9$5.isRange = isRange, t9$5.labelAnchor = labelAnchor, t9$5.labelDirection = labelDirection, t9$5.labelPosition = labelPosition, t9$5.labelStyleSpec = labelStyleSpec, t9$5.strokeWidthPx = core.double._check(strokeWidthPx), t9$5);
          animatingAnnotation.setNewTarget(annotationElement);
        }, AnnotationSegmentToNull()));
        this[_annotationMap][$forEach](dart.fn((key, annotation) => {
          if (!dart.equals(this[_currentKeys$3][$contains](annotation.key), true)) {
            annotation.animateOut();
          }
        }, StringAnd_AnimatedAnnotationOfDToNull()));
        this[_view$0].annotationMap = this[_annotationMap];
      }
      [_getAnnotationDatum](startValue, endValue, axis, axisType) {
        let startPosition = (dart.notNull(axis.getLocation(startValue)) * 100)[$round]() / 100;
        let endPosition = (dart.notNull(axis.getLocation(endValue)) * 100)[$round]() / 100;
        return new range_annotation._DatumAnnotation.new({startPosition: startPosition, endPosition: endPosition, axisType: axisType});
      }
      get role() {
        return "RangeAnnotation";
      }
    }
    (RangeAnnotation.new = function(annotations, opts) {
      let t9, t9$, t9$0, t9$1, t9$2, t9$3, t9$4;
      let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
      let defaultLabelAnchor = opts && 'defaultLabelAnchor' in opts ? opts.defaultLabelAnchor : null;
      let defaultLabelDirection = opts && 'defaultLabelDirection' in opts ? opts.defaultLabelDirection : null;
      let defaultLabelPosition = opts && 'defaultLabelPosition' in opts ? opts.defaultLabelPosition : null;
      let defaultLabelStyleSpec = opts && 'defaultLabelStyleSpec' in opts ? opts.defaultLabelStyleSpec : null;
      let extendAxis = opts && 'extendAxis' in opts ? opts.extendAxis : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
      let defaultStrokeWidthPx = opts && 'defaultStrokeWidthPx' in opts ? opts.defaultStrokeWidthPx : null;
      this[_chart$13] = null;
      this[_view$0] = null;
      this[_lifecycleListener$4] = null;
      this[_annotationMap] = new (IdentityMapOfString$_AnimatedAnnotationOfD()).new();
      this[_currentKeys$3] = JSArrayOfString().of([]);
      this[annotations$] = annotations;
      this[defaultColor$] = style_factory.StyleFactory.style.rangeAnnotationColor;
      this[defaultLabelAnchor$] = (t9 = defaultLabelAnchor, t9 == null ? range_annotation.RangeAnnotation._defaultLabelAnchor : t9);
      this[defaultLabelDirection$] = (t9$ = defaultLabelDirection, t9$ == null ? range_annotation.RangeAnnotation._defaultLabelDirection : t9$);
      this[defaultLabelPosition$] = (t9$0 = defaultLabelPosition, t9$0 == null ? range_annotation.RangeAnnotation._defaultLabelPosition : t9$0);
      this[defaultLabelStyleSpec$] = (t9$1 = defaultLabelStyleSpec, t9$1 == null ? range_annotation.RangeAnnotation._defaultLabelStyle : t9$1);
      this[extendAxis$] = (t9$2 = extendAxis, t9$2 == null ? true : t9$2);
      this[labelPadding$2] = (t9$3 = labelPadding, t9$3 == null ? 5 : t9$3);
      this[defaultStrokeWidthPx$] = (t9$4 = defaultStrokeWidthPx, t9$4 == null ? 2 : t9$4);
      this[_lifecycleListener$4] = new (LifecycleListenerOfD()).new({onPostprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _updateAxisRange)), onAxisConfigured: dart.bind(this, _updateViewData$0)});
    }).prototype = RangeAnnotation.prototype;
    dart.addTypeTests(RangeAnnotation);
    RangeAnnotation.prototype[_is_RangeAnnotation_default] = true;
    RangeAnnotation[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(RangeAnnotation, () => ({
      __proto__: dart.getMethods(RangeAnnotation.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      shouldShowLabels: dart.fnType(core.bool, [range_annotation.AnnotationSegment]),
      [_updateAxisRange]: dart.fnType(dart.void, [core.Object]),
      [_updateViewData$0]: dart.fnType(dart.void, []),
      [_getAnnotationDatum]: dart.fnType(range_annotation._DatumAnnotation, [dart.dynamic, dart.dynamic, axis$.ImmutableAxis, range_annotation.RangeAnnotationAxisType])
    }));
    dart.setGetterSignature(RangeAnnotation, () => ({
      __proto__: dart.getGetters(RangeAnnotation.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(RangeAnnotation, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(RangeAnnotation, () => ({
      __proto__: dart.getFields(RangeAnnotation.__proto__),
      annotations: dart.finalFieldType(core.List$(range_annotation.AnnotationSegment)),
      defaultColor: dart.finalFieldType(color$.Color),
      defaultLabelAnchor: dart.finalFieldType(range_annotation.AnnotationLabelAnchor),
      defaultLabelDirection: dart.finalFieldType(range_annotation.AnnotationLabelDirection),
      defaultLabelPosition: dart.finalFieldType(range_annotation.AnnotationLabelPosition),
      defaultLabelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec),
      defaultStrokeWidthPx: dart.finalFieldType(core.double),
      extendAxis: dart.finalFieldType(core.bool),
      labelPadding: dart.finalFieldType(core.int),
      [_chart$13]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_view$0]: dart.fieldType(range_annotation._RangeAnnotationLayoutView),
      [_lifecycleListener$4]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_annotationMap]: dart.finalFieldType(collection.LinkedHashMap$(core.String, range_annotation._AnimatedAnnotation$(D))),
      [_currentKeys$3]: dart.finalFieldType(core.List$(core.String))
    }));
    return RangeAnnotation;
  });
  range_annotation.RangeAnnotation = range_annotation.RangeAnnotation$();
  dart.defineLazy(range_annotation.RangeAnnotation, {
    /*range_annotation.RangeAnnotation._defaultLabelAnchor*/get _defaultLabelAnchor() {
      return C239 || CT.C239;
    },
    /*range_annotation.RangeAnnotation._defaultLabelDirection*/get _defaultLabelDirection() {
      return C240 || CT.C240;
    },
    /*range_annotation.RangeAnnotation._defaultLabelPosition*/get _defaultLabelPosition() {
      return C241 || CT.C241;
    },
    /*range_annotation.RangeAnnotation._defaultLabelPadding*/get _defaultLabelPadding() {
      return 5;
    },
    /*range_annotation.RangeAnnotation._defaultLabelStyle*/get _defaultLabelStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 12, color: color$.Color.black});
    },
    /*range_annotation.RangeAnnotation._defaultStrokeWidthPx*/get _defaultStrokeWidthPx() {
      return 2;
    }
  });
  dart.addTypeTests(range_annotation.RangeAnnotation, _is_RangeAnnotation_default);
  const _drawAreaBounds$4 = dart.privateName(range_annotation, "_drawAreaBounds");
  const _graphicsFactory$3 = dart.privateName(range_annotation, "_graphicsFactory");
  const _getAnnotationBounds = dart.privateName(range_annotation, "_getAnnotationBounds");
  const _getLineAnnotationPoints = dart.privateName(range_annotation, "_getLineAnnotationPoints");
  const _getTextStyle$0 = dart.privateName(range_annotation, "_getTextStyle");
  const _getLabelMaxWidth = dart.privateName(range_annotation, "_getLabelMaxWidth");
  const _getLabelPosition = dart.privateName(range_annotation, "_getLabelPosition");
  const _resolveAutoLabelPosition = dart.privateName(range_annotation, "_resolveAutoLabelPosition");
  let C242;
  let C243;
  const _getDomainLabelPosition = dart.privateName(range_annotation, "_getDomainLabelPosition");
  const _getMeasureLabelPosition = dart.privateName(range_annotation, "_getMeasureLabelPosition");
  const _getDomainLabelPositionVertical = dart.privateName(range_annotation, "_getDomainLabelPositionVertical");
  const _getDomainLabelPositionHorizontal = dart.privateName(range_annotation, "_getDomainLabelPositionHorizontal");
  let C244;
  let C245;
  let C246;
  let C247;
  let C248;
  let C249;
  const _getMeasureLabelPositionVertical = dart.privateName(range_annotation, "_getMeasureLabelPositionVertical");
  const _getMeasureLabelPositionHorizontal = dart.privateName(range_annotation, "_getMeasureLabelPositionHorizontal");
  const _is__RangeAnnotationLayoutView_default = Symbol('_is__RangeAnnotationLayoutView_default');
  const layoutConfig$1 = dart.privateName(range_annotation, "_RangeAnnotationLayoutView.layoutConfig");
  const chart$ = dart.privateName(range_annotation, "_RangeAnnotationLayoutView.chart");
  range_annotation._RangeAnnotationLayoutView$ = dart.generic(D => {
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    let _AnimatedAnnotationOfD = () => (_AnimatedAnnotationOfD = dart.constFn(range_annotation._AnimatedAnnotation$(D)))();
    let LinkedHashMapOfString$_AnimatedAnnotationOfD = () => (LinkedHashMapOfString$_AnimatedAnnotationOfD = dart.constFn(collection.LinkedHashMap$(core.String, _AnimatedAnnotationOfD())))();
    let StringAnd_AnimatedAnnotationOfDToNull = () => (StringAnd_AnimatedAnnotationOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedAnnotationOfD()])))();
    let StringTo_AnimatedAnnotationOfD = () => (StringTo_AnimatedAnnotationOfD = dart.constFn(dart.fnType(_AnimatedAnnotationOfD(), [core.String])))();
    class _RangeAnnotationLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[layoutConfig$1];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get chart() {
        return this[chart$];
      }
      set chart(value) {
        this[chart$] = CartesianChartOfD()._check(value);
      }
      get isRtl() {
        return this.chart.context.isRtl;
      }
      get drawBounds() {
        return this[_drawAreaBounds$4];
      }
      set annotationMap(value) {
        LinkedHashMapOfString$_AnimatedAnnotationOfD()._check(value);
        this[_annotationMap] = value;
      }
      get graphicsFactory() {
        return this[_graphicsFactory$3];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$3] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds$4] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        if (this[_annotationMap] == null) {
          return;
        }
        if (animationPercent === 1.0) {
          let keysToRemove = JSArrayOfString().of([]);
          this[_annotationMap][$forEach](dart.fn((key, annotation) => {
            if (dart.test(annotation.animatingOut)) {
              keysToRemove[$add](key);
            }
          }, StringAnd_AnimatedAnnotationOfDToNull()));
          keysToRemove[$forEach](dart.fn(key => this[_annotationMap][$remove](key), StringTo_AnimatedAnnotationOfD()));
        }
        this[_annotationMap][$forEach](dart.fn((key, annotation) => {
          let annotationElement = annotation.getCurrentAnnotation(animationPercent);
          let bounds = this[_getAnnotationBounds](annotationElement);
          if (dart.test(annotationElement.isRange)) {
            canvas.drawRect(bounds, {fill: annotationElement.color});
          } else {
            let points = this[_getLineAnnotationPoints](annotationElement);
            canvas.drawLine({dashPattern: annotationElement.dashPattern, points: points, stroke: annotationElement.color, strokeWidthPx: annotationElement.strokeWidthPx});
          }
          let labelStyle = this[_getTextStyle$0](this.graphicsFactory, annotationElement.labelStyleSpec);
          let rotation = dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.vertical) ? -3.141592653589793 / 2 : 0.0;
          if (dart.test(this.rangeAnnotation.shouldShowLabels(annotationElement.annotationSegment))) {
            let labels = (() => {
              let t9 = new (LinkedMapOf_AnnotationLabelType$String()).new();
              if (annotationElement.startLabel != null) t9[$_set](range_annotation._AnnotationLabelType.start, annotationElement.startLabel);
              if (annotationElement.endLabel != null) t9[$_set](range_annotation._AnnotationLabelType.end, annotationElement.endLabel);
              if (annotationElement.middleLabel != null) t9[$_set](range_annotation._AnnotationLabelType.middle, annotationElement.middleLabel);
              return t9;
            })();
            labels[$forEach](dart.fn((labelType, label) => {
              let t10;
              let labelElement = (t10 = this.graphicsFactory.createTextElement(label), t10.maxWidthStrategy = text_element.MaxWidthStrategy.ellipsize, t10.textStyle = labelStyle, t10);
              labelElement.maxWidth = this[_getLabelMaxWidth](bounds, annotationElement, labelElement);
              let labelPoint = this[_getLabelPosition](labelType, bounds, annotationElement, labelElement);
              if (labelPoint != null) {
                canvas.drawText(labelElement, labelPoint.x, labelPoint.y, {rotation: rotation});
              }
            }, _AnnotationLabelTypeAndStringToNull()));
          }
        }, StringAnd_AnimatedAnnotationOfDToNull()));
      }
      [_getAnnotationBounds](annotationElement) {
        let bounds = null;
        switch (annotationElement.annotation.axisType) {
          case C237 || CT.C237:
          {
            bounds = new (RectangleOfnum()).new(annotationElement.annotation.startPosition, this[_drawAreaBounds$4][$top], dart.notNull(annotationElement.annotation.endPosition) - dart.notNull(annotationElement.annotation.startPosition), this[_drawAreaBounds$4][$height]);
            break;
          }
          case C238 || CT.C238:
          {
            bounds = new (RectangleOfnum()).new(this[_drawAreaBounds$4][$left], annotationElement.annotation.endPosition, this[_drawAreaBounds$4][$width], dart.notNull(annotationElement.annotation.startPosition) - dart.notNull(annotationElement.annotation.endPosition));
            break;
          }
        }
        return bounds;
      }
      [_getLineAnnotationPoints](annotationElement) {
        let points = JSArrayOfPointOfnum().of([]);
        switch (annotationElement.annotation.axisType) {
          case C237 || CT.C237:
          {
            points[$add](new (PointOfnum()).new(annotationElement.annotation.startPosition, this[_drawAreaBounds$4][$top]));
            points[$add](new (PointOfnum()).new(annotationElement.annotation.endPosition, this[_drawAreaBounds$4][$bottom]));
            break;
          }
          case C238 || CT.C238:
          {
            points[$add](new (PointOfnum()).new(this[_drawAreaBounds$4][$left], annotationElement.annotation.startPosition));
            points[$add](new (PointOfnum()).new(this[_drawAreaBounds$4][$right], annotationElement.annotation.endPosition));
            break;
          }
        }
        return points;
      }
      [_getLabelMaxWidth](bounds, annotationElement, labelElement) {
        let maxWidth = 0;
        let calculatedLabelPosition = this[_resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin) && dart.equals(annotationElement.annotation.axisType, range_annotation.RangeAnnotationAxisType.measure)) {
          switch (annotationElement.annotation.axisType) {
            case C237 || CT.C237:
            {
              break;
            }
            case C238 || CT.C238:
            {
              switch (annotationElement.labelAnchor) {
                case C242 || CT.C242:
                {
                  maxWidth = dart.notNull(this.chart.marginLeft) - dart.notNull(this.labelPadding);
                  break;
                }
                case C239 || CT.C239:
                {
                  maxWidth = dart.notNull(this.chart.marginRight) - dart.notNull(this.labelPadding);
                  break;
                }
                case C243 || CT.C243:
                {
                  break;
                }
              }
              break;
            }
          }
        } else {
          if (dart.equals(calculatedLabelPosition, range_annotation.AnnotationLabelPosition.outside)) {
            maxWidth = dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.horizontal) ? this.drawBounds[$width] : this.drawBounds[$height];
          } else {
            maxWidth = dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.horizontal) ? bounds[$width] : bounds[$height];
          }
        }
        return maxWidth[$round]();
      }
      [_getLabelPosition](labelType, bounds, annotationElement, labelElement) {
        switch (annotationElement.annotation.axisType) {
          case C237 || CT.C237:
          {
            return this[_getDomainLabelPosition](labelType, bounds, annotationElement, labelElement);
            break;
          }
          case C238 || CT.C238:
          {
            return this[_getMeasureLabelPosition](labelType, bounds, annotationElement, labelElement);
            break;
          }
        }
        return null;
      }
      [_getDomainLabelPosition](labelType, bounds, annotationElement, labelElement) {
        if (dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.vertical)) {
          return this[_getDomainLabelPositionVertical](labelType, bounds, annotationElement, labelElement);
        } else {
          return this[_getDomainLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement);
        }
      }
      [_getDomainLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[_resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C243 || CT.C243:
          {
            labelY = dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2 - dart.notNull(labelElement.measurement.verticalSliceWidth) / 2 - dart.notNull(this.labelPadding);
            break;
          }
          case C239 || CT.C239:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              labelY = dart.notNull(bounds[$top]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
            } else {
              labelY = dart.notNull(bounds[$top]) + dart.notNull(this.labelPadding);
            }
            break;
          }
          case C242 || CT.C242:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              labelY = dart.notNull(bounds[$bottom]) + dart.notNull(this.labelPadding);
            } else {
              labelY = dart.notNull(bounds[$bottom]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C244 || CT.C244:
          case C241 || CT.C241:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
            break;
          }
          case C248 || CT.C248:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelX = dart.notNull(bounds[$left]) - dart.notNull(labelElement.measurement.horizontalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelX = dart.notNull(bounds[$right]) + dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelX = dart.notNull(bounds[$left]) + (dart.notNull(bounds[$width]) - dart.notNull(labelElement.measurement.horizontalSliceWidth)) / 2;
                break;
              }
            }
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C249 || CT.C249:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelX = dart.notNull(bounds[$left]) + dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelX = dart.notNull(bounds[$right]) - dart.notNull(labelElement.measurement.horizontalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelX = dart.notNull(bounds[$left]) + (dart.notNull(bounds[$width]) - dart.notNull(labelElement.measurement.horizontalSliceWidth)) / 2;
                break;
              }
            }
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
        }
        return new (PointOfint()).new(labelX[$round](), labelY[$round]());
      }
      [_getDomainLabelPositionVertical](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[_resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C243 || CT.C243:
          {
            labelY = dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2 + dart.notNull(labelElement.measurement.horizontalSliceWidth) / 2 + dart.notNull(this.labelPadding);
            break;
          }
          case C239 || CT.C239:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              labelY = dart.notNull(bounds[$top]) + dart.notNull(labelElement.measurement.horizontalSliceWidth) + dart.notNull(this.labelPadding);
            } else {
              labelY = dart.notNull(bounds[$top]) + dart.notNull(labelElement.measurement.horizontalSliceWidth) + dart.notNull(this.labelPadding);
            }
            break;
          }
          case C242 || CT.C242:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              labelY = dart.notNull(bounds[$bottom]) + dart.notNull(this.labelPadding);
            } else {
              labelY = dart.notNull(bounds[$bottom]) - dart.notNull(labelElement.measurement.horizontalSliceWidth) - dart.notNull(this.labelPadding);
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C244 || CT.C244:
          case C241 || CT.C241:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
            break;
          }
          case C248 || CT.C248:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelX = dart.notNull(bounds[$left]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelX = dart.notNull(bounds[$right]) + dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelX = dart.notNull(bounds[$left]) + (dart.notNull(bounds[$width]) - dart.notNull(labelElement.measurement.verticalSliceWidth)) / 2;
                break;
              }
            }
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C249 || CT.C249:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelX = dart.notNull(bounds[$left]) + dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelX = dart.notNull(bounds[$right]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelX = dart.notNull(bounds[$left]) + (dart.notNull(bounds[$width]) - dart.notNull(labelElement.measurement.verticalSliceWidth)) / 2;
                break;
              }
            }
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
        }
        return new (PointOfint()).new(labelX[$round](), labelY[$round]());
      }
      [_getMeasureLabelPosition](labelType, bounds, annotationElement, labelElement) {
        if (dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.vertical)) {
          return this[_getMeasureLabelPositionVertical](labelType, bounds, annotationElement, labelElement);
        } else {
          return this[_getMeasureLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement);
        }
      }
      [_getMeasureLabelPositionHorizontal](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[_resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C243 || CT.C243:
          {
            labelX = dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2 - dart.notNull(labelElement.measurement.horizontalSliceWidth) / 2;
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C239 || CT.C239:
          case C242 || CT.C242:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              let alignLeft = dart.test(this.isRtl) ? dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.end) : dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.start);
              if (alignLeft) {
                labelX = dart.notNull(bounds[$left]) - dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.rtl;
              } else {
                labelX = dart.notNull(bounds[$right]) + dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              let alignLeft = dart.test(this.isRtl) ? dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.end) : dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.start);
              if (alignLeft) {
                labelX = dart.notNull(bounds[$left]) + dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = dart.notNull(bounds[$right]) - dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.rtl;
              }
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C244 || CT.C244:
          case C241 || CT.C241:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
            break;
          }
          case C248 || CT.C248:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelY = dart.notNull(bounds[$bottom]) + dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelY = dart.notNull(bounds[$top]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelY = dart.notNull(bounds[$top]) + (dart.notNull(bounds[$height]) - dart.notNull(labelElement.measurement.verticalSliceWidth)) / 2;
                break;
              }
            }
            break;
          }
          case C249 || CT.C249:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelY = dart.notNull(bounds[$bottom]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelY = dart.notNull(bounds[$top]) + dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelY = dart.notNull(bounds[$top]) + (dart.notNull(bounds[$height]) - dart.notNull(labelElement.measurement.verticalSliceWidth)) / 2;
                break;
              }
            }
            break;
          }
        }
        return new (PointOfint()).new(labelX[$round](), labelY[$round]());
      }
      [_getMeasureLabelPositionVertical](labelType, bounds, annotationElement, labelElement) {
        let labelX = 0;
        let labelY = 0;
        let calculatedLabelPosition = this[_resolveAutoLabelPosition](bounds, annotationElement, labelElement);
        switch (annotationElement.labelAnchor) {
          case C243 || CT.C243:
          {
            labelX = dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2 - dart.notNull(labelElement.measurement.verticalSliceWidth) / 2;
            labelElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C239 || CT.C239:
          case C242 || CT.C242:
          {
            if (dart.equals(annotationElement.labelPosition, range_annotation.AnnotationLabelPosition.margin)) {
              let alignLeft = dart.test(this.isRtl) ? dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.end) : dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.start);
              if (alignLeft) {
                labelX = dart.notNull(bounds[$left]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = dart.notNull(bounds[$right]) + dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            } else {
              let alignLeft = dart.test(this.isRtl) ? dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.end) : dart.equals(annotationElement.labelAnchor, range_annotation.AnnotationLabelAnchor.start);
              if (alignLeft) {
                labelX = dart.notNull(bounds[$left]) + dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              } else {
                labelX = dart.notNull(bounds[$right]) - dart.notNull(labelElement.measurement.verticalSliceWidth) - dart.notNull(this.labelPadding);
                labelElement.textDirection = text_element.TextDirection.ltr;
              }
            }
            break;
          }
        }
        switch (calculatedLabelPosition) {
          case C244 || CT.C244:
          case C241 || CT.C241:
          {
            dart.throw(new core.ArgumentError.new(range_annotation._unresolvedAutoMessage));
            break;
          }
          case C248 || CT.C248:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelY = dart.notNull(bounds[$bottom]) + dart.notNull(labelElement.measurement.horizontalSliceWidth) + dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelY = dart.notNull(bounds[$top]) - dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelY = dart.notNull(bounds[$bottom]) + (dart.notNull(labelElement.measurement.horizontalSliceWidth) - dart.notNull(bounds[$height])) / 2;
                break;
              }
            }
            break;
          }
          case C249 || CT.C249:
          {
            switch (labelType) {
              case C245 || CT.C245:
              {
                labelY = dart.notNull(bounds[$bottom]) - dart.notNull(this.labelPadding);
                break;
              }
              case C246 || CT.C246:
              {
                labelY = dart.notNull(bounds[$top]) + dart.notNull(labelElement.measurement.horizontalSliceWidth) + dart.notNull(this.labelPadding);
                break;
              }
              case C247 || CT.C247:
              {
                labelY = dart.notNull(bounds[$bottom]) + (dart.notNull(labelElement.measurement.horizontalSliceWidth) - dart.notNull(bounds[$height])) / 2;
                break;
              }
            }
            break;
          }
        }
        return new (PointOfint()).new(labelX[$round](), labelY[$round]());
      }
      [_resolveAutoLabelPosition](bounds, annotationElement, labelElement) {
        let calculatedLabelPosition = annotationElement.labelPosition;
        if (dart.equals(calculatedLabelPosition, range_annotation.AnnotationLabelPosition.auto) || dart.equals(calculatedLabelPosition, range_annotation.AnnotationLabelPosition.margin)) {
          let isDomain = dart.equals(annotationElement.annotation.axisType, range_annotation.RangeAnnotationAxisType.domain);
          let annotationBoundsSize = isDomain ? bounds[$width] : bounds[$height];
          let drawBoundsSize = isDomain ? this.drawBounds[$width] : this.drawBounds[$height];
          let isVertical = dart.equals(annotationElement.labelDirection, range_annotation.AnnotationLabelDirection.vertical);
          let labelSize = isDomain && isVertical || !isDomain && !isVertical ? labelElement.measurement.verticalSliceWidth : labelElement.measurement.horizontalSliceWidth;
          let totalPadding = dart.notNull(this.labelPadding) * 2;
          let insideBarWidth = dart.notNull(annotationBoundsSize) - totalPadding;
          let outsideBarWidth = dart.notNull(drawBoundsSize) - dart.notNull(annotationBoundsSize) - totalPadding;
          calculatedLabelPosition = insideBarWidth >= outsideBarWidth || dart.notNull(labelSize) < insideBarWidth ? range_annotation.AnnotationLabelPosition.inside : range_annotation.AnnotationLabelPosition.outside;
        }
        return calculatedLabelPosition;
      }
      get componentBounds() {
        return this[_drawAreaBounds$4];
      }
      get isSeriesRenderer() {
        return false;
      }
      [_getTextStyle$0](graphicsFactory, labelSpec) {
        let t11, t11$, t11$0, t11$1, t11$2, t11$3, t10;
        t10 = graphicsFactory.createTextPaint();
        t10.color = (t11$ = (t11 = labelSpec, t11 == null ? null : t11.color), t11$ == null ? color$.Color.black : t11$);
        t10.fontFamily = (t11$0 = labelSpec, t11$0 == null ? null : t11$0.fontFamily);
        t10.fontSize = (t11$2 = (t11$1 = labelSpec, t11$1 == null ? null : t11$1.fontSize), t11$2 == null ? 12 : t11$2);
        t10.lineHeight = (t11$3 = labelSpec, t11$3 == null ? null : t11$3.lineHeight);
        return t10;
      }
    }
    (_RangeAnnotationLayoutView.new = function(opts) {
      let defaultColor = opts && 'defaultColor' in opts ? opts.defaultColor : null;
      let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let rangeAnnotation = opts && 'rangeAnnotation' in opts ? opts.rangeAnnotation : null;
      this[_drawAreaBounds$4] = null;
      this[_graphicsFactory$3] = null;
      this[_annotationMap] = null;
      this.defaultColor = defaultColor;
      this.labelPadding = labelPadding;
      this[chart$] = chart;
      this.rangeAnnotation = rangeAnnotation;
      this[layoutConfig$1] = new layout_view.LayoutViewConfig.new({paintOrder: -10, position: layout_view.LayoutPosition.DrawArea, positionOrder: 0});
      ;
    }).prototype = _RangeAnnotationLayoutView.prototype;
    dart.addTypeTests(_RangeAnnotationLayoutView);
    _RangeAnnotationLayoutView.prototype[_is__RangeAnnotationLayoutView_default] = true;
    dart.setMethodSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getMethods(_RangeAnnotationLayoutView.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [_getAnnotationBounds]: dart.fnType(math.Rectangle$(core.num), [range_annotation._AnnotationElement$(D)]),
      [_getLineAnnotationPoints]: dart.fnType(core.List$(math.Point$(core.num)), [range_annotation._AnnotationElement$(D)]),
      [_getLabelMaxWidth]: dart.fnType(core.int, [math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getLabelPosition]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getDomainLabelPosition]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getDomainLabelPositionHorizontal]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getDomainLabelPositionVertical]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getMeasureLabelPosition]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getMeasureLabelPositionHorizontal]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getMeasureLabelPositionVertical]: dart.fnType(math.Point$(core.int), [range_annotation._AnnotationLabelType, math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_resolveAutoLabelPosition]: dart.fnType(range_annotation.AnnotationLabelPosition, [math.Rectangle$(core.num), range_annotation._AnnotationElement$(D), text_element.TextElement]),
      [_getTextStyle$0]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec])
    }));
    dart.setGetterSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getGetters(_RangeAnnotationLayoutView.__proto__),
      isRtl: core.bool,
      drawBounds: math.Rectangle$(core.int),
      graphicsFactory: graphics_factory.GraphicsFactory,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getSetters(_RangeAnnotationLayoutView.__proto__),
      annotationMap: core.Object,
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(_RangeAnnotationLayoutView, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(_RangeAnnotationLayoutView, () => ({
      __proto__: dart.getFields(_RangeAnnotationLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(layout_view.LayoutViewConfig),
      defaultColor: dart.finalFieldType(color$.Color),
      labelPadding: dart.finalFieldType(core.int),
      rangeAnnotation: dart.finalFieldType(range_annotation.RangeAnnotation),
      chart: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_drawAreaBounds$4]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$3]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_annotationMap]: dart.fieldType(collection.LinkedHashMap$(core.String, range_annotation._AnimatedAnnotation$(D)))
    }));
    return _RangeAnnotationLayoutView;
  });
  range_annotation._RangeAnnotationLayoutView = range_annotation._RangeAnnotationLayoutView$();
  dart.addTypeTests(range_annotation._RangeAnnotationLayoutView, _is__RangeAnnotationLayoutView_default);
  range_annotation._DatumAnnotation = class _DatumAnnotation extends core.Object {
    static from(other, startPosition, endPosition) {
      let t10, t10$;
      if (startPosition === void 0) startPosition = null;
      if (endPosition === void 0) endPosition = null;
      return new range_annotation._DatumAnnotation.new({startPosition: (t10 = startPosition, t10 == null ? other.startPosition : t10), endPosition: (t10$ = endPosition, t10$ == null ? other.endPosition : t10$), axisType: other.axisType});
    }
  };
  (range_annotation._DatumAnnotation.new = function(opts) {
    let startPosition = opts && 'startPosition' in opts ? opts.startPosition : null;
    let endPosition = opts && 'endPosition' in opts ? opts.endPosition : null;
    let axisType = opts && 'axisType' in opts ? opts.axisType : null;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.axisType = axisType;
    ;
  }).prototype = range_annotation._DatumAnnotation.prototype;
  dart.addTypeTests(range_annotation._DatumAnnotation);
  dart.setLibraryUri(range_annotation._DatumAnnotation, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation._DatumAnnotation, () => ({
    __proto__: dart.getFields(range_annotation._DatumAnnotation.__proto__),
    startPosition: dart.finalFieldType(core.double),
    endPosition: dart.finalFieldType(core.double),
    axisType: dart.finalFieldType(range_annotation.RangeAnnotationAxisType)
  }));
  const _is__AnnotationElement_default = Symbol('_is__AnnotationElement_default');
  range_annotation._AnnotationElement$ = dart.generic(D => {
    let _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    class _AnnotationElement extends core.Object {
      clone() {
        let t10;
        t10 = new (_AnnotationElementOfD()).new();
        t10.annotation = range_annotation._DatumAnnotation.from(this.annotation);
        t10.annotationSegment = this.annotationSegment;
        t10.color = this.color != null ? new color$.Color.fromOther({color: this.color}) : null;
        t10.startLabel = this.startLabel;
        t10.endLabel = this.endLabel;
        t10.middleLabel = this.middleLabel;
        t10.isRange = this.isRange;
        t10.labelAnchor = this.labelAnchor;
        t10.labelDirection = this.labelDirection;
        t10.labelPosition = this.labelPosition;
        t10.labelStyleSpec = this.labelStyleSpec;
        t10.dashPattern = this.dashPattern;
        t10.strokeWidthPx = this.strokeWidthPx;
        return t10;
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let targetAnnotation = target.annotation;
        let previousAnnotation = previous.annotation;
        let startPosition = (dart.notNull(targetAnnotation.startPosition) - dart.notNull(previousAnnotation.startPosition)) * dart.notNull(animationPercent) + dart.notNull(previousAnnotation.startPosition);
        let endPosition = (dart.notNull(targetAnnotation.endPosition) - dart.notNull(previousAnnotation.endPosition)) * dart.notNull(animationPercent) + dart.notNull(previousAnnotation.endPosition);
        this.annotation = range_annotation._DatumAnnotation.from(targetAnnotation, startPosition, endPosition);
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
      }
    }
    (_AnnotationElement.new = function() {
      this.annotation = null;
      this.annotationSegment = null;
      this.color = null;
      this.startLabel = null;
      this.endLabel = null;
      this.middleLabel = null;
      this.isRange = null;
      this.labelAnchor = null;
      this.labelDirection = null;
      this.labelPosition = null;
      this.labelStyleSpec = null;
      this.dashPattern = null;
      this.strokeWidthPx = null;
      ;
    }).prototype = _AnnotationElement.prototype;
    dart.addTypeTests(_AnnotationElement);
    _AnnotationElement.prototype[_is__AnnotationElement_default] = true;
    dart.setMethodSignature(_AnnotationElement, () => ({
      __proto__: dart.getMethods(_AnnotationElement.__proto__),
      clone: dart.fnType(range_annotation._AnnotationElement$(D), []),
      updateAnimationPercent: dart.fnType(dart.void, [range_annotation._AnnotationElement, range_annotation._AnnotationElement, core.double])
    }));
    dart.setLibraryUri(_AnnotationElement, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(_AnnotationElement, () => ({
      __proto__: dart.getFields(_AnnotationElement.__proto__),
      annotation: dart.fieldType(range_annotation._DatumAnnotation),
      annotationSegment: dart.fieldType(range_annotation.AnnotationSegment),
      color: dart.fieldType(color$.Color),
      startLabel: dart.fieldType(core.String),
      endLabel: dart.fieldType(core.String),
      middleLabel: dart.fieldType(core.String),
      isRange: dart.fieldType(core.bool),
      labelAnchor: dart.fieldType(range_annotation.AnnotationLabelAnchor),
      labelDirection: dart.fieldType(range_annotation.AnnotationLabelDirection),
      labelPosition: dart.fieldType(range_annotation.AnnotationLabelPosition),
      labelStyleSpec: dart.fieldType(axis_spec.TextStyleSpec),
      dashPattern: dart.fieldType(core.List$(core.int)),
      strokeWidthPx: dart.fieldType(core.double)
    }));
    return _AnnotationElement;
  });
  range_annotation._AnnotationElement = range_annotation._AnnotationElement$();
  dart.addTypeTests(range_annotation._AnnotationElement, _is__AnnotationElement_default);
  let C250;
  range_annotation._AnnotationLabelType = class _AnnotationLabelType extends core.Object {
    toString() {
      return this[_name$21];
    }
  };
  (range_annotation._AnnotationLabelType.new = function(index, _name) {
    this.index = index;
    this[_name$21] = _name;
    ;
  }).prototype = range_annotation._AnnotationLabelType.prototype;
  dart.addTypeTests(range_annotation._AnnotationLabelType);
  dart.setLibraryUri(range_annotation._AnnotationLabelType, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation._AnnotationLabelType, () => ({
    __proto__: dart.getFields(range_annotation._AnnotationLabelType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation._AnnotationLabelType, ['toString']);
  range_annotation._AnnotationLabelType.start = C245 || CT.C245;
  range_annotation._AnnotationLabelType.end = C246 || CT.C246;
  range_annotation._AnnotationLabelType.middle = C247 || CT.C247;
  range_annotation._AnnotationLabelType.values = C250 || CT.C250;
  const _previousAnnotation = dart.privateName(range_annotation, "_previousAnnotation");
  const _targetAnnotation = dart.privateName(range_annotation, "_targetAnnotation");
  const _currentAnnotation = dart.privateName(range_annotation, "_currentAnnotation");
  const _is__AnimatedAnnotation_default = Symbol('_is__AnimatedAnnotation_default');
  range_annotation._AnimatedAnnotation$ = dart.generic(D => {
    let _AnnotationElementOfD = () => (_AnnotationElementOfD = dart.constFn(range_annotation._AnnotationElement$(D)))();
    class _AnimatedAnnotation extends core.Object {
      animateOut() {
        let newTarget = this[_currentAnnotation].clone();
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _AnnotationElementOfD()._check(newTarget);
        this.animatingOut = false;
        this[_currentAnnotation] == null ? this[_currentAnnotation] = newTarget.clone() : null;
        this[_previousAnnotation] = this[_currentAnnotation].clone();
        this[_targetAnnotation] = newTarget;
      }
      getCurrentAnnotation(animationPercent) {
        if (animationPercent === 1.0 || this[_previousAnnotation] == null) {
          this[_currentAnnotation] = this[_targetAnnotation];
          this[_previousAnnotation] = this[_targetAnnotation];
          return this[_currentAnnotation];
        }
        this[_currentAnnotation].updateAnimationPercent(this[_previousAnnotation], this[_targetAnnotation], animationPercent);
        return this[_currentAnnotation];
      }
    }
    (_AnimatedAnnotation.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      this[_previousAnnotation] = null;
      this[_targetAnnotation] = null;
      this[_currentAnnotation] = null;
      this.animatingOut = false;
      this.key = key;
      ;
    }).prototype = _AnimatedAnnotation.prototype;
    dart.addTypeTests(_AnimatedAnnotation);
    _AnimatedAnnotation.prototype[_is__AnimatedAnnotation_default] = true;
    dart.setMethodSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getMethods(_AnimatedAnnotation.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [core.Object]),
      getCurrentAnnotation: dart.fnType(range_annotation._AnnotationElement$(D), [core.double])
    }));
    dart.setLibraryUri(_AnimatedAnnotation, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(_AnimatedAnnotation, () => ({
      __proto__: dart.getFields(_AnimatedAnnotation.__proto__),
      key: dart.finalFieldType(core.String),
      [_previousAnnotation]: dart.fieldType(range_annotation._AnnotationElement$(D)),
      [_targetAnnotation]: dart.fieldType(range_annotation._AnnotationElement$(D)),
      [_currentAnnotation]: dart.fieldType(range_annotation._AnnotationElement$(D)),
      animatingOut: dart.fieldType(core.bool)
    }));
    return _AnimatedAnnotation;
  });
  range_annotation._AnimatedAnnotation = range_annotation._AnimatedAnnotation$();
  dart.addTypeTests(range_annotation._AnimatedAnnotation, _is__AnimatedAnnotation_default);
  const _is_RangeAnnotationTester_default = Symbol('_is_RangeAnnotationTester_default');
  const behavior$1 = dart.privateName(range_annotation, "RangeAnnotationTester.behavior");
  range_annotation.RangeAnnotationTester$ = dart.generic(D => {
    let _AnimatedAnnotationOfD = () => (_AnimatedAnnotationOfD = dart.constFn(range_annotation._AnimatedAnnotation$(D)))();
    let StringAnd_AnimatedAnnotationOfDToNull = () => (StringAnd_AnimatedAnnotationOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, _AnimatedAnnotationOfD()])))();
    class RangeAnnotationTester extends core.Object {
      get behavior() {
        return this[behavior$1];
      }
      set behavior(value) {
        super.behavior = value;
      }
      set graphicsFactory(value) {
        this.behavior[_view$0][_graphicsFactory$3] = value;
      }
      mockLayout(bounds) {
        this.behavior[_view$0].layout(bounds, bounds);
      }
      doesAnnotationExist(opts) {
        let startPosition = opts && 'startPosition' in opts ? opts.startPosition : null;
        let endPosition = opts && 'endPosition' in opts ? opts.endPosition : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
        let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
        let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
        let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
        let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
        let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
        let exists = false;
        this.behavior[_annotationMap][$forEach](dart.fn((key, a) => {
          let currentAnnotation = a[_currentAnnotation];
          let annotation = currentAnnotation.annotation;
          if (annotation.startPosition == startPosition && annotation.endPosition == endPosition && dart.equals(currentAnnotation.color, color) && currentAnnotation.startLabel == startLabel && currentAnnotation.endLabel == endLabel && currentAnnotation.middleLabel == middleLabel && dart.equals(currentAnnotation.labelAnchor, labelAnchor) && dart.equals(currentAnnotation.labelDirection, labelDirection) && dart.equals(currentAnnotation.labelPosition, labelPosition) && (!range_annotation.LineAnnotationSegment.is(currentAnnotation) || dart.equals(currentAnnotation.dashPattern, dashPattern))) {
            exists = true;
            return;
          }
        }, StringAnd_AnimatedAnnotationOfDToNull()));
        return exists;
      }
    }
    (RangeAnnotationTester.new = function(behavior) {
      this[behavior$1] = behavior;
      ;
    }).prototype = RangeAnnotationTester.prototype;
    dart.addTypeTests(RangeAnnotationTester);
    RangeAnnotationTester.prototype[_is_RangeAnnotationTester_default] = true;
    dart.setMethodSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getMethods(RangeAnnotationTester.__proto__),
      mockLayout: dart.fnType(dart.dynamic, [math.Rectangle$(core.int)]),
      doesAnnotationExist: dart.fnType(core.bool, [], {color: color$.Color, dashPattern: core.List$(core.int), endLabel: core.String, endPosition: core.num, labelAnchor: range_annotation.AnnotationLabelAnchor, labelDirection: range_annotation.AnnotationLabelDirection, labelPosition: range_annotation.AnnotationLabelPosition, middleLabel: core.String, startLabel: core.String, startPosition: core.num}, {})
    }));
    dart.setSetterSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getSetters(RangeAnnotationTester.__proto__),
      graphicsFactory: graphics_factory.GraphicsFactory
    }));
    dart.setLibraryUri(RangeAnnotationTester, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(RangeAnnotationTester, () => ({
      __proto__: dart.getFields(RangeAnnotationTester.__proto__),
      behavior: dart.finalFieldType(range_annotation.RangeAnnotation$(D))
    }));
    return RangeAnnotationTester;
  });
  range_annotation.RangeAnnotationTester = range_annotation.RangeAnnotationTester$();
  dart.addTypeTests(range_annotation.RangeAnnotationTester, _is_RangeAnnotationTester_default);
  const _is_AnnotationSegment_default = Symbol('_is_AnnotationSegment_default');
  const axisType$ = dart.privateName(range_annotation, "AnnotationSegment.axisType");
  const axisId$ = dart.privateName(range_annotation, "AnnotationSegment.axisId");
  const color$7 = dart.privateName(range_annotation, "AnnotationSegment.color");
  const startLabel$ = dart.privateName(range_annotation, "AnnotationSegment.startLabel");
  const endLabel$ = dart.privateName(range_annotation, "AnnotationSegment.endLabel");
  const middleLabel$ = dart.privateName(range_annotation, "AnnotationSegment.middleLabel");
  const labelAnchor$1 = dart.privateName(range_annotation, "AnnotationSegment.labelAnchor");
  const labelDirection$ = dart.privateName(range_annotation, "AnnotationSegment.labelDirection");
  const labelPosition$1 = dart.privateName(range_annotation, "AnnotationSegment.labelPosition");
  const labelStyleSpec$0 = dart.privateName(range_annotation, "AnnotationSegment.labelStyleSpec");
  range_annotation.AnnotationSegment$ = dart.generic(D => {
    class AnnotationSegment extends core.Object {
      get axisType() {
        return this[axisType$];
      }
      set axisType(value) {
        super.axisType = value;
      }
      get axisId() {
        return this[axisId$];
      }
      set axisId(value) {
        super.axisId = value;
      }
      get color() {
        return this[color$7];
      }
      set color(value) {
        super.color = value;
      }
      get startLabel() {
        return this[startLabel$];
      }
      set startLabel(value) {
        super.startLabel = value;
      }
      get endLabel() {
        return this[endLabel$];
      }
      set endLabel(value) {
        super.endLabel = value;
      }
      get middleLabel() {
        return this[middleLabel$];
      }
      set middleLabel(value) {
        super.middleLabel = value;
      }
      get labelAnchor() {
        return this[labelAnchor$1];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelDirection() {
        return this[labelDirection$];
      }
      set labelDirection(value) {
        super.labelDirection = value;
      }
      get labelPosition() {
        return this[labelPosition$1];
      }
      set labelPosition(value) {
        super.labelPosition = value;
      }
      get labelStyleSpec() {
        return this[labelStyleSpec$0];
      }
      set labelStyleSpec(value) {
        super.labelStyleSpec = value;
      }
    }
    (AnnotationSegment.new = function(axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      this[axisType$] = axisType;
      this[axisId$] = axisId;
      this[color$7] = color;
      this[startLabel$] = startLabel;
      this[endLabel$] = endLabel;
      this[middleLabel$] = middleLabel;
      this[labelAnchor$1] = labelAnchor;
      this[labelDirection$] = labelDirection;
      this[labelPosition$1] = labelPosition;
      this[labelStyleSpec$0] = labelStyleSpec;
      ;
    }).prototype = AnnotationSegment.prototype;
    dart.addTypeTests(AnnotationSegment);
    AnnotationSegment.prototype[_is_AnnotationSegment_default] = true;
    dart.setLibraryUri(AnnotationSegment, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(AnnotationSegment, () => ({
      __proto__: dart.getFields(AnnotationSegment.__proto__),
      axisType: dart.finalFieldType(range_annotation.RangeAnnotationAxisType),
      axisId: dart.finalFieldType(core.String),
      color: dart.finalFieldType(color$.Color),
      startLabel: dart.finalFieldType(core.String),
      endLabel: dart.finalFieldType(core.String),
      middleLabel: dart.finalFieldType(core.String),
      labelAnchor: dart.finalFieldType(range_annotation.AnnotationLabelAnchor),
      labelDirection: dart.finalFieldType(range_annotation.AnnotationLabelDirection),
      labelPosition: dart.finalFieldType(range_annotation.AnnotationLabelPosition),
      labelStyleSpec: dart.finalFieldType(axis_spec.TextStyleSpec)
    }));
    return AnnotationSegment;
  });
  range_annotation.AnnotationSegment = range_annotation.AnnotationSegment$();
  dart.addTypeTests(range_annotation.AnnotationSegment, _is_AnnotationSegment_default);
  const _is_RangeAnnotationSegment_default = Symbol('_is_RangeAnnotationSegment_default');
  const startValue$ = dart.privateName(range_annotation, "RangeAnnotationSegment.startValue");
  const endValue$ = dart.privateName(range_annotation, "RangeAnnotationSegment.endValue");
  range_annotation.RangeAnnotationSegment$ = dart.generic(D => {
    class RangeAnnotationSegment extends range_annotation.AnnotationSegment$(D) {
      get startValue() {
        return this[startValue$];
      }
      set startValue(value) {
        super.startValue = value;
      }
      get endValue() {
        return this[endValue$];
      }
      set endValue(value) {
        super.endValue = value;
      }
      get key() {
        return "r::" + dart.str(this.axisType) + "::" + dart.str(this.axisId) + "::" + dart.str(this.startValue) + "::" + dart.str(this.endValue);
      }
    }
    (RangeAnnotationSegment.new = function(startValue, endValue, axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      this[startValue$] = startValue;
      this[endValue$] = endValue;
      RangeAnnotationSegment.__proto__.new.call(this, axisType, {axisId: axisId, color: color, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec});
      ;
    }).prototype = RangeAnnotationSegment.prototype;
    dart.addTypeTests(RangeAnnotationSegment);
    RangeAnnotationSegment.prototype[_is_RangeAnnotationSegment_default] = true;
    dart.setGetterSignature(RangeAnnotationSegment, () => ({
      __proto__: dart.getGetters(RangeAnnotationSegment.__proto__),
      key: core.String
    }));
    dart.setLibraryUri(RangeAnnotationSegment, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(RangeAnnotationSegment, () => ({
      __proto__: dart.getFields(RangeAnnotationSegment.__proto__),
      startValue: dart.finalFieldType(D),
      endValue: dart.finalFieldType(D)
    }));
    return RangeAnnotationSegment;
  });
  range_annotation.RangeAnnotationSegment = range_annotation.RangeAnnotationSegment$();
  dart.addTypeTests(range_annotation.RangeAnnotationSegment, _is_RangeAnnotationSegment_default);
  const _is_LineAnnotationSegment_default = Symbol('_is_LineAnnotationSegment_default');
  const value$2 = dart.privateName(range_annotation, "LineAnnotationSegment.value");
  const dashPattern$5 = dart.privateName(range_annotation, "LineAnnotationSegment.dashPattern");
  const strokeWidthPx$11 = dart.privateName(range_annotation, "LineAnnotationSegment.strokeWidthPx");
  range_annotation.LineAnnotationSegment$ = dart.generic(D => {
    class LineAnnotationSegment extends range_annotation.AnnotationSegment$(D) {
      get value() {
        return this[value$2];
      }
      set value(value) {
        super.value = value;
      }
      get dashPattern() {
        return this[dashPattern$5];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$11];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get key() {
        return "l::" + dart.str(this.axisType) + "::" + dart.str(this.axisId) + "::" + dart.str(this.value);
      }
    }
    (LineAnnotationSegment.new = function(value, axisType, opts) {
      let axisId = opts && 'axisId' in opts ? opts.axisId : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let startLabel = opts && 'startLabel' in opts ? opts.startLabel : null;
      let endLabel = opts && 'endLabel' in opts ? opts.endLabel : null;
      let middleLabel = opts && 'middleLabel' in opts ? opts.middleLabel : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelDirection = opts && 'labelDirection' in opts ? opts.labelDirection : null;
      let labelPosition = opts && 'labelPosition' in opts ? opts.labelPosition : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 2;
      this[value$2] = value;
      this[dashPattern$5] = dashPattern;
      this[strokeWidthPx$11] = strokeWidthPx;
      LineAnnotationSegment.__proto__.new.call(this, axisType, {axisId: axisId, color: color, startLabel: startLabel, endLabel: endLabel, middleLabel: middleLabel, labelAnchor: labelAnchor, labelDirection: labelDirection, labelPosition: labelPosition, labelStyleSpec: labelStyleSpec});
      ;
    }).prototype = LineAnnotationSegment.prototype;
    dart.addTypeTests(LineAnnotationSegment);
    LineAnnotationSegment.prototype[_is_LineAnnotationSegment_default] = true;
    dart.setGetterSignature(LineAnnotationSegment, () => ({
      __proto__: dart.getGetters(LineAnnotationSegment.__proto__),
      key: core.String
    }));
    dart.setLibraryUri(LineAnnotationSegment, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
    dart.setFieldSignature(LineAnnotationSegment, () => ({
      __proto__: dart.getFields(LineAnnotationSegment.__proto__),
      value: dart.finalFieldType(D),
      dashPattern: dart.finalFieldType(core.List$(core.int)),
      strokeWidthPx: dart.finalFieldType(core.double)
    }));
    return LineAnnotationSegment;
  });
  range_annotation.LineAnnotationSegment = range_annotation.LineAnnotationSegment$();
  dart.addTypeTests(range_annotation.LineAnnotationSegment, _is_LineAnnotationSegment_default);
  let C251;
  range_annotation.RangeAnnotationAxisType = class RangeAnnotationAxisType extends core.Object {
    toString() {
      return this[_name$21];
    }
  };
  (range_annotation.RangeAnnotationAxisType.new = function(index, _name) {
    this.index = index;
    this[_name$21] = _name;
    ;
  }).prototype = range_annotation.RangeAnnotationAxisType.prototype;
  dart.addTypeTests(range_annotation.RangeAnnotationAxisType);
  dart.setLibraryUri(range_annotation.RangeAnnotationAxisType, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation.RangeAnnotationAxisType, () => ({
    __proto__: dart.getFields(range_annotation.RangeAnnotationAxisType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.RangeAnnotationAxisType, ['toString']);
  range_annotation.RangeAnnotationAxisType.domain = C237 || CT.C237;
  range_annotation.RangeAnnotationAxisType.measure = C238 || CT.C238;
  range_annotation.RangeAnnotationAxisType.values = C251 || CT.C251;
  let C252;
  range_annotation.AnnotationLabelAnchor = class AnnotationLabelAnchor extends core.Object {
    toString() {
      return this[_name$21];
    }
  };
  (range_annotation.AnnotationLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$21] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelAnchor.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelAnchor);
  dart.setLibraryUri(range_annotation.AnnotationLabelAnchor, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation.AnnotationLabelAnchor, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelAnchor.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelAnchor, ['toString']);
  range_annotation.AnnotationLabelAnchor.start = C242 || CT.C242;
  range_annotation.AnnotationLabelAnchor.middle = C243 || CT.C243;
  range_annotation.AnnotationLabelAnchor.end = C239 || CT.C239;
  range_annotation.AnnotationLabelAnchor.values = C252 || CT.C252;
  let C253;
  let C254;
  let C255;
  range_annotation.AnnotationLabelDirection = class AnnotationLabelDirection extends core.Object {
    toString() {
      return this[_name$21];
    }
  };
  (range_annotation.AnnotationLabelDirection.new = function(index, _name) {
    this.index = index;
    this[_name$21] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelDirection.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelDirection);
  dart.setLibraryUri(range_annotation.AnnotationLabelDirection, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation.AnnotationLabelDirection, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelDirection, ['toString']);
  range_annotation.AnnotationLabelDirection.auto = C240 || CT.C240;
  range_annotation.AnnotationLabelDirection.horizontal = C253 || CT.C253;
  range_annotation.AnnotationLabelDirection.vertical = C254 || CT.C254;
  range_annotation.AnnotationLabelDirection.values = C255 || CT.C255;
  let C256;
  range_annotation.AnnotationLabelPosition = class AnnotationLabelPosition extends core.Object {
    toString() {
      return this[_name$21];
    }
  };
  (range_annotation.AnnotationLabelPosition.new = function(index, _name) {
    this.index = index;
    this[_name$21] = _name;
    ;
  }).prototype = range_annotation.AnnotationLabelPosition.prototype;
  dart.addTypeTests(range_annotation.AnnotationLabelPosition);
  dart.setLibraryUri(range_annotation.AnnotationLabelPosition, "package:charts_common/src/chart/common/behavior/range_annotation.dart");
  dart.setFieldSignature(range_annotation.AnnotationLabelPosition, () => ({
    __proto__: dart.getFields(range_annotation.AnnotationLabelPosition.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$21]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(range_annotation.AnnotationLabelPosition, ['toString']);
  range_annotation.AnnotationLabelPosition.auto = C241 || CT.C241;
  range_annotation.AnnotationLabelPosition.outside = C248 || CT.C248;
  range_annotation.AnnotationLabelPosition.inside = C249 || CT.C249;
  range_annotation.AnnotationLabelPosition.margin = C244 || CT.C244;
  range_annotation.AnnotationLabelPosition.values = C256 || CT.C256;
  dart.defineLazy(range_annotation, {
    /*range_annotation._unresolvedAutoMessage*/get _unresolvedAutoMessage() {
      return "Unresolved AnnotationLabelPosition.auto";
    }
  });
  const _isZooming = dart.privateName(pan_and_zoom_behavior, "_isZooming");
  const _scalingFactor = dart.privateName(pan_and_zoom_behavior, "_scalingFactor");
  const _minScalingFactor = dart.privateName(pan_and_zoom_behavior, "_minScalingFactor");
  const _maxScalingFactor = dart.privateName(pan_and_zoom_behavior, "_maxScalingFactor");
  const _is_PanAndZoomBehavior_default = Symbol('_is_PanAndZoomBehavior_default');
  pan_and_zoom_behavior.PanAndZoomBehavior$ = dart.generic(D => {
    class PanAndZoomBehavior extends pan_behavior.PanBehavior$(D) {
      get role() {
        return "PanAndZoom";
      }
      get isZooming() {
        return this[_isZooming];
      }
      onDragStart(localPosition) {
        let t10;
        if (this.chart == null) {
          return false;
        }
        super.onDragStart(localPosition);
        this[_scalingFactor] = (t10 = this.chart.domainAxis, t10 == null ? null : t10.viewportScalingFactor);
        this[_isZooming] = true;
        return true;
      }
      onDragUpdate(localPosition, scale) {
        if (scale === 1.0) {
          this[_isZooming] = false;
          return super.onDragUpdate(localPosition, scale);
        }
        this.cancelPanning();
        if (!dart.test(this[_isZooming]) || this.lastPosition == null || this.chart == null) {
          return false;
        }
        let domainAxis = this.chart.domainAxis;
        if (domainAxis == null) {
          return false;
        }
        this.domainAxisTickProvider.mode = panning_tick_provider.PanningTickProviderMode.useCachedTicks;
        let newScalingFactor = math.min(core.double, math.max(core.double, dart.notNull(this[_scalingFactor]) * dart.notNull(scale), this[_minScalingFactor]), this[_maxScalingFactor]);
        domainAxis.setViewportSettings(newScalingFactor, domainAxis.viewportTranslatePx, {drawAreaWidth: this.chart.drawAreaBounds[$width]});
        this.chart.redraw({skipAnimation: true, skipLayout: true});
        return true;
      }
      onDragEnd(localPosition, scale, pixelsPerSec) {
        this[_isZooming] = false;
        return super.onDragEnd(localPosition, scale, pixelsPerSec);
      }
    }
    (PanAndZoomBehavior.new = function() {
      this[_isZooming] = false;
      this[_scalingFactor] = 1.0;
      this[_minScalingFactor] = 1.0;
      this[_maxScalingFactor] = 5.0;
      PanAndZoomBehavior.__proto__.new.call(this);
      ;
    }).prototype = PanAndZoomBehavior.prototype;
    dart.addTypeTests(PanAndZoomBehavior);
    PanAndZoomBehavior.prototype[_is_PanAndZoomBehavior_default] = true;
    dart.setGetterSignature(PanAndZoomBehavior, () => ({
      __proto__: dart.getGetters(PanAndZoomBehavior.__proto__),
      isZooming: core.bool
    }));
    dart.setLibraryUri(PanAndZoomBehavior, "package:charts_common/src/chart/common/behavior/zoom/pan_and_zoom_behavior.dart");
    dart.setFieldSignature(PanAndZoomBehavior, () => ({
      __proto__: dart.getFields(PanAndZoomBehavior.__proto__),
      [_isZooming]: dart.fieldType(core.bool),
      [_scalingFactor]: dart.fieldType(core.double),
      [_minScalingFactor]: dart.finalFieldType(core.double),
      [_maxScalingFactor]: dart.finalFieldType(core.double)
    }));
    return PanAndZoomBehavior;
  });
  pan_and_zoom_behavior.PanAndZoomBehavior = pan_and_zoom_behavior.PanAndZoomBehavior$();
  dart.addTypeTests(pan_and_zoom_behavior.PanAndZoomBehavior, _is_PanAndZoomBehavior_default);
  const _is_SymbolAnnotationRendererConfig_default = Symbol('_is_SymbolAnnotationRendererConfig_default');
  const showBottomSeparatorLine$ = dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.showBottomSeparatorLine");
  const showSeparatorLines$ = dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.showSeparatorLines");
  const verticalSymbolBottomPaddingPx$ = dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.verticalSymbolBottomPaddingPx");
  const verticalSymbolTopPaddingPx$ = dart.privateName(symbol_annotation_renderer_config, "SymbolAnnotationRendererConfig.verticalSymbolTopPaddingPx");
  symbol_annotation_renderer_config.SymbolAnnotationRendererConfig$ = dart.generic(D => {
    let SymbolAnnotationRendererOfD = () => (SymbolAnnotationRendererOfD = dart.constFn(symbol_annotation_renderer.SymbolAnnotationRenderer$(D)))();
    class SymbolAnnotationRendererConfig extends point_renderer_config.PointRendererConfig$(D) {
      get showBottomSeparatorLine() {
        return this[showBottomSeparatorLine$];
      }
      set showBottomSeparatorLine(value) {
        super.showBottomSeparatorLine = value;
      }
      get showSeparatorLines() {
        return this[showSeparatorLines$];
      }
      set showSeparatorLines(value) {
        super.showSeparatorLines = value;
      }
      get verticalSymbolBottomPaddingPx() {
        return this[verticalSymbolBottomPaddingPx$];
      }
      set verticalSymbolBottomPaddingPx(value) {
        super.verticalSymbolBottomPaddingPx = value;
      }
      get verticalSymbolTopPaddingPx() {
        return this[verticalSymbolTopPaddingPx$];
      }
      set verticalSymbolTopPaddingPx(value) {
        super.verticalSymbolTopPaddingPx = value;
      }
      build() {
        return new (SymbolAnnotationRendererOfD()).new({config: this, rendererId: this.customRendererId});
      }
    }
    (SymbolAnnotationRendererConfig.new = function(opts) {
      let t10;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let pointRendererDecorators = opts && 'pointRendererDecorators' in opts ? opts.pointRendererDecorators : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : 5;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let customSymbolRenderers = opts && 'customSymbolRenderers' in opts ? opts.customSymbolRenderers : null;
      let showBottomSeparatorLine = opts && 'showBottomSeparatorLine' in opts ? opts.showBottomSeparatorLine : false;
      let showSeparatorLines = opts && 'showSeparatorLines' in opts ? opts.showSeparatorLines : true;
      let verticalSymbolBottomPaddingPx = opts && 'verticalSymbolBottomPaddingPx' in opts ? opts.verticalSymbolBottomPaddingPx : 5;
      let verticalSymbolTopPaddingPx = opts && 'verticalSymbolTopPaddingPx' in opts ? opts.verticalSymbolTopPaddingPx : 5;
      this[showBottomSeparatorLine$] = showBottomSeparatorLine;
      this[showSeparatorLines$] = showSeparatorLines;
      this[verticalSymbolBottomPaddingPx$] = verticalSymbolBottomPaddingPx;
      this[verticalSymbolTopPaddingPx$] = verticalSymbolTopPaddingPx;
      SymbolAnnotationRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, pointRendererDecorators: (t10 = pointRendererDecorators, t10 == null ? JSArrayOfPointRendererDecorator().of([new comparison_points_decorator.ComparisonPointsDecorator.new({symbolRenderer: new symbol_renderer.RectangleRangeSymbolRenderer.new()})]) : t10), radiusPx: radiusPx, symbolRenderer: symbolRenderer, customSymbolRenderers: customSymbolRenderers});
      ;
    }).prototype = SymbolAnnotationRendererConfig.prototype;
    dart.addTypeTests(SymbolAnnotationRendererConfig);
    SymbolAnnotationRendererConfig.prototype[_is_SymbolAnnotationRendererConfig_default] = true;
    dart.setMethodSignature(SymbolAnnotationRendererConfig, () => ({
      __proto__: dart.getMethods(SymbolAnnotationRendererConfig.__proto__),
      build: dart.fnType(symbol_annotation_renderer.SymbolAnnotationRenderer$(D), [])
    }));
    dart.setLibraryUri(SymbolAnnotationRendererConfig, "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer_config.dart");
    dart.setFieldSignature(SymbolAnnotationRendererConfig, () => ({
      __proto__: dart.getFields(SymbolAnnotationRendererConfig.__proto__),
      showBottomSeparatorLine: dart.finalFieldType(core.bool),
      showSeparatorLines: dart.finalFieldType(core.bool),
      verticalSymbolBottomPaddingPx: dart.finalFieldType(core.double),
      verticalSymbolTopPaddingPx: dart.finalFieldType(core.double)
    }));
    return SymbolAnnotationRendererConfig;
  });
  symbol_annotation_renderer_config.SymbolAnnotationRendererConfig = symbol_annotation_renderer_config.SymbolAnnotationRendererConfig$();
  dart.addTypeTests(symbol_annotation_renderer_config.SymbolAnnotationRendererConfig, _is_SymbolAnnotationRendererConfig_default);
  const _componentBounds$0 = dart.privateName(symbol_annotation_renderer, "_componentBounds");
  const _graphicsFactory$4 = dart.privateName(symbol_annotation_renderer, "_graphicsFactory");
  const _chart$14 = dart.privateName(symbol_annotation_renderer, "_chart");
  const _currentHeight = dart.privateName(symbol_annotation_renderer, "_currentHeight");
  const _seriesInfo = dart.privateName(symbol_annotation_renderer, "_seriesInfo");
  const _is_SymbolAnnotationRenderer_default = Symbol('_is_SymbolAnnotationRenderer_default');
  symbol_annotation_renderer.SymbolAnnotationRenderer$ = dart.generic(D => {
    let _SeriesInfoOfD = () => (_SeriesInfoOfD = dart.constFn(symbol_annotation_renderer._SeriesInfo$(D)))();
    let IdentityMapOfString$_SeriesInfoOfD = () => (IdentityMapOfString$_SeriesInfoOfD = dart.constFn(_js_helper.IdentityMap$(core.String, _SeriesInfoOfD())))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let DatumPointOfD = () => (DatumPointOfD = dart.constFn(point_renderer.DatumPoint$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    let AnimatedPointOfD = () => (AnimatedPointOfD = dart.constFn(point_renderer.AnimatedPoint$(D)))();
    let ListOfAnimatedPointOfD = () => (ListOfAnimatedPointOfD = dart.constFn(core.List$(AnimatedPointOfD())))();
    let StringAndListOfAnimatedPointOfDToNull = () => (StringAndListOfAnimatedPointOfDToNull = dart.constFn(dart.fnType(core.Null, [core.String, ListOfAnimatedPointOfD()])))();
    class SymbolAnnotationRenderer extends point_renderer.PointRenderer$(D) {
      configureMeasureAxes(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
      }
      preprocessSeries(seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let localConfig = symbol_annotation_renderer_config.SymbolAnnotationRendererConfig.as(this.config);
        this[_seriesInfo][$clear]();
        let offset = 0.0;
        seriesList[$forEach](dart.fn(series => {
          let t10, t10$;
          let seriesKey = series.id;
          t10 = series;
          t10.radiusPxFn == null ? t10.radiusPxFn = dart.fn(_ => this.config.radiusPx, intTodouble()) : null;
          let maxRadius = 0.0;
          for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
            let radiusPx = series.radiusPxFn(index);
            radiusPx == null ? radiusPx = this.config.radiusPx : null;
            maxRadius = math.max(core.double, maxRadius, radiusPx);
          }
          let rowInnerHeight = maxRadius * 2;
          let rowHeight = dart.notNull(localConfig.verticalSymbolBottomPaddingPx) + dart.notNull(localConfig.verticalSymbolTopPaddingPx) + rowInnerHeight;
          let symbolCenter = offset + dart.notNull(localConfig.verticalSymbolTopPaddingPx) + rowInnerHeight / 2;
          series.measureFn = dart.fn(index => 0, intToint());
          series.measureOffsetFn = dart.fn(index => 0, intToint());
          t10$ = series;
          t10$.keyFn == null ? t10$.keyFn = dart.fn(index => dart.str(series.id) + "__" + dart.str(series.domainFn(index)) + "__" + dart.str(series.domainLowerBoundFn(index)) + "__" + dart.str(series.domainUpperBoundFn(index)), intToString()) : null;
          this[_seriesInfo][$_set](seriesKey, new (_SeriesInfoOfD()).new({rowHeight: rowHeight, rowStart: offset, symbolCenter: symbolCenter}));
          offset = offset + rowHeight;
        }, MutableSeriesOfDToNull()));
        this[_currentHeight] = offset[$ceil]();
        super.preprocessSeries(seriesList);
      }
      getPoint(datum, domainValue, domainLowerBoundValue, domainUpperBoundValue, series, domainAxis, measureValue, measureLowerBoundValue, measureUpperBoundValue, measureOffsetValue, measureAxis) {
        D._check(domainValue);
        D._check(domainLowerBoundValue);
        D._check(domainUpperBoundValue);
        ImmutableSeriesOfD()._check(series);
        ImmutableAxisOfD()._check(domainAxis);
        let domainPosition = domainAxis.getLocation(domainValue);
        let domainLowerBoundPosition = domainLowerBoundValue != null ? domainAxis.getLocation(domainLowerBoundValue) : null;
        let domainUpperBoundPosition = domainUpperBoundValue != null ? domainAxis.getLocation(domainUpperBoundValue) : null;
        let seriesKey = series.id;
        let seriesInfo = this[_seriesInfo][$_get](seriesKey);
        let measurePosition = dart.notNull(this[_componentBounds$0][$top]) + dart.notNull(seriesInfo.symbolCenter);
        let measureLowerBoundPosition = domainLowerBoundPosition != null ? measurePosition : null;
        let measureUpperBoundPosition = domainUpperBoundPosition != null ? measurePosition : null;
        return new (DatumPointOfD()).new({datum: datum, domain: domainValue, series: series, x: domainPosition, xLower: domainLowerBoundPosition, xUpper: domainUpperBoundPosition, y: measurePosition, yLower: measureLowerBoundPosition, yUpper: measureUpperBoundPosition});
      }
      onAttach(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) {
          dart.throw(new core.ArgumentError.new("SymbolAnnotationRenderer can only be attached to a CartesianChart"));
        }
        this[_chart$14] = CartesianChartOfD()._check(cartesian_chart.CartesianChart.as(chart));
        if (!dart.test(this[_chart$14].vertical)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart", 190, 12, "_chart.vertical");
        super.onAttach(chart);
        this[_chart$14].addView(this);
      }
      onDetach(chart) {
        base_chart.BaseChart._check(chart);
        chart.removeView(this);
      }
      paint(canvas, animationPercent) {
        super.paint(canvas, animationPercent);
        if (dart.test(symbol_annotation_renderer_config.SymbolAnnotationRendererConfig.as(this.config).showSeparatorLines)) {
          this.seriesPointMap[$forEach](dart.fn((key, points) => {
            let seriesInfo = this[_seriesInfo][$_get](key);
            let y = dart.notNull(this.componentBounds[$top]) + dart.notNull(seriesInfo.rowStart);
            let domainAxis = this[_chart$14].domainAxis;
            let bounds = new (RectangleOfint()).new(this.componentBounds[$left], y[$round](), this.componentBounds[$width], 0);
            domainAxis.tickDrawStrategy.drawAxisLine(canvas, domainAxis.axisOrientation, bounds);
          }, StringAndListOfAnimatedPointOfDToNull()));
        }
      }
      get graphicsFactory() {
        return this[_graphicsFactory$4];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$4] = value;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: 25, position: layout_view.LayoutPosition.Bottom, positionOrder: 10});
      }
      measure(maxWidth, maxHeight) {
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: this[_currentHeight]});
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds$0] = componentBounds;
        super.layout(componentBounds, drawAreaBounds);
      }
      get componentBounds() {
        return this[_componentBounds$0];
      }
    }
    (SymbolAnnotationRenderer.new = function(opts) {
      let t10;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let config = opts && 'config' in opts ? opts.config : null;
      this[_componentBounds$0] = null;
      this[_graphicsFactory$4] = null;
      this[_chart$14] = null;
      this[_currentHeight] = 0;
      this[_seriesInfo] = new (IdentityMapOfString$_SeriesInfoOfD()).new();
      SymbolAnnotationRenderer.__proto__.new.call(this, {rendererId: (t10 = rendererId, t10 == null ? "symbolAnnotation" : t10), config: config});
      ;
    }).prototype = SymbolAnnotationRenderer.prototype;
    dart.addTypeTests(SymbolAnnotationRenderer);
    SymbolAnnotationRenderer.prototype[_is_SymbolAnnotationRenderer_default] = true;
    SymbolAnnotationRenderer[dart.implements] = () => [layout_view.LayoutView];
    dart.setGetterSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getGetters(SymbolAnnotationRenderer.__proto__),
      layoutConfig: layout_view.LayoutViewConfig
    }));
    dart.setLibraryUri(SymbolAnnotationRenderer, "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart");
    dart.setFieldSignature(SymbolAnnotationRenderer, () => ({
      __proto__: dart.getFields(SymbolAnnotationRenderer.__proto__),
      [_componentBounds$0]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$4]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_chart$14]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_currentHeight]: dart.fieldType(core.int),
      [_seriesInfo]: dart.finalFieldType(collection.LinkedHashMap$(core.String, symbol_annotation_renderer._SeriesInfo$(D)))
    }));
    return SymbolAnnotationRenderer;
  });
  symbol_annotation_renderer.SymbolAnnotationRenderer = symbol_annotation_renderer.SymbolAnnotationRenderer$();
  dart.addTypeTests(symbol_annotation_renderer.SymbolAnnotationRenderer, _is_SymbolAnnotationRenderer_default);
  const _is__SeriesInfo_default = Symbol('_is__SeriesInfo_default');
  symbol_annotation_renderer._SeriesInfo$ = dart.generic(D => {
    class _SeriesInfo extends core.Object {}
    (_SeriesInfo.new = function(opts) {
      let rowHeight = opts && 'rowHeight' in opts ? opts.rowHeight : null;
      let rowStart = opts && 'rowStart' in opts ? opts.rowStart : null;
      let symbolCenter = opts && 'symbolCenter' in opts ? opts.symbolCenter : null;
      this.rowHeight = rowHeight;
      this.rowStart = rowStart;
      this.symbolCenter = symbolCenter;
      ;
    }).prototype = _SeriesInfo.prototype;
    dart.addTypeTests(_SeriesInfo);
    _SeriesInfo.prototype[_is__SeriesInfo_default] = true;
    dart.setLibraryUri(_SeriesInfo, "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart");
    dart.setFieldSignature(_SeriesInfo, () => ({
      __proto__: dart.getFields(_SeriesInfo.__proto__),
      rowHeight: dart.fieldType(core.double),
      rowStart: dart.fieldType(core.double),
      symbolCenter: dart.fieldType(core.double)
    }));
    return _SeriesInfo;
  });
  symbol_annotation_renderer._SeriesInfo = symbol_annotation_renderer._SeriesInfo$();
  dart.addTypeTests(symbol_annotation_renderer._SeriesInfo, _is__SeriesInfo_default);
  const _is_PieChart_default = Symbol('_is_PieChart_default');
  pie_chart.PieChart$ = dart.generic(D => {
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let ArcRendererOfD = () => (ArcRendererOfD = dart.constFn(arc_renderer.ArcRenderer$(D)))();
    let DatumDetailsOfD = () => (DatumDetailsOfD = dart.constFn(datum_details.DatumDetails$(D)))();
    let JSArrayOfDatumDetailsOfD = () => (JSArrayOfDatumDetailsOfD = dart.constFn(_interceptors.JSArray$(DatumDetailsOfD())))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let SeriesDatumOfDToNull = () => (SeriesDatumOfDToNull = dart.constFn(dart.fnType(core.Null, [SeriesDatumOfD()])))();
    class PieChart extends base_chart.BaseChart$(D) {
      drawInternal(seriesList, opts) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let skipAnimation = opts && 'skipAnimation' in opts ? opts.skipAnimation : null;
        let skipLayout = opts && 'skipLayout' in opts ? opts.skipLayout : null;
        if (dart.notNull(seriesList[$length]) > 1) {
          dart.throw(new core.ArgumentError.new("PieChart can only render a single series"));
        }
        super.drawInternal(seriesList, {skipAnimation: skipAnimation, skipLayout: skipLayout});
      }
      makeDefaultRenderer() {
        let t10;
        t10 = ArcRendererOfD().new();
        t10.rendererId = "default";
        return t10;
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsOfD().of([]);
        this.getSelectionModel(type).selectedDatum[$forEach](dart.fn(seriesDatum => {
          let rendererId = seriesDatum.series.getAttr(core.String, series_renderer.rendererIdKey);
          let renderer = this.getSeriesRenderer(rendererId);
          if (!arc_renderer.ArcRenderer.is(renderer)) {
            return;
          }
          let details = arc_renderer.ArcRenderer.as(renderer).getExpandedDatumDetails(seriesDatum);
          if (details != null) {
            entries[$add](DatumDetailsOfD()._check(details));
          }
        }, SeriesDatumOfDToNull()));
        return entries;
      }
      get centerContentBounds() {
        if (ArcRendererOfD().is(this.defaultRenderer)) {
          return ArcRendererOfD().as(this.defaultRenderer).centerContentBounds;
        } else {
          return null;
        }
      }
    }
    (PieChart.new = function(opts) {
      let t10;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      PieChart.__proto__.new.call(this, {layoutConfig: (t10 = layoutConfig, t10 == null ? pie_chart.PieChart._defaultLayoutConfig : t10)});
      ;
    }).prototype = PieChart.prototype;
    dart.addTypeTests(PieChart);
    PieChart.prototype[_is_PieChart_default] = true;
    dart.setMethodSignature(PieChart, () => ({
      __proto__: dart.getMethods(PieChart.__proto__),
      makeDefaultRenderer: dart.fnType(series_renderer.SeriesRenderer$(D), []),
      getDatumDetails: dart.fnType(core.List$(datum_details.DatumDetails$(D)), [selection_model.SelectionModelType])
    }));
    dart.setGetterSignature(PieChart, () => ({
      __proto__: dart.getGetters(PieChart.__proto__),
      centerContentBounds: math.Rectangle$(core.int)
    }));
    dart.setLibraryUri(PieChart, "package:charts_common/src/chart/pie/pie_chart.dart");
    return PieChart;
  });
  pie_chart.PieChart = pie_chart.PieChart$();
  dart.defineLazy(pie_chart.PieChart, {
    /*pie_chart.PieChart._defaultLayoutConfig*/get _defaultLayoutConfig() {
      return new layout_config.LayoutConfig.new({topSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), bottomSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), leftSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), rightSpec: layout_config.MarginSpec.fromPixel({minPixel: 20})});
    }
  });
  dart.addTypeTests(pie_chart.PieChart, _is_PieChart_default);
  const _chart$15 = dart.privateName(domain_outliner, "_chart");
  const _lifecycleListener$5 = dart.privateName(domain_outliner, "_lifecycleListener");
  const _outline = dart.privateName(domain_outliner, "_outline");
  const _selectionChange = dart.privateName(domain_outliner, "_selectionChange");
  const _is_DomainOutliner_default = Symbol('_is_DomainOutliner_default');
  const selectionType$ = dart.privateName(domain_outliner, "DomainOutliner.selectionType");
  const defaultStrokePx$ = dart.privateName(domain_outliner, "DomainOutliner.defaultStrokePx");
  const strokePaddingPx$ = dart.privateName(domain_outliner, "DomainOutliner.strokePaddingPx");
  domain_outliner.DomainOutliner$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class DomainOutliner extends core.Object {
      get selectionType() {
        return this[selectionType$];
      }
      set selectionType(value) {
        super.selectionType = value;
      }
      get defaultStrokePx() {
        return this[defaultStrokePx$];
      }
      set defaultStrokePx(value) {
        super.defaultStrokePx = value;
      }
      get strokePaddingPx() {
        return this[strokePaddingPx$];
      }
      set strokePaddingPx(value) {
        super.strokePaddingPx = value;
      }
      [_selectionChange](selectionModel) {
        this[_chart$15].redraw({skipLayout: true, skipAnimation: true});
      }
      [_outline](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let selectionModel = this[_chart$15].getSelectionModel(this.selectionType);
        for (let series of seriesList) {
          let strokeWidthPxFn = series.strokeWidthPxFn;
          let colorFn = series.colorFn;
          if (colorFn != null) {
            series.colorFn = dart.fn(index => {
              let color = colorFn(index);
              return dart.test(selectionModel.isDatumSelected(series, index)) ? color.darker : color;
            }, intToColor());
          }
          if (strokeWidthPxFn != null) {
            series.strokeWidthPxFn = dart.fn(index => {
              let strokeWidthPx = strokeWidthPxFn(index);
              if (!dart.test(selectionModel.isDatumSelected(series, index))) {
                return strokeWidthPx;
              }
              return strokeWidthPx == null ? this.defaultStrokePx : dart.notNull(strokeWidthPx) + dart.notNull(this.strokePaddingPx);
            }, intTonum());
          }
        }
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$15] = chart;
        chart.addLifecycleListener(this[_lifecycleListener$5]);
        chart.getSelectionModel(this.selectionType).addSelectionChangedListener(dart.bind(this, _selectionChange));
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.getSelectionModel(this.selectionType).removeSelectionChangedListener(dart.bind(this, _selectionChange));
        chart.removeLifecycleListener(this[_lifecycleListener$5]);
      }
      get role() {
        return "domainOutliner-" + dart.str(this.selectionType);
      }
    }
    (DomainOutliner.new = function(opts) {
      let t10, t10$;
      let selectionType = opts && 'selectionType' in opts ? opts.selectionType : C136 || CT.C136;
      let defaultStrokePx = opts && 'defaultStrokePx' in opts ? opts.defaultStrokePx : null;
      let strokePaddingPx = opts && 'strokePaddingPx' in opts ? opts.strokePaddingPx : null;
      this[_chart$15] = null;
      this[_lifecycleListener$5] = null;
      this[selectionType$] = selectionType;
      this[defaultStrokePx$] = (t10 = defaultStrokePx, t10 == null ? 2.0 : t10);
      this[strokePaddingPx$] = (t10$ = strokePaddingPx, t10$ == null ? 1.0 : t10$);
      this[_lifecycleListener$5] = new (LifecycleListenerOfD()).new({onPostprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _outline))});
    }).prototype = DomainOutliner.prototype;
    dart.addTypeTests(DomainOutliner);
    DomainOutliner.prototype[_is_DomainOutliner_default] = true;
    DomainOutliner[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(DomainOutliner, () => ({
      __proto__: dart.getMethods(DomainOutliner.__proto__),
      [_selectionChange]: dart.fnType(dart.void, [selection_model.SelectionModel]),
      [_outline]: dart.fnType(dart.void, [core.Object]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(DomainOutliner, () => ({
      __proto__: dart.getGetters(DomainOutliner.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(DomainOutliner, "package:charts_common/src/chart/common/behavior/domain_outliner.dart");
    dart.setFieldSignature(DomainOutliner, () => ({
      __proto__: dart.getFields(DomainOutliner.__proto__),
      selectionType: dart.finalFieldType(selection_model.SelectionModelType),
      defaultStrokePx: dart.finalFieldType(core.double),
      strokePaddingPx: dart.finalFieldType(core.double),
      [_chart$15]: dart.fieldType(base_chart.BaseChart$(D)),
      [_lifecycleListener$5]: dart.fieldType(base_chart.LifecycleListener$(D))
    }));
    return DomainOutliner;
  });
  domain_outliner.DomainOutliner = domain_outliner.DomainOutliner$();
  dart.addTypeTests(domain_outliner.DomainOutliner, _is_DomainOutliner_default);
  const _chart$16 = dart.privateName(domain_highlighter, "_chart");
  const _lifecycleListener$6 = dart.privateName(domain_highlighter, "_lifecycleListener");
  const _updateColorFunctions = dart.privateName(domain_highlighter, "_updateColorFunctions");
  const _selectionChanged$1 = dart.privateName(domain_highlighter, "_selectionChanged");
  const _is_DomainHighlighter_default = Symbol('_is_DomainHighlighter_default');
  const selectionModelType$5 = dart.privateName(domain_highlighter, "DomainHighlighter.selectionModelType");
  domain_highlighter.DomainHighlighter$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let MutableSeriesOfDToNull = () => (MutableSeriesOfDToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesOfD()])))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class DomainHighlighter extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$5];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      [_selectionChanged$1](selectionModel) {
        this[_chart$16].redraw({skipLayout: true, skipAnimation: true});
      }
      [_updateColorFunctions](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let selectionModel = this[_chart$16].getSelectionModel(this.selectionModelType);
        seriesList[$forEach](dart.fn(series => {
          let origColorFn = series.colorFn;
          if (origColorFn != null) {
            series.colorFn = dart.fn(index => {
              let origColor = origColorFn(index);
              if (dart.test(selectionModel.isDatumSelected(series, index))) {
                return origColor.darker;
              } else {
                return origColor;
              }
            }, intToColor());
          }
        }, MutableSeriesOfDToNull()));
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$16] = chart;
        chart.addLifecycleListener(this[_lifecycleListener$6]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, _selectionChanged$1));
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, _selectionChanged$1));
        chart.removeLifecycleListener(this[_lifecycleListener$6]);
      }
      get role() {
        return "domainHighlight-" + dart.str(dart.toString(this.selectionModelType));
      }
    }
    (DomainHighlighter.new = function(selectionModelType) {
      if (selectionModelType === void 0) selectionModelType = C136 || CT.C136;
      this[_chart$16] = null;
      this[_lifecycleListener$6] = null;
      this[selectionModelType$5] = selectionModelType;
      this[_lifecycleListener$6] = new (LifecycleListenerOfD()).new({onPostprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _updateColorFunctions))});
    }).prototype = DomainHighlighter.prototype;
    dart.addTypeTests(DomainHighlighter);
    DomainHighlighter.prototype[_is_DomainHighlighter_default] = true;
    DomainHighlighter[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(DomainHighlighter, () => ({
      __proto__: dart.getMethods(DomainHighlighter.__proto__),
      [_selectionChanged$1]: dart.fnType(dart.void, [selection_model.SelectionModel]),
      [_updateColorFunctions]: dart.fnType(dart.void, [core.Object]),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(DomainHighlighter, () => ({
      __proto__: dart.getGetters(DomainHighlighter.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(DomainHighlighter, "package:charts_common/src/chart/common/behavior/domain_highlighter.dart");
    dart.setFieldSignature(DomainHighlighter, () => ({
      __proto__: dart.getFields(DomainHighlighter.__proto__),
      selectionModelType: dart.finalFieldType(selection_model.SelectionModelType),
      [_chart$16]: dart.fieldType(base_chart.BaseChart$(D)),
      [_lifecycleListener$6]: dart.fieldType(base_chart.LifecycleListener$(D))
    }));
    return DomainHighlighter;
  });
  domain_highlighter.DomainHighlighter = domain_highlighter.DomainHighlighter$();
  dart.addTypeTests(domain_highlighter.DomainHighlighter, _is_DomainHighlighter_default);
  const _config = dart.privateName(chart_title, "_config");
  const _chart$17 = dart.privateName(chart_title, "_chart");
  const _view$1 = dart.privateName(chart_title, "_view");
  const _lifecycleListener$7 = dart.privateName(chart_title, "_lifecycleListener");
  const _updateViewData$1 = dart.privateName(chart_title, "_updateViewData");
  const _is_ChartTitle_default = Symbol('_is_ChartTitle_default');
  const _name$22 = dart.privateName(chart_title, "_name");
  let C257;
  chart_title.ChartTitle$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let _ChartTitleLayoutViewOfD = () => (_ChartTitleLayoutViewOfD = dart.constFn(chart_title._ChartTitleLayoutView$(D)))();
    class ChartTitle extends core.Object {
      get behaviorPosition() {
        return this[_config].behaviorPosition;
      }
      set behaviorPosition(behaviorPosition) {
        this[_config].behaviorPosition = behaviorPosition;
      }
      get layoutMinSize() {
        return this[_config].layoutMinSize;
      }
      set layoutMinSize(layoutMinSize) {
        this[_config].layoutMinSize = layoutMinSize;
      }
      get layoutPreferredSize() {
        return this[_config].layoutPreferredSize;
      }
      set layoutPreferredSize(layoutPreferredSize) {
        this[_config].layoutPreferredSize = layoutPreferredSize;
      }
      get maxWidthStrategy() {
        return this[_config].maxWidthStrategy;
      }
      set maxWidthStrategy(maxWidthStrategy) {
        this[_config].maxWidthStrategy = maxWidthStrategy;
      }
      get title() {
        return this[_config].title;
      }
      set title(title) {
        this[_config].title = title;
      }
      get titleDirection() {
        return this[_config].titleDirection;
      }
      set titleDirection(titleDirection) {
        this[_config].titleDirection = titleDirection;
      }
      get titleOutsideJustification() {
        return this[_config].titleOutsideJustification;
      }
      set titleOutsideJustification(titleOutsideJustification) {
        this[_config].titleOutsideJustification = titleOutsideJustification;
      }
      get titlePadding() {
        return this[_config].titlePadding;
      }
      set titlePadding(titlePadding) {
        this[_config].titlePadding = titlePadding;
      }
      get titleStyleSpec() {
        return this[_config].titleStyleSpec;
      }
      set titleStyleSpec(titleStyleSpec) {
        this[_config].titleStyleSpec = titleStyleSpec;
      }
      get subTitle() {
        return this[_config].subTitle;
      }
      set subTitle(subTitle) {
        this[_config].subTitle = subTitle;
      }
      get subTitleStyleSpec() {
        return this[_config].subTitleStyleSpec;
      }
      set subTitleStyleSpec(subTitleStyleSpec) {
        this[_config].subTitleStyleSpec = subTitleStyleSpec;
      }
      get innerPadding() {
        return this[_config].innerPadding;
      }
      set innerPadding(innerPadding) {
        this[_config].innerPadding = innerPadding;
      }
      get outerPadding() {
        return this[_config].outerPadding;
      }
      set outerPadding(outerPadding) {
        this[_config].outerPadding = outerPadding;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        this[_chart$17] = chart;
        this[_view$1] = new (_ChartTitleLayoutViewOfD()).new({layoutPaintOrder: 160, config: this[_config], chart: this[_chart$17]});
        chart.addView(this[_view$1]);
        chart.addLifecycleListener(this[_lifecycleListener$7]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeView(this[_view$1]);
        chart.removeLifecycleListener(this[_lifecycleListener$7]);
        this[_chart$17] = null;
      }
      [_updateViewData$1]() {
        this[_view$1].config = this[_config];
      }
      get role() {
        let t10;
        return "ChartTitle-" + dart.str((t10 = this[_config], t10 == null ? null : t10.behaviorPosition));
      }
      get isRtl() {
        return this[_chart$17].context.isRtl;
      }
    }
    (ChartTitle.new = function(title, opts) {
      let t11, t11$, t11$0, t11$1, t11$2, t11$3, t11$4, t11$5, t11$6, t10;
      let behaviorPosition = opts && 'behaviorPosition' in opts ? opts.behaviorPosition : null;
      let innerPadding = opts && 'innerPadding' in opts ? opts.innerPadding : null;
      let layoutMinSize = opts && 'layoutMinSize' in opts ? opts.layoutMinSize : null;
      let layoutPreferredSize = opts && 'layoutPreferredSize' in opts ? opts.layoutPreferredSize : null;
      let outerPadding = opts && 'outerPadding' in opts ? opts.outerPadding : null;
      let maxWidthStrategy = opts && 'maxWidthStrategy' in opts ? opts.maxWidthStrategy : null;
      let titleDirection = opts && 'titleDirection' in opts ? opts.titleDirection : null;
      let titleOutsideJustification = opts && 'titleOutsideJustification' in opts ? opts.titleOutsideJustification : null;
      let titlePadding = opts && 'titlePadding' in opts ? opts.titlePadding : null;
      let titleStyleSpec = opts && 'titleStyleSpec' in opts ? opts.titleStyleSpec : null;
      let subTitle = opts && 'subTitle' in opts ? opts.subTitle : null;
      let subTitleStyleSpec = opts && 'subTitleStyleSpec' in opts ? opts.subTitleStyleSpec : null;
      this[_config] = null;
      this[_chart$17] = null;
      this[_view$1] = null;
      this[_lifecycleListener$7] = null;
      this[_config] = (t10 = new chart_title._ChartTitleConfig.new(), t10.behaviorPosition = (t11 = behaviorPosition, t11 == null ? chart_title.ChartTitle._defaultBehaviorPosition : t11), t10.innerPadding = (t11$ = innerPadding, t11$ == null ? 10 : t11$), t10.layoutMinSize = layoutMinSize, t10.layoutPreferredSize = layoutPreferredSize, t10.outerPadding = (t11$0 = outerPadding, t11$0 == null ? 10 : t11$0), t10.maxWidthStrategy = (t11$1 = maxWidthStrategy, t11$1 == null ? chart_title.ChartTitle._defaultMaxWidthStrategy : t11$1), t10.title = title, t10.titleDirection = (t11$2 = titleDirection, t11$2 == null ? chart_title.ChartTitle._defaultTitleDirection : t11$2), t10.titleOutsideJustification = (t11$3 = titleOutsideJustification, t11$3 == null ? chart_title.ChartTitle._defaultTitleOutsideJustification : t11$3), t10.titlePadding = (t11$4 = titlePadding, t11$4 == null ? 18 : t11$4), t10.titleStyleSpec = (t11$5 = titleStyleSpec, t11$5 == null ? chart_title.ChartTitle._defaultTitleStyle : t11$5), t10.subTitle = subTitle, t10.subTitleStyleSpec = (t11$6 = subTitleStyleSpec, t11$6 == null ? chart_title.ChartTitle._defaultSubTitleStyle : t11$6), t10);
      this[_lifecycleListener$7] = new (LifecycleListenerOfD()).new({onAxisConfigured: dart.bind(this, _updateViewData$1)});
    }).prototype = ChartTitle.prototype;
    dart.addTypeTests(ChartTitle);
    ChartTitle.prototype[_is_ChartTitle_default] = true;
    ChartTitle[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(ChartTitle, () => ({
      __proto__: dart.getMethods(ChartTitle.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      [_updateViewData$1]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ChartTitle, () => ({
      __proto__: dart.getGetters(ChartTitle.__proto__),
      behaviorPosition: chart_behavior.BehaviorPosition,
      layoutMinSize: core.int,
      layoutPreferredSize: core.int,
      maxWidthStrategy: text_element.MaxWidthStrategy,
      title: core.String,
      titleDirection: chart_title.ChartTitleDirection,
      titleOutsideJustification: chart_behavior.OutsideJustification,
      titlePadding: core.int,
      titleStyleSpec: axis_spec.TextStyleSpec,
      subTitle: core.String,
      subTitleStyleSpec: axis_spec.TextStyleSpec,
      innerPadding: core.int,
      outerPadding: core.int,
      role: core.String,
      isRtl: core.bool
    }));
    dart.setSetterSignature(ChartTitle, () => ({
      __proto__: dart.getSetters(ChartTitle.__proto__),
      behaviorPosition: chart_behavior.BehaviorPosition,
      layoutMinSize: core.int,
      layoutPreferredSize: core.int,
      maxWidthStrategy: text_element.MaxWidthStrategy,
      title: core.String,
      titleDirection: chart_title.ChartTitleDirection,
      titleOutsideJustification: chart_behavior.OutsideJustification,
      titlePadding: core.int,
      titleStyleSpec: axis_spec.TextStyleSpec,
      subTitle: core.String,
      subTitleStyleSpec: axis_spec.TextStyleSpec,
      innerPadding: core.int,
      outerPadding: core.int
    }));
    dart.setLibraryUri(ChartTitle, "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart");
    dart.setFieldSignature(ChartTitle, () => ({
      __proto__: dart.getFields(ChartTitle.__proto__),
      [_config]: dart.fieldType(chart_title._ChartTitleConfig),
      [_chart$17]: dart.fieldType(base_chart.BaseChart$(D)),
      [_view$1]: dart.fieldType(chart_title._ChartTitleLayoutView),
      [_lifecycleListener$7]: dart.fieldType(base_chart.LifecycleListener$(D))
    }));
    return ChartTitle;
  });
  chart_title.ChartTitle = chart_title.ChartTitle$();
  dart.defineLazy(chart_title.ChartTitle, {
    /*chart_title.ChartTitle._defaultBehaviorPosition*/get _defaultBehaviorPosition() {
      return C139 || CT.C139;
    },
    /*chart_title.ChartTitle._defaultMaxWidthStrategy*/get _defaultMaxWidthStrategy() {
      return C18 || CT.C18;
    },
    /*chart_title.ChartTitle._defaultTitleDirection*/get _defaultTitleDirection() {
      return C257 || CT.C257;
    },
    /*chart_title.ChartTitle._defaultTitleOutsideJustification*/get _defaultTitleOutsideJustification() {
      return C148 || CT.C148;
    },
    /*chart_title.ChartTitle._defaultTitleStyle*/get _defaultTitleStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 18, color: style_factory.StyleFactory.style.tickColor});
    },
    /*chart_title.ChartTitle._defaultSubTitleStyle*/get _defaultSubTitleStyle() {
      return new axis_spec.TextStyleSpec.new({fontSize: 14, color: style_factory.StyleFactory.style.tickColor});
    },
    /*chart_title.ChartTitle._defaultInnerPadding*/get _defaultInnerPadding() {
      return 10;
    },
    /*chart_title.ChartTitle._defaultTitlePadding*/get _defaultTitlePadding() {
      return 18;
    },
    /*chart_title.ChartTitle._defaultOuterPadding*/get _defaultOuterPadding() {
      return 10;
    }
  });
  dart.addTypeTests(chart_title.ChartTitle, _is_ChartTitle_default);
  const _layoutConfig = dart.privateName(chart_title, "_layoutConfig");
  const _componentBounds$1 = dart.privateName(chart_title, "_componentBounds");
  const _drawAreaBounds$5 = dart.privateName(chart_title, "_drawAreaBounds");
  const _graphicsFactory$5 = dart.privateName(chart_title, "_graphicsFactory");
  const _titleTextElement = dart.privateName(chart_title, "_titleTextElement");
  const _subTitleTextElement = dart.privateName(chart_title, "_subTitleTextElement");
  const _layoutPosition$0 = dart.privateName(chart_title, "_layoutPosition");
  const _getTextStyle$1 = dart.privateName(chart_title, "_getTextStyle");
  const _resolvedTitleDirection = dart.privateName(chart_title, "_resolvedTitleDirection");
  const _resetTextElementCache = dart.privateName(chart_title, "_resetTextElementCache");
  const _getLabelPosition$ = dart.privateName(chart_title, "_getLabelPosition");
  const _getHorizontalLabelPosition = dart.privateName(chart_title, "_getHorizontalLabelPosition");
  const _getVerticalLabelPosition = dart.privateName(chart_title, "_getVerticalLabelPosition");
  const _is__ChartTitleLayoutView_default = Symbol('_is__ChartTitleLayoutView_default');
  const chart$0 = dart.privateName(chart_title, "_ChartTitleLayoutView.chart");
  chart_title._ChartTitleLayoutView$ = dart.generic(D => {
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    class _ChartTitleLayoutView extends layout_view.LayoutView {
      get chart() {
        return this[chart$0];
      }
      set chart(value) {
        this[chart$0] = BaseChartOfD()._check(value);
      }
      get layoutConfig() {
        return this[_layoutConfig];
      }
      get isRtl() {
        let t10, t10$, t10$0;
        t10$0 = (t10$ = (t10 = this.chart, t10 == null ? null : t10.context), t10$ == null ? null : t10$.isRtl);
        return t10$0 == null ? false : t10$0;
      }
      get graphicsFactory() {
        return this[_graphicsFactory$5];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory$5] = value;
      }
      set config(config) {
        this[_config] = config;
        this.layoutConfig.position = this[_layoutPosition$0];
      }
      measure(maxWidth, maxHeight) {
        let t10, t10$;
        let minWidth = null;
        let minHeight = null;
        let preferredWidth = 0;
        let preferredHeight = 0;
        let totalPadding = dart.notNull(this[_config].outerPadding) + dart.notNull(this[_config].innerPadding) + dart.notNull(this[_config].subTitle != null ? this[_config].titlePadding : 0.0);
        let textStyle = this[_getTextStyle$1](this.graphicsFactory, this[_config].titleStyleSpec);
        let textElement = (t10 = this.graphicsFactory.createTextElement(this[_config].title), t10.maxWidthStrategy = this[_config].maxWidthStrategy, t10.textStyle = textStyle, t10);
        let subTitleTextStyle = this[_getTextStyle$1](this.graphicsFactory, this[_config].subTitleStyleSpec);
        let subTitleTextElement = (t10$ = this.graphicsFactory.createTextElement(this[_config].subTitle), t10$.maxWidthStrategy = this[_config].maxWidthStrategy, t10$.textStyle = subTitleTextStyle, t10$);
        let resolvedTitleDirection = this[_resolvedTitleDirection];
        switch (this[_config].behaviorPosition) {
          case C140 || CT.C140:
          case C139 || CT.C139:
          {
            let textHeight = (dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? textElement.measurement.horizontalSliceWidth : textElement.measurement.verticalSliceWidth)[$round]();
            let subTitleTextHeight = this[_config].subTitle != null ? (dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? subTitleTextElement.measurement.horizontalSliceWidth : subTitleTextElement.measurement.verticalSliceWidth)[$round]() : 0;
            let measuredHeight = (textHeight + subTitleTextHeight + totalPadding)[$round]();
            minHeight = this[_config].layoutMinSize != null ? math.min(core.int, this[_config].layoutMinSize, measuredHeight) : measuredHeight;
            preferredWidth = maxWidth;
            preferredHeight = this[_config].layoutPreferredSize != null ? math.min(core.int, this[_config].layoutPreferredSize, maxHeight) : measuredHeight;
            break;
          }
          case C142 || CT.C142:
          case C141 || CT.C141:
          {
            let textWidth = (dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? textElement.measurement.verticalSliceWidth : textElement.measurement.horizontalSliceWidth)[$round]();
            let subTitleTextWidth = this[_config].subTitle != null ? (dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? subTitleTextElement.measurement.verticalSliceWidth : subTitleTextElement.measurement.horizontalSliceWidth)[$round]() : 0;
            let measuredWidth = (textWidth + subTitleTextWidth + totalPadding)[$round]();
            minWidth = this[_config].layoutMinSize != null ? math.min(core.int, this[_config].layoutMinSize, measuredWidth) : measuredWidth;
            preferredWidth = this[_config].layoutPreferredSize != null ? math.min(core.int, this[_config].layoutPreferredSize, maxWidth) : measuredWidth;
            preferredHeight = maxHeight;
            break;
          }
          case C143 || CT.C143:
          {
            preferredWidth = this[_drawAreaBounds$5] != null ? math.min(core.int, this[_drawAreaBounds$5][$width], maxWidth) : maxWidth;
            preferredHeight = this[_drawAreaBounds$5] != null ? math.min(core.int, this[_drawAreaBounds$5][$height], maxHeight) : maxHeight;
            break;
          }
        }
        this[_resetTextElementCache]();
        return new layout_view.ViewMeasuredSizes.new({minWidth: minWidth, minHeight: minHeight, preferredWidth: preferredWidth, preferredHeight: preferredHeight});
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds$1] = componentBounds;
        this[_drawAreaBounds$5] = drawAreaBounds;
        this[_resetTextElementCache]();
      }
      paint(canvas, animationPercent) {
        let t10, t10$;
        let resolvedTitleDirection = this[_resolvedTitleDirection];
        let titleHeight = 0.0;
        let subTitleHeight = 0.0;
        if (this[_config].title != null) {
          if (this[_titleTextElement] == null) {
            let textStyle = this[_getTextStyle$1](this.graphicsFactory, this[_config].titleStyleSpec);
            this[_titleTextElement] = (t10 = this.graphicsFactory.createTextElement(this[_config].title), t10.maxWidthStrategy = this[_config].maxWidthStrategy, t10.textStyle = textStyle, t10);
            this[_titleTextElement].maxWidth = dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.horizontal) ? this[_componentBounds$1][$width] : this[_componentBounds$1][$height];
          }
          titleHeight = this[_titleTextElement].measurement.verticalSliceWidth;
        }
        if (this[_config].subTitle != null) {
          if (this[_subTitleTextElement] == null) {
            let textStyle = this[_getTextStyle$1](this.graphicsFactory, this[_config].subTitleStyleSpec);
            this[_subTitleTextElement] = (t10$ = this.graphicsFactory.createTextElement(this[_config].subTitle), t10$.maxWidthStrategy = this[_config].maxWidthStrategy, t10$.textStyle = textStyle, t10$);
            this[_subTitleTextElement].maxWidth = dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.horizontal) ? this[_componentBounds$1][$width] : this[_componentBounds$1][$height];
          }
          subTitleHeight = this[_subTitleTextElement].measurement.verticalSliceWidth;
        }
        if (this[_config].title != null) {
          let labelPoint = this[_getLabelPosition$](true, this[_componentBounds$1], resolvedTitleDirection, this[_titleTextElement], titleHeight, subTitleHeight);
          if (labelPoint != null) {
            let rotation = dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? -3.141592653589793 / 2 : 0.0;
            canvas.drawText(this[_titleTextElement], labelPoint.x, labelPoint.y, {rotation: rotation});
          }
        }
        if (this[_config].subTitle != null) {
          let labelPoint = this[_getLabelPosition$](false, this[_componentBounds$1], resolvedTitleDirection, this[_subTitleTextElement], titleHeight, subTitleHeight);
          if (labelPoint != null) {
            let rotation = dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.vertical) ? -3.141592653589793 / 2 : 0.0;
            canvas.drawText(this[_subTitleTextElement], labelPoint.x, labelPoint.y, {rotation: rotation});
          }
        }
      }
      [_resetTextElementCache]() {
        this[_titleTextElement] = null;
        this[_subTitleTextElement] = null;
      }
      get [_resolvedTitleDirection]() {
        let resolvedTitleDirection = this[_config].titleDirection;
        if (dart.equals(resolvedTitleDirection, chart_title.ChartTitleDirection.auto)) {
          switch (this[_config].behaviorPosition) {
            case C140 || CT.C140:
            case C143 || CT.C143:
            case C139 || CT.C139:
            {
              resolvedTitleDirection = chart_title.ChartTitleDirection.horizontal;
              break;
            }
            case C142 || CT.C142:
            case C141 || CT.C141:
            {
              resolvedTitleDirection = chart_title.ChartTitleDirection.vertical;
              break;
            }
          }
        }
        return resolvedTitleDirection;
      }
      get [_layoutPosition$0]() {
        let position = null;
        switch (this[_config].behaviorPosition) {
          case C140 || CT.C140:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C142 || CT.C142:
          {
            position = dart.test(this.isRtl) ? layout_view.LayoutPosition.Left : layout_view.LayoutPosition.Right;
            break;
          }
          case C143 || CT.C143:
          {
            position = layout_view.LayoutPosition.DrawArea;
            break;
          }
          case C141 || CT.C141:
          {
            position = dart.test(this.isRtl) ? layout_view.LayoutPosition.Right : layout_view.LayoutPosition.Left;
            break;
          }
          case C139 || CT.C139:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
        }
        if (dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.start) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.middle) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.end)) {
          switch (position) {
            case C118 || CT.C118:
            {
              position = layout_view.LayoutPosition.FullBottom;
              break;
            }
            case C122 || CT.C122:
            {
              position = layout_view.LayoutPosition.FullLeft;
              break;
            }
            case C120 || CT.C120:
            {
              position = layout_view.LayoutPosition.FullTop;
              break;
            }
            case C124 || CT.C124:
            {
              position = layout_view.LayoutPosition.FullRight;
              break;
            }
            default:
            {
              break;
            }
          }
        }
        return position;
      }
      [_getLabelPosition$](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        switch (this[_config].behaviorPosition) {
          case C140 || CT.C140:
          case C139 || CT.C139:
          {
            return this[_getHorizontalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight);
            break;
          }
          case C141 || CT.C141:
          case C142 || CT.C142:
          {
            return this[_getVerticalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight);
            break;
          }
          case C143 || CT.C143:
          {
            break;
          }
        }
        return null;
      }
      [_getHorizontalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        let labelX = 0;
        let labelY = 0;
        switch (this[_config].titleOutsideJustification) {
          case C148 || CT.C148:
          case C147 || CT.C147:
          {
            let textWidth = (dart.test(this.isRtl) ? 1 : -1) * dart.notNull(textElement.measurement.horizontalSliceWidth) / 2;
            labelX = (dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2 + textWidth)[$round]();
            textElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C150 || CT.C150:
          case C149 || CT.C149:
          case C146 || CT.C146:
          case C145 || CT.C145:
          {
            let alignLeft = dart.test(this.isRtl) ? dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.end) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.endDrawArea) : dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.start) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.startDrawArea);
            let padding = dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.endDrawArea) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.startDrawArea) ? 0.0 : this[_config].outerPadding;
            if (alignLeft) {
              labelX = (dart.notNull(bounds[$left]) + dart.notNull(padding))[$round]();
              textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              labelX = (dart.notNull(bounds[$right]) - dart.notNull(padding))[$round]();
              textElement.textDirection = text_element.TextDirection.rtl;
            }
            break;
          }
        }
        if (dart.equals(this[_config].behaviorPosition, chart_behavior.BehaviorPosition.bottom)) {
          let padding = dart.notNull(this[_config].innerPadding) + (dart.test(isPrimaryTitle) ? 0 : dart.notNull(this[_config].titlePadding) + dart.notNull(titleHeight));
          labelY = (dart.notNull(bounds[$top]) + padding)[$round]();
        } else {
          let padding = 0.0 + dart.notNull(this[_config].innerPadding);
          if (dart.test(isPrimaryTitle)) {
            padding = padding + ((dart.notNull(subTitleHeight) > 0 ? dart.notNull(this[_config].titlePadding) + dart.notNull(subTitleHeight) : 0) + dart.notNull(titleHeight));
          } else {
            padding = padding + dart.notNull(subTitleHeight);
          }
          labelY = (dart.notNull(bounds[$bottom]) - padding)[$round]();
        }
        return new (PointOfint()).new(labelX, labelY);
      }
      [_getVerticalLabelPosition](isPrimaryTitle, bounds, titleDirection, textElement, titleHeight, subTitleHeight) {
        let labelX = 0;
        let labelY = 0;
        switch (this[_config].titleOutsideJustification) {
          case C148 || CT.C148:
          case C147 || CT.C147:
          {
            let textWidth = (dart.test(this.isRtl) ? -1 : 1) * dart.notNull(textElement.measurement.horizontalSliceWidth) / 2;
            labelY = (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2 + textWidth)[$round]();
            textElement.textDirection = dart.test(this.isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
            break;
          }
          case C150 || CT.C150:
          case C149 || CT.C149:
          case C146 || CT.C146:
          case C145 || CT.C145:
          {
            let alignLeft = dart.test(this.isRtl) ? dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.end) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.endDrawArea) : dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.start) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.startDrawArea);
            let padding = dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.endDrawArea) || dart.equals(this[_config].titleOutsideJustification, chart_behavior.OutsideJustification.startDrawArea) ? 0.0 : this[_config].outerPadding;
            if (alignLeft) {
              labelY = (dart.notNull(bounds[$bottom]) - dart.notNull(padding))[$round]();
              textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              labelY = (dart.notNull(bounds[$top]) + dart.notNull(padding))[$round]();
              textElement.textDirection = text_element.TextDirection.rtl;
            }
            break;
          }
        }
        if (dart.equals(this[_layoutPosition$0], layout_view.LayoutPosition.Right) || dart.equals(this[_layoutPosition$0], layout_view.LayoutPosition.FullRight)) {
          let padding = dart.notNull(this[_config].outerPadding) + (dart.test(isPrimaryTitle) ? 0 : dart.notNull(this[_config].titlePadding) + dart.notNull(titleHeight));
          labelX = (dart.notNull(bounds[$left]) + padding)[$round]();
        } else {
          let padding = dart.notNull(this[_config].outerPadding) + dart.notNull(titleHeight) + (dart.test(isPrimaryTitle) ? dart.notNull(subTitleHeight) > 0 ? dart.notNull(this[_config].titlePadding) + dart.notNull(subTitleHeight) : 0 : 0.0);
          labelX = (dart.notNull(bounds[$right]) - padding)[$round]();
        }
        return new (PointOfint()).new(labelX, labelY);
      }
      [_getTextStyle$1](graphicsFactory, labelSpec) {
        let t11, t11$, t11$0, t11$1, t11$2, t11$3, t10;
        t10 = graphicsFactory.createTextPaint();
        t10.color = (t11$ = (t11 = labelSpec, t11 == null ? null : t11.color), t11$ == null ? style_factory.StyleFactory.style.tickColor : t11$);
        t10.fontFamily = (t11$0 = labelSpec, t11$0 == null ? null : t11$0.fontFamily);
        t10.fontSize = (t11$2 = (t11$1 = labelSpec, t11$1 == null ? null : t11$1.fontSize), t11$2 == null ? 18 : t11$2);
        t10.lineHeight = (t11$3 = labelSpec, t11$3 == null ? null : t11$3.lineHeight);
        return t10;
      }
      get componentBounds() {
        return this[_drawAreaBounds$5];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_ChartTitleLayoutView.new = function(opts) {
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let config = opts && 'config' in opts ? opts.config : null;
      let chart = opts && 'chart' in opts ? opts.chart : null;
      this[_layoutConfig] = null;
      this[_componentBounds$1] = null;
      this[_drawAreaBounds$5] = null;
      this[_graphicsFactory$5] = null;
      this[_titleTextElement] = null;
      this[_subTitleTextElement] = null;
      this[chart$0] = chart;
      this[_config] = config;
      this[_layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: layoutPaintOrder, position: this[_layoutPosition$0], positionOrder: 40});
    }).prototype = _ChartTitleLayoutView.prototype;
    dart.addTypeTests(_ChartTitleLayoutView);
    _ChartTitleLayoutView.prototype[_is__ChartTitleLayoutView_default] = true;
    dart.setMethodSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getMethods(_ChartTitleLayoutView.__proto__),
      measure: dart.fnType(layout_view.ViewMeasuredSizes, [core.int, core.int]),
      layout: dart.fnType(dart.void, [math.Rectangle$(core.int), math.Rectangle$(core.int)]),
      paint: dart.fnType(dart.void, [chart_canvas.ChartCanvas, core.double]),
      [_resetTextElementCache]: dart.fnType(dart.void, []),
      [_getLabelPosition$]: dart.fnType(math.Point$(core.int), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [_getHorizontalLabelPosition]: dart.fnType(math.Point$(core.int), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [_getVerticalLabelPosition]: dart.fnType(math.Point$(core.int), [core.bool, math.Rectangle$(core.num), chart_title.ChartTitleDirection, text_element.TextElement, core.double, core.double]),
      [_getTextStyle$1]: dart.fnType(text_style.TextStyle, [graphics_factory.GraphicsFactory, axis_spec.TextStyleSpec])
    }));
    dart.setGetterSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getGetters(_ChartTitleLayoutView.__proto__),
      layoutConfig: layout_view.LayoutViewConfig,
      isRtl: core.bool,
      graphicsFactory: graphics_factory.GraphicsFactory,
      [_resolvedTitleDirection]: chart_title.ChartTitleDirection,
      [_layoutPosition$0]: layout_view.LayoutPosition,
      componentBounds: math.Rectangle$(core.int),
      isSeriesRenderer: core.bool
    }));
    dart.setSetterSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getSetters(_ChartTitleLayoutView.__proto__),
      graphicsFactory: graphics_factory.GraphicsFactory,
      config: chart_title._ChartTitleConfig
    }));
    dart.setLibraryUri(_ChartTitleLayoutView, "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart");
    dart.setFieldSignature(_ChartTitleLayoutView, () => ({
      __proto__: dart.getFields(_ChartTitleLayoutView.__proto__),
      [_layoutConfig]: dart.fieldType(layout_view.LayoutViewConfig),
      [_config]: dart.fieldType(chart_title._ChartTitleConfig),
      chart: dart.fieldType(base_chart.BaseChart$(D)),
      [_componentBounds$1]: dart.fieldType(math.Rectangle$(core.int)),
      [_drawAreaBounds$5]: dart.fieldType(math.Rectangle$(core.int)),
      [_graphicsFactory$5]: dart.fieldType(graphics_factory.GraphicsFactory),
      [_titleTextElement]: dart.fieldType(text_element.TextElement),
      [_subTitleTextElement]: dart.fieldType(text_element.TextElement)
    }));
    return _ChartTitleLayoutView;
  });
  chart_title._ChartTitleLayoutView = chart_title._ChartTitleLayoutView$();
  dart.addTypeTests(chart_title._ChartTitleLayoutView, _is__ChartTitleLayoutView_default);
  chart_title._ChartTitleConfig = class _ChartTitleConfig extends core.Object {};
  (chart_title._ChartTitleConfig.new = function() {
    this.behaviorPosition = null;
    this.layoutMinSize = null;
    this.layoutPreferredSize = null;
    this.maxWidthStrategy = null;
    this.title = null;
    this.titleDirection = null;
    this.titleOutsideJustification = null;
    this.titleStyleSpec = null;
    this.subTitle = null;
    this.subTitleStyleSpec = null;
    this.innerPadding = null;
    this.titlePadding = null;
    this.outerPadding = null;
    ;
  }).prototype = chart_title._ChartTitleConfig.prototype;
  dart.addTypeTests(chart_title._ChartTitleConfig);
  dart.setLibraryUri(chart_title._ChartTitleConfig, "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart");
  dart.setFieldSignature(chart_title._ChartTitleConfig, () => ({
    __proto__: dart.getFields(chart_title._ChartTitleConfig.__proto__),
    behaviorPosition: dart.fieldType(chart_behavior.BehaviorPosition),
    layoutMinSize: dart.fieldType(core.int),
    layoutPreferredSize: dart.fieldType(core.int),
    maxWidthStrategy: dart.fieldType(text_element.MaxWidthStrategy),
    title: dart.fieldType(core.String),
    titleDirection: dart.fieldType(chart_title.ChartTitleDirection),
    titleOutsideJustification: dart.fieldType(chart_behavior.OutsideJustification),
    titleStyleSpec: dart.fieldType(axis_spec.TextStyleSpec),
    subTitle: dart.fieldType(core.String),
    subTitleStyleSpec: dart.fieldType(axis_spec.TextStyleSpec),
    innerPadding: dart.fieldType(core.int),
    titlePadding: dart.fieldType(core.int),
    outerPadding: dart.fieldType(core.int)
  }));
  let C258;
  let C259;
  let C260;
  chart_title.ChartTitleDirection = class ChartTitleDirection extends core.Object {
    toString() {
      return this[_name$22];
    }
  };
  (chart_title.ChartTitleDirection.new = function(index, _name) {
    this.index = index;
    this[_name$22] = _name;
    ;
  }).prototype = chart_title.ChartTitleDirection.prototype;
  dart.addTypeTests(chart_title.ChartTitleDirection);
  dart.setLibraryUri(chart_title.ChartTitleDirection, "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart");
  dart.setFieldSignature(chart_title.ChartTitleDirection, () => ({
    __proto__: dart.getFields(chart_title.ChartTitleDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$22]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chart_title.ChartTitleDirection, ['toString']);
  chart_title.ChartTitleDirection.auto = C257 || CT.C257;
  chart_title.ChartTitleDirection.horizontal = C258 || CT.C258;
  chart_title.ChartTitleDirection.vertical = C259 || CT.C259;
  chart_title.ChartTitleDirection.values = C260 || CT.C260;
  const _name$23 = dart.privateName(percent_injector, "_name");
  let C261;
  const _lifecycleListener$8 = dart.privateName(percent_injector, "_lifecycleListener");
  const _preProcess$ = dart.privateName(percent_injector, "_preProcess");
  const _onData = dart.privateName(percent_injector, "_onData");
  let C262;
  let C263;
  const _is_PercentInjector_default = Symbol('_is_PercentInjector_default');
  const totalType$ = dart.privateName(percent_injector, "PercentInjector.totalType");
  percent_injector.PercentInjector$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    class PercentInjector extends core.Object {
      get totalType() {
        return this[totalType$];
      }
      set totalType(value) {
        super.totalType = value;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        chart.addLifecycleListener(this[_lifecycleListener$8]);
      }
      removeFrom(chart) {
        BaseChartOfD()._check(chart);
        chart.removeLifecycleListener(this[_lifecycleListener$8]);
      }
      [_onData](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        seriesList[$forEach](dart.fn(series => {
          series.setAttr(core.bool, percent_injector.percentInjectedKey, false);
        }, MutableSeriesToNull()));
      }
      [_preProcess$](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        let percentInjected = true;
        seriesList[$forEach](dart.fn(series => {
          percentInjected = percentInjected && dart.test(series.getAttr(core.bool, percent_injector.percentInjectedKey));
        }, MutableSeriesToNull()));
        if (percentInjected) {
          return;
        }
        switch (this.totalType) {
          case C261 || CT.C261:
          case C262 || CT.C262:
          {
            let totalsByDomain = new (IdentityMapOfString$num()).new();
            let useSeriesCategory = dart.equals(this.totalType, percent_injector.PercentInjectorTotalType.domainBySeriesCategory);
            seriesList[$forEach](dart.fn(series => {
              let seriesCategory = series.seriesCategory;
              let rawMeasureFn = series.rawMeasureFn;
              let domainFn = series.domainFn;
              for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
                let domain = domainFn(index);
                let measure = rawMeasureFn(index);
                measure == null ? measure = 0.0 : null;
                let key = useSeriesCategory ? dart.str(seriesCategory) + "__" + dart.str(dart.toString(domain)) : dart.str(dart.toString(domain));
                if (totalsByDomain[$_get](key) != null) {
                  totalsByDomain[$_set](key, dart.notNull(totalsByDomain[$_get](key)) + dart.notNull(measure));
                } else {
                  totalsByDomain[$_set](key, measure);
                }
              }
            }, MutableSeriesToNull()));
            seriesList[$forEach](dart.fn(series => {
              series.measureFn = dart.fn(index => {
                let measure = series.rawMeasureFn(index);
                if (measure == null || measure === 0.0) {
                  return 0.0;
                }
                let domain = series.domainFn(index);
                let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(dart.toString(domain)) : dart.str(dart.toString(domain));
                return dart.notNull(measure) / dart.notNull(totalsByDomain[$_get](key));
              }, intTodouble());
              if (series.measureLowerBoundFn != null) {
                series.measureLowerBoundFn = dart.fn(index => {
                  let measureLowerBound = series.rawMeasureLowerBoundFn(index);
                  if (measureLowerBound == null || measureLowerBound === 0.0) {
                    return 0.0;
                  }
                  let domain = series.domainFn(index);
                  let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(dart.toString(domain)) : dart.str(dart.toString(domain));
                  return dart.notNull(measureLowerBound) / dart.notNull(totalsByDomain[$_get](key));
                }, intTodouble());
              }
              if (series.measureUpperBoundFn != null) {
                series.measureUpperBoundFn = dart.fn(index => {
                  let measureUpperBound = series.rawMeasureUpperBoundFn(index);
                  if (measureUpperBound == null || measureUpperBound === 0.0) {
                    return 0.0;
                  }
                  let domain = series.domainFn(index);
                  let key = useSeriesCategory ? dart.str(series.seriesCategory) + "__" + dart.str(dart.toString(domain)) : dart.str(dart.toString(domain));
                  return dart.notNull(measureUpperBound) / dart.notNull(totalsByDomain[$_get](key));
                }, intTodouble());
              }
              series.setAttr(core.bool, percent_injector.percentInjectedKey, true);
            }, MutableSeriesToNull()));
            break;
          }
          case C263 || CT.C263:
          {
            seriesList[$forEach](dart.fn(series => {
              series.measureFn = dart.fn(index => dart.notNull(series.rawMeasureFn(index)) / dart.notNull(series.seriesMeasureTotal), intTodouble());
              if (series.measureLowerBoundFn != null) {
                series.measureLowerBoundFn = dart.fn(index => dart.notNull(series.rawMeasureLowerBoundFn(index)) / dart.notNull(series.seriesMeasureTotal), intTodouble());
              }
              if (series.measureUpperBoundFn != null) {
                series.measureUpperBoundFn = dart.fn(index => dart.notNull(series.rawMeasureUpperBoundFn(index)) / dart.notNull(series.seriesMeasureTotal), intTodouble());
              }
              series.setAttr(core.bool, percent_injector.percentInjectedKey, true);
            }, MutableSeriesToNull()));
            break;
          }
          default:
          {
            dart.throw(new core.ArgumentError.new("Unsupported totalType: " + dart.str(this.totalType)));
          }
        }
      }
      get role() {
        return "PercentInjector";
      }
    }
    (PercentInjector.new = function(opts) {
      let totalType = opts && 'totalType' in opts ? opts.totalType : C261 || CT.C261;
      this[_lifecycleListener$8] = null;
      this[totalType$] = totalType;
      this[_lifecycleListener$8] = new (LifecycleListenerOfD()).new({onPreprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _preProcess$)), onData: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _onData))});
    }).prototype = PercentInjector.prototype;
    dart.addTypeTests(PercentInjector);
    PercentInjector.prototype[_is_PercentInjector_default] = true;
    PercentInjector[dart.implements] = () => [chart_behavior.ChartBehavior$(D)];
    dart.setMethodSignature(PercentInjector, () => ({
      __proto__: dart.getMethods(PercentInjector.__proto__),
      attachTo: dart.fnType(dart.void, [core.Object]),
      removeFrom: dart.fnType(dart.void, [core.Object]),
      [_onData]: dart.fnType(dart.void, [core.Object]),
      [_preProcess$]: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(PercentInjector, () => ({
      __proto__: dart.getGetters(PercentInjector.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(PercentInjector, "package:charts_common/src/chart/common/behavior/calculation/percent_injector.dart");
    dart.setFieldSignature(PercentInjector, () => ({
      __proto__: dart.getFields(PercentInjector.__proto__),
      [_lifecycleListener$8]: dart.fieldType(base_chart.LifecycleListener$(D)),
      totalType: dart.finalFieldType(percent_injector.PercentInjectorTotalType)
    }));
    return PercentInjector;
  });
  percent_injector.PercentInjector = percent_injector.PercentInjector$();
  dart.addTypeTests(percent_injector.PercentInjector, _is_PercentInjector_default);
  let C264;
  percent_injector.PercentInjectorTotalType = class PercentInjectorTotalType extends core.Object {
    toString() {
      return this[_name$23];
    }
  };
  (percent_injector.PercentInjectorTotalType.new = function(index, _name) {
    this.index = index;
    this[_name$23] = _name;
    ;
  }).prototype = percent_injector.PercentInjectorTotalType.prototype;
  dart.addTypeTests(percent_injector.PercentInjectorTotalType);
  dart.setLibraryUri(percent_injector.PercentInjectorTotalType, "package:charts_common/src/chart/common/behavior/calculation/percent_injector.dart");
  dart.setFieldSignature(percent_injector.PercentInjectorTotalType, () => ({
    __proto__: dart.getFields(percent_injector.PercentInjectorTotalType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$23]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(percent_injector.PercentInjectorTotalType, ['toString']);
  percent_injector.PercentInjectorTotalType.domain = C261 || CT.C261;
  percent_injector.PercentInjectorTotalType.domainBySeriesCategory = C262 || CT.C262;
  percent_injector.PercentInjectorTotalType.series = C263 || CT.C263;
  percent_injector.PercentInjectorTotalType.values = C264 || CT.C264;
  let C265;
  dart.defineLazy(percent_injector, {
    /*percent_injector.percentInjectedKey*/get percentInjectedKey() {
      return C265 || CT.C265;
    }
  });
  const _lifecycleListener$9 = dart.privateName(domain_a11y_explore_behavior, "_lifecycleListener");
  const _chart$18 = dart.privateName(domain_a11y_explore_behavior, "_chart");
  const _seriesList = dart.privateName(domain_a11y_explore_behavior, "_seriesList");
  const _vocalizationCallback = dart.privateName(domain_a11y_explore_behavior, "_vocalizationCallback");
  let C266;
  const _updateSeriesList = dart.privateName(domain_a11y_explore_behavior, "_updateSeriesList");
  const _is_DomainA11yExploreBehavior_default = Symbol('_is_DomainA11yExploreBehavior_default');
  domain_a11y_explore_behavior.DomainA11yExploreBehavior$ = dart.generic(D => {
    let LifecycleListenerOfD = () => (LifecycleListenerOfD = dart.constFn(base_chart.LifecycleListener$(D)))();
    let SeriesDatumOfD = () => (SeriesDatumOfD = dart.constFn(series_datum.SeriesDatum$(D)))();
    let ListOfSeriesDatumOfD = () => (ListOfSeriesDatumOfD = dart.constFn(core.List$(SeriesDatumOfD())))();
    let LinkedMapOfD$ListOfSeriesDatumOfD = () => (LinkedMapOfD$ListOfSeriesDatumOfD = dart.constFn(_js_helper.LinkedMap$(D, ListOfSeriesDatumOfD())))();
    let JSArrayOfSeriesDatumOfD = () => (JSArrayOfSeriesDatumOfD = dart.constFn(_interceptors.JSArray$(SeriesDatumOfD())))();
    let ImmutableAxisOfD = () => (ImmutableAxisOfD = dart.constFn(axis$.ImmutableAxis$(D)))();
    let ImmutableSeriesOfD = () => (ImmutableSeriesOfD = dart.constFn(processed_series.ImmutableSeries$(D)))();
    let JSArrayOfImmutableSeriesOfD = () => (JSArrayOfImmutableSeriesOfD = dart.constFn(_interceptors.JSArray$(ImmutableSeriesOfD())))();
    let DAndListOfSeriesDatumOfDToNull = () => (DAndListOfSeriesDatumOfDToNull = dart.constFn(dart.fnType(core.Null, [D, ListOfSeriesDatumOfD()])))();
    let MutableSeriesOfD = () => (MutableSeriesOfD = dart.constFn(processed_series.MutableSeries$(D)))();
    let ListOfMutableSeriesOfD = () => (ListOfMutableSeriesOfD = dart.constFn(core.List$(MutableSeriesOfD())))();
    let BaseChartOfD = () => (BaseChartOfD = dart.constFn(base_chart.BaseChart$(D)))();
    let CartesianChartOfD = () => (CartesianChartOfD = dart.constFn(cartesian_chart.CartesianChart$(D)))();
    class DomainA11yExploreBehavior extends a11y_explore_behavior.A11yExploreBehavior$(D) {
      createA11yNodes() {
        let t11, t10;
        let nodes = JSArrayOf_DomainA11yNode().of([]);
        let selectionModel = this[_chart$18].getSelectionModel(selection_model.SelectionModelType.info);
        let domainSeriesDatum = new (LinkedMapOfD$ListOfSeriesDatumOfD()).new();
        for (let series of this[_seriesList]) {
          for (let index = 0; index < dart.notNull(series.data[$length]); index = index + 1) {
            let datum = series.data[$_get](index);
            let domain = series.domainFn(index);
            t10 = domainSeriesDatum;
            t11 = domain;
            t10[$_get](t11) == null ? t10[$_set](t11, JSArrayOfSeriesDatumOfD().of([])) : null;
            domainSeriesDatum[$_get](domain)[$add](new (SeriesDatumOfD()).new(series, datum));
          }
        }
        domainSeriesDatum[$forEach](dart.fn((domain, seriesDatums) => {
          let a11yDescription = this[_vocalizationCallback](seriesDatums);
          let firstSeries = seriesDatums[$first].series;
          let domainAxis = ImmutableAxisOfD().as(firstSeries.getAttr(axis$.Axis, axis$.domainAxisKey));
          let location = domainAxis.getLocation(domain);
          let stepSize = dart.notNull(domainAxis.stepSize) > dart.notNull(this.minimumWidth) ? domainAxis.stepSize : this.minimumWidth;
          nodes[$add](domain_a11y_explore_behavior._DomainA11yNode.new(a11yDescription, {location: location, stepSize: stepSize, chartDrawBounds: this[_chart$18].drawAreaBounds, isRtl: this[_chart$18].context.isRtl, renderVertically: this[_chart$18].vertical, onFocus: dart.fn(() => selectionModel.updateSelection(seriesDatums, JSArrayOfImmutableSeriesOfD().of([])), VoidTobool())}));
        }, DAndListOfSeriesDatumOfDToNull()));
        nodes[$sort]();
        return nodes;
      }
      [_updateSeriesList](seriesList) {
        ListOfMutableSeriesOfD()._check(seriesList);
        this[_seriesList] = seriesList;
      }
      attachTo(chart) {
        BaseChartOfD()._check(chart);
        if (!cartesian_chart.CartesianChart.is(chart)) dart.assertFailed(null, "org-dartlang-app:///packages/charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart", 123, 12, "chart is CartesianChart");
        this[_chart$18] = CartesianChartOfD()._check(cartesian_chart.CartesianChart.as(chart));
        chart.addLifecycleListener(this[_lifecycleListener$9]);
        super.attachTo(chart);
      }
      removeFrom(chart) {
        base_chart.BaseChart._check(chart);
        chart.removeLifecycleListener(this[_lifecycleListener$9]);
      }
      get role() {
        return "DomainA11yExplore-" + dart.str(this.exploreModeTrigger);
      }
    }
    (DomainA11yExploreBehavior.new = function(opts) {
      let t10;
      let vocalizationCallback = opts && 'vocalizationCallback' in opts ? opts.vocalizationCallback : null;
      let exploreModeTrigger = opts && 'exploreModeTrigger' in opts ? opts.exploreModeTrigger : null;
      let minimumWidth = opts && 'minimumWidth' in opts ? opts.minimumWidth : null;
      let exploreModeEnabledAnnouncement = opts && 'exploreModeEnabledAnnouncement' in opts ? opts.exploreModeEnabledAnnouncement : null;
      let exploreModeDisabledAnnouncement = opts && 'exploreModeDisabledAnnouncement' in opts ? opts.exploreModeDisabledAnnouncement : null;
      this[_lifecycleListener$9] = null;
      this[_chart$18] = null;
      this[_seriesList] = null;
      this[_vocalizationCallback] = (t10 = vocalizationCallback, t10 == null ? dart.gbind(C266 || CT.C266, dart.dynamic) : t10);
      DomainA11yExploreBehavior.__proto__.new.call(this, {exploreModeTrigger: exploreModeTrigger, minimumWidth: minimumWidth, exploreModeEnabledAnnouncement: exploreModeEnabledAnnouncement, exploreModeDisabledAnnouncement: exploreModeDisabledAnnouncement});
      this[_lifecycleListener$9] = new (LifecycleListenerOfD()).new({onPostprocess: ListOfMutableSeriesTodynamic()._check(dart.bind(this, _updateSeriesList))});
    }).prototype = DomainA11yExploreBehavior.prototype;
    dart.addTypeTests(DomainA11yExploreBehavior);
    DomainA11yExploreBehavior.prototype[_is_DomainA11yExploreBehavior_default] = true;
    dart.setMethodSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getMethods(DomainA11yExploreBehavior.__proto__),
      createA11yNodes: dart.fnType(core.List$(a11y_node.A11yNode), []),
      [_updateSeriesList]: dart.fnType(dart.void, [core.Object])
    }));
    dart.setGetterSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getGetters(DomainA11yExploreBehavior.__proto__),
      role: core.String
    }));
    dart.setLibraryUri(DomainA11yExploreBehavior, "package:charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart");
    dart.setFieldSignature(DomainA11yExploreBehavior, () => ({
      __proto__: dart.getFields(DomainA11yExploreBehavior.__proto__),
      [_vocalizationCallback]: dart.finalFieldType(dart.fnType(core.String, [core.List$(series_datum.SeriesDatum)])),
      [_lifecycleListener$9]: dart.fieldType(base_chart.LifecycleListener$(D)),
      [_chart$18]: dart.fieldType(cartesian_chart.CartesianChart$(D)),
      [_seriesList]: dart.fieldType(core.List$(processed_series.MutableSeries$(D)))
    }));
    return DomainA11yExploreBehavior;
  });
  domain_a11y_explore_behavior.DomainA11yExploreBehavior = domain_a11y_explore_behavior.DomainA11yExploreBehavior$();
  dart.addTypeTests(domain_a11y_explore_behavior.DomainA11yExploreBehavior, _is_DomainA11yExploreBehavior_default);
  domain_a11y_explore_behavior._DomainA11yNode = class _DomainA11yNode extends a11y_node.A11yNode {
    static new(label, opts) {
      let location = opts && 'location' in opts ? opts.location : null;
      let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
      let chartDrawBounds = opts && 'chartDrawBounds' in opts ? opts.chartDrawBounds : null;
      let isRtl = opts && 'isRtl' in opts ? opts.isRtl : null;
      let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : null;
      let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
      let boundingBox = null;
      if (dart.test(renderVertically)) {
        let left = (dart.notNull(location) - dart.notNull(stepSize) / 2)[$round]();
        let top = chartDrawBounds[$top];
        let width = stepSize[$round]();
        let height = chartDrawBounds[$height];
        boundingBox = new (RectangleOfint()).new(left, top, width, height);
      } else {
        let left = chartDrawBounds[$left];
        let top = (dart.notNull(location) - dart.notNull(stepSize) / 2)[$round]();
        let width = chartDrawBounds[$width];
        let height = stepSize[$round]();
        boundingBox = new (RectangleOfint()).new(left, top, width, height);
      }
      return new domain_a11y_explore_behavior._DomainA11yNode._internal(label, boundingBox, {location: location, isRtl: isRtl, renderVertically: renderVertically, onFocus: onFocus});
    }
    compareTo(other) {
      domain_a11y_explore_behavior._DomainA11yNode._check(other);
      let result = this.location[$compareTo](other.location);
      if (dart.test(this.renderVertically) && dart.test(this.isRtl) && result !== 0) {
        result = -result;
      }
      return result;
    }
  };
  (domain_a11y_explore_behavior._DomainA11yNode._internal = function(label, boundingBox, opts) {
    let location = opts && 'location' in opts ? opts.location : null;
    let isRtl = opts && 'isRtl' in opts ? opts.isRtl : null;
    let renderVertically = opts && 'renderVertically' in opts ? opts.renderVertically : null;
    let onFocus = opts && 'onFocus' in opts ? opts.onFocus : null;
    this.location = location;
    this.isRtl = isRtl;
    this.renderVertically = renderVertically;
    domain_a11y_explore_behavior._DomainA11yNode.__proto__.new.call(this, label, boundingBox, {onFocus: onFocus});
    ;
  }).prototype = domain_a11y_explore_behavior._DomainA11yNode.prototype;
  dart.addTypeTests(domain_a11y_explore_behavior._DomainA11yNode);
  domain_a11y_explore_behavior._DomainA11yNode[dart.implements] = () => [core.Comparable$(domain_a11y_explore_behavior._DomainA11yNode)];
  dart.setMethodSignature(domain_a11y_explore_behavior._DomainA11yNode, () => ({
    __proto__: dart.getMethods(domain_a11y_explore_behavior._DomainA11yNode.__proto__),
    compareTo: dart.fnType(core.int, [core.Object]),
    [$compareTo]: dart.fnType(core.int, [core.Object])
  }));
  dart.setLibraryUri(domain_a11y_explore_behavior._DomainA11yNode, "package:charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart");
  dart.setFieldSignature(domain_a11y_explore_behavior._DomainA11yNode, () => ({
    __proto__: dart.getFields(domain_a11y_explore_behavior._DomainA11yNode.__proto__),
    location: dart.finalFieldType(core.double),
    isRtl: dart.finalFieldType(core.bool),
    renderVertically: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(domain_a11y_explore_behavior._DomainA11yNode, ['compareTo']);
  domain_a11y_explore_behavior.domainVocalization = function domainVocalization(D, seriesDatums) {
    let datumIndex = seriesDatums[$first].index;
    let domainFn = seriesDatums[$first].series.domainFn;
    let domain = domainFn(datumIndex);
    return dart.toString(domain);
  };
  const _is_BarErrorDecorator_default = Symbol('_is_BarErrorDecorator_default');
  const strokeWidthPx$12 = dart.privateName(bar_error_decorator, "BarErrorDecorator.strokeWidthPx");
  const endpointLengthPx$ = dart.privateName(bar_error_decorator, "BarErrorDecorator.endpointLengthPx");
  const outlineWidthPx$ = dart.privateName(bar_error_decorator, "BarErrorDecorator.outlineWidthPx");
  const strokeColor$1 = dart.privateName(bar_error_decorator, "BarErrorDecorator.strokeColor");
  const outlineColor$ = dart.privateName(bar_error_decorator, "BarErrorDecorator.outlineColor");
  bar_error_decorator.BarErrorDecorator$ = dart.generic(D => {
    let ImmutableBarRendererElementOfD = () => (ImmutableBarRendererElementOfD = dart.constFn(bar_renderer.ImmutableBarRendererElement$(D)))();
    let IterableOfImmutableBarRendererElementOfD = () => (IterableOfImmutableBarRendererElementOfD = dart.constFn(core.Iterable$(ImmutableBarRendererElementOfD())))();
    class BarErrorDecorator extends bar_renderer_decorator.BarRendererDecorator$(D) {
      get strokeWidthPx() {
        return this[strokeWidthPx$12];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get endpointLengthPx() {
        return this[endpointLengthPx$];
      }
      set endpointLengthPx(value) {
        super.endpointLengthPx = value;
      }
      get outlineWidthPx() {
        return this[outlineWidthPx$];
      }
      set outlineWidthPx(value) {
        super.outlineWidthPx = value;
      }
      get strokeColor() {
        return this[strokeColor$1];
      }
      set strokeColor(value) {
        super.strokeColor = value;
      }
      get outlineColor() {
        return this[outlineColor$];
      }
      set outlineColor(value) {
        super.outlineColor = value;
      }
      decorate(barElements, canvas, graphicsFactory, opts) {
        IterableOfImmutableBarRendererElementOfD()._check(barElements);
        let drawBounds = opts && 'drawBounds' in opts ? opts.drawBounds : null;
        let animationPercent = opts && 'animationPercent' in opts ? opts.animationPercent : null;
        let renderingVertically = opts && 'renderingVertically' in opts ? opts.renderingVertically : null;
        let rtl = opts && 'rtl' in opts ? opts.rtl : false;
        if (animationPercent !== 1.0) {
          return;
        }
        for (let element of barElements) {
          let bounds = element.bounds;
          let datumIndex = element.index;
          let measureLowerBoundFn = element.series.measureLowerBoundFn;
          let measureUpperBoundFn = element.series.measureUpperBoundFn;
          if (measureLowerBoundFn != null && measureUpperBoundFn != null) {
            let measureOffsetFn = element.series.measureOffsetFn;
            let measureAxis = ImmutableAxisOfnum().as(element.series.getAttr(axis$.Axis, axis$.measureAxisKey));
            if (dart.test(renderingVertically)) {
              let startY = measureAxis.getLocation(dart.notNull(measureLowerBoundFn(datumIndex)) + dart.notNull(measureOffsetFn(datumIndex)));
              let endY = measureAxis.getLocation(dart.notNull(measureUpperBoundFn(datumIndex)) + dart.notNull(measureOffsetFn(datumIndex)));
              if (startY != endY) {
                let barWidth = dart.notNull(bounds[$right]) - dart.notNull(bounds[$left]);
                let x = (dart.notNull(bounds[$left]) + dart.notNull(bounds[$right])) / 2;
                let rectWidth = math.min(core.num, dart.notNull(this.strokeWidthPx) + 2 * dart.notNull(this.outlineWidthPx), barWidth);
                let strokeWidth = rectWidth - 2 * dart.notNull(this.outlineWidthPx);
                let rectEndpointLength = math.min(core.num, dart.notNull(this.endpointLengthPx) + 2 * dart.notNull(this.outlineWidthPx), barWidth);
                let endpointLength = rectEndpointLength - 2 * dart.notNull(this.outlineWidthPx);
                if (dart.notNull(this.outlineWidthPx) > 0) {
                  canvas.drawRect(RectangleOfnum().fromPoints(new (PointOfnum()).new(x - rectWidth / 2, startY), new (PointOfnum()).new(x + rectWidth / 2, endY)), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (RectangleOfnum()).new(x - rectEndpointLength / 2, dart.notNull(startY) - rectWidth / 2, rectEndpointLength, rectWidth), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (RectangleOfnum()).new(x - rectEndpointLength / 2, dart.notNull(endY) - rectWidth / 2, rectEndpointLength, rectWidth), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                }
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(x, startY), new (PointOfnum()).new(x, endY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(x - endpointLength / 2, startY), new (PointOfnum()).new(x + endpointLength / 2, startY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(x - endpointLength / 2, endY), new (PointOfnum()).new(x + endpointLength / 2, endY)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
              }
            } else {
              let startX = measureAxis.getLocation(dart.notNull(measureLowerBoundFn(datumIndex)) + dart.notNull(measureOffsetFn(datumIndex)));
              let endX = measureAxis.getLocation(dart.notNull(measureUpperBoundFn(datumIndex)) + dart.notNull(measureOffsetFn(datumIndex)));
              if (startX != endX) {
                let barWidth = dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$top]);
                let y = (dart.notNull(bounds[$top]) + dart.notNull(bounds[$bottom])) / 2;
                let rectWidth = math.min(core.num, dart.notNull(this.strokeWidthPx) + 2 * dart.notNull(this.outlineWidthPx), barWidth);
                let strokeWidth = rectWidth - 2 * dart.notNull(this.outlineWidthPx);
                let rectEndpointLength = math.min(core.num, dart.notNull(this.endpointLengthPx) + 2 * dart.notNull(this.outlineWidthPx), barWidth);
                let endpointLength = rectEndpointLength - 2 * dart.notNull(this.outlineWidthPx);
                if (dart.notNull(this.outlineWidthPx) > 0) {
                  canvas.drawRect(RectangleOfnum().fromPoints(new (PointOfnum()).new(startX, y - rectWidth / 2), new (PointOfnum()).new(endX, y + rectWidth / 2)), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (RectangleOfnum()).new(dart.notNull(startX) - rectWidth / 2, y - rectEndpointLength / 2, rectWidth, rectEndpointLength), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                  canvas.drawRect(new (RectangleOfnum()).new(dart.notNull(endX) - rectWidth / 2, y - rectEndpointLength / 2, rectWidth, rectEndpointLength), {fill: this.outlineColor, strokeWidthPx: this.outlineWidthPx});
                }
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(startX, y), new (PointOfnum()).new(endX, y)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(startX, y - endpointLength / 2), new (PointOfnum()).new(startX, y + endpointLength / 2)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
                canvas.drawLine({points: JSArrayOfPointOfnum().of([new (PointOfnum()).new(endX, y - endpointLength / 2), new (PointOfnum()).new(endX, y + endpointLength / 2)]), stroke: this.strokeColor, strokeWidthPx: strokeWidth});
              }
            }
          }
        }
      }
    }
    (BarErrorDecorator.new = function(opts) {
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : C10 || CT.C10;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 1;
      let endpointLengthPx = opts && 'endpointLengthPx' in opts ? opts.endpointLengthPx : 16;
      let outlineWidthPx = opts && 'outlineWidthPx' in opts ? opts.outlineWidthPx : 0;
      let outlineColor = opts && 'outlineColor' in opts ? opts.outlineColor : C11 || CT.C11;
      this[strokeColor$1] = strokeColor;
      this[strokeWidthPx$12] = strokeWidthPx;
      this[endpointLengthPx$] = endpointLengthPx;
      this[outlineWidthPx$] = outlineWidthPx;
      this[outlineColor$] = outlineColor;
      BarErrorDecorator.__proto__.new.call(this);
      ;
    }).prototype = BarErrorDecorator.prototype;
    dart.addTypeTests(BarErrorDecorator);
    BarErrorDecorator.prototype[_is_BarErrorDecorator_default] = true;
    dart.setMethodSignature(BarErrorDecorator, () => ({
      __proto__: dart.getMethods(BarErrorDecorator.__proto__),
      decorate: dart.fnType(dart.void, [core.Object, chart_canvas.ChartCanvas, graphics_factory.GraphicsFactory], {animationPercent: core.double, drawBounds: math.Rectangle$(core.num), renderingVertically: core.bool, rtl: core.bool}, {})
    }));
    dart.setLibraryUri(BarErrorDecorator, "package:charts_common/src/chart/bar/bar_error_decorator.dart");
    dart.setFieldSignature(BarErrorDecorator, () => ({
      __proto__: dart.getFields(BarErrorDecorator.__proto__),
      strokeWidthPx: dart.finalFieldType(core.double),
      endpointLengthPx: dart.finalFieldType(core.double),
      outlineWidthPx: dart.finalFieldType(core.double),
      strokeColor: dart.finalFieldType(color$.Color),
      outlineColor: dart.finalFieldType(color$.Color)
    }));
    return BarErrorDecorator;
  });
  bar_error_decorator.BarErrorDecorator = bar_error_decorator.BarErrorDecorator$();
  dart.defineLazy(bar_error_decorator.BarErrorDecorator, {
    /*bar_error_decorator.BarErrorDecorator._defaultStrokeColor*/get _defaultStrokeColor() {
      return C10 || CT.C10;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultStrokeWidthPx*/get _defaultStrokeWidthPx() {
      return 1;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultEndpointLengthPx*/get _defaultEndpointLengthPx() {
      return 16;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultOutlineColor*/get _defaultOutlineColor() {
      return C11 || CT.C11;
    },
    /*bar_error_decorator.BarErrorDecorator._defaultOutlineWidthPx*/get _defaultOutlineWidthPx() {
      return 0;
    }
  });
  dart.addTypeTests(bar_error_decorator.BarErrorDecorator, _is_BarErrorDecorator_default);
  dart.trackLibraries("packages/charts_common/common", {
    "package:charts_common/src/chart/cartesian/axis/time/hour_tick_formatter.dart": hour_tick_formatter,
    "package:charts_common/src/chart/cartesian/axis/time/time_tick_formatter_impl.dart": time_tick_formatter_impl,
    "package:charts_common/src/chart/cartesian/axis/time/time_tick_formatter.dart": time_tick_formatter,
    "package:charts_common/src/common/date_time_factory.dart": date_time_factory,
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart": tick_formatter,
    "package:charts_common/src/chart/common/datum_details.dart": datum_details,
    "package:charts_common/src/chart/common/processed_series.dart": processed_series,
    "package:charts_common/src/chart/common/chart_canvas.dart": chart_canvas,
    "package:charts_common/src/chart/common/canvas_shapes.dart": canvas_shapes,
    "package:charts_common/src/common/color.dart": color$,
    "package:charts_common/src/common/text_element.dart": text_element,
    "package:charts_common/src/common/text_style.dart": text_style,
    "package:charts_common/src/common/paint_style.dart": paint_style,
    "package:charts_common/src/common/text_measurement.dart": text_measurement,
    "package:charts_common/src/common/graphics_factory.dart": graphics_factory,
    "package:charts_common/src/common/line_style.dart": line_style,
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart": axis_spec,
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart": tick_provider,
    "package:charts_common/src/chart/cartesian/axis/tick.dart": tick,
    "package:charts_common/src/chart/cartesian/axis/scale.dart": scale$,
    "package:charts_common/src/common/style/style_factory.dart": style_factory,
    "package:charts_common/src/common/style/style.dart": style,
    "package:charts_common/src/common/palette.dart": palette,
    "package:charts_common/src/common/style/material_style.dart": material_style,
    "package:charts_common/src/common/material_palette.dart": material_palette,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart": tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/collision_report.dart": collision_report,
    "package:charts_common/src/chart/cartesian/axis/axis.dart": axis$,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart": ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart": ordinal_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart": ordinal_extents,
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart": simple_ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart": ordinal_tick_provider,
    "package:charts_common/src/chart/common/chart_context.dart": chart_context,
    "package:charts_common/src/chart/common/behavior/a11y/a11y_node.dart": a11y_node,
    "package:charts_common/src/common/rtl_spec.dart": rtl_spec,
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart": numeric_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart": numeric_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart": numeric_extents,
    "package:charts_common/src/chart/common/unitconverter/unit_converter.dart": unit_converter,
    "package:charts_common/src/chart/common/unitconverter/identity_converter.dart": identity_converter,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart": linear_scale,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart": linear_scale_viewport,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart": linear_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart": linear_scale_function,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart": small_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart": base_tick_draw_strategy,
    "package:charts_common/src/chart/layout/layout_view.dart": layout_view,
    "package:charts_common/src/chart/cartesian/axis/axis_tick.dart": axis_tick,
    "package:charts_common/src/data/series.dart": series$,
    "package:charts_common/src/common/typed_registry.dart": typed_registry,
    "package:charts_common/src/common/symbol_renderer.dart": symbol_renderer,
    "package:charts_common/src/chart/cartesian/axis/spec/percent_axis_spec.dart": percent_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart": numeric_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/spec/tick_spec.dart": tick_spec,
    "package:charts_common/src/chart/cartesian/axis/static_tick_provider.dart": static_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_scale.dart": date_time_scale,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_extents.dart": date_time_extents,
    "package:charts_common/src/chart/cartesian/axis/end_points_tick_provider.dart": end_points_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/simple_time_tick_formatter.dart": simple_time_tick_formatter,
    "package:charts_common/src/chart/cartesian/cartesian_renderer.dart": cartesian_renderer,
    "package:charts_common/src/chart/cartesian/cartesian_chart.dart": cartesian_chart,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart": none_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart": gridline_draw_strategy,
    "package:charts_common/src/chart/layout/layout_config.dart": layout_config,
    "package:charts_common/src/chart/common/series_renderer.dart": series_renderer,
    "package:charts_common/src/chart/common/series_datum.dart": series_datum,
    "package:charts_common/src/chart/common/base_chart.dart": base_chart,
    "package:charts_common/src/chart/common/selection_model/selection_model.dart": selection_model,
    "package:charts_common/src/chart/common/behavior/chart_behavior.dart": chart_behavior,
    "package:charts_common/src/chart/layout/layout_manager_impl.dart": layout_manager_impl,
    "package:charts_common/src/chart/layout/layout_margin_strategy.dart": layout_margin_strategy,
    "package:charts_common/src/chart/layout/layout_manager.dart": layout_manager,
    "package:charts_common/src/common/proxy_gesture_listener.dart": proxy_gesture_listener,
    "package:charts_common/src/common/gesture_listener.dart": gesture_listener,
    "package:charts_common/src/chart/bar/bar_renderer.dart": bar_renderer,
    "package:charts_common/src/chart/bar/base_bar_renderer_element.dart": base_bar_renderer_element,
    "package:charts_common/src/chart/bar/base_bar_renderer.dart": base_bar_renderer,
    "package:charts_common/src/chart/bar/base_bar_renderer_config.dart": base_bar_renderer_config,
    "package:charts_common/src/chart/common/series_renderer_config.dart": series_renderer_config,
    "package:charts_common/src/common/math.dart": math$,
    "package:charts_common/src/chart/bar/bar_renderer_decorator.dart": bar_renderer_decorator,
    "package:charts_common/src/chart/bar/bar_renderer_config.dart": bar_renderer_config,
    "package:charts_common/src/chart/common/behavior/selection/lock_selection.dart": lock_selection,
    "package:charts_common/src/chart/common/behavior/selection/selection_trigger.dart": selection_trigger,
    "package:charts_common/src/chart/time_series/time_series_chart.dart": time_series_chart,
    "package:charts_common/src/chart/line/line_renderer.dart": line_renderer,
    "package:charts_common/src/chart/line/line_renderer_config.dart": line_renderer_config,
    "package:charts_common/src/chart/scatter_plot/point_renderer_config.dart": point_renderer_config,
    "package:charts_common/src/chart/scatter_plot/point_renderer_decorator.dart": point_renderer_decorator,
    "package:charts_common/src/chart/scatter_plot/point_renderer.dart": point_renderer,
    "package:charts_common/src/chart/scatter_plot/comparison_points_decorator.dart": comparison_points_decorator,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_axis.dart": date_time_axis,
    "package:charts_common/src/chart/cartesian/axis/time/date_time_tick_formatter.dart": date_time_tick_formatter,
    "package:charts_common/src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart": auto_adjusting_date_time_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/year_time_stepper.dart": year_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/base_time_stepper.dart": base_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/time_stepper.dart": time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart": time_range_tick_provider_impl,
    "package:charts_common/src/chart/cartesian/axis/time/time_range_tick_provider.dart": time_range_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/time/month_time_stepper.dart": month_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/minute_time_stepper.dart": minute_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/hour_time_stepper.dart": hour_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/time/day_time_stepper.dart": day_time_stepper,
    "package:charts_common/src/chart/cartesian/axis/spec/date_time_axis_spec.dart": date_time_axis_spec,
    "package:charts_common/src/chart/pie/arc_renderer.dart": arc_renderer,
    "package:charts_common/src/chart/pie/arc_renderer_decorator.dart": arc_renderer_decorator,
    "package:charts_common/src/chart/pie/arc_renderer_config.dart": arc_renderer_config,
    "package:charts_common/src/chart/common/behavior/legend/series_legend.dart": series_legend,
    "package:charts_common/src/chart/common/behavior/legend/per_series_legend_entry_generator.dart": per_series_legend_entry_generator,
    "package:charts_common/src/chart/common/behavior/legend/legend_entry_generator.dart": legend_entry_generator,
    "package:charts_common/src/chart/common/behavior/legend/legend_entry.dart": legend_entry,
    "package:charts_common/src/chart/common/behavior/legend/legend.dart": legend,
    "package:charts_common/src/chart/common/behavior/a11y/keyboard_domain_navigator.dart": keyboard_domain_navigator,
    "package:charts_common/src/chart/treemap/treemap_renderer_element.dart": treemap_renderer_element,
    "package:charts_common/src/chart/treemap/squarified_treemap_renderer.dart": squarified_treemap_renderer,
    "package:charts_common/src/chart/treemap/treemap_renderer_config.dart": treemap_renderer_config,
    "package:charts_common/src/chart/treemap/treemap_label_decorator.dart": treemap_label_decorator,
    "package:charts_common/src/chart/treemap/treemap_renderer_decorator.dart": treemap_renderer_decorator,
    "package:charts_common/src/chart/treemap/base_treemap_renderer.dart": base_treemap_renderer,
    "package:charts_common/src/data/tree.dart": tree,
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart": bucketing_numeric_tick_provider,
    "package:charts_common/src/chart/common/behavior/a11y/a11y_explore_behavior.dart": a11y_explore_behavior,
    "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart": line_point_highlighter,
    "package:charts_common/src/chart/common/behavior/selection/select_nearest.dart": select_nearest,
    "package:charts_common/src/chart/treemap/treemap_chart.dart": treemap_chart,
    "package:charts_common/src/chart/bar/bar_lane_renderer_config.dart": bar_lane_renderer_config,
    "package:charts_common/src/chart/bar/bar_lane_renderer.dart": bar_lane_renderer,
    "package:charts_common/src/chart/bar/bar_label_decorator.dart": bar_label_decorator,
    "package:charts_common/src/chart/pie/arc_label_decorator.dart": arc_label_decorator,
    "package:charts_common/src/chart/common/behavior/legend/datum_legend.dart": datum_legend,
    "package:charts_common/src/chart/common/behavior/legend/per_datum_legend_entry_generator.dart": per_datum_legend_entry_generator,
    "package:charts_common/src/chart/cartesian/axis/spec/bucketing_axis_spec.dart": bucketing_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/linear/bucketing_numeric_axis.dart": bucketing_numeric_axis,
    "package:charts_common/src/common/performance.dart": performance,
    "package:charts_common/src/chart/common/behavior/sliding_viewport.dart": sliding_viewport,
    "package:charts_common/src/chart/bar/bar_target_line_renderer_config.dart": bar_target_line_renderer_config,
    "package:charts_common/src/chart/bar/bar_target_line_renderer.dart": bar_target_line_renderer,
    "package:charts_common/src/chart/common/behavior/initial_selection.dart": initial_selection,
    "package:charts_common/src/chart/bar/bar_chart.dart": bar_chart,
    "package:charts_common/src/chart/common/behavior/slider/slider.dart": slider,
    "package:charts_common/src/chart/common/behavior/zoom/pan_behavior.dart": pan_behavior,
    "package:charts_common/src/chart/common/behavior/zoom/panning_tick_provider.dart": panning_tick_provider,
    "package:charts_common/src/chart/scatter_plot/scatter_plot_chart.dart": scatter_plot_chart,
    "package:charts_common/src/chart/common/behavior/zoom/initial_hint_behavior.dart": initial_hint_behavior,
    "package:charts_common/src/chart/line/line_chart.dart": line_chart,
    "package:charts_common/src/chart/cartesian/axis/spec/end_points_time_axis_spec.dart": end_points_time_axis_spec,
    "package:charts_common/src/chart/cartesian/axis/spec/ordinal_axis_spec.dart": ordinal_axis_spec,
    "package:charts_common/src/chart/common/behavior/range_annotation.dart": range_annotation,
    "package:charts_common/src/chart/common/behavior/zoom/pan_and_zoom_behavior.dart": pan_and_zoom_behavior,
    "package:charts_common/common.dart": common,
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer_config.dart": symbol_annotation_renderer_config,
    "package:charts_common/src/chart/scatter_plot/symbol_annotation_renderer.dart": symbol_annotation_renderer,
    "package:charts_common/src/chart/pie/pie_chart.dart": pie_chart,
    "package:charts_common/src/chart/common/behavior/domain_outliner.dart": domain_outliner,
    "package:charts_common/src/chart/common/behavior/domain_highlighter.dart": domain_highlighter,
    "package:charts_common/src/chart/common/behavior/chart_title/chart_title.dart": chart_title,
    "package:charts_common/src/chart/common/behavior/calculation/percent_injector.dart": percent_injector,
    "package:charts_common/src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart": domain_a11y_explore_behavior,
    "package:charts_common/src/chart/bar/bar_error_decorator.dart": bar_error_decorator
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/chart/cartesian/axis/time/time_tick_formatter_impl.dart","src/chart/cartesian/axis/time/hour_tick_formatter.dart","src/chart/cartesian/axis/time/time_tick_formatter.dart","src/common/date_time_factory.dart","src/chart/cartesian/axis/tick_formatter.dart","src/chart/common/datum_details.dart","src/chart/common/processed_series.dart","src/chart/common/chart_canvas.dart","src/chart/common/canvas_shapes.dart","src/common/color.dart","src/common/text_element.dart","src/common/paint_style.dart","src/common/text_style.dart","src/common/text_measurement.dart","src/common/graphics_factory.dart","src/common/line_style.dart","src/chart/cartesian/axis/spec/axis_spec.dart","src/chart/cartesian/axis/tick_provider.dart","src/chart/cartesian/axis/tick.dart","src/chart/cartesian/axis/scale.dart","src/common/style/style_factory.dart","src/common/style/style.dart","src/common/palette.dart","src/common/style/material_style.dart","src/common/material_palette.dart","src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart","src/chart/cartesian/axis/collision_report.dart","src/chart/cartesian/axis/axis.dart","src/chart/cartesian/axis/ordinal_scale.dart","src/chart/cartesian/axis/ordinal_scale_domain_info.dart","src/chart/cartesian/axis/ordinal_extents.dart","src/chart/cartesian/axis/simple_ordinal_scale.dart","src/chart/cartesian/axis/ordinal_tick_provider.dart","src/chart/common/chart_context.dart","src/chart/common/behavior/a11y/a11y_node.dart","src/common/rtl_spec.dart","src/chart/cartesian/axis/numeric_tick_provider.dart","src/chart/cartesian/axis/numeric_scale.dart","src/chart/cartesian/axis/numeric_extents.dart","src/chart/common/unitconverter/unit_converter.dart","src/chart/common/unitconverter/identity_converter.dart","src/chart/cartesian/axis/linear/linear_scale.dart","src/chart/cartesian/axis/linear/linear_scale_viewport.dart","src/chart/cartesian/axis/linear/linear_scale_domain_info.dart","src/chart/cartesian/axis/linear/linear_scale_function.dart","src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart","src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart","src/chart/layout/layout_view.dart","src/chart/cartesian/axis/axis_tick.dart","src/data/series.dart","src/common/typed_registry.dart","src/common/symbol_renderer.dart","src/chart/cartesian/axis/spec/numeric_axis_spec.dart","src/chart/cartesian/axis/spec/percent_axis_spec.dart","src/chart/cartesian/axis/spec/tick_spec.dart","src/chart/cartesian/axis/static_tick_provider.dart","src/chart/cartesian/axis/time/date_time_scale.dart","src/chart/cartesian/axis/time/date_time_extents.dart","src/chart/cartesian/axis/end_points_tick_provider.dart","src/chart/cartesian/axis/time/simple_time_tick_formatter.dart","src/chart/common/series_renderer.dart","src/chart/cartesian/cartesian_renderer.dart","src/chart/common/base_chart.dart","src/chart/cartesian/cartesian_chart.dart","src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart","src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart","src/chart/layout/layout_config.dart","src/chart/common/series_datum.dart","src/chart/common/selection_model/selection_model.dart","src/chart/common/behavior/chart_behavior.dart","src/chart/layout/layout_manager_impl.dart","src/chart/layout/layout_margin_strategy.dart","src/chart/layout/layout_manager.dart","src/common/proxy_gesture_listener.dart","src/common/gesture_listener.dart","src/chart/bar/base_bar_renderer.dart","src/chart/bar/base_bar_renderer_element.dart","src/chart/bar/bar_renderer.dart","src/chart/bar/base_bar_renderer_config.dart","src/chart/common/series_renderer_config.dart","src/common/math.dart","src/chart/bar/bar_renderer_decorator.dart","src/chart/bar/bar_renderer_config.dart","src/chart/common/behavior/selection/lock_selection.dart","src/chart/common/behavior/selection/selection_trigger.dart","src/chart/time_series/time_series_chart.dart","src/chart/line/line_renderer.dart","src/chart/line/line_renderer_config.dart","src/chart/scatter_plot/point_renderer_config.dart","src/chart/scatter_plot/point_renderer_decorator.dart","src/chart/scatter_plot/point_renderer.dart","src/chart/scatter_plot/comparison_points_decorator.dart","src/chart/cartesian/axis/time/date_time_axis.dart","src/chart/cartesian/axis/time/date_time_tick_formatter.dart","src/chart/cartesian/axis/time/auto_adjusting_date_time_tick_provider.dart","src/chart/cartesian/axis/time/base_time_stepper.dart","src/chart/cartesian/axis/time/year_time_stepper.dart","src/chart/cartesian/axis/time/time_stepper.dart","src/chart/cartesian/axis/time/time_range_tick_provider.dart","src/chart/cartesian/axis/time/time_range_tick_provider_impl.dart","src/chart/cartesian/axis/time/month_time_stepper.dart","src/chart/cartesian/axis/time/minute_time_stepper.dart","src/chart/cartesian/axis/time/hour_time_stepper.dart","src/chart/cartesian/axis/time/day_time_stepper.dart","src/chart/cartesian/axis/spec/date_time_axis_spec.dart","src/chart/pie/arc_renderer.dart","src/chart/pie/arc_renderer_decorator.dart","src/chart/pie/arc_renderer_config.dart","src/chart/common/behavior/legend/legend.dart","src/chart/common/behavior/legend/series_legend.dart","src/chart/common/behavior/legend/per_series_legend_entry_generator.dart","src/chart/common/behavior/legend/legend_entry_generator.dart","src/chart/common/behavior/legend/legend_entry.dart","src/chart/common/behavior/a11y/keyboard_domain_navigator.dart","src/chart/treemap/treemap_renderer_element.dart","src/chart/treemap/base_treemap_renderer.dart","src/chart/treemap/squarified_treemap_renderer.dart","src/chart/treemap/treemap_renderer_config.dart","src/chart/treemap/treemap_renderer_decorator.dart","src/chart/treemap/treemap_label_decorator.dart","src/data/tree.dart","src/chart/cartesian/axis/linear/bucketing_numeric_tick_provider.dart","src/chart/common/behavior/a11y/a11y_explore_behavior.dart","src/chart/common/behavior/line_point_highlighter.dart","src/chart/common/behavior/selection/select_nearest.dart","src/chart/treemap/treemap_chart.dart","src/chart/bar/bar_lane_renderer_config.dart","src/chart/bar/bar_lane_renderer.dart","src/chart/bar/bar_label_decorator.dart","src/chart/pie/arc_label_decorator.dart","src/chart/common/behavior/legend/datum_legend.dart","src/chart/common/behavior/legend/per_datum_legend_entry_generator.dart","src/chart/cartesian/axis/spec/bucketing_axis_spec.dart","src/chart/cartesian/axis/linear/bucketing_numeric_axis.dart","src/common/performance.dart","src/chart/common/behavior/sliding_viewport.dart","src/chart/bar/bar_target_line_renderer_config.dart","src/chart/bar/bar_target_line_renderer.dart","src/chart/common/behavior/initial_selection.dart","src/chart/bar/bar_chart.dart","src/chart/common/behavior/slider/slider.dart","src/chart/common/behavior/zoom/pan_behavior.dart","src/chart/common/behavior/zoom/panning_tick_provider.dart","src/chart/scatter_plot/scatter_plot_chart.dart","src/chart/common/behavior/zoom/initial_hint_behavior.dart","src/chart/line/line_chart.dart","src/chart/cartesian/axis/spec/end_points_time_axis_spec.dart","src/chart/cartesian/axis/spec/ordinal_axis_spec.dart","src/chart/common/behavior/range_annotation.dart","src/chart/common/behavior/zoom/pan_and_zoom_behavior.dart","src/chart/scatter_plot/symbol_annotation_renderer_config.dart","src/chart/scatter_plot/symbol_annotation_renderer.dart","src/chart/pie/pie_chart.dart","src/chart/common/behavior/domain_outliner.dart","src/chart/common/behavior/domain_highlighter.dart","src/chart/common/behavior/chart_title/chart_title.dart","src/chart/common/behavior/calculation/percent_injector.dart","src/chart/common/behavior/a11y/domain_a11y_explore_behavior.dart","src/chart/bar/bar_error_decorator.dart"],"names":[],"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","file":"common.ddc.js"}');
  // Exports:
  return {
    src__chart__cartesian__axis__time__hour_tick_formatter: hour_tick_formatter,
    src__chart__cartesian__axis__time__time_tick_formatter_impl: time_tick_formatter_impl,
    src__chart__cartesian__axis__time__time_tick_formatter: time_tick_formatter,
    src__common__date_time_factory: date_time_factory,
    src__chart__cartesian__axis__tick_formatter: tick_formatter,
    src__chart__common__datum_details: datum_details,
    src__chart__common__processed_series: processed_series,
    src__chart__common__chart_canvas: chart_canvas,
    src__chart__common__canvas_shapes: canvas_shapes,
    src__common__color: color$,
    src__common__text_element: text_element,
    src__common__text_style: text_style,
    src__common__paint_style: paint_style,
    src__common__text_measurement: text_measurement,
    src__common__graphics_factory: graphics_factory,
    src__common__line_style: line_style,
    src__chart__cartesian__axis__spec__axis_spec: axis_spec,
    src__chart__cartesian__axis__tick_provider: tick_provider,
    src__chart__cartesian__axis__tick: tick,
    src__chart__cartesian__axis__scale: scale$,
    src__common__style__style_factory: style_factory,
    src__common__style__style: style,
    src__common__palette: palette,
    src__common__style__material_style: material_style,
    src__common__material_palette: material_palette,
    src__chart__cartesian__axis__draw_strategy__tick_draw_strategy: tick_draw_strategy,
    src__chart__cartesian__axis__collision_report: collision_report,
    src__chart__cartesian__axis__axis: axis$,
    src__chart__cartesian__axis__ordinal_scale: ordinal_scale,
    src__chart__cartesian__axis__ordinal_scale_domain_info: ordinal_scale_domain_info,
    src__chart__cartesian__axis__ordinal_extents: ordinal_extents,
    src__chart__cartesian__axis__simple_ordinal_scale: simple_ordinal_scale,
    src__chart__cartesian__axis__ordinal_tick_provider: ordinal_tick_provider,
    src__chart__common__chart_context: chart_context,
    src__chart__common__behavior__a11y__a11y_node: a11y_node,
    src__common__rtl_spec: rtl_spec,
    src__chart__cartesian__axis__numeric_tick_provider: numeric_tick_provider,
    src__chart__cartesian__axis__numeric_scale: numeric_scale,
    src__chart__cartesian__axis__numeric_extents: numeric_extents,
    src__chart__common__unitconverter__unit_converter: unit_converter,
    src__chart__common__unitconverter__identity_converter: identity_converter,
    src__chart__cartesian__axis__linear__linear_scale: linear_scale,
    src__chart__cartesian__axis__linear__linear_scale_viewport: linear_scale_viewport,
    src__chart__cartesian__axis__linear__linear_scale_domain_info: linear_scale_domain_info,
    src__chart__cartesian__axis__linear__linear_scale_function: linear_scale_function,
    src__chart__cartesian__axis__draw_strategy__small_tick_draw_strategy: small_tick_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__base_tick_draw_strategy: base_tick_draw_strategy,
    src__chart__layout__layout_view: layout_view,
    src__chart__cartesian__axis__axis_tick: axis_tick,
    src__data__series: series$,
    src__common__typed_registry: typed_registry,
    src__common__symbol_renderer: symbol_renderer,
    src__chart__cartesian__axis__spec__percent_axis_spec: percent_axis_spec,
    src__chart__cartesian__axis__spec__numeric_axis_spec: numeric_axis_spec,
    src__chart__cartesian__axis__spec__tick_spec: tick_spec,
    src__chart__cartesian__axis__static_tick_provider: static_tick_provider,
    src__chart__cartesian__axis__time__date_time_scale: date_time_scale,
    src__chart__cartesian__axis__time__date_time_extents: date_time_extents,
    src__chart__cartesian__axis__end_points_tick_provider: end_points_tick_provider,
    src__chart__cartesian__axis__time__simple_time_tick_formatter: simple_time_tick_formatter,
    src__chart__cartesian__cartesian_renderer: cartesian_renderer,
    src__chart__cartesian__cartesian_chart: cartesian_chart,
    src__chart__cartesian__axis__draw_strategy__none_draw_strategy: none_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__gridline_draw_strategy: gridline_draw_strategy,
    src__chart__layout__layout_config: layout_config,
    src__chart__common__series_renderer: series_renderer,
    src__chart__common__series_datum: series_datum,
    src__chart__common__base_chart: base_chart,
    src__chart__common__selection_model__selection_model: selection_model,
    src__chart__common__behavior__chart_behavior: chart_behavior,
    src__chart__layout__layout_manager_impl: layout_manager_impl,
    src__chart__layout__layout_margin_strategy: layout_margin_strategy,
    src__chart__layout__layout_manager: layout_manager,
    src__common__proxy_gesture_listener: proxy_gesture_listener,
    src__common__gesture_listener: gesture_listener,
    src__chart__bar__bar_renderer: bar_renderer,
    src__chart__bar__base_bar_renderer_element: base_bar_renderer_element,
    src__chart__bar__base_bar_renderer: base_bar_renderer,
    src__chart__bar__base_bar_renderer_config: base_bar_renderer_config,
    src__chart__common__series_renderer_config: series_renderer_config,
    src__common__math: math$,
    src__chart__bar__bar_renderer_decorator: bar_renderer_decorator,
    src__chart__bar__bar_renderer_config: bar_renderer_config,
    src__chart__common__behavior__selection__lock_selection: lock_selection,
    src__chart__common__behavior__selection__selection_trigger: selection_trigger,
    src__chart__time_series__time_series_chart: time_series_chart,
    src__chart__line__line_renderer: line_renderer,
    src__chart__line__line_renderer_config: line_renderer_config,
    src__chart__scatter_plot__point_renderer_config: point_renderer_config,
    src__chart__scatter_plot__point_renderer_decorator: point_renderer_decorator,
    src__chart__scatter_plot__point_renderer: point_renderer,
    src__chart__scatter_plot__comparison_points_decorator: comparison_points_decorator,
    src__chart__cartesian__axis__time__date_time_axis: date_time_axis,
    src__chart__cartesian__axis__time__date_time_tick_formatter: date_time_tick_formatter,
    src__chart__cartesian__axis__time__auto_adjusting_date_time_tick_provider: auto_adjusting_date_time_tick_provider,
    src__chart__cartesian__axis__time__year_time_stepper: year_time_stepper,
    src__chart__cartesian__axis__time__base_time_stepper: base_time_stepper,
    src__chart__cartesian__axis__time__time_stepper: time_stepper,
    src__chart__cartesian__axis__time__time_range_tick_provider_impl: time_range_tick_provider_impl,
    src__chart__cartesian__axis__time__time_range_tick_provider: time_range_tick_provider,
    src__chart__cartesian__axis__time__month_time_stepper: month_time_stepper,
    src__chart__cartesian__axis__time__minute_time_stepper: minute_time_stepper,
    src__chart__cartesian__axis__time__hour_time_stepper: hour_time_stepper,
    src__chart__cartesian__axis__time__day_time_stepper: day_time_stepper,
    src__chart__cartesian__axis__spec__date_time_axis_spec: date_time_axis_spec,
    src__chart__pie__arc_renderer: arc_renderer,
    src__chart__pie__arc_renderer_decorator: arc_renderer_decorator,
    src__chart__pie__arc_renderer_config: arc_renderer_config,
    src__chart__common__behavior__legend__series_legend: series_legend,
    src__chart__common__behavior__legend__per_series_legend_entry_generator: per_series_legend_entry_generator,
    src__chart__common__behavior__legend__legend_entry_generator: legend_entry_generator,
    src__chart__common__behavior__legend__legend_entry: legend_entry,
    src__chart__common__behavior__legend__legend: legend,
    src__chart__common__behavior__a11y__keyboard_domain_navigator: keyboard_domain_navigator,
    src__chart__treemap__treemap_renderer_element: treemap_renderer_element,
    src__chart__treemap__squarified_treemap_renderer: squarified_treemap_renderer,
    src__chart__treemap__treemap_renderer_config: treemap_renderer_config,
    src__chart__treemap__treemap_label_decorator: treemap_label_decorator,
    src__chart__treemap__treemap_renderer_decorator: treemap_renderer_decorator,
    src__chart__treemap__base_treemap_renderer: base_treemap_renderer,
    src__data__tree: tree,
    src__chart__cartesian__axis__linear__bucketing_numeric_tick_provider: bucketing_numeric_tick_provider,
    src__chart__common__behavior__a11y__a11y_explore_behavior: a11y_explore_behavior,
    src__chart__common__behavior__line_point_highlighter: line_point_highlighter,
    src__chart__common__behavior__selection__select_nearest: select_nearest,
    src__chart__treemap__treemap_chart: treemap_chart,
    src__chart__bar__bar_lane_renderer_config: bar_lane_renderer_config,
    src__chart__bar__bar_lane_renderer: bar_lane_renderer,
    src__chart__bar__bar_label_decorator: bar_label_decorator,
    src__chart__pie__arc_label_decorator: arc_label_decorator,
    src__chart__common__behavior__legend__datum_legend: datum_legend,
    src__chart__common__behavior__legend__per_datum_legend_entry_generator: per_datum_legend_entry_generator,
    src__chart__cartesian__axis__spec__bucketing_axis_spec: bucketing_axis_spec,
    src__chart__cartesian__axis__linear__bucketing_numeric_axis: bucketing_numeric_axis,
    src__common__performance: performance,
    src__chart__common__behavior__sliding_viewport: sliding_viewport,
    src__chart__bar__bar_target_line_renderer_config: bar_target_line_renderer_config,
    src__chart__bar__bar_target_line_renderer: bar_target_line_renderer,
    src__chart__common__behavior__initial_selection: initial_selection,
    src__chart__bar__bar_chart: bar_chart,
    src__chart__common__behavior__slider__slider: slider,
    src__chart__common__behavior__zoom__pan_behavior: pan_behavior,
    src__chart__common__behavior__zoom__panning_tick_provider: panning_tick_provider,
    src__chart__scatter_plot__scatter_plot_chart: scatter_plot_chart,
    src__chart__common__behavior__zoom__initial_hint_behavior: initial_hint_behavior,
    src__chart__line__line_chart: line_chart,
    src__chart__cartesian__axis__spec__end_points_time_axis_spec: end_points_time_axis_spec,
    src__chart__cartesian__axis__spec__ordinal_axis_spec: ordinal_axis_spec,
    src__chart__common__behavior__range_annotation: range_annotation,
    src__chart__common__behavior__zoom__pan_and_zoom_behavior: pan_and_zoom_behavior,
    common: common,
    src__chart__scatter_plot__symbol_annotation_renderer_config: symbol_annotation_renderer_config,
    src__chart__scatter_plot__symbol_annotation_renderer: symbol_annotation_renderer,
    src__chart__pie__pie_chart: pie_chart,
    src__chart__common__behavior__domain_outliner: domain_outliner,
    src__chart__common__behavior__domain_highlighter: domain_highlighter,
    src__chart__common__behavior__chart_title__chart_title: chart_title,
    src__chart__common__behavior__calculation__percent_injector: percent_injector,
    src__chart__common__behavior__a11y__domain_a11y_explore_behavior: domain_a11y_explore_behavior,
    src__chart__bar__bar_error_decorator: bar_error_decorator
  };
});

//# sourceMappingURL=common.ddc.js.map
